// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : digilent_netfpga_sume.v
// Device     : xc7vx690tffg1761-3
// LiteX sha1 : b2b7130b7
// Date       : 2025-04-10 21:55:54
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module digilent_netfpga_sume (
    input  wire          clk200_n,
    (* dont_touch = "true" *)
    input  wire          clk200_p,
    input  wire          cpu_reset_n,
    output wire   [15:0] ddram_a,
    output wire    [2:0] ddram_ba,
    output wire          ddram_cas_n,
    output wire          ddram_cke,
    output wire    [1:0] ddram_clk_n,
    output wire    [1:0] ddram_clk_p,
    output wire          ddram_cs_n,
    output wire    [7:0] ddram_dm,
    inout  wire   [63:0] ddram_dq,
    inout  wire    [7:0] ddram_dqs_n,
    inout  wire    [7:0] ddram_dqs_p,
    output wire          ddram_odt,
    output wire          ddram_ras_n,
    output wire          ddram_reset_n,
    output wire          ddram_we_n,
    input  wire          serial_cts,
    input  wire          serial_rts,
    input  wire          serial_rx,
    output reg           serial_tx,
    input  wire          sfp_rxn,
    input  wire          sfp_rxp,
    output wire          sfp_tx_disable_n,
    output wire          sfp_txn,
    output wire          sfp_txp,
    output wire          user_led0,
    output wire          user_led1
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (S7PLL)
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [PLLE2_ADV]
│    │    └─── [BUFG]
│    └─── idelayctrl (S7IDELAYCTRL)
│    │    └─── [IDELAYCTRL]
└─── bus (SoCBusHandler)
│    └─── converter_0* (Converter)
│    │    └─── downconverter_0* (DownConverter)
│    └─── wishbone2axi_0* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── axi2axilite_0* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2axilite_1* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2wishbone_0* (AXI2Wishbone)
│    │    └─── axi2axilite_0* (AXI2AXILite)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2wishbone_0* (AXILite2Wishbone)
│    │    │    └─── fsm (FSM)
│    └─── axi2axilite_2* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── _interconnect (AXIInterconnectShared)
│    │    └─── arbiter (AXIArbiter)
│    │    │    └─── rr_write (RoundRobin)
│    │    │    └─── rr_read (RoundRobin)
│    │    │    └─── wr_lock (_AXIRequestCounter)
│    │    │    └─── rd_lock (_AXIRequestCounter)
│    │    └─── decoder (AXIDecoder)
│    │    │    └─── _axirequestcounter_0* (_AXIRequestCounter)
│    │    │    └─── _axirequestcounter_1* (_AXIRequestCounter)
│    │    └─── timeout (AXITimeout)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    │    └─── waittimer_1* (WaitTimer)
│    │    │    └─── wr_fsm (FSM)
│    │    │    └─── rd_fsm (FSM)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (Rocket)
│    └─── axi2wishbone_0* (AXI2Wishbone)
│    │    └─── axi2axilite_0* (AXI2AXILite)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2wishbone_0* (AXILite2Wishbone)
│    │    │    └─── fsm (FSM)
│    └─── wishbone2axi_0* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── [ExampleRocketSystem]
└─── dma_bus (SoCBusHandler)
└─── rom (AXILiteSRAM)
│    └─── fsm (FSM)
└─── sram (AXILiteSRAM)
│    └─── fsm (FSM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── ddrphy (V7DDRPHY)
│    └─── tappeddelayline_0* (TappedDelayLine)
│    └─── dqspattern_0* (DQSPattern)
│    └─── bitslip_0* (BitSlip)
│    └─── bitslip_1* (BitSlip)
│    └─── bitslip_2* (BitSlip)
│    └─── bitslip_3* (BitSlip)
│    └─── bitslip_4* (BitSlip)
│    └─── bitslip_5* (BitSlip)
│    └─── bitslip_6* (BitSlip)
│    └─── bitslip_7* (BitSlip)
│    └─── bitslip_8* (BitSlip)
│    └─── bitslip_9* (BitSlip)
│    └─── bitslip_10* (BitSlip)
│    └─── bitslip_11* (BitSlip)
│    └─── bitslip_12* (BitSlip)
│    └─── bitslip_13* (BitSlip)
│    └─── bitslip_14* (BitSlip)
│    └─── bitslip_15* (BitSlip)
│    └─── tappeddelayline_1* (TappedDelayLine)
│    └─── bitslip_16* (BitSlip)
│    └─── bitslip_17* (BitSlip)
│    └─── bitslip_18* (BitSlip)
│    └─── bitslip_19* (BitSlip)
│    └─── bitslip_20* (BitSlip)
│    └─── bitslip_21* (BitSlip)
│    └─── bitslip_22* (BitSlip)
│    └─── bitslip_23* (BitSlip)
│    └─── bitslip_24* (BitSlip)
│    └─── bitslip_25* (BitSlip)
│    └─── bitslip_26* (BitSlip)
│    └─── bitslip_27* (BitSlip)
│    └─── bitslip_28* (BitSlip)
│    └─── bitslip_29* (BitSlip)
│    └─── bitslip_30* (BitSlip)
│    └─── bitslip_31* (BitSlip)
│    └─── bitslip_32* (BitSlip)
│    └─── bitslip_33* (BitSlip)
│    └─── bitslip_34* (BitSlip)
│    └─── bitslip_35* (BitSlip)
│    └─── bitslip_36* (BitSlip)
│    └─── bitslip_37* (BitSlip)
│    └─── bitslip_38* (BitSlip)
│    └─── bitslip_39* (BitSlip)
│    └─── bitslip_40* (BitSlip)
│    └─── bitslip_41* (BitSlip)
│    └─── bitslip_42* (BitSlip)
│    └─── bitslip_43* (BitSlip)
│    └─── bitslip_44* (BitSlip)
│    └─── bitslip_45* (BitSlip)
│    └─── bitslip_46* (BitSlip)
│    └─── bitslip_47* (BitSlip)
│    └─── bitslip_48* (BitSlip)
│    └─── bitslip_49* (BitSlip)
│    └─── bitslip_50* (BitSlip)
│    └─── bitslip_51* (BitSlip)
│    └─── bitslip_52* (BitSlip)
│    └─── bitslip_53* (BitSlip)
│    └─── bitslip_54* (BitSlip)
│    └─── bitslip_55* (BitSlip)
│    └─── bitslip_56* (BitSlip)
│    └─── bitslip_57* (BitSlip)
│    └─── bitslip_58* (BitSlip)
│    └─── bitslip_59* (BitSlip)
│    └─── bitslip_60* (BitSlip)
│    └─── bitslip_61* (BitSlip)
│    └─── bitslip_62* (BitSlip)
│    └─── bitslip_63* (BitSlip)
│    └─── bitslip_64* (BitSlip)
│    └─── bitslip_65* (BitSlip)
│    └─── bitslip_66* (BitSlip)
│    └─── bitslip_67* (BitSlip)
│    └─── bitslip_68* (BitSlip)
│    └─── bitslip_69* (BitSlip)
│    └─── bitslip_70* (BitSlip)
│    └─── bitslip_71* (BitSlip)
│    └─── bitslip_72* (BitSlip)
│    └─── bitslip_73* (BitSlip)
│    └─── bitslip_74* (BitSlip)
│    └─── bitslip_75* (BitSlip)
│    └─── bitslip_76* (BitSlip)
│    └─── bitslip_77* (BitSlip)
│    └─── bitslip_78* (BitSlip)
│    └─── bitslip_79* (BitSlip)
│    └─── bitslip_80* (BitSlip)
│    └─── bitslip_81* (BitSlip)
│    └─── bitslip_82* (BitSlip)
│    └─── bitslip_83* (BitSlip)
│    └─── bitslip_84* (BitSlip)
│    └─── bitslip_85* (BitSlip)
│    └─── bitslip_86* (BitSlip)
│    └─── bitslip_87* (BitSlip)
│    └─── bitslip_88* (BitSlip)
│    └─── bitslip_89* (BitSlip)
│    └─── bitslip_90* (BitSlip)
│    └─── bitslip_91* (BitSlip)
│    └─── bitslip_92* (BitSlip)
│    └─── bitslip_93* (BitSlip)
│    └─── bitslip_94* (BitSlip)
│    └─── bitslip_95* (BitSlip)
│    └─── bitslip_96* (BitSlip)
│    └─── bitslip_97* (BitSlip)
│    └─── bitslip_98* (BitSlip)
│    └─── bitslip_99* (BitSlip)
│    └─── bitslip_100* (BitSlip)
│    └─── bitslip_101* (BitSlip)
│    └─── bitslip_102* (BitSlip)
│    └─── bitslip_103* (BitSlip)
│    └─── bitslip_104* (BitSlip)
│    └─── bitslip_105* (BitSlip)
│    └─── bitslip_106* (BitSlip)
│    └─── bitslip_107* (BitSlip)
│    └─── bitslip_108* (BitSlip)
│    └─── bitslip_109* (BitSlip)
│    └─── bitslip_110* (BitSlip)
│    └─── bitslip_111* (BitSlip)
│    └─── bitslip_112* (BitSlip)
│    └─── bitslip_113* (BitSlip)
│    └─── bitslip_114* (BitSlip)
│    └─── bitslip_115* (BitSlip)
│    └─── bitslip_116* (BitSlip)
│    └─── bitslip_117* (BitSlip)
│    └─── bitslip_118* (BitSlip)
│    └─── bitslip_119* (BitSlip)
│    └─── bitslip_120* (BitSlip)
│    └─── bitslip_121* (BitSlip)
│    └─── bitslip_122* (BitSlip)
│    └─── bitslip_123* (BitSlip)
│    └─── bitslip_124* (BitSlip)
│    └─── bitslip_125* (BitSlip)
│    └─── bitslip_126* (BitSlip)
│    └─── bitslip_127* (BitSlip)
│    └─── bitslip_128* (BitSlip)
│    └─── bitslip_129* (BitSlip)
│    └─── bitslip_130* (BitSlip)
│    └─── bitslip_131* (BitSlip)
│    └─── bitslip_132* (BitSlip)
│    └─── bitslip_133* (BitSlip)
│    └─── bitslip_134* (BitSlip)
│    └─── bitslip_135* (BitSlip)
│    └─── bitslip_136* (BitSlip)
│    └─── bitslip_137* (BitSlip)
│    └─── bitslip_138* (BitSlip)
│    └─── bitslip_139* (BitSlip)
│    └─── bitslip_140* (BitSlip)
│    └─── bitslip_141* (BitSlip)
│    └─── bitslip_142* (BitSlip)
│    └─── bitslip_143* (BitSlip)
│    └─── tappeddelayline_2* (TappedDelayLine)
│    └─── tappeddelayline_3* (TappedDelayLine)
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [OBUFDS]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [IOBUFDS]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUFDS]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUFDS]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [OSERDESE2]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [OBUFDS]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [ODELAYE2]
│    └─── [ODELAYE2]
│    └─── [ISERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [OSERDESE2]
│    └─── [OSERDESE2]
│    └─── [ODELAYE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [IDELAYE2]
│    └─── [OSERDESE2]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [ISERDESE2]
│    └─── [IDELAYE2]
│    └─── [IDELAYE2]
│    └─── [IOBUF]
│    └─── [IOBUF]
│    └─── [ISERDESE2]
│    └─── [IOBUFDS]
│    └─── [OSERDESE2]
│    └─── [IOBUFDS]
│    └─── [IDELAYE2]
└─── sdram (LiteDRAMCore)
│    └─── dfii (DFIInjector)
│    │    └─── pi0 (PhaseInjector)
│    │    └─── pi1 (PhaseInjector)
│    │    └─── pi2 (PhaseInjector)
│    │    └─── pi3 (PhaseInjector)
│    └─── controller (LiteDRAMController)
│    │    └─── refresher (Refresher)
│    │    │    └─── timer (RefreshTimer)
│    │    │    └─── postponer (RefreshPostponer)
│    │    │    └─── sequencer (RefreshSequencer)
│    │    │    │    └─── refreshexecuter_0* (RefreshExecuter)
│    │    │    └─── zqcs_timer (RefreshTimer)
│    │    │    └─── zqs_executer (ZQCSExecuter)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_0* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_1* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_2* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_3* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_4* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_5* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_6* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_7* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── multiplexer (Multiplexer)
│    │    │    └─── choose_cmd (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── choose_req (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── _steerer_0* (_Steerer)
│    │    │    └─── trrdcon (tXXDController)
│    │    │    └─── tfawcon (tFAWController)
│    │    │    └─── tccdcon (tXXDController)
│    │    │    └─── twtrcon (tXXDController)
│    │    │    └─── fsm (FSM)
│    └─── crossbar (LiteDRAMCrossbar)
│    │    └─── roundrobin_0* (RoundRobin)
│    │    └─── roundrobin_1* (RoundRobin)
│    │    └─── roundrobin_2* (RoundRobin)
│    │    └─── roundrobin_3* (RoundRobin)
│    │    └─── roundrobin_4* (RoundRobin)
│    │    └─── roundrobin_5* (RoundRobin)
│    │    └─── roundrobin_6* (RoundRobin)
│    │    └─── roundrobin_7* (RoundRobin)
└─── litedramaxi2native_0* (LiteDRAMAXI2Native)
│    └─── write (LiteDRAMAXI2NativeW)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── aw_burst2beat (AXIBurst2Beat)
│    │    └─── w_buffer (SyncFIFO)
│    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    └─── fifo (SyncFIFO)
│    │    └─── syncfifo_1* (SyncFIFO)
│    │    │    └─── fifo (SyncFIFO)
│    └─── read (LiteDRAMAXI2NativeR)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── ar_burst2beat (AXIBurst2Beat)
│    │    └─── r_buffer (SyncFIFO)
│    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    └─── fifo (SyncFIFO)
│    └─── roundrobin_0* (RoundRobin)
└─── ethphy (V7_1000BASEX)
│    └─── pcs (PCS)
│    │    └─── tx (PCSTX)
│    │    │    └─── encoder (Encoder)
│    │    │    │    └─── singleencoder_0* (SingleEncoder)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (PCSRX)
│    │    │    └─── decoder (Decoder)
│    │    │    └─── fsm (FSM)
│    │    └─── lp_abi (BusSynchronizer)
│    │    │    └─── _ping (PulseSynchronizer)
│    │    │    └─── _pong (PulseSynchronizer)
│    │    │    └─── _timeout (WaitTimer)
│    │    └─── pulsesynchronizer_0* (PulseSynchronizer)
│    │    └─── pulsesynchronizer_1* (PulseSynchronizer)
│    │    └─── pulsesynchronizer_2* (PulseSynchronizer)
│    │    └─── more_ack_timer (WaitTimer)
│    │    └─── sgmii_ack_timer (WaitTimer)
│    │    └─── fsm (FSM)
│    └─── _register_spdm (LiteEthSPDMRX)
│    │    └─── converter (Converter)
│    │    │    └─── _upconverter_0* (_UpConverter)
│    └─── pll (GTHChannelPLL)
│    └─── tx_mmcm (S7MMCM)
│    │    └─── [BUFH]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [MMCME2_ADV]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [BUFH]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    └─── rx_mmcm (S7MMCM)
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [MMCME2_ADV]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    └─── tx_init (GTHTXInit)
│    │    └─── fsm (FSM)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── waittimer_1* (WaitTimer)
│    └─── rx_init (GTHRXInit)
│    │    └─── fsm (FSM)
│    │    └─── waittimer_0* (WaitTimer)
│    │    └─── waittimer_1* (WaitTimer)
│    └─── pulsesynchronizer_0* (PulseSynchronizer)
│    └─── gearbox (PCSGearbox)
│    └─── [GTHE2_CHANNEL]
│    └─── [BUFH]
│    └─── [BUFG]
└─── ethmac (LiteEthMAC)
│    └─── core (LiteEthMACCore)
│    │    └─── tx_datapath (TXDatapath)
│    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    │    └─── liteethmactxlastbe_0* (LiteEthMACTXLastBE)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── liteethmacpaddinginserter_0* (LiteEthMACPaddingInserter)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── liteethmaccrc32inserter_0* (LiteEthMACCRC32Inserter)
│    │    │    │    └─── crc (LiteEthMACCRC32)
│    │    │    │    │    └─── liteethmaccrcengine_0* (LiteEthMACCRCEngine)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── buffer_0* (Buffer)
│    │    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── liteethmacpreambleinserter_0* (LiteEthMACPreambleInserter)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── liteethmacgap_0* (LiteEthMACGap)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── pipeline_0* (Pipeline)
│    │    └─── rx_datapath (RXDatapath)
│    │    │    └─── liteethmacpreamblechecker_0* (LiteEthMACPreambleChecker)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── pulsesynchronizer_0* (PulseSynchronizer)
│    │    │    └─── liteethmaccrc32checker_0* (LiteEthMACCRC32Checker)
│    │    │    │    └─── crc (LiteEthMACCRC32)
│    │    │    │    │    └─── liteethmaccrcengine_0* (LiteEthMACCRCEngine)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── buffer_0* (Buffer)
│    │    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── pulsesynchronizer_1* (PulseSynchronizer)
│    │    │    └─── liteethmacpaddingchecker_0* (LiteEthMACPaddingChecker)
│    │    │    └─── liteethmacrxlastbe_0* (LiteEthMACRXLastBE)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── pipeline_0* (Pipeline)
│    └─── interface (LiteEthMACWishboneInterface)
│    │    └─── sram (LiteEthMACSRAM)
│    │    │    └─── writer (LiteEthMACSRAMWriter)
│    │    │    │    └─── ev (EventManager)
│    │    │    │    │    └─── eventsourcelevel_0* (EventSourceLevel)
│    │    │    │    └─── stat_fifo (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── reader (LiteEthMACSRAMReader)
│    │    │    │    └─── ev (EventManager)
│    │    │    │    │    └─── eventsourcepulse_0* (EventSourcePulse)
│    │    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── ev (SharedIRQ)
│    │    └─── sram_0* (SRAM)
│    │    └─── sram_1* (SRAM)
│    │    └─── sram_2* (SRAM)
│    │    └─── sram_3* (SRAM)
│    │    └─── decoder_0* (Decoder)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (AXILite2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_5* (CSRStatus)
│    │    └─── csrstatus_6* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_7* (CSRStatus)
│    │    └─── csrstatus_8* (CSRStatus)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_9* (CSRStatus)
│    │    └─── csrstatus_10* (CSRStatus)
│    │    └─── csrstatus_11* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    └─── sram_0* (SRAM)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_9* (CSRStorage)
│    │    └─── csrstorage_10* (CSRStorage)
│    │    └─── csrstorage_11* (CSRStorage)
│    │    └─── csrstorage_12* (CSRStorage)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_13* (CSRStorage)
│    │    └─── csrstorage_14* (CSRStorage)
│    │    └─── csrstorage_15* (CSRStorage)
│    │    └─── csrstorage_16* (CSRStorage)
│    │    └─── csrstatus_3* (CSRStatus)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_7* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [IBUFDS]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          builder_ar_first;
wire          builder_ar_last;
wire          builder_ar_param_dest;
wire          builder_ar_param_id;
wire          builder_ar_param_user;
wire   [31:0] builder_ar_payload_addr;
wire    [1:0] builder_ar_payload_burst;
wire    [3:0] builder_ar_payload_cache;
wire    [7:0] builder_ar_payload_len;
wire          builder_ar_payload_lock;
wire    [2:0] builder_ar_payload_prot;
wire    [3:0] builder_ar_payload_qos;
wire    [3:0] builder_ar_payload_region;
wire    [2:0] builder_ar_payload_size;
reg           builder_ar_ready = 1'd0;
wire          builder_ar_valid;
wire          builder_aw_first;
wire          builder_aw_last;
wire          builder_aw_param_dest;
wire          builder_aw_param_id;
wire          builder_aw_param_user;
wire   [31:0] builder_aw_payload_addr;
wire    [1:0] builder_aw_payload_burst;
wire    [3:0] builder_aw_payload_cache;
wire    [7:0] builder_aw_payload_len;
wire          builder_aw_payload_lock;
wire    [2:0] builder_aw_payload_prot;
wire    [3:0] builder_aw_payload_qos;
wire    [3:0] builder_aw_payload_region;
wire    [2:0] builder_aw_payload_size;
reg           builder_aw_ready = 1'd0;
wire          builder_aw_valid;
reg     [1:0] builder_axi2axilite0_next_state = 2'd0;
reg     [1:0] builder_axi2axilite0_state = 2'd0;
reg     [1:0] builder_axi2axilite1_next_state = 2'd0;
reg     [1:0] builder_axi2axilite1_state = 2'd0;
reg     [1:0] builder_axi2axilite2_next_state = 2'd0;
reg     [1:0] builder_axi2axilite2_state = 2'd0;
reg     [1:0] builder_axi2axilite_next_state = 2'd0;
reg     [1:0] builder_axi2axilite_state = 2'd0;
reg     [2:0] builder_axilite2wishbone_next_state = 3'd0;
reg     [2:0] builder_axilite2wishbone_state = 3'd0;
reg     [7:0] builder_axirequestcounter0_counter = 8'd0;
wire          builder_axirequestcounter0_empty;
wire          builder_axirequestcounter0_full;
wire          builder_axirequestcounter0_stall;
reg     [7:0] builder_axirequestcounter1_counter = 8'd0;
wire          builder_axirequestcounter1_empty;
wire          builder_axirequestcounter1_full;
wire          builder_axirequestcounter1_stall;
wire          builder_b_first;
wire          builder_b_last;
wire          builder_b_param_dest;
wire          builder_b_param_id;
wire          builder_b_param_user;
reg     [1:0] builder_b_payload_resp = 2'd0;
wire          builder_b_ready;
reg           builder_b_valid = 1'd0;
reg    [13:0] builder_basesoc_adr = 14'd0;
reg     [1:0] builder_basesoc_axilite2csr_next_state = 2'd0;
reg     [1:0] builder_basesoc_axilite2csr_state = 2'd0;
reg    [31:0] builder_basesoc_axiliteinterface_ar_payload_addr = 32'd0;
reg           builder_basesoc_axiliteinterface_ar_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_ar_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_aw_payload_addr = 32'd0;
reg           builder_basesoc_axiliteinterface_aw_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_aw_valid = 1'd0;
reg     [1:0] builder_basesoc_axiliteinterface_b_payload_resp = 2'd0;
wire          builder_basesoc_axiliteinterface_b_ready;
reg           builder_basesoc_axiliteinterface_b_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_r_payload_data = 32'd0;
reg     [1:0] builder_basesoc_axiliteinterface_r_payload_resp = 2'd0;
reg           builder_basesoc_axiliteinterface_r_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_r_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_w_payload_data = 32'd0;
reg     [3:0] builder_basesoc_axiliteinterface_w_payload_strb = 4'd0;
reg           builder_basesoc_axiliteinterface_w_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_w_valid = 1'd0;
reg     [1:0] builder_basesoc_axilitesram0_next_state = 2'd0;
reg     [1:0] builder_basesoc_axilitesram0_state = 2'd0;
reg     [1:0] builder_basesoc_axilitesram1_next_state = 2'd0;
reg     [1:0] builder_basesoc_axilitesram1_state = 2'd0;
reg     [3:0] builder_basesoc_bankmachine0_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine0_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine1_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine1_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine2_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine2_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine3_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine3_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine4_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine4_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine5_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine5_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine6_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine6_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine7_next_state = 4'd0;
reg     [3:0] builder_basesoc_bankmachine7_state = 4'd0;
wire   [31:0] builder_basesoc_dat_r;
wire   [31:0] builder_basesoc_dat_w;
reg           builder_basesoc_do_read = 1'd0;
reg           builder_basesoc_do_write = 1'd0;
reg     [2:0] builder_basesoc_fsm_next_state = 3'd0;
reg     [2:0] builder_basesoc_fsm_state = 3'd0;
reg     [3:0] builder_basesoc_gthrxinit_next_state = 4'd0;
reg     [3:0] builder_basesoc_gthrxinit_state = 4'd0;
reg     [3:0] builder_basesoc_gthtxinit_next_state = 4'd0;
reg     [3:0] builder_basesoc_gthtxinit_state = 4'd0;
reg           builder_basesoc_last_was_read = 1'd0;
reg           builder_basesoc_last_was_read_axilite2csr_next_value1 = 1'd0;
reg           builder_basesoc_last_was_read_axilite2csr_next_value_ce1 = 1'd0;
reg     [1:0] builder_basesoc_liteethmacsramreader_next_state = 2'd0;
reg     [1:0] builder_basesoc_liteethmacsramreader_state = 2'd0;
reg     [2:0] builder_basesoc_liteethmacsramwriter_next_state = 3'd0;
reg     [2:0] builder_basesoc_liteethmacsramwriter_state = 3'd0;
reg           builder_basesoc_locked0 = 1'd0;
reg           builder_basesoc_locked1 = 1'd0;
reg           builder_basesoc_locked2 = 1'd0;
reg           builder_basesoc_locked3 = 1'd0;
reg           builder_basesoc_locked4 = 1'd0;
reg           builder_basesoc_locked5 = 1'd0;
reg           builder_basesoc_locked6 = 1'd0;
reg           builder_basesoc_locked7 = 1'd0;
reg     [3:0] builder_basesoc_multiplexer_next_state = 4'd0;
reg     [3:0] builder_basesoc_multiplexer_state = 4'd0;
reg           builder_basesoc_new_master_rdata_valid0 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid1 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid2 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid3 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid4 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid5 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid6 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid7 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid8 = 1'd0;
reg           builder_basesoc_new_master_wdata_ready0 = 1'd0;
reg           builder_basesoc_new_master_wdata_ready1 = 1'd0;
reg     [2:0] builder_basesoc_pcsrx_next_state = 3'd0;
reg     [2:0] builder_basesoc_pcsrx_state = 3'd0;
reg     [2:0] builder_basesoc_pcstx_next_state = 3'd0;
reg     [2:0] builder_basesoc_pcstx_state = 3'd0;
wire          builder_basesoc_pll_fb;
reg    [31:0] builder_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] builder_basesoc_port_dat_r_latched_axilite2csr_next_value0 = 32'd0;
reg           builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce0 = 1'd0;
reg     [1:0] builder_basesoc_refresher_next_state = 2'd0;
reg     [1:0] builder_basesoc_refresher_state = 2'd0;
wire          builder_basesoc_reset0;
wire          builder_basesoc_reset1;
wire          builder_basesoc_reset2;
wire          builder_basesoc_reset3;
wire          builder_basesoc_reset4;
wire          builder_basesoc_reset5;
wire          builder_basesoc_reset6;
wire          builder_basesoc_reset7;
reg     [1:0] builder_basesoc_rocket_axi2axilite_next_state = 2'd0;
reg     [1:0] builder_basesoc_rocket_axi2axilite_state = 2'd0;
reg     [2:0] builder_basesoc_rocket_axilite2wishbone_next_state = 3'd0;
reg     [2:0] builder_basesoc_rocket_axilite2wishbone_state = 3'd0;
reg     [1:0] builder_basesoc_rocket_next_state = 2'd0;
reg     [1:0] builder_basesoc_rocket_state = 2'd0;
wire          builder_basesoc_roundrobin0_ce;
wire          builder_basesoc_roundrobin0_grant;
wire          builder_basesoc_roundrobin0_request;
wire          builder_basesoc_roundrobin1_ce;
wire          builder_basesoc_roundrobin1_grant;
wire          builder_basesoc_roundrobin1_request;
wire          builder_basesoc_roundrobin2_ce;
wire          builder_basesoc_roundrobin2_grant;
wire          builder_basesoc_roundrobin2_request;
wire          builder_basesoc_roundrobin3_ce;
wire          builder_basesoc_roundrobin3_grant;
wire          builder_basesoc_roundrobin3_request;
wire          builder_basesoc_roundrobin4_ce;
wire          builder_basesoc_roundrobin4_grant;
wire          builder_basesoc_roundrobin4_request;
wire          builder_basesoc_roundrobin5_ce;
wire          builder_basesoc_roundrobin5_grant;
wire          builder_basesoc_roundrobin5_request;
wire          builder_basesoc_roundrobin6_ce;
wire          builder_basesoc_roundrobin6_grant;
wire          builder_basesoc_roundrobin6_request;
wire          builder_basesoc_roundrobin7_ce;
wire          builder_basesoc_roundrobin7_grant;
wire          builder_basesoc_roundrobin7_request;
reg           builder_basesoc_rs232phyrx_next_state = 1'd0;
reg           builder_basesoc_rs232phyrx_state = 1'd0;
reg           builder_basesoc_rs232phytx_next_state = 1'd0;
reg           builder_basesoc_rs232phytx_state = 1'd0;
reg     [1:0] builder_basesoc_rxdatapath_bufferizeendpoints_next_state = 2'd0;
reg     [1:0] builder_basesoc_rxdatapath_bufferizeendpoints_state = 2'd0;
reg           builder_basesoc_rxdatapath_liteethmacpreamblechecker_next_state = 1'd0;
reg           builder_basesoc_rxdatapath_liteethmacpreamblechecker_state = 1'd0;
wire          builder_basesoc_s7mmcm0_mmcm_fb;
wire          builder_basesoc_s7mmcm0_reset0;
wire          builder_basesoc_s7mmcm0_reset1;
wire          builder_basesoc_s7mmcm0_reset2;
wire          builder_basesoc_s7mmcm0_reset3;
wire          builder_basesoc_s7mmcm0_reset4;
wire          builder_basesoc_s7mmcm0_reset5;
wire          builder_basesoc_s7mmcm0_reset6;
wire          builder_basesoc_s7mmcm0_reset7;
wire          builder_basesoc_s7mmcm1_mmcm_fb;
wire          builder_basesoc_s7mmcm1_reset0;
wire          builder_basesoc_s7mmcm1_reset1;
wire          builder_basesoc_s7mmcm1_reset2;
wire          builder_basesoc_s7mmcm1_reset3;
wire          builder_basesoc_s7mmcm1_reset4;
wire          builder_basesoc_s7mmcm1_reset5;
wire          builder_basesoc_s7mmcm1_reset6;
wire          builder_basesoc_s7mmcm1_reset7;
wire          builder_basesoc_socbushandler_ar_first;
wire          builder_basesoc_socbushandler_ar_last;
wire          builder_basesoc_socbushandler_ar_param_dest;
wire          builder_basesoc_socbushandler_ar_param_id;
wire          builder_basesoc_socbushandler_ar_param_user;
wire   [31:0] builder_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_ar_payload_len;
wire          builder_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_region;
wire    [2:0] builder_basesoc_socbushandler_ar_payload_size;
reg           builder_basesoc_socbushandler_ar_ready = 1'd0;
wire          builder_basesoc_socbushandler_ar_valid;
wire          builder_basesoc_socbushandler_aw_first;
wire          builder_basesoc_socbushandler_aw_last;
wire          builder_basesoc_socbushandler_aw_param_dest;
wire          builder_basesoc_socbushandler_aw_param_id;
wire          builder_basesoc_socbushandler_aw_param_user;
wire   [31:0] builder_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_aw_payload_len;
wire          builder_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_region;
wire    [2:0] builder_basesoc_socbushandler_aw_payload_size;
reg           builder_basesoc_socbushandler_aw_ready = 1'd0;
wire          builder_basesoc_socbushandler_aw_valid;
wire          builder_basesoc_socbushandler_ax_beat_first;
wire          builder_basesoc_socbushandler_ax_beat_last;
wire          builder_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] builder_basesoc_socbushandler_ax_beat_payload_addr;
reg           builder_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          builder_basesoc_socbushandler_ax_beat_valid;
reg           builder_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] builder_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           builder_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] builder_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] builder_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          builder_basesoc_socbushandler_ax_burst_ready;
reg           builder_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           builder_basesoc_socbushandler_b_first = 1'd0;
reg           builder_basesoc_socbushandler_b_last = 1'd0;
reg           builder_basesoc_socbushandler_b_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_b_param_id = 1'd0;
reg           builder_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] builder_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          builder_basesoc_socbushandler_b_ready;
reg           builder_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] builder_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] builder_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] builder_basesoc_socbushandler_beat_size;
wire   [11:0] builder_basesoc_socbushandler_beat_wrap;
reg           builder_basesoc_socbushandler_cmd_done = 1'd0;
reg           builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 = 1'd0;
reg           builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 = 1'd0;
wire          builder_basesoc_socbushandler_pipe_valid_sink_first;
wire          builder_basesoc_socbushandler_pipe_valid_sink_last;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          builder_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          builder_basesoc_socbushandler_pipe_valid_sink_ready;
wire          builder_basesoc_socbushandler_pipe_valid_sink_valid;
reg           builder_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] builder_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] builder_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] builder_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          builder_basesoc_socbushandler_pipe_valid_source_ready;
reg           builder_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           builder_basesoc_socbushandler_r_first = 1'd0;
reg           builder_basesoc_socbushandler_r_last = 1'd0;
reg           builder_basesoc_socbushandler_r_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_r_param_id = 1'd0;
reg           builder_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          builder_basesoc_socbushandler_r_ready;
reg           builder_basesoc_socbushandler_r_valid = 1'd0;
wire          builder_basesoc_socbushandler_sink_sink_first;
wire          builder_basesoc_socbushandler_sink_sink_last;
wire          builder_basesoc_socbushandler_sink_sink_param_dest;
wire          builder_basesoc_socbushandler_sink_sink_param_id;
wire          builder_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] builder_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_sink_sink_payload_len;
wire          builder_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] builder_basesoc_socbushandler_sink_sink_payload_size;
wire          builder_basesoc_socbushandler_sink_sink_ready;
wire          builder_basesoc_socbushandler_sink_sink_valid;
wire          builder_basesoc_socbushandler_source_source_first;
wire          builder_basesoc_socbushandler_source_source_last;
wire          builder_basesoc_socbushandler_source_source_param_dest;
wire          builder_basesoc_socbushandler_source_source_param_id;
wire          builder_basesoc_socbushandler_source_source_param_user;
wire   [31:0] builder_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_source_source_payload_len;
wire          builder_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] builder_basesoc_socbushandler_source_source_payload_size;
reg           builder_basesoc_socbushandler_source_source_ready = 1'd0;
wire          builder_basesoc_socbushandler_source_source_valid;
wire          builder_basesoc_socbushandler_w_first;
wire          builder_basesoc_socbushandler_w_last;
wire          builder_basesoc_socbushandler_w_param_dest;
wire          builder_basesoc_socbushandler_w_param_id;
wire          builder_basesoc_socbushandler_w_param_user;
wire   [31:0] builder_basesoc_socbushandler_w_payload_data;
wire    [3:0] builder_basesoc_socbushandler_w_payload_strb;
reg           builder_basesoc_socbushandler_w_ready = 1'd0;
wire          builder_basesoc_socbushandler_w_valid;
reg     [1:0] builder_basesoc_txdatapath_bufferizeendpoints_next_state = 2'd0;
reg     [1:0] builder_basesoc_txdatapath_bufferizeendpoints_state = 2'd0;
reg           builder_basesoc_txdatapath_liteethmacgap_next_state = 1'd0;
reg           builder_basesoc_txdatapath_liteethmacgap_state = 1'd0;
reg           builder_basesoc_txdatapath_liteethmacpaddinginserter_next_state = 1'd0;
reg           builder_basesoc_txdatapath_liteethmacpaddinginserter_state = 1'd0;
reg     [1:0] builder_basesoc_txdatapath_liteethmacpreambleinserter_next_state = 2'd0;
reg     [1:0] builder_basesoc_txdatapath_liteethmacpreambleinserter_state = 2'd0;
reg           builder_basesoc_txdatapath_liteethmactxlastbe_next_state = 1'd0;
reg           builder_basesoc_txdatapath_liteethmactxlastbe_state = 1'd0;
wire          builder_basesoc_we;
wire   [39:0] builder_cases_slice_proxy;
reg           builder_comb_rhs_array_muxed0 = 1'd0;
reg           builder_comb_rhs_array_muxed1 = 1'd0;
reg     [3:0] builder_comb_rhs_array_muxed10 = 4'd0;
reg     [3:0] builder_comb_rhs_array_muxed11 = 4'd0;
reg           builder_comb_rhs_array_muxed12 = 1'd0;
reg           builder_comb_rhs_array_muxed13 = 1'd0;
reg           builder_comb_rhs_array_muxed14 = 1'd0;
reg           builder_comb_rhs_array_muxed15 = 1'd0;
reg           builder_comb_rhs_array_muxed16 = 1'd0;
reg           builder_comb_rhs_array_muxed17 = 1'd0;
reg    [31:0] builder_comb_rhs_array_muxed18 = 32'd0;
reg     [3:0] builder_comb_rhs_array_muxed19 = 4'd0;
reg           builder_comb_rhs_array_muxed2 = 1'd0;
reg           builder_comb_rhs_array_muxed20 = 1'd0;
reg           builder_comb_rhs_array_muxed21 = 1'd0;
reg           builder_comb_rhs_array_muxed22 = 1'd0;
reg           builder_comb_rhs_array_muxed23 = 1'd0;
reg           builder_comb_rhs_array_muxed24 = 1'd0;
reg           builder_comb_rhs_array_muxed25 = 1'd0;
reg           builder_comb_rhs_array_muxed26 = 1'd0;
reg    [31:0] builder_comb_rhs_array_muxed27 = 32'd0;
reg     [1:0] builder_comb_rhs_array_muxed28 = 2'd0;
reg     [7:0] builder_comb_rhs_array_muxed29 = 8'd0;
reg    [31:0] builder_comb_rhs_array_muxed3 = 32'd0;
reg     [2:0] builder_comb_rhs_array_muxed30 = 3'd0;
reg           builder_comb_rhs_array_muxed31 = 1'd0;
reg     [2:0] builder_comb_rhs_array_muxed32 = 3'd0;
reg     [3:0] builder_comb_rhs_array_muxed33 = 4'd0;
reg     [3:0] builder_comb_rhs_array_muxed34 = 4'd0;
reg     [3:0] builder_comb_rhs_array_muxed35 = 4'd0;
reg           builder_comb_rhs_array_muxed36 = 1'd0;
reg           builder_comb_rhs_array_muxed37 = 1'd0;
reg           builder_comb_rhs_array_muxed38 = 1'd0;
reg           builder_comb_rhs_array_muxed39 = 1'd0;
reg     [1:0] builder_comb_rhs_array_muxed4 = 2'd0;
reg           builder_comb_rhs_array_muxed40 = 1'd0;
reg    [15:0] builder_comb_rhs_array_muxed41 = 16'd0;
reg     [2:0] builder_comb_rhs_array_muxed42 = 3'd0;
reg           builder_comb_rhs_array_muxed43 = 1'd0;
reg           builder_comb_rhs_array_muxed44 = 1'd0;
reg           builder_comb_rhs_array_muxed45 = 1'd0;
reg           builder_comb_rhs_array_muxed46 = 1'd0;
reg    [15:0] builder_comb_rhs_array_muxed47 = 16'd0;
reg     [2:0] builder_comb_rhs_array_muxed48 = 3'd0;
reg           builder_comb_rhs_array_muxed49 = 1'd0;
reg     [7:0] builder_comb_rhs_array_muxed5 = 8'd0;
reg           builder_comb_rhs_array_muxed50 = 1'd0;
reg           builder_comb_rhs_array_muxed51 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed52 = 23'd0;
reg           builder_comb_rhs_array_muxed53 = 1'd0;
reg           builder_comb_rhs_array_muxed54 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed55 = 23'd0;
reg           builder_comb_rhs_array_muxed56 = 1'd0;
reg           builder_comb_rhs_array_muxed57 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed58 = 23'd0;
reg           builder_comb_rhs_array_muxed59 = 1'd0;
reg     [2:0] builder_comb_rhs_array_muxed6 = 3'd0;
reg           builder_comb_rhs_array_muxed60 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed61 = 23'd0;
reg           builder_comb_rhs_array_muxed62 = 1'd0;
reg           builder_comb_rhs_array_muxed63 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed64 = 23'd0;
reg           builder_comb_rhs_array_muxed65 = 1'd0;
reg           builder_comb_rhs_array_muxed66 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed67 = 23'd0;
reg           builder_comb_rhs_array_muxed68 = 1'd0;
reg           builder_comb_rhs_array_muxed69 = 1'd0;
reg           builder_comb_rhs_array_muxed7 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed70 = 23'd0;
reg           builder_comb_rhs_array_muxed71 = 1'd0;
reg           builder_comb_rhs_array_muxed72 = 1'd0;
reg    [22:0] builder_comb_rhs_array_muxed73 = 23'd0;
reg           builder_comb_rhs_array_muxed74 = 1'd0;
reg           builder_comb_rhs_array_muxed75 = 1'd0;
reg     [2:0] builder_comb_rhs_array_muxed8 = 3'd0;
reg     [3:0] builder_comb_rhs_array_muxed9 = 4'd0;
reg           builder_comb_t_array_muxed0 = 1'd0;
reg           builder_comb_t_array_muxed1 = 1'd0;
reg           builder_comb_t_array_muxed2 = 1'd0;
reg           builder_comb_t_array_muxed3 = 1'd0;
reg           builder_comb_t_array_muxed4 = 1'd0;
reg           builder_comb_t_array_muxed5 = 1'd0;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire    [7:0] builder_csr_bankarray_csrbank1_dly_sel0_r;
reg           builder_csr_bankarray_csrbank1_dly_sel0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_dly_sel0_w;
reg           builder_csr_bankarray_csrbank1_dly_sel0_we = 1'd0;
wire    [4:0] builder_csr_bankarray_csrbank1_half_sys8x_taps0_r;
reg           builder_csr_bankarray_csrbank1_half_sys8x_taps0_re = 1'd0;
wire    [4:0] builder_csr_bankarray_csrbank1_half_sys8x_taps0_w;
reg           builder_csr_bankarray_csrbank1_half_sys8x_taps0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_rdphase0_r;
reg           builder_csr_bankarray_csrbank1_rdphase0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_rdphase0_w;
reg           builder_csr_bankarray_csrbank1_rdphase0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_rst0_r;
reg           builder_csr_bankarray_csrbank1_rst0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_rst0_w;
reg           builder_csr_bankarray_csrbank1_rst0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire          builder_csr_bankarray_csrbank1_wlevel_en0_r;
reg           builder_csr_bankarray_csrbank1_wlevel_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_wlevel_en0_w;
reg           builder_csr_bankarray_csrbank1_wlevel_en0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_wrphase0_r;
reg           builder_csr_bankarray_csrbank1_wrphase0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_wrphase0_w;
reg           builder_csr_bankarray_csrbank1_wrphase0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_preamble_crc_r;
reg           builder_csr_bankarray_csrbank2_preamble_crc_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_preamble_crc_w;
reg           builder_csr_bankarray_csrbank2_preamble_crc_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_r;
reg           builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_w;
reg           builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_r;
reg           builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_w;
reg           builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_r;
reg           builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_w;
reg           builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_ev_pending_r;
reg           builder_csr_bankarray_csrbank2_sram_reader_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_ev_pending_w;
reg           builder_csr_bankarray_csrbank2_sram_reader_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_ev_status_r;
reg           builder_csr_bankarray_csrbank2_sram_reader_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_ev_status_w;
reg           builder_csr_bankarray_csrbank2_sram_reader_ev_status_we = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank2_sram_reader_length0_r;
reg           builder_csr_bankarray_csrbank2_sram_reader_length0_re = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank2_sram_reader_length0_w;
reg           builder_csr_bankarray_csrbank2_sram_reader_length0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_sram_reader_level_r;
reg           builder_csr_bankarray_csrbank2_sram_reader_level_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_sram_reader_level_w;
reg           builder_csr_bankarray_csrbank2_sram_reader_level_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_ready_r;
reg           builder_csr_bankarray_csrbank2_sram_reader_ready_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_ready_w;
reg           builder_csr_bankarray_csrbank2_sram_reader_ready_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_slot0_r;
reg           builder_csr_bankarray_csrbank2_sram_reader_slot0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_reader_slot0_w;
reg           builder_csr_bankarray_csrbank2_sram_reader_slot0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_sram_writer_errors_r;
reg           builder_csr_bankarray_csrbank2_sram_writer_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_sram_writer_errors_w;
reg           builder_csr_bankarray_csrbank2_sram_writer_errors_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_r;
reg           builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_w;
reg           builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_ev_pending_r;
reg           builder_csr_bankarray_csrbank2_sram_writer_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_ev_pending_w;
reg           builder_csr_bankarray_csrbank2_sram_writer_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_ev_status_r;
reg           builder_csr_bankarray_csrbank2_sram_writer_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_ev_status_w;
reg           builder_csr_bankarray_csrbank2_sram_writer_ev_status_we = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank2_sram_writer_length_r;
reg           builder_csr_bankarray_csrbank2_sram_writer_length_re = 1'd0;
wire   [10:0] builder_csr_bankarray_csrbank2_sram_writer_length_w;
reg           builder_csr_bankarray_csrbank2_sram_writer_length_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_slot_r;
reg           builder_csr_bankarray_csrbank2_sram_writer_slot_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_sram_writer_slot_w;
reg           builder_csr_bankarray_csrbank2_sram_writer_slot_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_r;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_w;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_r;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_w;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_r;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_w;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_r;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_w;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_r;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_w;
reg           builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_reset0_r;
reg           builder_csr_bankarray_csrbank3_reset0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_reset0_w;
reg           builder_csr_bankarray_csrbank3_reset0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire    [1:0] builder_csr_bankarray_csrbank4_out0_r;
reg           builder_csr_bankarray_csrbank4_out0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_out0_w;
reg           builder_csr_bankarray_csrbank4_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire    [3:0] builder_csr_bankarray_csrbank5_dfii_control0_r;
reg           builder_csr_bankarray_csrbank5_dfii_control0_re = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank5_dfii_control0_w;
reg           builder_csr_bankarray_csrbank5_dfii_control0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi0_address0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_address0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi0_address0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi0_command0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi0_command0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi1_address0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_address0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi1_address0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi1_command0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi1_command0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi2_address0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_address0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi2_address0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi2_command0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi2_command0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi3_address0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_address0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank5_dfii_pi3_address0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_address0_we = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi3_command0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank5_dfii_pi3_command0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_command0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_r;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_w;
reg           builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_sel;
wire          builder_csr_bankarray_csrbank6_en0_r;
reg           builder_csr_bankarray_csrbank6_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_en0_w;
reg           builder_csr_bankarray_csrbank6_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_ev_enable0_r;
reg           builder_csr_bankarray_csrbank6_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_ev_enable0_w;
reg           builder_csr_bankarray_csrbank6_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_ev_pending_r;
reg           builder_csr_bankarray_csrbank6_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_ev_pending_w;
reg           builder_csr_bankarray_csrbank6_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_ev_status_r;
reg           builder_csr_bankarray_csrbank6_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_ev_status_w;
reg           builder_csr_bankarray_csrbank6_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank6_load0_r;
reg           builder_csr_bankarray_csrbank6_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank6_load0_w;
reg           builder_csr_bankarray_csrbank6_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank6_reload0_r;
reg           builder_csr_bankarray_csrbank6_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank6_reload0_w;
reg           builder_csr_bankarray_csrbank6_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_sel;
wire          builder_csr_bankarray_csrbank6_update_value0_r;
reg           builder_csr_bankarray_csrbank6_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_update_value0_w;
reg           builder_csr_bankarray_csrbank6_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank6_value_r;
reg           builder_csr_bankarray_csrbank6_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank6_value_w;
reg           builder_csr_bankarray_csrbank6_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank7_ev_enable0_r;
reg           builder_csr_bankarray_csrbank7_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank7_ev_enable0_w;
reg           builder_csr_bankarray_csrbank7_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank7_ev_pending_r;
reg           builder_csr_bankarray_csrbank7_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank7_ev_pending_w;
reg           builder_csr_bankarray_csrbank7_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank7_ev_status_r;
reg           builder_csr_bankarray_csrbank7_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank7_ev_status_w;
reg           builder_csr_bankarray_csrbank7_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank7_rxempty_r;
reg           builder_csr_bankarray_csrbank7_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank7_rxempty_w;
reg           builder_csr_bankarray_csrbank7_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank7_rxfull_r;
reg           builder_csr_bankarray_csrbank7_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank7_rxfull_w;
reg           builder_csr_bankarray_csrbank7_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank7_sel;
wire          builder_csr_bankarray_csrbank7_txempty_r;
reg           builder_csr_bankarray_csrbank7_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank7_txempty_w;
reg           builder_csr_bankarray_csrbank7_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank7_txfull_r;
reg           builder_csr_bankarray_csrbank7_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank7_txfull_w;
reg           builder_csr_bankarray_csrbank7_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
wire          builder_csr_bankarray_interface5_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface6_bank_bus_dat_w;
wire          builder_csr_bankarray_interface6_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface7_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface7_bank_bus_dat_w;
wire          builder_csr_bankarray_interface7_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_we;
wire          builder_error;
reg           builder_fsm0_next_state = 1'd0;
reg           builder_fsm0_state = 1'd0;
reg           builder_fsm1_next_state = 1'd0;
reg           builder_fsm1_state = 1'd0;
wire          builder_r_first;
reg           builder_r_last = 1'd0;
wire          builder_r_param_dest;
wire          builder_r_param_id;
wire          builder_r_param_user;
reg    [31:0] builder_r_payload_data = 32'd0;
reg     [1:0] builder_r_payload_resp = 2'd0;
wire          builder_r_ready;
reg           builder_r_valid = 1'd0;
reg           builder_rd_error = 1'd0;
reg     [7:0] builder_rd_lock_counter = 8'd0;
wire          builder_rd_lock_empty;
wire          builder_rd_lock_full;
wire          builder_rd_lock_stall;
reg    [19:0] builder_rd_timer_count = 20'd1000000;
wire          builder_rd_timer_done;
reg           builder_rd_timer_wait = 1'd0;
wire   [29:0] builder_rhs_slice_proxy0;
wire   [29:0] builder_rhs_slice_proxy1;
wire   [29:0] builder_rhs_slice_proxy2;
wire   [29:0] builder_rhs_slice_proxy3;
wire   [29:0] builder_rhs_slice_proxy4;
wire   [29:0] builder_rhs_slice_proxy5;
wire   [29:0] builder_rhs_slice_proxy6;
wire   [29:0] builder_rhs_slice_proxy7;
wire          builder_rr_read_ce;
wire          builder_rr_read_grant;
wire          builder_rr_read_request;
wire          builder_rr_write_ce;
wire          builder_rr_write_grant;
wire          builder_rr_write_request;
reg     [3:0] builder_slave_sel0 = 4'd0;
reg     [3:0] builder_slave_sel1 = 4'd0;
reg     [3:0] builder_slave_sel_dec0 = 4'd0;
reg     [3:0] builder_slave_sel_dec1 = 4'd0;
reg     [3:0] builder_slave_sel_reg0 = 4'd0;
reg     [3:0] builder_slave_sel_reg1 = 4'd0;
reg     [2:0] builder_sync_array_muxed0 = 3'd0;
reg    [15:0] builder_sync_array_muxed1 = 16'd0;
reg           builder_sync_array_muxed10 = 1'd0;
reg           builder_sync_array_muxed11 = 1'd0;
reg           builder_sync_array_muxed12 = 1'd0;
reg           builder_sync_array_muxed13 = 1'd0;
reg     [2:0] builder_sync_array_muxed14 = 3'd0;
reg    [15:0] builder_sync_array_muxed15 = 16'd0;
reg           builder_sync_array_muxed16 = 1'd0;
reg           builder_sync_array_muxed17 = 1'd0;
reg           builder_sync_array_muxed18 = 1'd0;
reg           builder_sync_array_muxed19 = 1'd0;
reg           builder_sync_array_muxed2 = 1'd0;
reg           builder_sync_array_muxed20 = 1'd0;
reg     [2:0] builder_sync_array_muxed21 = 3'd0;
reg    [15:0] builder_sync_array_muxed22 = 16'd0;
reg           builder_sync_array_muxed23 = 1'd0;
reg           builder_sync_array_muxed24 = 1'd0;
reg           builder_sync_array_muxed25 = 1'd0;
reg           builder_sync_array_muxed26 = 1'd0;
reg           builder_sync_array_muxed27 = 1'd0;
reg           builder_sync_array_muxed3 = 1'd0;
reg           builder_sync_array_muxed4 = 1'd0;
reg           builder_sync_array_muxed5 = 1'd0;
reg           builder_sync_array_muxed6 = 1'd0;
reg     [2:0] builder_sync_array_muxed7 = 3'd0;
reg    [15:0] builder_sync_array_muxed8 = 16'd0;
reg           builder_sync_array_muxed9 = 1'd0;
reg     [2:0] builder_sync_f_array_muxed = 3'd0;
reg     [5:0] builder_sync_rhs_array_muxed0 = 6'd0;
reg           builder_sync_rhs_array_muxed1 = 1'd0;
reg           builder_sync_rhs_array_muxed2 = 1'd0;
reg     [3:0] builder_sync_rhs_array_muxed3 = 4'd0;
reg           builder_sync_rhs_array_muxed4 = 1'd0;
reg           builder_sync_rhs_array_muxed5 = 1'd0;
reg     [2:0] builder_sync_t_array_muxed0 = 3'd0;
reg     [2:0] builder_sync_t_array_muxed1 = 3'd0;
wire          builder_w_first;
wire          builder_w_last;
wire          builder_w_param_dest;
wire          builder_w_param_id;
wire          builder_w_param_user;
wire   [31:0] builder_w_payload_data;
wire    [3:0] builder_w_payload_strb;
reg           builder_w_ready = 1'd0;
wire          builder_w_valid;
reg     [1:0] builder_wishbone2axi_next_state = 2'd0;
reg     [1:0] builder_wishbone2axi_state = 2'd0;
reg           builder_wr_error = 1'd0;
reg     [7:0] builder_wr_lock_counter = 8'd0;
wire          builder_wr_lock_empty;
wire          builder_wr_lock_full;
wire          builder_wr_lock_stall;
reg    [19:0] builder_wr_timer_count = 20'd1000000;
wire          builder_wr_timer_done;
reg           builder_wr_timer_wait = 1'd0;
wire          builder_xilinxasyncresetsynchronizerimpl0;
wire          builder_xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl1;
wire          builder_xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl2;
wire          builder_xilinxasyncresetsynchronizerimpl2_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl3;
wire          builder_xilinxasyncresetsynchronizerimpl3_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl4;
wire          builder_xilinxasyncresetsynchronizerimpl4_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl5;
wire          builder_xilinxasyncresetsynchronizerimpl5_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl10_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl10_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl11_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl11_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl12_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl12_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl13_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl13_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl14_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl14_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl15_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl15_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl16_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl16_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl17_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl17_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl18_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl18_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl19_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl19_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl1_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl1_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl20_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl20_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl21_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] builder_xilinxmultiregimpl21_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl2_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl2_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [15:0] builder_xilinxmultiregimpl3_regs0 = 16'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [15:0] builder_xilinxmultiregimpl3_regs1 = 16'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl4_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl4_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl5_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl5_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl6_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl6_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl7_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl7_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl8_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl8_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl9_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_xilinxmultiregimpl9_regs1 = 1'd0;
(* dont_touch = "true" *)
wire          eth_rx_clk;
wire          eth_rx_half_clk;
wire          eth_rx_rst;
(* dont_touch = "true" *)
wire          eth_tx_clk;
wire          eth_tx_half_clk;
wire          eth_tx_rst;
wire          idelay_clk;
wire          idelay_rst;
wire          main_adapted_interface_adapted_interface_ack;
reg    [31:0] main_adapted_interface_adapted_interface_adr = 32'd0;
reg     [1:0] main_adapted_interface_adapted_interface_bte = 2'd0;
reg     [2:0] main_adapted_interface_adapted_interface_cti = 3'd0;
reg           main_adapted_interface_adapted_interface_cyc = 1'd0;
wire   [31:0] main_adapted_interface_adapted_interface_dat_r;
reg    [31:0] main_adapted_interface_adapted_interface_dat_w = 32'd0;
wire          main_adapted_interface_adapted_interface_err;
reg     [3:0] main_adapted_interface_adapted_interface_sel = 4'd0;
reg           main_adapted_interface_adapted_interface_stb = 1'd0;
reg           main_adapted_interface_adapted_interface_we = 1'd0;
wire          main_adapted_interface_ar_first;
wire          main_adapted_interface_ar_last;
wire          main_adapted_interface_ar_param_dest;
wire          main_adapted_interface_ar_param_id;
wire          main_adapted_interface_ar_param_user;
wire   [31:0] main_adapted_interface_ar_payload_addr;
wire    [1:0] main_adapted_interface_ar_payload_burst;
wire    [3:0] main_adapted_interface_ar_payload_cache;
wire    [7:0] main_adapted_interface_ar_payload_len;
wire          main_adapted_interface_ar_payload_lock;
wire    [2:0] main_adapted_interface_ar_payload_prot;
wire    [3:0] main_adapted_interface_ar_payload_qos;
wire    [3:0] main_adapted_interface_ar_payload_region;
wire    [2:0] main_adapted_interface_ar_payload_size;
reg           main_adapted_interface_ar_ready = 1'd0;
wire          main_adapted_interface_ar_valid;
wire          main_adapted_interface_aw_first;
wire          main_adapted_interface_aw_last;
wire          main_adapted_interface_aw_param_dest;
wire          main_adapted_interface_aw_param_id;
wire          main_adapted_interface_aw_param_user;
wire   [31:0] main_adapted_interface_aw_payload_addr;
wire    [1:0] main_adapted_interface_aw_payload_burst;
wire    [3:0] main_adapted_interface_aw_payload_cache;
wire    [7:0] main_adapted_interface_aw_payload_len;
wire          main_adapted_interface_aw_payload_lock;
wire    [2:0] main_adapted_interface_aw_payload_prot;
wire    [3:0] main_adapted_interface_aw_payload_qos;
wire    [3:0] main_adapted_interface_aw_payload_region;
wire    [2:0] main_adapted_interface_aw_payload_size;
reg           main_adapted_interface_aw_ready = 1'd0;
wire          main_adapted_interface_aw_valid;
reg           main_adapted_interface_b_first = 1'd0;
reg           main_adapted_interface_b_last = 1'd0;
reg           main_adapted_interface_b_param_dest = 1'd0;
reg           main_adapted_interface_b_param_id = 1'd0;
reg           main_adapted_interface_b_param_user = 1'd0;
reg     [1:0] main_adapted_interface_b_payload_resp = 2'd0;
wire          main_adapted_interface_b_ready;
reg           main_adapted_interface_b_valid = 1'd0;
reg           main_adapted_interface_r_first = 1'd0;
reg           main_adapted_interface_r_last = 1'd0;
reg           main_adapted_interface_r_param_dest = 1'd0;
reg           main_adapted_interface_r_param_id = 1'd0;
reg           main_adapted_interface_r_param_user = 1'd0;
reg    [31:0] main_adapted_interface_r_payload_data = 32'd0;
reg     [1:0] main_adapted_interface_r_payload_resp = 2'd0;
wire          main_adapted_interface_r_ready;
reg           main_adapted_interface_r_valid = 1'd0;
wire          main_adapted_interface_w_first;
wire          main_adapted_interface_w_last;
wire          main_adapted_interface_w_param_dest;
wire          main_adapted_interface_w_param_id;
wire          main_adapted_interface_w_param_user;
wire   [31:0] main_adapted_interface_w_payload_data;
wire    [3:0] main_adapted_interface_w_payload_strb;
reg           main_adapted_interface_w_ready = 1'd0;
wire          main_adapted_interface_w_valid;
reg    [18:0] main_basesoc_adr = 19'd0;
wire   [31:0] main_basesoc_dat_r;
reg           main_basesoc_do_read = 1'd0;
reg           main_basesoc_do_write = 1'd0;
reg           main_basesoc_last_was_read = 1'd0;
reg           main_basesoc_last_was_read_axilitesram0_next_value1 = 1'd0;
reg           main_basesoc_last_was_read_axilitesram0_next_value_ce1 = 1'd0;
reg    [31:0] main_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] main_basesoc_port_dat_r_latched_axilitesram0_next_value0 = 32'd0;
reg           main_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0 = 1'd0;
reg    [31:0] main_basesoc_ram_bus_ar_payload_addr = 32'd0;
reg           main_basesoc_ram_bus_ar_ready = 1'd0;
reg           main_basesoc_ram_bus_ar_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_aw_payload_addr = 32'd0;
reg           main_basesoc_ram_bus_aw_ready = 1'd0;
reg           main_basesoc_ram_bus_aw_valid = 1'd0;
reg     [1:0] main_basesoc_ram_bus_b_payload_resp = 2'd0;
wire          main_basesoc_ram_bus_b_ready;
reg           main_basesoc_ram_bus_b_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_ram_bus_r_payload_resp = 2'd0;
reg           main_basesoc_ram_bus_r_ready = 1'd0;
reg           main_basesoc_ram_bus_r_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_ram_bus_w_payload_strb = 4'd0;
reg           main_basesoc_ram_bus_w_ready = 1'd0;
reg           main_basesoc_ram_bus_w_valid = 1'd0;
wire          main_basesoc_socbushandler_ar_first;
wire          main_basesoc_socbushandler_ar_last;
wire          main_basesoc_socbushandler_ar_param_dest;
wire          main_basesoc_socbushandler_ar_param_id;
wire          main_basesoc_socbushandler_ar_param_user;
wire   [31:0] main_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] main_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] main_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] main_basesoc_socbushandler_ar_payload_len;
wire          main_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] main_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] main_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] main_basesoc_socbushandler_ar_payload_region;
wire    [2:0] main_basesoc_socbushandler_ar_payload_size;
reg           main_basesoc_socbushandler_ar_ready = 1'd0;
wire          main_basesoc_socbushandler_ar_valid;
wire          main_basesoc_socbushandler_aw_first;
wire          main_basesoc_socbushandler_aw_last;
wire          main_basesoc_socbushandler_aw_param_dest;
wire          main_basesoc_socbushandler_aw_param_id;
wire          main_basesoc_socbushandler_aw_param_user;
wire   [31:0] main_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] main_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] main_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] main_basesoc_socbushandler_aw_payload_len;
wire          main_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] main_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] main_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] main_basesoc_socbushandler_aw_payload_region;
wire    [2:0] main_basesoc_socbushandler_aw_payload_size;
reg           main_basesoc_socbushandler_aw_ready = 1'd0;
wire          main_basesoc_socbushandler_aw_valid;
wire          main_basesoc_socbushandler_ax_beat_first;
wire          main_basesoc_socbushandler_ax_beat_last;
wire          main_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] main_basesoc_socbushandler_ax_beat_payload_addr;
reg           main_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          main_basesoc_socbushandler_ax_beat_valid;
reg           main_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           main_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] main_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          main_basesoc_socbushandler_ax_burst_ready;
reg           main_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           main_basesoc_socbushandler_b_first = 1'd0;
reg           main_basesoc_socbushandler_b_last = 1'd0;
reg           main_basesoc_socbushandler_b_param_dest = 1'd0;
reg           main_basesoc_socbushandler_b_param_id = 1'd0;
reg           main_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] main_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          main_basesoc_socbushandler_b_ready;
reg           main_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] main_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] main_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] main_basesoc_socbushandler_beat_size;
wire   [11:0] main_basesoc_socbushandler_beat_wrap;
reg           main_basesoc_socbushandler_cmd_done = 1'd0;
reg           main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 = 1'd0;
reg           main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 = 1'd0;
reg           main_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 = 1'd0;
reg           main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 = 1'd0;
wire          main_basesoc_socbushandler_pipe_valid_sink_first;
wire          main_basesoc_socbushandler_pipe_valid_sink_last;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] main_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] main_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] main_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          main_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] main_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] main_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          main_basesoc_socbushandler_pipe_valid_sink_ready;
wire          main_basesoc_socbushandler_pipe_valid_sink_valid;
reg           main_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          main_basesoc_socbushandler_pipe_valid_source_ready;
reg           main_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           main_basesoc_socbushandler_r_first = 1'd0;
reg           main_basesoc_socbushandler_r_last = 1'd0;
reg           main_basesoc_socbushandler_r_param_dest = 1'd0;
reg           main_basesoc_socbushandler_r_param_id = 1'd0;
reg           main_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          main_basesoc_socbushandler_r_ready;
reg           main_basesoc_socbushandler_r_valid = 1'd0;
wire          main_basesoc_socbushandler_sink_sink_first;
wire          main_basesoc_socbushandler_sink_sink_last;
wire          main_basesoc_socbushandler_sink_sink_param_dest;
wire          main_basesoc_socbushandler_sink_sink_param_id;
wire          main_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] main_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] main_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] main_basesoc_socbushandler_sink_sink_payload_len;
wire          main_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] main_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] main_basesoc_socbushandler_sink_sink_payload_size;
wire          main_basesoc_socbushandler_sink_sink_ready;
wire          main_basesoc_socbushandler_sink_sink_valid;
wire          main_basesoc_socbushandler_source_source_first;
wire          main_basesoc_socbushandler_source_source_last;
wire          main_basesoc_socbushandler_source_source_param_dest;
wire          main_basesoc_socbushandler_source_source_param_id;
wire          main_basesoc_socbushandler_source_source_param_user;
wire   [31:0] main_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] main_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] main_basesoc_socbushandler_source_source_payload_len;
wire          main_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] main_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] main_basesoc_socbushandler_source_source_payload_size;
reg           main_basesoc_socbushandler_source_source_ready = 1'd0;
wire          main_basesoc_socbushandler_source_source_valid;
wire          main_basesoc_socbushandler_w_first;
wire          main_basesoc_socbushandler_w_last;
wire          main_basesoc_socbushandler_w_param_dest;
wire          main_basesoc_socbushandler_w_param_id;
wire          main_basesoc_socbushandler_w_param_user;
wire   [31:0] main_basesoc_socbushandler_w_payload_data;
wire    [3:0] main_basesoc_socbushandler_w_payload_strb;
reg           main_basesoc_socbushandler_w_ready = 1'd0;
wire          main_basesoc_socbushandler_w_valid;
reg    [31:0] main_bridge_ar_payload_addr = 32'd0;
reg           main_bridge_ar_ready = 1'd0;
reg           main_bridge_ar_valid = 1'd0;
reg    [31:0] main_bridge_aw_payload_addr = 32'd0;
reg           main_bridge_aw_ready = 1'd0;
reg           main_bridge_aw_valid = 1'd0;
wire          main_bridge_axi2axi_lite_ax_beat_first;
wire          main_bridge_axi2axi_lite_ax_beat_last;
wire          main_bridge_axi2axi_lite_ax_beat_param_id;
wire   [31:0] main_bridge_axi2axi_lite_ax_beat_payload_addr;
reg           main_bridge_axi2axi_lite_ax_beat_ready = 1'd0;
wire          main_bridge_axi2axi_lite_ax_beat_valid;
reg           main_bridge_axi2axi_lite_ax_burst_first = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_last = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_param_dest = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_param_id = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_param_user = 1'd0;
reg    [31:0] main_bridge_axi2axi_lite_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_bridge_axi2axi_lite_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_bridge_axi2axi_lite_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_bridge_axi2axi_lite_ax_burst_payload_len = 8'd0;
reg           main_bridge_axi2axi_lite_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_bridge_axi2axi_lite_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_bridge_axi2axi_lite_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_bridge_axi2axi_lite_ax_burst_payload_region = 4'd0;
reg     [2:0] main_bridge_axi2axi_lite_ax_burst_payload_size = 3'd0;
wire          main_bridge_axi2axi_lite_ax_burst_ready;
reg           main_bridge_axi2axi_lite_ax_burst_valid = 1'd0;
reg     [7:0] main_bridge_axi2axi_lite_beat_count = 8'd0;
reg  signed  [12:0] main_bridge_axi2axi_lite_beat_offset = 13'd0;
wire   [11:0] main_bridge_axi2axi_lite_beat_size;
wire   [11:0] main_bridge_axi2axi_lite_beat_wrap;
reg           main_bridge_axi2axi_lite_cmd_done = 1'd0;
reg           main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 = 1'd0;
reg           main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 = 1'd0;
reg           main_bridge_axi2axi_lite_last_ar_aw_n = 1'd0;
reg           main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 = 1'd0;
reg           main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 = 1'd0;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_first;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_last;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_param_dest;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_param_id;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_param_user;
wire   [31:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_addr;
wire    [1:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_burst;
wire    [3:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_cache;
wire    [7:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_len;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_payload_lock;
wire    [2:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_prot;
wire    [3:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_qos;
wire    [3:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_region;
wire    [2:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_size;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_ready;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_valid;
reg           main_bridge_axi2axi_lite_pipe_valid_source_first = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_last = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_param_dest = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_param_id = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_len = 8'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_size = 3'd0;
wire          main_bridge_axi2axi_lite_pipe_valid_source_ready;
reg           main_bridge_axi2axi_lite_pipe_valid_source_valid = 1'd0;
wire          main_bridge_axi2axi_lite_sink_sink_first;
wire          main_bridge_axi2axi_lite_sink_sink_last;
wire          main_bridge_axi2axi_lite_sink_sink_param_dest;
wire          main_bridge_axi2axi_lite_sink_sink_param_id;
wire          main_bridge_axi2axi_lite_sink_sink_param_user;
wire   [31:0] main_bridge_axi2axi_lite_sink_sink_payload_addr;
wire    [1:0] main_bridge_axi2axi_lite_sink_sink_payload_burst;
wire    [3:0] main_bridge_axi2axi_lite_sink_sink_payload_cache;
wire    [7:0] main_bridge_axi2axi_lite_sink_sink_payload_len;
wire          main_bridge_axi2axi_lite_sink_sink_payload_lock;
wire    [2:0] main_bridge_axi2axi_lite_sink_sink_payload_prot;
wire    [3:0] main_bridge_axi2axi_lite_sink_sink_payload_qos;
wire    [3:0] main_bridge_axi2axi_lite_sink_sink_payload_region;
wire    [2:0] main_bridge_axi2axi_lite_sink_sink_payload_size;
wire          main_bridge_axi2axi_lite_sink_sink_ready;
wire          main_bridge_axi2axi_lite_sink_sink_valid;
wire          main_bridge_axi2axi_lite_source_source_first;
wire          main_bridge_axi2axi_lite_source_source_last;
wire          main_bridge_axi2axi_lite_source_source_param_dest;
wire          main_bridge_axi2axi_lite_source_source_param_id;
wire          main_bridge_axi2axi_lite_source_source_param_user;
wire   [31:0] main_bridge_axi2axi_lite_source_source_payload_addr;
wire    [1:0] main_bridge_axi2axi_lite_source_source_payload_burst;
wire    [3:0] main_bridge_axi2axi_lite_source_source_payload_cache;
wire    [7:0] main_bridge_axi2axi_lite_source_source_payload_len;
wire          main_bridge_axi2axi_lite_source_source_payload_lock;
wire    [2:0] main_bridge_axi2axi_lite_source_source_payload_prot;
wire    [3:0] main_bridge_axi2axi_lite_source_source_payload_qos;
wire    [3:0] main_bridge_axi2axi_lite_source_source_payload_region;
wire    [2:0] main_bridge_axi2axi_lite_source_source_payload_size;
reg           main_bridge_axi2axi_lite_source_source_ready = 1'd0;
wire          main_bridge_axi2axi_lite_source_source_valid;
reg    [31:0] main_bridge_axi_lite2wishbone_data = 32'd0;
reg    [31:0] main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1 = 32'd0;
reg           main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1 = 1'd0;
reg           main_bridge_axi_lite2wishbone_last_ar_aw_n = 1'd0;
reg           main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 = 1'd0;
reg           main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 = 1'd0;
wire   [31:0] main_bridge_axi_lite2wishbone_r_addr;
wire   [31:0] main_bridge_axi_lite2wishbone_w_addr;
reg     [1:0] main_bridge_b_payload_resp = 2'd0;
wire          main_bridge_b_ready;
reg           main_bridge_b_valid = 1'd0;
reg    [31:0] main_bridge_r_payload_data = 32'd0;
reg     [1:0] main_bridge_r_payload_resp = 2'd0;
reg           main_bridge_r_ready = 1'd0;
reg           main_bridge_r_valid = 1'd0;
reg    [31:0] main_bridge_w_payload_data = 32'd0;
reg     [3:0] main_bridge_w_payload_strb = 4'd0;
reg           main_bridge_w_ready = 1'd0;
reg           main_bridge_w_valid = 1'd0;
wire          main_bus_error;
reg    [31:0] main_bus_errors = 32'd0;
reg           main_bus_errors_re = 1'd0;
wire   [31:0] main_bus_errors_status;
wire          main_bus_errors_we;
wire          main_ce;
reg     [1:0] main_chaser = 2'd0;
reg    [24:0] main_count = 25'd31250000;
wire          main_cpu_rst;
(* dont_touch = "true" *)
wire          main_crg_clkin;
wire          main_crg_clkout0;
wire          main_crg_clkout1;
wire          main_crg_clkout2;
wire          main_crg_clkout3;
wire          main_crg_clkout_buf0;
wire          main_crg_clkout_buf1;
wire          main_crg_clkout_buf2;
wire          main_crg_clkout_buf3;
reg           main_crg_ic_reset = 1'd1;
wire          main_crg_locked;
reg           main_crg_power_down = 1'd0;
wire          main_crg_reset;
reg     [3:0] main_crg_reset_counter = 4'd15;
reg           main_crg_rst = 1'd0;
wire          main_done;
wire          main_ethmac_bufferizeendpoints_pipe_valid_sink_first;
wire          main_ethmac_bufferizeendpoints_pipe_valid_sink_last;
wire    [7:0] main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_data;
wire          main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_error;
wire          main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_last_be;
wire          main_ethmac_bufferizeendpoints_pipe_valid_sink_ready;
wire          main_ethmac_bufferizeendpoints_pipe_valid_sink_valid;
reg           main_ethmac_bufferizeendpoints_pipe_valid_source_first = 1'd0;
reg           main_ethmac_bufferizeendpoints_pipe_valid_source_last = 1'd0;
reg     [7:0] main_ethmac_bufferizeendpoints_pipe_valid_source_payload_data = 8'd0;
reg           main_ethmac_bufferizeendpoints_pipe_valid_source_payload_error = 1'd0;
reg           main_ethmac_bufferizeendpoints_pipe_valid_source_payload_last_be = 1'd0;
wire          main_ethmac_bufferizeendpoints_pipe_valid_source_ready;
reg           main_ethmac_bufferizeendpoints_pipe_valid_source_valid = 1'd0;
wire          main_ethmac_bufferizeendpoints_sink_sink_first;
wire          main_ethmac_bufferizeendpoints_sink_sink_last;
wire    [7:0] main_ethmac_bufferizeendpoints_sink_sink_payload_data;
wire          main_ethmac_bufferizeendpoints_sink_sink_payload_error;
wire          main_ethmac_bufferizeendpoints_sink_sink_payload_last_be;
wire          main_ethmac_bufferizeendpoints_sink_sink_ready;
wire          main_ethmac_bufferizeendpoints_sink_sink_valid;
wire          main_ethmac_bufferizeendpoints_source_source_first;
wire          main_ethmac_bufferizeendpoints_source_source_last;
wire    [7:0] main_ethmac_bufferizeendpoints_source_source_payload_data;
wire          main_ethmac_bufferizeendpoints_source_source_payload_error;
wire          main_ethmac_bufferizeendpoints_source_source_payload_last_be;
wire          main_ethmac_bufferizeendpoints_source_source_ready;
wire          main_ethmac_bufferizeendpoints_source_source_valid;
wire          main_ethmac_bus_ack;
wire   [29:0] main_ethmac_bus_adr;
wire    [1:0] main_ethmac_bus_bte;
wire    [2:0] main_ethmac_bus_cti;
wire          main_ethmac_bus_cyc;
wire   [31:0] main_ethmac_bus_dat_r;
wire   [31:0] main_ethmac_bus_dat_w;
wire          main_ethmac_bus_err;
wire    [3:0] main_ethmac_bus_sel;
wire          main_ethmac_bus_stb;
wire          main_ethmac_bus_we;
reg           main_ethmac_crc_errors_re = 1'd0;
reg    [31:0] main_ethmac_crc_errors_status = 32'd0;
wire          main_ethmac_crc_errors_we;
reg           main_ethmac_interface0_ack = 1'd0;
wire   [29:0] main_ethmac_interface0_adr;
wire    [1:0] main_ethmac_interface0_bte;
wire    [2:0] main_ethmac_interface0_cti;
wire          main_ethmac_interface0_cyc;
wire   [31:0] main_ethmac_interface0_dat_r;
wire   [31:0] main_ethmac_interface0_dat_w;
reg           main_ethmac_interface0_err = 1'd0;
wire    [3:0] main_ethmac_interface0_sel;
wire          main_ethmac_interface0_stb;
wire          main_ethmac_interface0_we;
reg           main_ethmac_interface1_ack = 1'd0;
wire   [29:0] main_ethmac_interface1_adr;
wire    [1:0] main_ethmac_interface1_bte;
wire    [2:0] main_ethmac_interface1_cti;
wire          main_ethmac_interface1_cyc;
wire   [31:0] main_ethmac_interface1_dat_r;
wire   [31:0] main_ethmac_interface1_dat_w;
reg           main_ethmac_interface1_err = 1'd0;
wire    [3:0] main_ethmac_interface1_sel;
wire          main_ethmac_interface1_stb;
wire          main_ethmac_interface1_we;
reg           main_ethmac_interface2_ack = 1'd0;
wire   [29:0] main_ethmac_interface2_adr;
wire    [1:0] main_ethmac_interface2_bte;
wire    [2:0] main_ethmac_interface2_cti;
wire          main_ethmac_interface2_cyc;
wire   [31:0] main_ethmac_interface2_dat_r;
wire   [31:0] main_ethmac_interface2_dat_w;
reg           main_ethmac_interface2_err = 1'd0;
wire    [3:0] main_ethmac_interface2_sel;
wire          main_ethmac_interface2_stb;
wire          main_ethmac_interface2_we;
reg           main_ethmac_interface3_ack = 1'd0;
wire   [29:0] main_ethmac_interface3_adr;
wire    [1:0] main_ethmac_interface3_bte;
wire    [2:0] main_ethmac_interface3_cti;
wire          main_ethmac_interface3_cyc;
wire   [31:0] main_ethmac_interface3_dat_r;
wire   [31:0] main_ethmac_interface3_dat_w;
reg           main_ethmac_interface3_err = 1'd0;
wire    [3:0] main_ethmac_interface3_sel;
wire          main_ethmac_interface3_stb;
wire          main_ethmac_interface3_we;
reg     [3:0] main_ethmac_length_inc = 4'd0;
wire          main_ethmac_liteethmaccrc32checker_crc_be;
reg           main_ethmac_liteethmaccrc32checker_crc_ce = 1'd0;
reg    [31:0] main_ethmac_liteethmaccrc32checker_crc_crc_next = 32'd0;
wire   [31:0] main_ethmac_liteethmaccrc32checker_crc_crc_prev;
wire    [7:0] main_ethmac_liteethmaccrc32checker_crc_data0;
wire    [7:0] main_ethmac_liteethmaccrc32checker_crc_data1;
reg           main_ethmac_liteethmaccrc32checker_crc_error0 = 1'd0;
reg           main_ethmac_liteethmaccrc32checker_crc_error1 = 1'd0;
reg           main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1 = 1'd0;
reg           main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1 = 1'd0;
reg    [31:0] main_ethmac_liteethmaccrc32checker_crc_reg = 32'd4294967295;
reg           main_ethmac_liteethmaccrc32checker_crc_reset = 1'd0;
reg    [31:0] main_ethmac_liteethmaccrc32checker_crc_value = 32'd0;
reg           main_ethmac_liteethmaccrc32checker_error = 1'd0;
wire          main_ethmac_liteethmaccrc32checker_fifo_full;
wire          main_ethmac_liteethmaccrc32checker_fifo_in;
wire          main_ethmac_liteethmaccrc32checker_fifo_out;
reg           main_ethmac_liteethmaccrc32checker_fifo_reset = 1'd0;
reg           main_ethmac_liteethmaccrc32checker_last_be = 1'd0;
reg           main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0 = 1'd0;
reg           main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0 = 1'd0;
wire          main_ethmac_liteethmaccrc32checker_sink_sink_first;
wire          main_ethmac_liteethmaccrc32checker_sink_sink_last;
wire    [7:0] main_ethmac_liteethmaccrc32checker_sink_sink_payload_data;
wire          main_ethmac_liteethmaccrc32checker_sink_sink_payload_error;
wire          main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be;
reg           main_ethmac_liteethmaccrc32checker_sink_sink_ready = 1'd0;
wire          main_ethmac_liteethmaccrc32checker_sink_sink_valid;
wire          main_ethmac_liteethmaccrc32checker_source_source_first;
reg           main_ethmac_liteethmaccrc32checker_source_source_last = 1'd0;
wire    [7:0] main_ethmac_liteethmaccrc32checker_source_source_payload_data;
reg           main_ethmac_liteethmaccrc32checker_source_source_payload_error = 1'd0;
reg           main_ethmac_liteethmaccrc32checker_source_source_payload_last_be = 1'd0;
wire          main_ethmac_liteethmaccrc32checker_source_source_ready;
reg           main_ethmac_liteethmaccrc32checker_source_source_valid = 1'd0;
reg     [2:0] main_ethmac_liteethmaccrc32checker_syncfifo_consume = 3'd0;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_do_read;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_first;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_last;
wire    [7:0] main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_data;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_error;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_first;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_last;
wire    [7:0] main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_data;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_error;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be;
reg     [2:0] main_ethmac_liteethmaccrc32checker_syncfifo_level = 3'd0;
reg     [2:0] main_ethmac_liteethmaccrc32checker_syncfifo_produce = 3'd0;
wire    [2:0] main_ethmac_liteethmaccrc32checker_syncfifo_rdport_adr;
wire   [11:0] main_ethmac_liteethmaccrc32checker_syncfifo_rdport_dat_r;
reg           main_ethmac_liteethmaccrc32checker_syncfifo_replace = 1'd0;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_sink_first;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_sink_last;
wire    [7:0] main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_data;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_error;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_last_be;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_sink_ready;
reg           main_ethmac_liteethmaccrc32checker_syncfifo_sink_valid = 1'd0;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_source_first;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_source_last;
wire    [7:0] main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_data;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_error;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_last_be;
reg           main_ethmac_liteethmaccrc32checker_syncfifo_source_ready = 1'd0;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_source_valid;
wire   [11:0] main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_din;
wire   [11:0] main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_dout;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_re;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_readable;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_we;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_writable;
reg     [2:0] main_ethmac_liteethmaccrc32checker_syncfifo_wrport_adr = 3'd0;
wire   [11:0] main_ethmac_liteethmaccrc32checker_syncfifo_wrport_dat_r;
wire   [11:0] main_ethmac_liteethmaccrc32checker_syncfifo_wrport_dat_w;
wire          main_ethmac_liteethmaccrc32checker_syncfifo_wrport_we;
reg           main_ethmac_preamble_errors_re = 1'd0;
reg    [31:0] main_ethmac_preamble_errors_status = 32'd0;
wire          main_ethmac_preamble_errors_we;
wire          main_ethmac_pulsesynchronizer0_i;
wire          main_ethmac_pulsesynchronizer0_o;
reg           main_ethmac_pulsesynchronizer0_toggle_i = 1'd0;
wire          main_ethmac_pulsesynchronizer0_toggle_o;
reg           main_ethmac_pulsesynchronizer0_toggle_o_r = 1'd0;
wire          main_ethmac_pulsesynchronizer1_i;
wire          main_ethmac_pulsesynchronizer1_o;
reg           main_ethmac_pulsesynchronizer1_toggle_i = 1'd0;
wire          main_ethmac_pulsesynchronizer1_toggle_o;
reg           main_ethmac_pulsesynchronizer1_toggle_o_r = 1'd0;
reg    [31:0] main_ethmac_rd_data = 32'd0;
reg           main_ethmac_re = 1'd0;
reg           main_ethmac_read = 1'd0;
wire   [41:0] main_ethmac_rx_cdc_cdc_asyncfifo_din;
wire   [41:0] main_ethmac_rx_cdc_cdc_asyncfifo_dout;
wire          main_ethmac_rx_cdc_cdc_asyncfifo_re;
wire          main_ethmac_rx_cdc_cdc_asyncfifo_readable;
wire          main_ethmac_rx_cdc_cdc_asyncfifo_we;
wire          main_ethmac_rx_cdc_cdc_asyncfifo_writable;
wire    [5:0] main_ethmac_rx_cdc_cdc_consume_wdomain;
wire          main_ethmac_rx_cdc_cdc_fifo_in_first;
wire          main_ethmac_rx_cdc_cdc_fifo_in_last;
wire   [31:0] main_ethmac_rx_cdc_cdc_fifo_in_payload_data;
wire    [3:0] main_ethmac_rx_cdc_cdc_fifo_in_payload_error;
wire    [3:0] main_ethmac_rx_cdc_cdc_fifo_in_payload_last_be;
wire          main_ethmac_rx_cdc_cdc_fifo_out_first;
wire          main_ethmac_rx_cdc_cdc_fifo_out_last;
wire   [31:0] main_ethmac_rx_cdc_cdc_fifo_out_payload_data;
wire    [3:0] main_ethmac_rx_cdc_cdc_fifo_out_payload_error;
wire    [3:0] main_ethmac_rx_cdc_cdc_fifo_out_payload_last_be;
wire          main_ethmac_rx_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [5:0] main_ethmac_rx_cdc_cdc_graycounter0_q = 6'd0;
reg     [5:0] main_ethmac_rx_cdc_cdc_graycounter0_q_binary = 6'd0;
wire    [5:0] main_ethmac_rx_cdc_cdc_graycounter0_q_next;
reg     [5:0] main_ethmac_rx_cdc_cdc_graycounter0_q_next_binary = 6'd0;
wire          main_ethmac_rx_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [5:0] main_ethmac_rx_cdc_cdc_graycounter1_q = 6'd0;
reg     [5:0] main_ethmac_rx_cdc_cdc_graycounter1_q_binary = 6'd0;
wire    [5:0] main_ethmac_rx_cdc_cdc_graycounter1_q_next;
reg     [5:0] main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary = 6'd0;
wire    [5:0] main_ethmac_rx_cdc_cdc_produce_rdomain;
wire    [4:0] main_ethmac_rx_cdc_cdc_rdport_adr;
wire   [41:0] main_ethmac_rx_cdc_cdc_rdport_dat_r;
wire          main_ethmac_rx_cdc_cdc_sink_first;
wire          main_ethmac_rx_cdc_cdc_sink_last;
wire   [31:0] main_ethmac_rx_cdc_cdc_sink_payload_data;
wire    [3:0] main_ethmac_rx_cdc_cdc_sink_payload_error;
wire    [3:0] main_ethmac_rx_cdc_cdc_sink_payload_last_be;
wire          main_ethmac_rx_cdc_cdc_sink_ready;
wire          main_ethmac_rx_cdc_cdc_sink_valid;
wire          main_ethmac_rx_cdc_cdc_source_first;
wire          main_ethmac_rx_cdc_cdc_source_last;
wire   [31:0] main_ethmac_rx_cdc_cdc_source_payload_data;
wire    [3:0] main_ethmac_rx_cdc_cdc_source_payload_error;
wire    [3:0] main_ethmac_rx_cdc_cdc_source_payload_last_be;
wire          main_ethmac_rx_cdc_cdc_source_ready;
wire          main_ethmac_rx_cdc_cdc_source_valid;
wire    [4:0] main_ethmac_rx_cdc_cdc_wrport_adr;
wire   [41:0] main_ethmac_rx_cdc_cdc_wrport_dat_r;
wire   [41:0] main_ethmac_rx_cdc_cdc_wrport_dat_w;
wire          main_ethmac_rx_cdc_cdc_wrport_we;
wire          main_ethmac_rx_cdc_sink_sink_first;
wire          main_ethmac_rx_cdc_sink_sink_last;
wire   [31:0] main_ethmac_rx_cdc_sink_sink_payload_data;
wire    [3:0] main_ethmac_rx_cdc_sink_sink_payload_error;
wire    [3:0] main_ethmac_rx_cdc_sink_sink_payload_last_be;
wire          main_ethmac_rx_cdc_sink_sink_ready;
wire          main_ethmac_rx_cdc_sink_sink_valid;
wire          main_ethmac_rx_cdc_source_source_first;
wire          main_ethmac_rx_cdc_source_source_last;
wire   [31:0] main_ethmac_rx_cdc_source_source_payload_data;
wire    [3:0] main_ethmac_rx_cdc_source_source_payload_error;
wire    [3:0] main_ethmac_rx_cdc_source_source_payload_last_be;
wire          main_ethmac_rx_cdc_source_source_ready;
wire          main_ethmac_rx_cdc_source_source_valid;
reg     [1:0] main_ethmac_rx_converter_converter_demux = 2'd0;
wire          main_ethmac_rx_converter_converter_load_part;
wire          main_ethmac_rx_converter_converter_sink_first;
wire          main_ethmac_rx_converter_converter_sink_last;
wire    [9:0] main_ethmac_rx_converter_converter_sink_payload_data;
wire          main_ethmac_rx_converter_converter_sink_ready;
wire          main_ethmac_rx_converter_converter_sink_valid;
reg           main_ethmac_rx_converter_converter_source_first = 1'd0;
reg           main_ethmac_rx_converter_converter_source_last = 1'd0;
reg    [39:0] main_ethmac_rx_converter_converter_source_payload_data = 40'd0;
reg     [2:0] main_ethmac_rx_converter_converter_source_payload_valid_token_count = 3'd0;
wire          main_ethmac_rx_converter_converter_source_ready;
wire          main_ethmac_rx_converter_converter_source_valid;
reg           main_ethmac_rx_converter_converter_strobe_all = 1'd0;
wire          main_ethmac_rx_converter_sink_first;
wire          main_ethmac_rx_converter_sink_last;
wire    [7:0] main_ethmac_rx_converter_sink_payload_data;
wire          main_ethmac_rx_converter_sink_payload_error;
wire          main_ethmac_rx_converter_sink_payload_last_be;
wire          main_ethmac_rx_converter_sink_ready;
wire          main_ethmac_rx_converter_sink_valid;
wire          main_ethmac_rx_converter_source_first;
wire          main_ethmac_rx_converter_source_last;
reg    [31:0] main_ethmac_rx_converter_source_payload_data = 32'd0;
reg     [3:0] main_ethmac_rx_converter_source_payload_error = 4'd0;
reg     [3:0] main_ethmac_rx_converter_source_payload_last_be = 4'd0;
wire          main_ethmac_rx_converter_source_ready;
wire          main_ethmac_rx_converter_source_source_first;
wire          main_ethmac_rx_converter_source_source_last;
wire   [39:0] main_ethmac_rx_converter_source_source_payload_data;
wire          main_ethmac_rx_converter_source_source_ready;
wire          main_ethmac_rx_converter_source_source_valid;
wire          main_ethmac_rx_converter_source_valid;
wire          main_ethmac_rx_last_be_sink_first;
wire          main_ethmac_rx_last_be_sink_last;
wire    [7:0] main_ethmac_rx_last_be_sink_payload_data;
wire          main_ethmac_rx_last_be_sink_payload_error;
wire          main_ethmac_rx_last_be_sink_payload_last_be;
wire          main_ethmac_rx_last_be_sink_ready;
wire          main_ethmac_rx_last_be_sink_valid;
wire          main_ethmac_rx_last_be_source_first;
wire          main_ethmac_rx_last_be_source_last;
wire    [7:0] main_ethmac_rx_last_be_source_payload_data;
wire          main_ethmac_rx_last_be_source_payload_error;
reg           main_ethmac_rx_last_be_source_payload_last_be = 1'd0;
wire          main_ethmac_rx_last_be_source_ready;
wire          main_ethmac_rx_last_be_source_valid;
wire          main_ethmac_rx_padding_sink_first;
wire          main_ethmac_rx_padding_sink_last;
wire    [7:0] main_ethmac_rx_padding_sink_payload_data;
wire          main_ethmac_rx_padding_sink_payload_error;
wire          main_ethmac_rx_padding_sink_payload_last_be;
wire          main_ethmac_rx_padding_sink_ready;
wire          main_ethmac_rx_padding_sink_valid;
wire          main_ethmac_rx_padding_source_first;
wire          main_ethmac_rx_padding_source_last;
wire    [7:0] main_ethmac_rx_padding_source_payload_data;
wire          main_ethmac_rx_padding_source_payload_error;
wire          main_ethmac_rx_padding_source_payload_last_be;
wire          main_ethmac_rx_padding_source_ready;
wire          main_ethmac_rx_padding_source_valid;
reg           main_ethmac_rx_preamble_error = 1'd0;
reg    [63:0] main_ethmac_rx_preamble_preamble = 64'd15372286728091293013;
wire          main_ethmac_rx_preamble_sink_first;
wire          main_ethmac_rx_preamble_sink_last;
wire    [7:0] main_ethmac_rx_preamble_sink_payload_data;
wire          main_ethmac_rx_preamble_sink_payload_error;
wire          main_ethmac_rx_preamble_sink_payload_last_be;
reg           main_ethmac_rx_preamble_sink_ready = 1'd0;
wire          main_ethmac_rx_preamble_sink_valid;
reg           main_ethmac_rx_preamble_source_first = 1'd0;
reg           main_ethmac_rx_preamble_source_last = 1'd0;
wire    [7:0] main_ethmac_rx_preamble_source_payload_data;
reg           main_ethmac_rx_preamble_source_payload_error = 1'd0;
wire          main_ethmac_rx_preamble_source_payload_last_be;
wire          main_ethmac_rx_preamble_source_ready;
reg           main_ethmac_rx_preamble_source_valid = 1'd0;
wire          main_ethmac_sink_first;
wire          main_ethmac_sink_last;
wire   [31:0] main_ethmac_sink_payload_data;
wire    [3:0] main_ethmac_sink_payload_error;
wire    [3:0] main_ethmac_sink_payload_last_be;
wire          main_ethmac_sink_ready;
wire          main_ethmac_sink_sink_first;
wire          main_ethmac_sink_sink_last;
wire   [31:0] main_ethmac_sink_sink_payload_data;
wire    [3:0] main_ethmac_sink_sink_payload_error;
wire    [3:0] main_ethmac_sink_sink_payload_last_be;
wire          main_ethmac_sink_sink_ready;
wire          main_ethmac_sink_sink_valid;
wire          main_ethmac_sink_valid;
reg     [3:0] main_ethmac_slave_sel = 4'd0;
reg     [3:0] main_ethmac_slave_sel_r = 4'd0;
reg           main_ethmac_slot = 1'd0;
reg           main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value = 1'd0;
reg           main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce = 1'd0;
wire          main_ethmac_source_first;
wire          main_ethmac_source_last;
wire   [31:0] main_ethmac_source_payload_data;
wire    [3:0] main_ethmac_source_payload_error;
wire    [3:0] main_ethmac_source_payload_last_be;
wire          main_ethmac_source_ready;
wire          main_ethmac_source_source_first;
wire          main_ethmac_source_source_last;
wire   [31:0] main_ethmac_source_source_payload_data;
wire    [3:0] main_ethmac_source_source_payload_error;
wire    [3:0] main_ethmac_source_source_payload_last_be;
wire          main_ethmac_source_source_ready;
wire          main_ethmac_source_source_valid;
wire          main_ethmac_source_valid;
wire    [8:0] main_ethmac_sram0_adr;
reg           main_ethmac_sram0_adr_burst = 1'd0;
wire   [31:0] main_ethmac_sram0_dat_r;
wire          main_ethmac_sram0_sink_valid;
reg           main_ethmac_sram100_storage = 1'd0;
reg           main_ethmac_sram101_re = 1'd0;
reg    [10:0] main_ethmac_sram102_storage = 11'd0;
reg           main_ethmac_sram103_re = 1'd0;
wire          main_ethmac_sram104_irq;
wire          main_ethmac_sram105_status;
reg           main_ethmac_sram106_pending = 1'd0;
reg           main_ethmac_sram107_trigger = 1'd0;
reg           main_ethmac_sram108_clear = 1'd0;
wire          main_ethmac_sram109_event0;
wire   [10:0] main_ethmac_sram10_status;
reg           main_ethmac_sram110_status = 1'd0;
wire          main_ethmac_sram111_we;
reg           main_ethmac_sram112_re = 1'd0;
wire          main_ethmac_sram113_event0;
reg           main_ethmac_sram114_status = 1'd0;
wire          main_ethmac_sram115_we;
reg           main_ethmac_sram116_re = 1'd0;
reg           main_ethmac_sram117_r = 1'd0;
wire          main_ethmac_sram118_event0;
reg           main_ethmac_sram119_storage = 1'd0;
wire          main_ethmac_sram11_we;
reg           main_ethmac_sram120_re = 1'd0;
reg    [10:0] main_ethmac_sram122_length = 11'd0;
reg    [10:0] main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value = 11'd0;
reg           main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce = 1'd0;
wire          main_ethmac_sram123_sink_valid;
wire          main_ethmac_sram124_sink_ready;
reg           main_ethmac_sram125_sink_first = 1'd0;
reg           main_ethmac_sram126_sink_last = 1'd0;
wire          main_ethmac_sram127_sink_payload_slot;
wire   [10:0] main_ethmac_sram128_sink_payload_length;
wire          main_ethmac_sram129_source_valid;
reg           main_ethmac_sram12_re = 1'd0;
reg           main_ethmac_sram130_source_ready = 1'd0;
wire          main_ethmac_sram131_source_first;
wire          main_ethmac_sram132_source_last;
wire          main_ethmac_sram133_source_payload_slot;
wire   [10:0] main_ethmac_sram134_source_payload_length;
wire          main_ethmac_sram135_we;
wire          main_ethmac_sram136_writable;
wire          main_ethmac_sram137_re;
wire          main_ethmac_sram138_readable;
wire   [13:0] main_ethmac_sram139_din;
reg    [31:0] main_ethmac_sram13_status = 32'd0;
reg    [31:0] main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value = 32'd0;
reg           main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce = 1'd0;
wire   [13:0] main_ethmac_sram140_dout;
reg     [1:0] main_ethmac_sram141_level = 2'd0;
reg           main_ethmac_sram142_replace = 1'd0;
reg           main_ethmac_sram143_produce = 1'd0;
reg           main_ethmac_sram144_consume = 1'd0;
reg           main_ethmac_sram145_adr = 1'd0;
wire   [13:0] main_ethmac_sram146_dat_r;
wire          main_ethmac_sram147_we;
wire   [13:0] main_ethmac_sram148_dat_w;
wire          main_ethmac_sram149_do_read;
wire          main_ethmac_sram14_we;
wire          main_ethmac_sram150_adr;
wire   [13:0] main_ethmac_sram151_dat_r;
wire          main_ethmac_sram152_fifo_in_payload_slot;
wire   [10:0] main_ethmac_sram153_fifo_in_payload_length;
wire          main_ethmac_sram154_fifo_in_first;
wire          main_ethmac_sram155_fifo_in_last;
wire          main_ethmac_sram156_fifo_out_payload_slot;
wire   [10:0] main_ethmac_sram157_fifo_out_payload_length;
wire          main_ethmac_sram158_fifo_out_first;
wire          main_ethmac_sram159_fifo_out_last;
reg           main_ethmac_sram15_re = 1'd0;
wire    [8:0] main_ethmac_sram161_adr;
wire   [31:0] main_ethmac_sram162_dat_r;
wire          main_ethmac_sram163_re;
wire    [8:0] main_ethmac_sram164_adr;
wire   [31:0] main_ethmac_sram165_dat_r;
wire          main_ethmac_sram166_re;
wire          main_ethmac_sram167_irq;
wire          main_ethmac_sram16_irq;
wire          main_ethmac_sram17_status;
wire          main_ethmac_sram18_pending;
wire          main_ethmac_sram19_trigger;
wire    [8:0] main_ethmac_sram1_adr;
reg           main_ethmac_sram1_adr_burst = 1'd0;
wire   [31:0] main_ethmac_sram1_dat_r;
reg           main_ethmac_sram1_sink_ready = 1'd1;
reg           main_ethmac_sram20_clear = 1'd0;
wire          main_ethmac_sram21_available;
reg           main_ethmac_sram22_status = 1'd0;
wire          main_ethmac_sram23_we;
reg           main_ethmac_sram24_re = 1'd0;
wire          main_ethmac_sram25_available;
reg           main_ethmac_sram26_status = 1'd0;
wire          main_ethmac_sram27_we;
reg           main_ethmac_sram28_re = 1'd0;
reg           main_ethmac_sram29_r = 1'd0;
wire    [8:0] main_ethmac_sram2_adr;
reg           main_ethmac_sram2_adr_burst = 1'd0;
wire   [31:0] main_ethmac_sram2_dat_r;
wire   [31:0] main_ethmac_sram2_dat_w;
wire          main_ethmac_sram2_sink_first;
reg     [3:0] main_ethmac_sram2_we = 4'd0;
wire          main_ethmac_sram30_available;
reg           main_ethmac_sram31_storage = 1'd0;
reg           main_ethmac_sram32_re = 1'd0;
reg    [10:0] main_ethmac_sram35_length = 11'd0;
reg    [10:0] main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value = 11'd0;
reg           main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce = 1'd0;
reg           main_ethmac_sram37_sink_valid = 1'd0;
wire          main_ethmac_sram38_sink_ready;
reg           main_ethmac_sram39_sink_first = 1'd0;
wire    [8:0] main_ethmac_sram3_adr;
reg           main_ethmac_sram3_adr_burst = 1'd0;
wire   [31:0] main_ethmac_sram3_dat_r;
wire   [31:0] main_ethmac_sram3_dat_w;
wire          main_ethmac_sram3_sink_last;
reg     [3:0] main_ethmac_sram3_we = 4'd0;
reg           main_ethmac_sram40_sink_last = 1'd0;
reg           main_ethmac_sram41_sink_payload_slot = 1'd0;
reg    [10:0] main_ethmac_sram42_sink_payload_length = 11'd0;
wire          main_ethmac_sram43_source_valid;
wire          main_ethmac_sram44_source_ready;
wire          main_ethmac_sram45_source_first;
wire          main_ethmac_sram46_source_last;
wire          main_ethmac_sram47_source_payload_slot;
wire   [10:0] main_ethmac_sram48_source_payload_length;
wire          main_ethmac_sram49_we;
wire   [31:0] main_ethmac_sram4_sink_payload_data;
wire          main_ethmac_sram50_writable;
wire          main_ethmac_sram51_re;
wire          main_ethmac_sram52_readable;
wire   [13:0] main_ethmac_sram53_din;
wire   [13:0] main_ethmac_sram54_dout;
reg     [1:0] main_ethmac_sram55_level = 2'd0;
reg           main_ethmac_sram56_replace = 1'd0;
reg           main_ethmac_sram57_produce = 1'd0;
reg           main_ethmac_sram58_consume = 1'd0;
reg           main_ethmac_sram59_adr = 1'd0;
wire    [3:0] main_ethmac_sram5_sink_payload_last_be;
wire   [13:0] main_ethmac_sram60_dat_r;
wire          main_ethmac_sram61_we;
wire   [13:0] main_ethmac_sram62_dat_w;
wire          main_ethmac_sram63_do_read;
wire          main_ethmac_sram64_adr;
wire   [13:0] main_ethmac_sram65_dat_r;
wire          main_ethmac_sram66_fifo_in_payload_slot;
wire   [10:0] main_ethmac_sram67_fifo_in_payload_length;
wire          main_ethmac_sram68_fifo_in_first;
wire          main_ethmac_sram69_fifo_in_last;
wire    [3:0] main_ethmac_sram6_sink_payload_error;
wire          main_ethmac_sram70_fifo_out_payload_slot;
wire   [10:0] main_ethmac_sram71_fifo_out_payload_length;
wire          main_ethmac_sram72_fifo_out_first;
wire          main_ethmac_sram73_fifo_out_last;
reg     [8:0] main_ethmac_sram75_adr = 9'd0;
wire   [31:0] main_ethmac_sram76_dat_r;
reg           main_ethmac_sram77_we = 1'd0;
reg    [31:0] main_ethmac_sram78_dat_w = 32'd0;
reg     [8:0] main_ethmac_sram79_adr = 9'd0;
wire          main_ethmac_sram7_status;
wire   [31:0] main_ethmac_sram80_dat_r;
reg           main_ethmac_sram81_we = 1'd0;
reg    [31:0] main_ethmac_sram82_dat_w = 32'd0;
reg           main_ethmac_sram83_source_valid = 1'd0;
wire          main_ethmac_sram84_source_ready;
reg           main_ethmac_sram85_source_first = 1'd0;
reg           main_ethmac_sram86_source_last = 1'd0;
wire   [31:0] main_ethmac_sram87_source_payload_data;
reg     [3:0] main_ethmac_sram88_source_payload_last_be = 4'd0;
reg     [3:0] main_ethmac_sram89_source_payload_error = 4'd0;
wire          main_ethmac_sram8_we;
wire          main_ethmac_sram94_status;
wire          main_ethmac_sram95_we;
reg           main_ethmac_sram96_re = 1'd0;
wire    [1:0] main_ethmac_sram97_status;
wire          main_ethmac_sram98_we;
reg           main_ethmac_sram99_re = 1'd0;
reg           main_ethmac_sram9_re = 1'd0;
wire          main_ethmac_start_r;
reg           main_ethmac_start_re = 1'd0;
reg           main_ethmac_start_w = 1'd0;
reg           main_ethmac_start_we = 1'd0;
reg           main_ethmac_status = 1'd1;
wire   [41:0] main_ethmac_tx_cdc_cdc_asyncfifo_din;
wire   [41:0] main_ethmac_tx_cdc_cdc_asyncfifo_dout;
wire          main_ethmac_tx_cdc_cdc_asyncfifo_re;
wire          main_ethmac_tx_cdc_cdc_asyncfifo_readable;
wire          main_ethmac_tx_cdc_cdc_asyncfifo_we;
wire          main_ethmac_tx_cdc_cdc_asyncfifo_writable;
wire    [5:0] main_ethmac_tx_cdc_cdc_consume_wdomain;
wire          main_ethmac_tx_cdc_cdc_fifo_in_first;
wire          main_ethmac_tx_cdc_cdc_fifo_in_last;
wire   [31:0] main_ethmac_tx_cdc_cdc_fifo_in_payload_data;
wire    [3:0] main_ethmac_tx_cdc_cdc_fifo_in_payload_error;
wire    [3:0] main_ethmac_tx_cdc_cdc_fifo_in_payload_last_be;
wire          main_ethmac_tx_cdc_cdc_fifo_out_first;
wire          main_ethmac_tx_cdc_cdc_fifo_out_last;
wire   [31:0] main_ethmac_tx_cdc_cdc_fifo_out_payload_data;
wire    [3:0] main_ethmac_tx_cdc_cdc_fifo_out_payload_error;
wire    [3:0] main_ethmac_tx_cdc_cdc_fifo_out_payload_last_be;
wire          main_ethmac_tx_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [5:0] main_ethmac_tx_cdc_cdc_graycounter0_q = 6'd0;
reg     [5:0] main_ethmac_tx_cdc_cdc_graycounter0_q_binary = 6'd0;
wire    [5:0] main_ethmac_tx_cdc_cdc_graycounter0_q_next;
reg     [5:0] main_ethmac_tx_cdc_cdc_graycounter0_q_next_binary = 6'd0;
wire          main_ethmac_tx_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [5:0] main_ethmac_tx_cdc_cdc_graycounter1_q = 6'd0;
reg     [5:0] main_ethmac_tx_cdc_cdc_graycounter1_q_binary = 6'd0;
wire    [5:0] main_ethmac_tx_cdc_cdc_graycounter1_q_next;
reg     [5:0] main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary = 6'd0;
wire    [5:0] main_ethmac_tx_cdc_cdc_produce_rdomain;
wire    [4:0] main_ethmac_tx_cdc_cdc_rdport_adr;
wire   [41:0] main_ethmac_tx_cdc_cdc_rdport_dat_r;
wire          main_ethmac_tx_cdc_cdc_sink_first;
wire          main_ethmac_tx_cdc_cdc_sink_last;
wire   [31:0] main_ethmac_tx_cdc_cdc_sink_payload_data;
wire    [3:0] main_ethmac_tx_cdc_cdc_sink_payload_error;
wire    [3:0] main_ethmac_tx_cdc_cdc_sink_payload_last_be;
wire          main_ethmac_tx_cdc_cdc_sink_ready;
wire          main_ethmac_tx_cdc_cdc_sink_valid;
wire          main_ethmac_tx_cdc_cdc_source_first;
wire          main_ethmac_tx_cdc_cdc_source_last;
wire   [31:0] main_ethmac_tx_cdc_cdc_source_payload_data;
wire    [3:0] main_ethmac_tx_cdc_cdc_source_payload_error;
wire    [3:0] main_ethmac_tx_cdc_cdc_source_payload_last_be;
wire          main_ethmac_tx_cdc_cdc_source_ready;
wire          main_ethmac_tx_cdc_cdc_source_valid;
wire    [4:0] main_ethmac_tx_cdc_cdc_wrport_adr;
wire   [41:0] main_ethmac_tx_cdc_cdc_wrport_dat_r;
wire   [41:0] main_ethmac_tx_cdc_cdc_wrport_dat_w;
wire          main_ethmac_tx_cdc_cdc_wrport_we;
wire          main_ethmac_tx_cdc_sink_sink_first;
wire          main_ethmac_tx_cdc_sink_sink_last;
wire   [31:0] main_ethmac_tx_cdc_sink_sink_payload_data;
wire    [3:0] main_ethmac_tx_cdc_sink_sink_payload_error;
wire    [3:0] main_ethmac_tx_cdc_sink_sink_payload_last_be;
wire          main_ethmac_tx_cdc_sink_sink_ready;
wire          main_ethmac_tx_cdc_sink_sink_valid;
wire          main_ethmac_tx_cdc_source_source_first;
wire          main_ethmac_tx_cdc_source_source_last;
wire   [31:0] main_ethmac_tx_cdc_source_source_payload_data;
wire    [3:0] main_ethmac_tx_cdc_source_source_payload_error;
wire    [3:0] main_ethmac_tx_cdc_source_source_payload_last_be;
wire          main_ethmac_tx_cdc_source_source_ready;
wire          main_ethmac_tx_cdc_source_source_valid;
wire          main_ethmac_tx_converter_converter_first;
wire          main_ethmac_tx_converter_converter_last;
reg     [1:0] main_ethmac_tx_converter_converter_mux = 2'd0;
wire          main_ethmac_tx_converter_converter_sink_first;
wire          main_ethmac_tx_converter_converter_sink_last;
reg    [39:0] main_ethmac_tx_converter_converter_sink_payload_data = 40'd0;
wire          main_ethmac_tx_converter_converter_sink_ready;
wire          main_ethmac_tx_converter_converter_sink_valid;
wire          main_ethmac_tx_converter_converter_source_first;
wire          main_ethmac_tx_converter_converter_source_last;
reg     [9:0] main_ethmac_tx_converter_converter_source_payload_data = 10'd0;
wire          main_ethmac_tx_converter_converter_source_payload_valid_token_count;
wire          main_ethmac_tx_converter_converter_source_ready;
wire          main_ethmac_tx_converter_converter_source_valid;
wire          main_ethmac_tx_converter_sink_first;
wire          main_ethmac_tx_converter_sink_last;
wire   [31:0] main_ethmac_tx_converter_sink_payload_data;
wire    [3:0] main_ethmac_tx_converter_sink_payload_error;
wire    [3:0] main_ethmac_tx_converter_sink_payload_last_be;
wire          main_ethmac_tx_converter_sink_ready;
wire          main_ethmac_tx_converter_sink_valid;
wire          main_ethmac_tx_converter_source_first;
wire          main_ethmac_tx_converter_source_last;
wire    [7:0] main_ethmac_tx_converter_source_payload_data;
wire          main_ethmac_tx_converter_source_payload_error;
wire          main_ethmac_tx_converter_source_payload_last_be;
wire          main_ethmac_tx_converter_source_ready;
wire          main_ethmac_tx_converter_source_source_first;
wire          main_ethmac_tx_converter_source_source_last;
wire    [9:0] main_ethmac_tx_converter_source_source_payload_data;
wire          main_ethmac_tx_converter_source_source_ready;
wire          main_ethmac_tx_converter_source_source_valid;
wire          main_ethmac_tx_converter_source_valid;
wire          main_ethmac_tx_crc_be;
reg           main_ethmac_tx_crc_ce = 1'd0;
reg     [1:0] main_ethmac_tx_crc_cnt = 2'd3;
wire          main_ethmac_tx_crc_cnt_done;
reg    [31:0] main_ethmac_tx_crc_crc_next = 32'd0;
reg    [31:0] main_ethmac_tx_crc_crc_packet = 32'd0;
reg    [31:0] main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0 = 32'd0;
reg           main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0 = 1'd0;
wire   [31:0] main_ethmac_tx_crc_crc_prev;
wire    [7:0] main_ethmac_tx_crc_data0;
wire    [7:0] main_ethmac_tx_crc_data1;
reg           main_ethmac_tx_crc_error = 1'd0;
reg           main_ethmac_tx_crc_is_ongoing0 = 1'd0;
reg           main_ethmac_tx_crc_is_ongoing1 = 1'd0;
reg           main_ethmac_tx_crc_last_be = 1'd0;
reg           main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 = 1'd0;
reg           main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 = 1'd0;
wire          main_ethmac_tx_crc_pipe_valid_sink_first;
wire          main_ethmac_tx_crc_pipe_valid_sink_last;
wire    [7:0] main_ethmac_tx_crc_pipe_valid_sink_payload_data;
wire          main_ethmac_tx_crc_pipe_valid_sink_payload_error;
wire          main_ethmac_tx_crc_pipe_valid_sink_payload_last_be;
wire          main_ethmac_tx_crc_pipe_valid_sink_ready;
wire          main_ethmac_tx_crc_pipe_valid_sink_valid;
reg           main_ethmac_tx_crc_pipe_valid_source_first = 1'd0;
reg           main_ethmac_tx_crc_pipe_valid_source_last = 1'd0;
reg     [7:0] main_ethmac_tx_crc_pipe_valid_source_payload_data = 8'd0;
reg           main_ethmac_tx_crc_pipe_valid_source_payload_error = 1'd0;
reg           main_ethmac_tx_crc_pipe_valid_source_payload_last_be = 1'd0;
wire          main_ethmac_tx_crc_pipe_valid_source_ready;
reg           main_ethmac_tx_crc_pipe_valid_source_valid = 1'd0;
reg    [31:0] main_ethmac_tx_crc_reg = 32'd4294967295;
reg           main_ethmac_tx_crc_reset = 1'd0;
wire          main_ethmac_tx_crc_sink_first;
wire          main_ethmac_tx_crc_sink_last;
wire    [7:0] main_ethmac_tx_crc_sink_payload_data;
wire          main_ethmac_tx_crc_sink_payload_error;
wire          main_ethmac_tx_crc_sink_payload_last_be;
reg           main_ethmac_tx_crc_sink_ready = 1'd0;
wire          main_ethmac_tx_crc_sink_sink_first;
wire          main_ethmac_tx_crc_sink_sink_last;
wire    [7:0] main_ethmac_tx_crc_sink_sink_payload_data;
wire          main_ethmac_tx_crc_sink_sink_payload_error;
wire          main_ethmac_tx_crc_sink_sink_payload_last_be;
wire          main_ethmac_tx_crc_sink_sink_ready;
wire          main_ethmac_tx_crc_sink_sink_valid;
wire          main_ethmac_tx_crc_sink_valid;
reg           main_ethmac_tx_crc_source_first = 1'd0;
reg           main_ethmac_tx_crc_source_last = 1'd0;
reg     [7:0] main_ethmac_tx_crc_source_payload_data = 8'd0;
reg           main_ethmac_tx_crc_source_payload_error = 1'd0;
reg           main_ethmac_tx_crc_source_payload_last_be = 1'd0;
wire          main_ethmac_tx_crc_source_ready;
wire          main_ethmac_tx_crc_source_source_first;
wire          main_ethmac_tx_crc_source_source_last;
wire    [7:0] main_ethmac_tx_crc_source_source_payload_data;
wire          main_ethmac_tx_crc_source_source_payload_error;
wire          main_ethmac_tx_crc_source_source_payload_last_be;
wire          main_ethmac_tx_crc_source_source_ready;
wire          main_ethmac_tx_crc_source_source_valid;
reg           main_ethmac_tx_crc_source_valid = 1'd0;
reg    [31:0] main_ethmac_tx_crc_value = 32'd0;
reg     [3:0] main_ethmac_tx_gap_counter = 4'd0;
reg     [3:0] main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value = 4'd0;
reg           main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce = 1'd0;
wire          main_ethmac_tx_gap_sink_first;
wire          main_ethmac_tx_gap_sink_last;
wire    [7:0] main_ethmac_tx_gap_sink_payload_data;
wire          main_ethmac_tx_gap_sink_payload_error;
wire          main_ethmac_tx_gap_sink_payload_last_be;
reg           main_ethmac_tx_gap_sink_ready = 1'd0;
wire          main_ethmac_tx_gap_sink_valid;
reg           main_ethmac_tx_gap_source_first = 1'd0;
reg           main_ethmac_tx_gap_source_last = 1'd0;
reg     [7:0] main_ethmac_tx_gap_source_payload_data = 8'd0;
reg           main_ethmac_tx_gap_source_payload_error = 1'd0;
reg           main_ethmac_tx_gap_source_payload_last_be = 1'd0;
wire          main_ethmac_tx_gap_source_ready;
reg           main_ethmac_tx_gap_source_valid = 1'd0;
wire          main_ethmac_tx_last_be_sink_first;
wire          main_ethmac_tx_last_be_sink_last;
wire    [7:0] main_ethmac_tx_last_be_sink_payload_data;
wire          main_ethmac_tx_last_be_sink_payload_error;
wire          main_ethmac_tx_last_be_sink_payload_last_be;
reg           main_ethmac_tx_last_be_sink_ready = 1'd0;
wire          main_ethmac_tx_last_be_sink_valid;
reg           main_ethmac_tx_last_be_source_first = 1'd0;
reg           main_ethmac_tx_last_be_source_last = 1'd0;
reg     [7:0] main_ethmac_tx_last_be_source_payload_data = 8'd0;
reg           main_ethmac_tx_last_be_source_payload_error = 1'd0;
reg           main_ethmac_tx_last_be_source_payload_last_be = 1'd0;
wire          main_ethmac_tx_last_be_source_ready;
reg           main_ethmac_tx_last_be_source_valid = 1'd0;
reg    [15:0] main_ethmac_tx_padding_counter = 16'd0;
reg    [15:0] main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value = 16'd0;
reg           main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce = 1'd0;
wire          main_ethmac_tx_padding_counter_done;
wire          main_ethmac_tx_padding_sink_first;
wire          main_ethmac_tx_padding_sink_last;
wire    [7:0] main_ethmac_tx_padding_sink_payload_data;
wire          main_ethmac_tx_padding_sink_payload_error;
wire          main_ethmac_tx_padding_sink_payload_last_be;
reg           main_ethmac_tx_padding_sink_ready = 1'd0;
wire          main_ethmac_tx_padding_sink_valid;
reg           main_ethmac_tx_padding_source_first = 1'd0;
reg           main_ethmac_tx_padding_source_last = 1'd0;
reg     [7:0] main_ethmac_tx_padding_source_payload_data = 8'd0;
reg           main_ethmac_tx_padding_source_payload_error = 1'd0;
reg           main_ethmac_tx_padding_source_payload_last_be = 1'd0;
wire          main_ethmac_tx_padding_source_ready;
reg           main_ethmac_tx_padding_source_valid = 1'd0;
reg     [2:0] main_ethmac_tx_preamble_count = 3'd0;
reg     [2:0] main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value = 3'd0;
reg           main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce = 1'd0;
reg    [63:0] main_ethmac_tx_preamble_preamble = 64'd15372286728091293013;
wire          main_ethmac_tx_preamble_sink_first;
wire          main_ethmac_tx_preamble_sink_last;
wire    [7:0] main_ethmac_tx_preamble_sink_payload_data;
wire          main_ethmac_tx_preamble_sink_payload_error;
wire          main_ethmac_tx_preamble_sink_payload_last_be;
reg           main_ethmac_tx_preamble_sink_ready = 1'd0;
wire          main_ethmac_tx_preamble_sink_valid;
reg           main_ethmac_tx_preamble_source_first = 1'd0;
reg           main_ethmac_tx_preamble_source_last = 1'd0;
reg     [7:0] main_ethmac_tx_preamble_source_payload_data = 8'd0;
reg           main_ethmac_tx_preamble_source_payload_error = 1'd0;
wire          main_ethmac_tx_preamble_source_payload_last_be;
wire          main_ethmac_tx_preamble_source_ready;
reg           main_ethmac_tx_preamble_source_valid = 1'd0;
wire          main_ethmac_we;
wire   [31:0] main_ethmac_wr_data;
reg           main_ethmac_write = 1'd0;
reg           main_grant = 1'd0;
reg     [1:0] main_leds = 2'd0;
reg           main_mode = 1'd0;
reg           main_port_cmd_last = 1'd0;
reg    [25:0] main_port_cmd_payload_addr = 26'd0;
reg           main_port_cmd_payload_we = 1'd0;
wire          main_port_cmd_ready;
reg           main_port_cmd_valid = 1'd0;
reg           main_port_rdata_first = 1'd0;
reg           main_port_rdata_last = 1'd0;
wire  [511:0] main_port_rdata_payload_data;
wire          main_port_rdata_ready;
wire          main_port_rdata_valid;
wire          main_port_wdata_first;
wire          main_port_wdata_last;
wire  [511:0] main_port_wdata_payload_data;
wire   [63:0] main_port_wdata_payload_we;
wire          main_port_wdata_ready;
wire          main_port_wdata_valid;
reg    [14:0] main_ram_adr = 15'd0;
reg    [31:0] main_ram_bus_ar_payload_addr = 32'd0;
reg           main_ram_bus_ar_ready = 1'd0;
reg           main_ram_bus_ar_valid = 1'd0;
reg    [31:0] main_ram_bus_aw_payload_addr = 32'd0;
reg           main_ram_bus_aw_ready = 1'd0;
reg           main_ram_bus_aw_valid = 1'd0;
reg     [1:0] main_ram_bus_b_payload_resp = 2'd0;
wire          main_ram_bus_b_ready;
reg           main_ram_bus_b_valid = 1'd0;
reg    [31:0] main_ram_bus_r_payload_data = 32'd0;
reg     [1:0] main_ram_bus_r_payload_resp = 2'd0;
reg           main_ram_bus_r_ready = 1'd0;
reg           main_ram_bus_r_valid = 1'd0;
reg    [31:0] main_ram_bus_w_payload_data = 32'd0;
reg     [3:0] main_ram_bus_w_payload_strb = 4'd0;
reg           main_ram_bus_w_ready = 1'd0;
reg           main_ram_bus_w_valid = 1'd0;
wire   [31:0] main_ram_dat_r;
reg    [31:0] main_ram_dat_w = 32'd0;
reg           main_ram_do_read = 1'd0;
reg           main_ram_do_write = 1'd0;
reg           main_ram_last_was_read = 1'd0;
reg           main_ram_last_was_read_axilitesram1_next_value1 = 1'd0;
reg           main_ram_last_was_read_axilitesram1_next_value_ce1 = 1'd0;
reg    [31:0] main_ram_port_dat_r_latched = 32'd0;
reg    [31:0] main_ram_port_dat_r_latched_axilitesram1_next_value0 = 32'd0;
reg           main_ram_port_dat_r_latched_axilitesram1_next_value_ce0 = 1'd0;
reg     [3:0] main_ram_we = 4'd0;
reg           main_re = 1'd0;
wire          main_read_ar_first;
wire          main_read_ar_last;
wire    [3:0] main_read_ar_param_id;
wire   [31:0] main_read_ar_payload_addr;
reg           main_read_ar_ready = 1'd0;
wire          main_read_ar_valid;
reg     [7:0] main_read_beat_count = 8'd0;
reg  signed  [12:0] main_read_beat_offset = 13'd0;
wire   [11:0] main_read_beat_size;
wire   [11:0] main_read_beat_wrap;
wire          main_read_can_read;
wire          main_read_cmd_grant;
wire          main_read_cmd_request;
reg     [3:0] main_read_id_buffer_consume = 4'd0;
wire          main_read_id_buffer_do_read;
wire          main_read_id_buffer_fifo_in_first;
wire          main_read_id_buffer_fifo_in_last;
wire    [3:0] main_read_id_buffer_fifo_in_payload_id;
wire          main_read_id_buffer_fifo_out_first;
wire          main_read_id_buffer_fifo_out_last;
wire    [3:0] main_read_id_buffer_fifo_out_payload_id;
reg     [4:0] main_read_id_buffer_level = 5'd0;
reg     [3:0] main_read_id_buffer_produce = 4'd0;
wire    [3:0] main_read_id_buffer_rdport_adr;
wire    [5:0] main_read_id_buffer_rdport_dat_r;
reg           main_read_id_buffer_replace = 1'd0;
reg           main_read_id_buffer_sink_first = 1'd0;
wire          main_read_id_buffer_sink_last;
wire    [3:0] main_read_id_buffer_sink_payload_id;
wire          main_read_id_buffer_sink_ready;
wire          main_read_id_buffer_sink_valid;
wire          main_read_id_buffer_source_first;
wire          main_read_id_buffer_source_last;
wire    [3:0] main_read_id_buffer_source_payload_id;
wire          main_read_id_buffer_source_ready;
wire          main_read_id_buffer_source_valid;
wire    [5:0] main_read_id_buffer_syncfifo_din;
wire    [5:0] main_read_id_buffer_syncfifo_dout;
wire          main_read_id_buffer_syncfifo_re;
wire          main_read_id_buffer_syncfifo_readable;
wire          main_read_id_buffer_syncfifo_we;
wire          main_read_id_buffer_syncfifo_writable;
reg     [3:0] main_read_id_buffer_wrport_adr = 4'd0;
wire    [5:0] main_read_id_buffer_wrport_dat_r;
wire    [5:0] main_read_id_buffer_wrport_dat_w;
wire          main_read_id_buffer_wrport_we;
wire          main_read_pipe_valid_sink_first;
wire          main_read_pipe_valid_sink_last;
wire          main_read_pipe_valid_sink_param_dest;
wire    [3:0] main_read_pipe_valid_sink_param_id;
wire          main_read_pipe_valid_sink_param_user;
wire   [31:0] main_read_pipe_valid_sink_payload_addr;
wire    [1:0] main_read_pipe_valid_sink_payload_burst;
wire    [3:0] main_read_pipe_valid_sink_payload_cache;
wire    [7:0] main_read_pipe_valid_sink_payload_len;
wire          main_read_pipe_valid_sink_payload_lock;
wire    [2:0] main_read_pipe_valid_sink_payload_prot;
wire    [3:0] main_read_pipe_valid_sink_payload_qos;
wire    [3:0] main_read_pipe_valid_sink_payload_region;
wire    [2:0] main_read_pipe_valid_sink_payload_size;
wire          main_read_pipe_valid_sink_ready;
wire          main_read_pipe_valid_sink_valid;
reg           main_read_pipe_valid_source_first = 1'd0;
reg           main_read_pipe_valid_source_last = 1'd0;
reg           main_read_pipe_valid_source_param_dest = 1'd0;
reg     [3:0] main_read_pipe_valid_source_param_id = 4'd0;
reg           main_read_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_read_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_read_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_read_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_read_pipe_valid_source_payload_len = 8'd0;
reg           main_read_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_read_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_read_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_read_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_read_pipe_valid_source_payload_size = 3'd0;
wire          main_read_pipe_valid_source_ready;
reg           main_read_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_read_r_buffer_consume = 4'd0;
wire          main_read_r_buffer_dequeue;
wire          main_read_r_buffer_do_read;
wire          main_read_r_buffer_fifo_in_first;
wire          main_read_r_buffer_fifo_in_last;
wire          main_read_r_buffer_fifo_in_param_dest;
wire    [3:0] main_read_r_buffer_fifo_in_param_id;
wire          main_read_r_buffer_fifo_in_param_user;
wire  [511:0] main_read_r_buffer_fifo_in_payload_data;
wire    [1:0] main_read_r_buffer_fifo_in_payload_resp;
wire          main_read_r_buffer_fifo_out_first;
wire          main_read_r_buffer_fifo_out_last;
wire          main_read_r_buffer_fifo_out_param_dest;
wire    [3:0] main_read_r_buffer_fifo_out_param_id;
wire          main_read_r_buffer_fifo_out_param_user;
wire  [511:0] main_read_r_buffer_fifo_out_payload_data;
wire    [1:0] main_read_r_buffer_fifo_out_payload_resp;
reg     [4:0] main_read_r_buffer_level0 = 5'd0;
wire    [4:0] main_read_r_buffer_level1;
reg     [4:0] main_read_r_buffer_level2 = 5'd0;
reg     [3:0] main_read_r_buffer_produce = 4'd0;
wire          main_read_r_buffer_queue;
wire    [3:0] main_read_r_buffer_rdport_adr;
wire  [521:0] main_read_r_buffer_rdport_dat_r;
wire          main_read_r_buffer_rdport_re;
wire          main_read_r_buffer_re;
reg           main_read_r_buffer_readable = 1'd0;
reg           main_read_r_buffer_replace = 1'd0;
wire          main_read_r_buffer_sink_first;
wire          main_read_r_buffer_sink_last;
reg           main_read_r_buffer_sink_param_dest = 1'd0;
reg     [3:0] main_read_r_buffer_sink_param_id = 4'd0;
reg           main_read_r_buffer_sink_param_user = 1'd0;
wire  [511:0] main_read_r_buffer_sink_payload_data;
reg     [1:0] main_read_r_buffer_sink_payload_resp = 2'd0;
wire          main_read_r_buffer_sink_ready;
wire          main_read_r_buffer_sink_valid;
wire          main_read_r_buffer_source_first;
wire          main_read_r_buffer_source_last;
wire          main_read_r_buffer_source_param_dest;
wire    [3:0] main_read_r_buffer_source_param_id;
wire          main_read_r_buffer_source_param_user;
wire  [511:0] main_read_r_buffer_source_payload_data;
wire    [1:0] main_read_r_buffer_source_payload_resp;
wire          main_read_r_buffer_source_ready;
wire          main_read_r_buffer_source_valid;
wire  [521:0] main_read_r_buffer_syncfifo_din;
wire  [521:0] main_read_r_buffer_syncfifo_dout;
wire          main_read_r_buffer_syncfifo_re;
wire          main_read_r_buffer_syncfifo_readable;
wire          main_read_r_buffer_syncfifo_we;
wire          main_read_r_buffer_syncfifo_writable;
reg     [3:0] main_read_r_buffer_wrport_adr = 4'd0;
wire  [521:0] main_read_r_buffer_wrport_dat_r;
wire  [521:0] main_read_r_buffer_wrport_dat_w;
wire          main_read_r_buffer_wrport_we;
wire          main_read_sink_sink_first;
wire          main_read_sink_sink_last;
wire          main_read_sink_sink_param_dest;
wire    [3:0] main_read_sink_sink_param_id;
wire          main_read_sink_sink_param_user;
wire   [31:0] main_read_sink_sink_payload_addr;
wire    [1:0] main_read_sink_sink_payload_burst;
wire    [3:0] main_read_sink_sink_payload_cache;
wire    [7:0] main_read_sink_sink_payload_len;
wire          main_read_sink_sink_payload_lock;
wire    [2:0] main_read_sink_sink_payload_prot;
wire    [3:0] main_read_sink_sink_payload_qos;
wire    [3:0] main_read_sink_sink_payload_region;
wire    [2:0] main_read_sink_sink_payload_size;
wire          main_read_sink_sink_ready;
wire          main_read_sink_sink_valid;
wire          main_read_source_source_first;
wire          main_read_source_source_last;
wire          main_read_source_source_param_dest;
wire    [3:0] main_read_source_source_param_id;
wire          main_read_source_source_param_user;
wire   [31:0] main_read_source_source_payload_addr;
wire    [1:0] main_read_source_source_payload_burst;
wire    [3:0] main_read_source_source_payload_cache;
wire    [7:0] main_read_source_source_payload_len;
wire          main_read_source_source_payload_lock;
wire    [2:0] main_read_source_source_payload_prot;
wire    [3:0] main_read_source_source_payload_qos;
wire    [3:0] main_read_source_source_payload_region;
wire    [2:0] main_read_source_source_payload_size;
reg           main_read_source_source_ready = 1'd0;
wire          main_read_source_source_valid;
reg     [1:0] main_request = 2'd0;
reg           main_reset_re = 1'd0;
reg     [1:0] main_reset_storage = 2'd0;
wire          main_rocket0;
wire          main_rocket1;
wire          main_rocket2;
wire          main_rocket3;
wire          main_rocket4;
wire          main_rocket5;
reg           main_rocket6 = 1'd0;
reg     [7:0] main_rocket_interrupt = 8'd0;
wire   [28:0] main_rocket_l2fb_a2w_addr;
reg    [31:0] main_rocket_l2fb_a2w_ar_payload_addr = 32'd0;
wire          main_rocket_l2fb_a2w_ar_ready;
reg           main_rocket_l2fb_a2w_ar_valid = 1'd0;
reg    [31:0] main_rocket_l2fb_a2w_aw_payload_addr = 32'd0;
wire          main_rocket_l2fb_a2w_aw_ready;
reg           main_rocket_l2fb_a2w_aw_valid = 1'd0;
wire    [1:0] main_rocket_l2fb_a2w_b_payload_resp;
reg           main_rocket_l2fb_a2w_b_ready = 1'd0;
wire          main_rocket_l2fb_a2w_b_valid;
reg           main_rocket_l2fb_a2w_cmd_done = 1'd0;
reg           main_rocket_l2fb_a2w_cmd_done_rocket_next_value0 = 1'd0;
reg           main_rocket_l2fb_a2w_cmd_done_rocket_next_value_ce0 = 1'd0;
reg           main_rocket_l2fb_a2w_data_done = 1'd0;
reg           main_rocket_l2fb_a2w_data_done_rocket_next_value1 = 1'd0;
reg           main_rocket_l2fb_a2w_data_done_rocket_next_value_ce1 = 1'd0;
wire   [63:0] main_rocket_l2fb_a2w_r_payload_data;
wire    [1:0] main_rocket_l2fb_a2w_r_payload_resp;
reg           main_rocket_l2fb_a2w_r_ready = 1'd0;
wire          main_rocket_l2fb_a2w_r_valid;
reg    [63:0] main_rocket_l2fb_a2w_w_payload_data = 64'd0;
reg     [7:0] main_rocket_l2fb_a2w_w_payload_strb = 8'd0;
wire          main_rocket_l2fb_a2w_w_ready;
reg           main_rocket_l2fb_a2w_w_valid = 1'd0;
wire    [3:0] main_rocket_l2fb_axi_ar_param_id;
wire   [31:0] main_rocket_l2fb_axi_ar_payload_addr;
wire    [1:0] main_rocket_l2fb_axi_ar_payload_burst;
wire    [3:0] main_rocket_l2fb_axi_ar_payload_cache;
wire    [7:0] main_rocket_l2fb_axi_ar_payload_len;
wire          main_rocket_l2fb_axi_ar_payload_lock;
wire    [2:0] main_rocket_l2fb_axi_ar_payload_prot;
wire    [3:0] main_rocket_l2fb_axi_ar_payload_qos;
wire    [2:0] main_rocket_l2fb_axi_ar_payload_size;
wire          main_rocket_l2fb_axi_ar_ready;
wire          main_rocket_l2fb_axi_ar_valid;
wire    [3:0] main_rocket_l2fb_axi_aw_param_id;
wire   [31:0] main_rocket_l2fb_axi_aw_payload_addr;
wire    [1:0] main_rocket_l2fb_axi_aw_payload_burst;
wire    [3:0] main_rocket_l2fb_axi_aw_payload_cache;
wire    [7:0] main_rocket_l2fb_axi_aw_payload_len;
wire          main_rocket_l2fb_axi_aw_payload_lock;
wire    [2:0] main_rocket_l2fb_axi_aw_payload_prot;
wire    [3:0] main_rocket_l2fb_axi_aw_payload_qos;
wire    [2:0] main_rocket_l2fb_axi_aw_payload_size;
wire          main_rocket_l2fb_axi_aw_ready;
wire          main_rocket_l2fb_axi_aw_valid;
wire    [3:0] main_rocket_l2fb_axi_b_param_id;
wire    [1:0] main_rocket_l2fb_axi_b_payload_resp;
wire          main_rocket_l2fb_axi_b_ready;
wire          main_rocket_l2fb_axi_b_valid;
wire          main_rocket_l2fb_axi_r_last;
wire    [3:0] main_rocket_l2fb_axi_r_param_id;
wire   [63:0] main_rocket_l2fb_axi_r_payload_data;
wire    [1:0] main_rocket_l2fb_axi_r_payload_resp;
wire          main_rocket_l2fb_axi_r_ready;
wire          main_rocket_l2fb_axi_r_valid;
wire          main_rocket_l2fb_axi_w_last;
wire   [63:0] main_rocket_l2fb_axi_w_payload_data;
wire    [7:0] main_rocket_l2fb_axi_w_payload_strb;
wire          main_rocket_l2fb_axi_w_ready;
wire          main_rocket_l2fb_axi_w_valid;
reg           main_rocket_l2fb_wb_ack = 1'd0;
reg    [28:0] main_rocket_l2fb_wb_adr = 29'd0;
reg           main_rocket_l2fb_wb_cyc = 1'd0;
reg    [63:0] main_rocket_l2fb_wb_dat_r = 64'd0;
reg    [63:0] main_rocket_l2fb_wb_dat_w = 64'd0;
reg           main_rocket_l2fb_wb_err = 1'd0;
reg     [7:0] main_rocket_l2fb_wb_sel = 8'd0;
reg           main_rocket_l2fb_wb_stb = 1'd0;
reg           main_rocket_l2fb_wb_we = 1'd0;
reg           main_rocket_mem_axi_ar_first = 1'd0;
reg           main_rocket_mem_axi_ar_last = 1'd0;
reg           main_rocket_mem_axi_ar_param_dest = 1'd0;
wire    [3:0] main_rocket_mem_axi_ar_param_id;
reg           main_rocket_mem_axi_ar_param_user = 1'd0;
wire   [31:0] main_rocket_mem_axi_ar_payload_addr;
wire    [1:0] main_rocket_mem_axi_ar_payload_burst;
wire    [3:0] main_rocket_mem_axi_ar_payload_cache;
wire    [7:0] main_rocket_mem_axi_ar_payload_len;
wire          main_rocket_mem_axi_ar_payload_lock;
wire    [2:0] main_rocket_mem_axi_ar_payload_prot;
wire    [3:0] main_rocket_mem_axi_ar_payload_qos;
reg     [3:0] main_rocket_mem_axi_ar_payload_region = 4'd0;
wire    [2:0] main_rocket_mem_axi_ar_payload_size;
wire          main_rocket_mem_axi_ar_ready;
wire          main_rocket_mem_axi_ar_valid;
reg           main_rocket_mem_axi_aw_first = 1'd0;
reg           main_rocket_mem_axi_aw_last = 1'd0;
reg           main_rocket_mem_axi_aw_param_dest = 1'd0;
wire    [3:0] main_rocket_mem_axi_aw_param_id;
reg           main_rocket_mem_axi_aw_param_user = 1'd0;
wire   [31:0] main_rocket_mem_axi_aw_payload_addr;
wire    [1:0] main_rocket_mem_axi_aw_payload_burst;
wire    [3:0] main_rocket_mem_axi_aw_payload_cache;
wire    [7:0] main_rocket_mem_axi_aw_payload_len;
wire          main_rocket_mem_axi_aw_payload_lock;
wire    [2:0] main_rocket_mem_axi_aw_payload_prot;
wire    [3:0] main_rocket_mem_axi_aw_payload_qos;
reg     [3:0] main_rocket_mem_axi_aw_payload_region = 4'd0;
wire    [2:0] main_rocket_mem_axi_aw_payload_size;
wire          main_rocket_mem_axi_aw_ready;
wire          main_rocket_mem_axi_aw_valid;
wire          main_rocket_mem_axi_b_first;
wire          main_rocket_mem_axi_b_last;
wire    [3:0] main_rocket_mem_axi_b_param_id;
wire    [1:0] main_rocket_mem_axi_b_payload_resp;
wire          main_rocket_mem_axi_b_ready;
wire          main_rocket_mem_axi_b_valid;
wire          main_rocket_mem_axi_r_first;
wire          main_rocket_mem_axi_r_last;
wire          main_rocket_mem_axi_r_param_dest;
wire    [3:0] main_rocket_mem_axi_r_param_id;
wire          main_rocket_mem_axi_r_param_user;
wire  [511:0] main_rocket_mem_axi_r_payload_data;
reg     [1:0] main_rocket_mem_axi_r_payload_resp = 2'd0;
wire          main_rocket_mem_axi_r_ready;
wire          main_rocket_mem_axi_r_valid;
reg           main_rocket_mem_axi_w_first = 1'd0;
wire          main_rocket_mem_axi_w_last;
reg           main_rocket_mem_axi_w_param_dest = 1'd0;
reg           main_rocket_mem_axi_w_param_id = 1'd0;
reg           main_rocket_mem_axi_w_param_user = 1'd0;
wire  [511:0] main_rocket_mem_axi_w_payload_data;
wire   [63:0] main_rocket_mem_axi_w_payload_strb;
reg           main_rocket_mem_axi_w_ready = 1'd0;
wire          main_rocket_mem_axi_w_valid;
reg    [31:0] main_rocket_mmio_a2w_ar_payload_addr = 32'd0;
reg           main_rocket_mmio_a2w_ar_ready = 1'd0;
reg           main_rocket_mmio_a2w_ar_valid = 1'd0;
reg    [31:0] main_rocket_mmio_a2w_aw_payload_addr = 32'd0;
reg           main_rocket_mmio_a2w_aw_ready = 1'd0;
reg           main_rocket_mmio_a2w_aw_valid = 1'd0;
wire          main_rocket_mmio_a2w_axi2axi_lite_ax_beat_first;
wire          main_rocket_mmio_a2w_axi2axi_lite_ax_beat_last;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_ax_beat_param_id;
wire   [31:0] main_rocket_mmio_a2w_axi2axi_lite_ax_beat_payload_addr;
reg           main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready = 1'd0;
wire          main_rocket_mmio_a2w_axi2axi_lite_ax_beat_valid;
reg           main_rocket_mmio_a2w_axi2axi_lite_ax_burst_first = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_ax_burst_last = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_dest = 1'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_id = 4'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_user = 1'd0;
reg    [31:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_len = 8'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_region = 4'd0;
reg     [2:0] main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_size = 3'd0;
wire          main_rocket_mmio_a2w_axi2axi_lite_ax_burst_ready;
reg           main_rocket_mmio_a2w_axi2axi_lite_ax_burst_valid = 1'd0;
reg     [7:0] main_rocket_mmio_a2w_axi2axi_lite_beat_count = 8'd0;
reg  signed  [12:0] main_rocket_mmio_a2w_axi2axi_lite_beat_offset = 13'd0;
wire   [11:0] main_rocket_mmio_a2w_axi2axi_lite_beat_size;
wire   [11:0] main_rocket_mmio_a2w_axi2axi_lite_beat_wrap;
reg           main_rocket_mmio_a2w_axi2axi_lite_cmd_done = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value0 = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value_ce0 = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value1 = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value_ce1 = 1'd0;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_first;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_last;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_dest;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_id;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_user;
wire   [31:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_addr;
wire    [1:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_burst;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_cache;
wire    [7:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_len;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_lock;
wire    [2:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_prot;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_qos;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_region;
wire    [2:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_size;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_ready;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_valid;
reg           main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_first = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_last = 1'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_dest = 1'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_id = 4'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_len = 8'd0;
reg           main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_size = 3'd0;
wire          main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_ready;
reg           main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_valid = 1'd0;
wire          main_rocket_mmio_a2w_axi2axi_lite_sink_sink_first;
wire          main_rocket_mmio_a2w_axi2axi_lite_sink_sink_last;
wire          main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_dest;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_id;
wire          main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_user;
wire   [31:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_addr;
wire    [1:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_burst;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_cache;
wire    [7:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_len;
wire          main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_lock;
wire    [2:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_prot;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_qos;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_region;
wire    [2:0] main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_size;
wire          main_rocket_mmio_a2w_axi2axi_lite_sink_sink_ready;
wire          main_rocket_mmio_a2w_axi2axi_lite_sink_sink_valid;
wire          main_rocket_mmio_a2w_axi2axi_lite_source_source_first;
wire          main_rocket_mmio_a2w_axi2axi_lite_source_source_last;
wire          main_rocket_mmio_a2w_axi2axi_lite_source_source_param_dest;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_param_id;
wire          main_rocket_mmio_a2w_axi2axi_lite_source_source_param_user;
wire   [31:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_addr;
wire    [1:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_burst;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_cache;
wire    [7:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_len;
wire          main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_lock;
wire    [2:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_prot;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_qos;
wire    [3:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_region;
wire    [2:0] main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_size;
reg           main_rocket_mmio_a2w_axi2axi_lite_source_source_ready = 1'd0;
wire          main_rocket_mmio_a2w_axi2axi_lite_source_source_valid;
reg    [63:0] main_rocket_mmio_a2w_axi_lite2wishbone_data = 64'd0;
reg    [63:0] main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value1 = 64'd0;
reg           main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value_ce1 = 1'd0;
reg           main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n = 1'd0;
reg           main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value0 = 1'd0;
reg           main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value_ce0 = 1'd0;
wire   [31:0] main_rocket_mmio_a2w_axi_lite2wishbone_r_addr;
wire   [31:0] main_rocket_mmio_a2w_axi_lite2wishbone_w_addr;
reg     [1:0] main_rocket_mmio_a2w_b_payload_resp = 2'd0;
wire          main_rocket_mmio_a2w_b_ready;
reg           main_rocket_mmio_a2w_b_valid = 1'd0;
reg    [63:0] main_rocket_mmio_a2w_r_payload_data = 64'd0;
reg     [1:0] main_rocket_mmio_a2w_r_payload_resp = 2'd0;
reg           main_rocket_mmio_a2w_r_ready = 1'd0;
reg           main_rocket_mmio_a2w_r_valid = 1'd0;
reg    [63:0] main_rocket_mmio_a2w_w_payload_data = 64'd0;
reg     [7:0] main_rocket_mmio_a2w_w_payload_strb = 8'd0;
reg           main_rocket_mmio_a2w_w_ready = 1'd0;
reg           main_rocket_mmio_a2w_w_valid = 1'd0;
reg           main_rocket_mmio_axi_ar_first = 1'd0;
reg           main_rocket_mmio_axi_ar_last = 1'd0;
reg           main_rocket_mmio_axi_ar_param_dest = 1'd0;
wire    [3:0] main_rocket_mmio_axi_ar_param_id;
reg           main_rocket_mmio_axi_ar_param_user = 1'd0;
wire   [31:0] main_rocket_mmio_axi_ar_payload_addr;
wire    [1:0] main_rocket_mmio_axi_ar_payload_burst;
wire    [3:0] main_rocket_mmio_axi_ar_payload_cache;
wire    [7:0] main_rocket_mmio_axi_ar_payload_len;
wire          main_rocket_mmio_axi_ar_payload_lock;
wire    [2:0] main_rocket_mmio_axi_ar_payload_prot;
wire    [3:0] main_rocket_mmio_axi_ar_payload_qos;
reg     [3:0] main_rocket_mmio_axi_ar_payload_region = 4'd0;
wire    [2:0] main_rocket_mmio_axi_ar_payload_size;
reg           main_rocket_mmio_axi_ar_ready = 1'd0;
wire          main_rocket_mmio_axi_ar_valid;
reg           main_rocket_mmio_axi_aw_first = 1'd0;
reg           main_rocket_mmio_axi_aw_last = 1'd0;
reg           main_rocket_mmio_axi_aw_param_dest = 1'd0;
wire    [3:0] main_rocket_mmio_axi_aw_param_id;
reg           main_rocket_mmio_axi_aw_param_user = 1'd0;
wire   [31:0] main_rocket_mmio_axi_aw_payload_addr;
wire    [1:0] main_rocket_mmio_axi_aw_payload_burst;
wire    [3:0] main_rocket_mmio_axi_aw_payload_cache;
wire    [7:0] main_rocket_mmio_axi_aw_payload_len;
wire          main_rocket_mmio_axi_aw_payload_lock;
wire    [2:0] main_rocket_mmio_axi_aw_payload_prot;
wire    [3:0] main_rocket_mmio_axi_aw_payload_qos;
reg     [3:0] main_rocket_mmio_axi_aw_payload_region = 4'd0;
wire    [2:0] main_rocket_mmio_axi_aw_payload_size;
reg           main_rocket_mmio_axi_aw_ready = 1'd0;
wire          main_rocket_mmio_axi_aw_valid;
reg     [3:0] main_rocket_mmio_axi_b_param_id = 4'd0;
reg     [1:0] main_rocket_mmio_axi_b_payload_resp = 2'd0;
wire          main_rocket_mmio_axi_b_ready;
reg           main_rocket_mmio_axi_b_valid = 1'd0;
reg           main_rocket_mmio_axi_r_last = 1'd0;
reg     [3:0] main_rocket_mmio_axi_r_param_id = 4'd0;
reg    [63:0] main_rocket_mmio_axi_r_payload_data = 64'd0;
reg     [1:0] main_rocket_mmio_axi_r_payload_resp = 2'd0;
wire          main_rocket_mmio_axi_r_ready;
reg           main_rocket_mmio_axi_r_valid = 1'd0;
wire          main_rocket_mmio_axi_w_last;
wire   [63:0] main_rocket_mmio_axi_w_payload_data;
wire    [7:0] main_rocket_mmio_axi_w_payload_strb;
reg           main_rocket_mmio_axi_w_ready = 1'd0;
wire          main_rocket_mmio_axi_w_valid;
reg           main_rocket_mmio_wb_ack = 1'd0;
reg    [28:0] main_rocket_mmio_wb_adr = 29'd0;
reg     [1:0] main_rocket_mmio_wb_bte = 2'd0;
reg     [2:0] main_rocket_mmio_wb_cti = 3'd0;
reg           main_rocket_mmio_wb_cyc = 1'd0;
wire   [63:0] main_rocket_mmio_wb_dat_r;
reg    [63:0] main_rocket_mmio_wb_dat_w = 64'd0;
reg     [7:0] main_rocket_mmio_wb_sel = 8'd0;
reg           main_rocket_mmio_wb_stb = 1'd0;
reg           main_rocket_mmio_wb_we = 1'd0;
wire          main_rocket_reset;
reg     [3:0] main_rx_count = 4'd0;
reg     [3:0] main_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_rx_data = 8'd0;
reg     [7:0] main_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_rx_enable = 1'd0;
reg    [31:0] main_rx_phase = 32'd0;
wire          main_rx_rx;
reg           main_rx_rx_d = 1'd0;
reg           main_rx_source_first = 1'd0;
reg           main_rx_source_last = 1'd0;
reg     [7:0] main_rx_source_payload_data = 8'd0;
wire          main_rx_source_ready;
reg           main_rx_source_valid = 1'd0;
reg           main_rx_tick = 1'd0;
reg           main_scratch_re = 1'd0;
reg    [31:0] main_scratch_storage = 32'd305419896;
reg           main_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine0_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine0_cmd_payload_ba;
reg           main_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine0_cmd_ready = 1'd0;
reg           main_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine0_consume = 3'd0;
wire          main_sdram_bankmachine0_do_read;
wire          main_sdram_bankmachine0_fifo_in_first;
wire          main_sdram_bankmachine0_fifo_in_last;
wire   [22:0] main_sdram_bankmachine0_fifo_in_payload_addr;
wire          main_sdram_bankmachine0_fifo_in_payload_we;
wire          main_sdram_bankmachine0_fifo_out_first;
wire          main_sdram_bankmachine0_fifo_out_last;
wire   [22:0] main_sdram_bankmachine0_fifo_out_payload_addr;
wire          main_sdram_bankmachine0_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine0_level = 4'd0;
wire          main_sdram_bankmachine0_pipe_valid_sink_first;
wire          main_sdram_bankmachine0_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine0_pipe_valid_sink_ready;
wire          main_sdram_bankmachine0_pipe_valid_sink_valid;
reg           main_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine0_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine0_pipe_valid_source_ready;
reg           main_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine0_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine0_rdport_adr;
wire   [25:0] main_sdram_bankmachine0_rdport_dat_r;
reg           main_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine0_refresh_req;
reg           main_sdram_bankmachine0_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine0_req_addr;
wire          main_sdram_bankmachine0_req_lock;
reg           main_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine0_req_ready;
wire          main_sdram_bankmachine0_req_valid;
reg           main_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine0_req_we;
reg    [15:0] main_sdram_bankmachine0_row = 16'd0;
reg           main_sdram_bankmachine0_row_close = 1'd0;
reg           main_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine0_row_hit;
reg           main_sdram_bankmachine0_row_open = 1'd0;
reg           main_sdram_bankmachine0_row_opened = 1'd0;
reg           main_sdram_bankmachine0_sink_first = 1'd0;
reg           main_sdram_bankmachine0_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine0_sink_payload_addr;
wire          main_sdram_bankmachine0_sink_payload_we;
wire          main_sdram_bankmachine0_sink_ready;
wire          main_sdram_bankmachine0_sink_sink_first;
wire          main_sdram_bankmachine0_sink_sink_last;
wire   [22:0] main_sdram_bankmachine0_sink_sink_payload_addr;
wire          main_sdram_bankmachine0_sink_sink_payload_we;
wire          main_sdram_bankmachine0_sink_sink_ready;
wire          main_sdram_bankmachine0_sink_sink_valid;
wire          main_sdram_bankmachine0_sink_valid;
wire          main_sdram_bankmachine0_source_first;
wire          main_sdram_bankmachine0_source_last;
wire   [22:0] main_sdram_bankmachine0_source_payload_addr;
wire          main_sdram_bankmachine0_source_payload_we;
wire          main_sdram_bankmachine0_source_ready;
wire          main_sdram_bankmachine0_source_source_first;
wire          main_sdram_bankmachine0_source_source_last;
wire   [22:0] main_sdram_bankmachine0_source_source_payload_addr;
wire          main_sdram_bankmachine0_source_source_payload_we;
wire          main_sdram_bankmachine0_source_source_ready;
wire          main_sdram_bankmachine0_source_source_valid;
wire          main_sdram_bankmachine0_source_valid;
wire   [25:0] main_sdram_bankmachine0_syncfifo0_din;
wire   [25:0] main_sdram_bankmachine0_syncfifo0_dout;
wire          main_sdram_bankmachine0_syncfifo0_re;
wire          main_sdram_bankmachine0_syncfifo0_readable;
wire          main_sdram_bankmachine0_syncfifo0_we;
wire          main_sdram_bankmachine0_syncfifo0_writable;
reg     [2:0] main_sdram_bankmachine0_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine0_trascon_ready = 1'd0;
wire          main_sdram_bankmachine0_trascon_valid;
reg     [2:0] main_sdram_bankmachine0_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine0_trccon_ready = 1'd0;
wire          main_sdram_bankmachine0_trccon_valid;
reg     [2:0] main_sdram_bankmachine0_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine0_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine0_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine0_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine0_wrport_dat_w;
wire          main_sdram_bankmachine0_wrport_we;
reg           main_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine1_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine1_cmd_payload_ba;
reg           main_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine1_cmd_ready = 1'd0;
reg           main_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine1_consume = 3'd0;
wire          main_sdram_bankmachine1_do_read;
wire          main_sdram_bankmachine1_fifo_in_first;
wire          main_sdram_bankmachine1_fifo_in_last;
wire   [22:0] main_sdram_bankmachine1_fifo_in_payload_addr;
wire          main_sdram_bankmachine1_fifo_in_payload_we;
wire          main_sdram_bankmachine1_fifo_out_first;
wire          main_sdram_bankmachine1_fifo_out_last;
wire   [22:0] main_sdram_bankmachine1_fifo_out_payload_addr;
wire          main_sdram_bankmachine1_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine1_level = 4'd0;
wire          main_sdram_bankmachine1_pipe_valid_sink_first;
wire          main_sdram_bankmachine1_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine1_pipe_valid_sink_ready;
wire          main_sdram_bankmachine1_pipe_valid_sink_valid;
reg           main_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine1_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine1_pipe_valid_source_ready;
reg           main_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine1_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine1_rdport_adr;
wire   [25:0] main_sdram_bankmachine1_rdport_dat_r;
reg           main_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine1_refresh_req;
reg           main_sdram_bankmachine1_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine1_req_addr;
wire          main_sdram_bankmachine1_req_lock;
reg           main_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine1_req_ready;
wire          main_sdram_bankmachine1_req_valid;
reg           main_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine1_req_we;
reg    [15:0] main_sdram_bankmachine1_row = 16'd0;
reg           main_sdram_bankmachine1_row_close = 1'd0;
reg           main_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine1_row_hit;
reg           main_sdram_bankmachine1_row_open = 1'd0;
reg           main_sdram_bankmachine1_row_opened = 1'd0;
reg           main_sdram_bankmachine1_sink_first = 1'd0;
reg           main_sdram_bankmachine1_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine1_sink_payload_addr;
wire          main_sdram_bankmachine1_sink_payload_we;
wire          main_sdram_bankmachine1_sink_ready;
wire          main_sdram_bankmachine1_sink_sink_first;
wire          main_sdram_bankmachine1_sink_sink_last;
wire   [22:0] main_sdram_bankmachine1_sink_sink_payload_addr;
wire          main_sdram_bankmachine1_sink_sink_payload_we;
wire          main_sdram_bankmachine1_sink_sink_ready;
wire          main_sdram_bankmachine1_sink_sink_valid;
wire          main_sdram_bankmachine1_sink_valid;
wire          main_sdram_bankmachine1_source_first;
wire          main_sdram_bankmachine1_source_last;
wire   [22:0] main_sdram_bankmachine1_source_payload_addr;
wire          main_sdram_bankmachine1_source_payload_we;
wire          main_sdram_bankmachine1_source_ready;
wire          main_sdram_bankmachine1_source_source_first;
wire          main_sdram_bankmachine1_source_source_last;
wire   [22:0] main_sdram_bankmachine1_source_source_payload_addr;
wire          main_sdram_bankmachine1_source_source_payload_we;
wire          main_sdram_bankmachine1_source_source_ready;
wire          main_sdram_bankmachine1_source_source_valid;
wire          main_sdram_bankmachine1_source_valid;
wire   [25:0] main_sdram_bankmachine1_syncfifo1_din;
wire   [25:0] main_sdram_bankmachine1_syncfifo1_dout;
wire          main_sdram_bankmachine1_syncfifo1_re;
wire          main_sdram_bankmachine1_syncfifo1_readable;
wire          main_sdram_bankmachine1_syncfifo1_we;
wire          main_sdram_bankmachine1_syncfifo1_writable;
reg     [2:0] main_sdram_bankmachine1_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine1_trascon_ready = 1'd0;
wire          main_sdram_bankmachine1_trascon_valid;
reg     [2:0] main_sdram_bankmachine1_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine1_trccon_ready = 1'd0;
wire          main_sdram_bankmachine1_trccon_valid;
reg     [2:0] main_sdram_bankmachine1_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine1_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine1_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine1_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine1_wrport_dat_w;
wire          main_sdram_bankmachine1_wrport_we;
reg           main_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine2_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine2_cmd_payload_ba;
reg           main_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine2_cmd_ready = 1'd0;
reg           main_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine2_consume = 3'd0;
wire          main_sdram_bankmachine2_do_read;
wire          main_sdram_bankmachine2_fifo_in_first;
wire          main_sdram_bankmachine2_fifo_in_last;
wire   [22:0] main_sdram_bankmachine2_fifo_in_payload_addr;
wire          main_sdram_bankmachine2_fifo_in_payload_we;
wire          main_sdram_bankmachine2_fifo_out_first;
wire          main_sdram_bankmachine2_fifo_out_last;
wire   [22:0] main_sdram_bankmachine2_fifo_out_payload_addr;
wire          main_sdram_bankmachine2_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine2_level = 4'd0;
wire          main_sdram_bankmachine2_pipe_valid_sink_first;
wire          main_sdram_bankmachine2_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine2_pipe_valid_sink_ready;
wire          main_sdram_bankmachine2_pipe_valid_sink_valid;
reg           main_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine2_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine2_pipe_valid_source_ready;
reg           main_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine2_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine2_rdport_adr;
wire   [25:0] main_sdram_bankmachine2_rdport_dat_r;
reg           main_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine2_refresh_req;
reg           main_sdram_bankmachine2_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine2_req_addr;
wire          main_sdram_bankmachine2_req_lock;
reg           main_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine2_req_ready;
wire          main_sdram_bankmachine2_req_valid;
reg           main_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine2_req_we;
reg    [15:0] main_sdram_bankmachine2_row = 16'd0;
reg           main_sdram_bankmachine2_row_close = 1'd0;
reg           main_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine2_row_hit;
reg           main_sdram_bankmachine2_row_open = 1'd0;
reg           main_sdram_bankmachine2_row_opened = 1'd0;
reg           main_sdram_bankmachine2_sink_first = 1'd0;
reg           main_sdram_bankmachine2_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine2_sink_payload_addr;
wire          main_sdram_bankmachine2_sink_payload_we;
wire          main_sdram_bankmachine2_sink_ready;
wire          main_sdram_bankmachine2_sink_sink_first;
wire          main_sdram_bankmachine2_sink_sink_last;
wire   [22:0] main_sdram_bankmachine2_sink_sink_payload_addr;
wire          main_sdram_bankmachine2_sink_sink_payload_we;
wire          main_sdram_bankmachine2_sink_sink_ready;
wire          main_sdram_bankmachine2_sink_sink_valid;
wire          main_sdram_bankmachine2_sink_valid;
wire          main_sdram_bankmachine2_source_first;
wire          main_sdram_bankmachine2_source_last;
wire   [22:0] main_sdram_bankmachine2_source_payload_addr;
wire          main_sdram_bankmachine2_source_payload_we;
wire          main_sdram_bankmachine2_source_ready;
wire          main_sdram_bankmachine2_source_source_first;
wire          main_sdram_bankmachine2_source_source_last;
wire   [22:0] main_sdram_bankmachine2_source_source_payload_addr;
wire          main_sdram_bankmachine2_source_source_payload_we;
wire          main_sdram_bankmachine2_source_source_ready;
wire          main_sdram_bankmachine2_source_source_valid;
wire          main_sdram_bankmachine2_source_valid;
wire   [25:0] main_sdram_bankmachine2_syncfifo2_din;
wire   [25:0] main_sdram_bankmachine2_syncfifo2_dout;
wire          main_sdram_bankmachine2_syncfifo2_re;
wire          main_sdram_bankmachine2_syncfifo2_readable;
wire          main_sdram_bankmachine2_syncfifo2_we;
wire          main_sdram_bankmachine2_syncfifo2_writable;
reg     [2:0] main_sdram_bankmachine2_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine2_trascon_ready = 1'd0;
wire          main_sdram_bankmachine2_trascon_valid;
reg     [2:0] main_sdram_bankmachine2_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine2_trccon_ready = 1'd0;
wire          main_sdram_bankmachine2_trccon_valid;
reg     [2:0] main_sdram_bankmachine2_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine2_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine2_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine2_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine2_wrport_dat_w;
wire          main_sdram_bankmachine2_wrport_we;
reg           main_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine3_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine3_cmd_payload_ba;
reg           main_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine3_cmd_ready = 1'd0;
reg           main_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine3_consume = 3'd0;
wire          main_sdram_bankmachine3_do_read;
wire          main_sdram_bankmachine3_fifo_in_first;
wire          main_sdram_bankmachine3_fifo_in_last;
wire   [22:0] main_sdram_bankmachine3_fifo_in_payload_addr;
wire          main_sdram_bankmachine3_fifo_in_payload_we;
wire          main_sdram_bankmachine3_fifo_out_first;
wire          main_sdram_bankmachine3_fifo_out_last;
wire   [22:0] main_sdram_bankmachine3_fifo_out_payload_addr;
wire          main_sdram_bankmachine3_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine3_level = 4'd0;
wire          main_sdram_bankmachine3_pipe_valid_sink_first;
wire          main_sdram_bankmachine3_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine3_pipe_valid_sink_ready;
wire          main_sdram_bankmachine3_pipe_valid_sink_valid;
reg           main_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine3_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine3_pipe_valid_source_ready;
reg           main_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine3_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine3_rdport_adr;
wire   [25:0] main_sdram_bankmachine3_rdport_dat_r;
reg           main_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine3_refresh_req;
reg           main_sdram_bankmachine3_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine3_req_addr;
wire          main_sdram_bankmachine3_req_lock;
reg           main_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine3_req_ready;
wire          main_sdram_bankmachine3_req_valid;
reg           main_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine3_req_we;
reg    [15:0] main_sdram_bankmachine3_row = 16'd0;
reg           main_sdram_bankmachine3_row_close = 1'd0;
reg           main_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine3_row_hit;
reg           main_sdram_bankmachine3_row_open = 1'd0;
reg           main_sdram_bankmachine3_row_opened = 1'd0;
reg           main_sdram_bankmachine3_sink_first = 1'd0;
reg           main_sdram_bankmachine3_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine3_sink_payload_addr;
wire          main_sdram_bankmachine3_sink_payload_we;
wire          main_sdram_bankmachine3_sink_ready;
wire          main_sdram_bankmachine3_sink_sink_first;
wire          main_sdram_bankmachine3_sink_sink_last;
wire   [22:0] main_sdram_bankmachine3_sink_sink_payload_addr;
wire          main_sdram_bankmachine3_sink_sink_payload_we;
wire          main_sdram_bankmachine3_sink_sink_ready;
wire          main_sdram_bankmachine3_sink_sink_valid;
wire          main_sdram_bankmachine3_sink_valid;
wire          main_sdram_bankmachine3_source_first;
wire          main_sdram_bankmachine3_source_last;
wire   [22:0] main_sdram_bankmachine3_source_payload_addr;
wire          main_sdram_bankmachine3_source_payload_we;
wire          main_sdram_bankmachine3_source_ready;
wire          main_sdram_bankmachine3_source_source_first;
wire          main_sdram_bankmachine3_source_source_last;
wire   [22:0] main_sdram_bankmachine3_source_source_payload_addr;
wire          main_sdram_bankmachine3_source_source_payload_we;
wire          main_sdram_bankmachine3_source_source_ready;
wire          main_sdram_bankmachine3_source_source_valid;
wire          main_sdram_bankmachine3_source_valid;
wire   [25:0] main_sdram_bankmachine3_syncfifo3_din;
wire   [25:0] main_sdram_bankmachine3_syncfifo3_dout;
wire          main_sdram_bankmachine3_syncfifo3_re;
wire          main_sdram_bankmachine3_syncfifo3_readable;
wire          main_sdram_bankmachine3_syncfifo3_we;
wire          main_sdram_bankmachine3_syncfifo3_writable;
reg     [2:0] main_sdram_bankmachine3_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine3_trascon_ready = 1'd0;
wire          main_sdram_bankmachine3_trascon_valid;
reg     [2:0] main_sdram_bankmachine3_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine3_trccon_ready = 1'd0;
wire          main_sdram_bankmachine3_trccon_valid;
reg     [2:0] main_sdram_bankmachine3_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine3_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine3_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine3_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine3_wrport_dat_w;
wire          main_sdram_bankmachine3_wrport_we;
reg           main_sdram_bankmachine4_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine4_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine4_cmd_payload_ba;
reg           main_sdram_bankmachine4_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine4_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine4_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine4_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine4_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine4_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine4_cmd_ready = 1'd0;
reg           main_sdram_bankmachine4_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine4_consume = 3'd0;
wire          main_sdram_bankmachine4_do_read;
wire          main_sdram_bankmachine4_fifo_in_first;
wire          main_sdram_bankmachine4_fifo_in_last;
wire   [22:0] main_sdram_bankmachine4_fifo_in_payload_addr;
wire          main_sdram_bankmachine4_fifo_in_payload_we;
wire          main_sdram_bankmachine4_fifo_out_first;
wire          main_sdram_bankmachine4_fifo_out_last;
wire   [22:0] main_sdram_bankmachine4_fifo_out_payload_addr;
wire          main_sdram_bankmachine4_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine4_level = 4'd0;
wire          main_sdram_bankmachine4_pipe_valid_sink_first;
wire          main_sdram_bankmachine4_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine4_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine4_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine4_pipe_valid_sink_ready;
wire          main_sdram_bankmachine4_pipe_valid_sink_valid;
reg           main_sdram_bankmachine4_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine4_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine4_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine4_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine4_pipe_valid_source_ready;
reg           main_sdram_bankmachine4_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine4_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine4_rdport_adr;
wire   [25:0] main_sdram_bankmachine4_rdport_dat_r;
reg           main_sdram_bankmachine4_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine4_refresh_req;
reg           main_sdram_bankmachine4_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine4_req_addr;
wire          main_sdram_bankmachine4_req_lock;
reg           main_sdram_bankmachine4_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine4_req_ready;
wire          main_sdram_bankmachine4_req_valid;
reg           main_sdram_bankmachine4_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine4_req_we;
reg    [15:0] main_sdram_bankmachine4_row = 16'd0;
reg           main_sdram_bankmachine4_row_close = 1'd0;
reg           main_sdram_bankmachine4_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine4_row_hit;
reg           main_sdram_bankmachine4_row_open = 1'd0;
reg           main_sdram_bankmachine4_row_opened = 1'd0;
reg           main_sdram_bankmachine4_sink_first = 1'd0;
reg           main_sdram_bankmachine4_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine4_sink_payload_addr;
wire          main_sdram_bankmachine4_sink_payload_we;
wire          main_sdram_bankmachine4_sink_ready;
wire          main_sdram_bankmachine4_sink_sink_first;
wire          main_sdram_bankmachine4_sink_sink_last;
wire   [22:0] main_sdram_bankmachine4_sink_sink_payload_addr;
wire          main_sdram_bankmachine4_sink_sink_payload_we;
wire          main_sdram_bankmachine4_sink_sink_ready;
wire          main_sdram_bankmachine4_sink_sink_valid;
wire          main_sdram_bankmachine4_sink_valid;
wire          main_sdram_bankmachine4_source_first;
wire          main_sdram_bankmachine4_source_last;
wire   [22:0] main_sdram_bankmachine4_source_payload_addr;
wire          main_sdram_bankmachine4_source_payload_we;
wire          main_sdram_bankmachine4_source_ready;
wire          main_sdram_bankmachine4_source_source_first;
wire          main_sdram_bankmachine4_source_source_last;
wire   [22:0] main_sdram_bankmachine4_source_source_payload_addr;
wire          main_sdram_bankmachine4_source_source_payload_we;
wire          main_sdram_bankmachine4_source_source_ready;
wire          main_sdram_bankmachine4_source_source_valid;
wire          main_sdram_bankmachine4_source_valid;
wire   [25:0] main_sdram_bankmachine4_syncfifo4_din;
wire   [25:0] main_sdram_bankmachine4_syncfifo4_dout;
wire          main_sdram_bankmachine4_syncfifo4_re;
wire          main_sdram_bankmachine4_syncfifo4_readable;
wire          main_sdram_bankmachine4_syncfifo4_we;
wire          main_sdram_bankmachine4_syncfifo4_writable;
reg     [2:0] main_sdram_bankmachine4_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine4_trascon_ready = 1'd0;
wire          main_sdram_bankmachine4_trascon_valid;
reg     [2:0] main_sdram_bankmachine4_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine4_trccon_ready = 1'd0;
wire          main_sdram_bankmachine4_trccon_valid;
reg     [2:0] main_sdram_bankmachine4_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine4_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine4_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine4_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine4_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine4_wrport_dat_w;
wire          main_sdram_bankmachine4_wrport_we;
reg           main_sdram_bankmachine5_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine5_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine5_cmd_payload_ba;
reg           main_sdram_bankmachine5_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine5_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine5_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine5_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine5_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine5_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine5_cmd_ready = 1'd0;
reg           main_sdram_bankmachine5_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine5_consume = 3'd0;
wire          main_sdram_bankmachine5_do_read;
wire          main_sdram_bankmachine5_fifo_in_first;
wire          main_sdram_bankmachine5_fifo_in_last;
wire   [22:0] main_sdram_bankmachine5_fifo_in_payload_addr;
wire          main_sdram_bankmachine5_fifo_in_payload_we;
wire          main_sdram_bankmachine5_fifo_out_first;
wire          main_sdram_bankmachine5_fifo_out_last;
wire   [22:0] main_sdram_bankmachine5_fifo_out_payload_addr;
wire          main_sdram_bankmachine5_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine5_level = 4'd0;
wire          main_sdram_bankmachine5_pipe_valid_sink_first;
wire          main_sdram_bankmachine5_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine5_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine5_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine5_pipe_valid_sink_ready;
wire          main_sdram_bankmachine5_pipe_valid_sink_valid;
reg           main_sdram_bankmachine5_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine5_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine5_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine5_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine5_pipe_valid_source_ready;
reg           main_sdram_bankmachine5_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine5_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine5_rdport_adr;
wire   [25:0] main_sdram_bankmachine5_rdport_dat_r;
reg           main_sdram_bankmachine5_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine5_refresh_req;
reg           main_sdram_bankmachine5_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine5_req_addr;
wire          main_sdram_bankmachine5_req_lock;
reg           main_sdram_bankmachine5_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine5_req_ready;
wire          main_sdram_bankmachine5_req_valid;
reg           main_sdram_bankmachine5_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine5_req_we;
reg    [15:0] main_sdram_bankmachine5_row = 16'd0;
reg           main_sdram_bankmachine5_row_close = 1'd0;
reg           main_sdram_bankmachine5_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine5_row_hit;
reg           main_sdram_bankmachine5_row_open = 1'd0;
reg           main_sdram_bankmachine5_row_opened = 1'd0;
reg           main_sdram_bankmachine5_sink_first = 1'd0;
reg           main_sdram_bankmachine5_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine5_sink_payload_addr;
wire          main_sdram_bankmachine5_sink_payload_we;
wire          main_sdram_bankmachine5_sink_ready;
wire          main_sdram_bankmachine5_sink_sink_first;
wire          main_sdram_bankmachine5_sink_sink_last;
wire   [22:0] main_sdram_bankmachine5_sink_sink_payload_addr;
wire          main_sdram_bankmachine5_sink_sink_payload_we;
wire          main_sdram_bankmachine5_sink_sink_ready;
wire          main_sdram_bankmachine5_sink_sink_valid;
wire          main_sdram_bankmachine5_sink_valid;
wire          main_sdram_bankmachine5_source_first;
wire          main_sdram_bankmachine5_source_last;
wire   [22:0] main_sdram_bankmachine5_source_payload_addr;
wire          main_sdram_bankmachine5_source_payload_we;
wire          main_sdram_bankmachine5_source_ready;
wire          main_sdram_bankmachine5_source_source_first;
wire          main_sdram_bankmachine5_source_source_last;
wire   [22:0] main_sdram_bankmachine5_source_source_payload_addr;
wire          main_sdram_bankmachine5_source_source_payload_we;
wire          main_sdram_bankmachine5_source_source_ready;
wire          main_sdram_bankmachine5_source_source_valid;
wire          main_sdram_bankmachine5_source_valid;
wire   [25:0] main_sdram_bankmachine5_syncfifo5_din;
wire   [25:0] main_sdram_bankmachine5_syncfifo5_dout;
wire          main_sdram_bankmachine5_syncfifo5_re;
wire          main_sdram_bankmachine5_syncfifo5_readable;
wire          main_sdram_bankmachine5_syncfifo5_we;
wire          main_sdram_bankmachine5_syncfifo5_writable;
reg     [2:0] main_sdram_bankmachine5_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine5_trascon_ready = 1'd0;
wire          main_sdram_bankmachine5_trascon_valid;
reg     [2:0] main_sdram_bankmachine5_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine5_trccon_ready = 1'd0;
wire          main_sdram_bankmachine5_trccon_valid;
reg     [2:0] main_sdram_bankmachine5_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine5_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine5_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine5_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine5_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine5_wrport_dat_w;
wire          main_sdram_bankmachine5_wrport_we;
reg           main_sdram_bankmachine6_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine6_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine6_cmd_payload_ba;
reg           main_sdram_bankmachine6_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine6_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine6_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine6_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine6_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine6_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine6_cmd_ready = 1'd0;
reg           main_sdram_bankmachine6_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine6_consume = 3'd0;
wire          main_sdram_bankmachine6_do_read;
wire          main_sdram_bankmachine6_fifo_in_first;
wire          main_sdram_bankmachine6_fifo_in_last;
wire   [22:0] main_sdram_bankmachine6_fifo_in_payload_addr;
wire          main_sdram_bankmachine6_fifo_in_payload_we;
wire          main_sdram_bankmachine6_fifo_out_first;
wire          main_sdram_bankmachine6_fifo_out_last;
wire   [22:0] main_sdram_bankmachine6_fifo_out_payload_addr;
wire          main_sdram_bankmachine6_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine6_level = 4'd0;
wire          main_sdram_bankmachine6_pipe_valid_sink_first;
wire          main_sdram_bankmachine6_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine6_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine6_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine6_pipe_valid_sink_ready;
wire          main_sdram_bankmachine6_pipe_valid_sink_valid;
reg           main_sdram_bankmachine6_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine6_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine6_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine6_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine6_pipe_valid_source_ready;
reg           main_sdram_bankmachine6_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine6_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine6_rdport_adr;
wire   [25:0] main_sdram_bankmachine6_rdport_dat_r;
reg           main_sdram_bankmachine6_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine6_refresh_req;
reg           main_sdram_bankmachine6_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine6_req_addr;
wire          main_sdram_bankmachine6_req_lock;
reg           main_sdram_bankmachine6_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine6_req_ready;
wire          main_sdram_bankmachine6_req_valid;
reg           main_sdram_bankmachine6_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine6_req_we;
reg    [15:0] main_sdram_bankmachine6_row = 16'd0;
reg           main_sdram_bankmachine6_row_close = 1'd0;
reg           main_sdram_bankmachine6_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine6_row_hit;
reg           main_sdram_bankmachine6_row_open = 1'd0;
reg           main_sdram_bankmachine6_row_opened = 1'd0;
reg           main_sdram_bankmachine6_sink_first = 1'd0;
reg           main_sdram_bankmachine6_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine6_sink_payload_addr;
wire          main_sdram_bankmachine6_sink_payload_we;
wire          main_sdram_bankmachine6_sink_ready;
wire          main_sdram_bankmachine6_sink_sink_first;
wire          main_sdram_bankmachine6_sink_sink_last;
wire   [22:0] main_sdram_bankmachine6_sink_sink_payload_addr;
wire          main_sdram_bankmachine6_sink_sink_payload_we;
wire          main_sdram_bankmachine6_sink_sink_ready;
wire          main_sdram_bankmachine6_sink_sink_valid;
wire          main_sdram_bankmachine6_sink_valid;
wire          main_sdram_bankmachine6_source_first;
wire          main_sdram_bankmachine6_source_last;
wire   [22:0] main_sdram_bankmachine6_source_payload_addr;
wire          main_sdram_bankmachine6_source_payload_we;
wire          main_sdram_bankmachine6_source_ready;
wire          main_sdram_bankmachine6_source_source_first;
wire          main_sdram_bankmachine6_source_source_last;
wire   [22:0] main_sdram_bankmachine6_source_source_payload_addr;
wire          main_sdram_bankmachine6_source_source_payload_we;
wire          main_sdram_bankmachine6_source_source_ready;
wire          main_sdram_bankmachine6_source_source_valid;
wire          main_sdram_bankmachine6_source_valid;
wire   [25:0] main_sdram_bankmachine6_syncfifo6_din;
wire   [25:0] main_sdram_bankmachine6_syncfifo6_dout;
wire          main_sdram_bankmachine6_syncfifo6_re;
wire          main_sdram_bankmachine6_syncfifo6_readable;
wire          main_sdram_bankmachine6_syncfifo6_we;
wire          main_sdram_bankmachine6_syncfifo6_writable;
reg     [2:0] main_sdram_bankmachine6_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine6_trascon_ready = 1'd0;
wire          main_sdram_bankmachine6_trascon_valid;
reg     [2:0] main_sdram_bankmachine6_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine6_trccon_ready = 1'd0;
wire          main_sdram_bankmachine6_trccon_valid;
reg     [2:0] main_sdram_bankmachine6_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine6_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine6_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine6_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine6_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine6_wrport_dat_w;
wire          main_sdram_bankmachine6_wrport_we;
reg           main_sdram_bankmachine7_auto_precharge = 1'd0;
reg    [15:0] main_sdram_bankmachine7_cmd_payload_a = 16'd0;
wire    [2:0] main_sdram_bankmachine7_cmd_payload_ba;
reg           main_sdram_bankmachine7_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine7_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine7_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine7_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine7_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine7_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine7_cmd_ready = 1'd0;
reg           main_sdram_bankmachine7_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine7_consume = 3'd0;
wire          main_sdram_bankmachine7_do_read;
wire          main_sdram_bankmachine7_fifo_in_first;
wire          main_sdram_bankmachine7_fifo_in_last;
wire   [22:0] main_sdram_bankmachine7_fifo_in_payload_addr;
wire          main_sdram_bankmachine7_fifo_in_payload_we;
wire          main_sdram_bankmachine7_fifo_out_first;
wire          main_sdram_bankmachine7_fifo_out_last;
wire   [22:0] main_sdram_bankmachine7_fifo_out_payload_addr;
wire          main_sdram_bankmachine7_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine7_level = 4'd0;
wire          main_sdram_bankmachine7_pipe_valid_sink_first;
wire          main_sdram_bankmachine7_pipe_valid_sink_last;
wire   [22:0] main_sdram_bankmachine7_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine7_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine7_pipe_valid_sink_ready;
wire          main_sdram_bankmachine7_pipe_valid_sink_valid;
reg           main_sdram_bankmachine7_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine7_pipe_valid_source_last = 1'd0;
reg    [22:0] main_sdram_bankmachine7_pipe_valid_source_payload_addr = 23'd0;
reg           main_sdram_bankmachine7_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine7_pipe_valid_source_ready;
reg           main_sdram_bankmachine7_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine7_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine7_rdport_adr;
wire   [25:0] main_sdram_bankmachine7_rdport_dat_r;
reg           main_sdram_bankmachine7_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine7_refresh_req;
reg           main_sdram_bankmachine7_replace = 1'd0;
wire   [22:0] main_sdram_bankmachine7_req_addr;
wire          main_sdram_bankmachine7_req_lock;
reg           main_sdram_bankmachine7_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine7_req_ready;
wire          main_sdram_bankmachine7_req_valid;
reg           main_sdram_bankmachine7_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine7_req_we;
reg    [15:0] main_sdram_bankmachine7_row = 16'd0;
reg           main_sdram_bankmachine7_row_close = 1'd0;
reg           main_sdram_bankmachine7_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine7_row_hit;
reg           main_sdram_bankmachine7_row_open = 1'd0;
reg           main_sdram_bankmachine7_row_opened = 1'd0;
reg           main_sdram_bankmachine7_sink_first = 1'd0;
reg           main_sdram_bankmachine7_sink_last = 1'd0;
wire   [22:0] main_sdram_bankmachine7_sink_payload_addr;
wire          main_sdram_bankmachine7_sink_payload_we;
wire          main_sdram_bankmachine7_sink_ready;
wire          main_sdram_bankmachine7_sink_sink_first;
wire          main_sdram_bankmachine7_sink_sink_last;
wire   [22:0] main_sdram_bankmachine7_sink_sink_payload_addr;
wire          main_sdram_bankmachine7_sink_sink_payload_we;
wire          main_sdram_bankmachine7_sink_sink_ready;
wire          main_sdram_bankmachine7_sink_sink_valid;
wire          main_sdram_bankmachine7_sink_valid;
wire          main_sdram_bankmachine7_source_first;
wire          main_sdram_bankmachine7_source_last;
wire   [22:0] main_sdram_bankmachine7_source_payload_addr;
wire          main_sdram_bankmachine7_source_payload_we;
wire          main_sdram_bankmachine7_source_ready;
wire          main_sdram_bankmachine7_source_source_first;
wire          main_sdram_bankmachine7_source_source_last;
wire   [22:0] main_sdram_bankmachine7_source_source_payload_addr;
wire          main_sdram_bankmachine7_source_source_payload_we;
wire          main_sdram_bankmachine7_source_source_ready;
wire          main_sdram_bankmachine7_source_source_valid;
wire          main_sdram_bankmachine7_source_valid;
wire   [25:0] main_sdram_bankmachine7_syncfifo7_din;
wire   [25:0] main_sdram_bankmachine7_syncfifo7_dout;
wire          main_sdram_bankmachine7_syncfifo7_re;
wire          main_sdram_bankmachine7_syncfifo7_readable;
wire          main_sdram_bankmachine7_syncfifo7_we;
wire          main_sdram_bankmachine7_syncfifo7_writable;
reg     [2:0] main_sdram_bankmachine7_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine7_trascon_ready = 1'd0;
wire          main_sdram_bankmachine7_trascon_valid;
reg     [2:0] main_sdram_bankmachine7_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine7_trccon_ready = 1'd0;
wire          main_sdram_bankmachine7_trccon_valid;
reg     [2:0] main_sdram_bankmachine7_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_bankmachine7_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine7_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine7_wrport_adr = 3'd0;
wire   [25:0] main_sdram_bankmachine7_wrport_dat_r;
wire   [25:0] main_sdram_bankmachine7_wrport_dat_w;
wire          main_sdram_bankmachine7_wrport_we;
wire          main_sdram_cas_allowed;
wire          main_sdram_choose_cmd_ce;
wire   [15:0] main_sdram_choose_cmd_cmd_payload_a;
wire    [2:0] main_sdram_choose_cmd_cmd_payload_ba;
reg           main_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          main_sdram_choose_cmd_cmd_payload_is_cmd;
wire          main_sdram_choose_cmd_cmd_payload_is_read;
wire          main_sdram_choose_cmd_cmd_payload_is_write;
reg           main_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           main_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           main_sdram_choose_cmd_cmd_ready = 1'd0;
wire          main_sdram_choose_cmd_cmd_valid;
reg     [2:0] main_sdram_choose_cmd_grant = 3'd0;
wire    [7:0] main_sdram_choose_cmd_request;
reg     [7:0] main_sdram_choose_cmd_valids = 8'd0;
reg           main_sdram_choose_cmd_want_activates = 1'd0;
reg           main_sdram_choose_cmd_want_cmds = 1'd0;
reg           main_sdram_choose_cmd_want_reads = 1'd0;
reg           main_sdram_choose_cmd_want_writes = 1'd0;
wire          main_sdram_choose_req_ce;
wire   [15:0] main_sdram_choose_req_cmd_payload_a;
wire    [2:0] main_sdram_choose_req_cmd_payload_ba;
reg           main_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          main_sdram_choose_req_cmd_payload_is_cmd;
wire          main_sdram_choose_req_cmd_payload_is_read;
wire          main_sdram_choose_req_cmd_payload_is_write;
reg           main_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           main_sdram_choose_req_cmd_payload_we = 1'd0;
reg           main_sdram_choose_req_cmd_ready = 1'd0;
wire          main_sdram_choose_req_cmd_valid;
reg     [2:0] main_sdram_choose_req_grant = 3'd0;
wire    [7:0] main_sdram_choose_req_request;
reg     [7:0] main_sdram_choose_req_valids = 8'd0;
reg           main_sdram_choose_req_want_activates = 1'd0;
reg           main_sdram_choose_req_want_cmds = 1'd0;
reg           main_sdram_choose_req_want_reads = 1'd0;
reg           main_sdram_choose_req_want_writes = 1'd0;
wire          main_sdram_cke;
reg           main_sdram_cmd_last = 1'd0;
reg    [15:0] main_sdram_cmd_payload_a = 16'd0;
reg     [2:0] main_sdram_cmd_payload_ba = 3'd0;
reg           main_sdram_cmd_payload_cas = 1'd0;
reg           main_sdram_cmd_payload_is_read = 1'd0;
reg           main_sdram_cmd_payload_is_write = 1'd0;
reg           main_sdram_cmd_payload_ras = 1'd0;
reg           main_sdram_cmd_payload_we = 1'd0;
reg           main_sdram_cmd_ready = 1'd0;
reg           main_sdram_cmd_valid = 1'd0;
reg           main_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [15:0] main_sdram_csr_dfi_p0_address;
wire    [2:0] main_sdram_csr_dfi_p0_bank;
reg           main_sdram_csr_dfi_p0_cas_n = 1'd1;
reg           main_sdram_csr_dfi_p0_cke = 1'd0;
reg           main_sdram_csr_dfi_p0_cs_n = 1'd1;
reg           main_sdram_csr_dfi_p0_odt = 1'd0;
reg           main_sdram_csr_dfi_p0_ras_n = 1'd1;
reg   [127:0] main_sdram_csr_dfi_p0_rddata = 128'd0;
wire          main_sdram_csr_dfi_p0_rddata_en;
reg           main_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          main_sdram_csr_dfi_p0_reset_n;
reg           main_sdram_csr_dfi_p0_we_n = 1'd1;
wire  [127:0] main_sdram_csr_dfi_p0_wrdata;
wire          main_sdram_csr_dfi_p0_wrdata_en;
wire   [15:0] main_sdram_csr_dfi_p0_wrdata_mask;
reg           main_sdram_csr_dfi_p1_act_n = 1'd1;
wire   [15:0] main_sdram_csr_dfi_p1_address;
wire    [2:0] main_sdram_csr_dfi_p1_bank;
reg           main_sdram_csr_dfi_p1_cas_n = 1'd1;
reg           main_sdram_csr_dfi_p1_cke = 1'd0;
reg           main_sdram_csr_dfi_p1_cs_n = 1'd1;
reg           main_sdram_csr_dfi_p1_odt = 1'd0;
reg           main_sdram_csr_dfi_p1_ras_n = 1'd1;
reg   [127:0] main_sdram_csr_dfi_p1_rddata = 128'd0;
wire          main_sdram_csr_dfi_p1_rddata_en;
reg           main_sdram_csr_dfi_p1_rddata_valid = 1'd0;
wire          main_sdram_csr_dfi_p1_reset_n;
reg           main_sdram_csr_dfi_p1_we_n = 1'd1;
wire  [127:0] main_sdram_csr_dfi_p1_wrdata;
wire          main_sdram_csr_dfi_p1_wrdata_en;
wire   [15:0] main_sdram_csr_dfi_p1_wrdata_mask;
reg           main_sdram_csr_dfi_p2_act_n = 1'd1;
wire   [15:0] main_sdram_csr_dfi_p2_address;
wire    [2:0] main_sdram_csr_dfi_p2_bank;
reg           main_sdram_csr_dfi_p2_cas_n = 1'd1;
reg           main_sdram_csr_dfi_p2_cke = 1'd0;
reg           main_sdram_csr_dfi_p2_cs_n = 1'd1;
reg           main_sdram_csr_dfi_p2_odt = 1'd0;
reg           main_sdram_csr_dfi_p2_ras_n = 1'd1;
reg   [127:0] main_sdram_csr_dfi_p2_rddata = 128'd0;
wire          main_sdram_csr_dfi_p2_rddata_en;
reg           main_sdram_csr_dfi_p2_rddata_valid = 1'd0;
wire          main_sdram_csr_dfi_p2_reset_n;
reg           main_sdram_csr_dfi_p2_we_n = 1'd1;
wire  [127:0] main_sdram_csr_dfi_p2_wrdata;
wire          main_sdram_csr_dfi_p2_wrdata_en;
wire   [15:0] main_sdram_csr_dfi_p2_wrdata_mask;
reg           main_sdram_csr_dfi_p3_act_n = 1'd1;
wire   [15:0] main_sdram_csr_dfi_p3_address;
wire    [2:0] main_sdram_csr_dfi_p3_bank;
reg           main_sdram_csr_dfi_p3_cas_n = 1'd1;
reg           main_sdram_csr_dfi_p3_cke = 1'd0;
reg           main_sdram_csr_dfi_p3_cs_n = 1'd1;
reg           main_sdram_csr_dfi_p3_odt = 1'd0;
reg           main_sdram_csr_dfi_p3_ras_n = 1'd1;
reg   [127:0] main_sdram_csr_dfi_p3_rddata = 128'd0;
wire          main_sdram_csr_dfi_p3_rddata_en;
reg           main_sdram_csr_dfi_p3_rddata_valid = 1'd0;
wire          main_sdram_csr_dfi_p3_reset_n;
reg           main_sdram_csr_dfi_p3_we_n = 1'd1;
wire  [127:0] main_sdram_csr_dfi_p3_wrdata;
wire          main_sdram_csr_dfi_p3_wrdata_en;
wire   [15:0] main_sdram_csr_dfi_p3_wrdata_mask;
reg           main_sdram_dfi_p0_act_n = 1'd1;
reg    [15:0] main_sdram_dfi_p0_address = 16'd0;
reg     [2:0] main_sdram_dfi_p0_bank = 3'd0;
reg           main_sdram_dfi_p0_cas_n = 1'd1;
wire          main_sdram_dfi_p0_cke;
reg           main_sdram_dfi_p0_cs_n = 1'd1;
wire          main_sdram_dfi_p0_odt;
reg           main_sdram_dfi_p0_ras_n = 1'd1;
wire  [127:0] main_sdram_dfi_p0_rddata;
reg           main_sdram_dfi_p0_rddata_en = 1'd0;
wire          main_sdram_dfi_p0_rddata_valid;
wire          main_sdram_dfi_p0_reset_n;
reg           main_sdram_dfi_p0_we_n = 1'd1;
wire  [127:0] main_sdram_dfi_p0_wrdata;
reg           main_sdram_dfi_p0_wrdata_en = 1'd0;
wire   [15:0] main_sdram_dfi_p0_wrdata_mask;
reg           main_sdram_dfi_p1_act_n = 1'd1;
reg    [15:0] main_sdram_dfi_p1_address = 16'd0;
reg     [2:0] main_sdram_dfi_p1_bank = 3'd0;
reg           main_sdram_dfi_p1_cas_n = 1'd1;
wire          main_sdram_dfi_p1_cke;
reg           main_sdram_dfi_p1_cs_n = 1'd1;
wire          main_sdram_dfi_p1_odt;
reg           main_sdram_dfi_p1_ras_n = 1'd1;
wire  [127:0] main_sdram_dfi_p1_rddata;
reg           main_sdram_dfi_p1_rddata_en = 1'd0;
wire          main_sdram_dfi_p1_rddata_valid;
wire          main_sdram_dfi_p1_reset_n;
reg           main_sdram_dfi_p1_we_n = 1'd1;
wire  [127:0] main_sdram_dfi_p1_wrdata;
reg           main_sdram_dfi_p1_wrdata_en = 1'd0;
wire   [15:0] main_sdram_dfi_p1_wrdata_mask;
reg           main_sdram_dfi_p2_act_n = 1'd1;
reg    [15:0] main_sdram_dfi_p2_address = 16'd0;
reg     [2:0] main_sdram_dfi_p2_bank = 3'd0;
reg           main_sdram_dfi_p2_cas_n = 1'd1;
wire          main_sdram_dfi_p2_cke;
reg           main_sdram_dfi_p2_cs_n = 1'd1;
wire          main_sdram_dfi_p2_odt;
reg           main_sdram_dfi_p2_ras_n = 1'd1;
wire  [127:0] main_sdram_dfi_p2_rddata;
reg           main_sdram_dfi_p2_rddata_en = 1'd0;
wire          main_sdram_dfi_p2_rddata_valid;
wire          main_sdram_dfi_p2_reset_n;
reg           main_sdram_dfi_p2_we_n = 1'd1;
wire  [127:0] main_sdram_dfi_p2_wrdata;
reg           main_sdram_dfi_p2_wrdata_en = 1'd0;
wire   [15:0] main_sdram_dfi_p2_wrdata_mask;
reg           main_sdram_dfi_p3_act_n = 1'd1;
reg    [15:0] main_sdram_dfi_p3_address = 16'd0;
reg     [2:0] main_sdram_dfi_p3_bank = 3'd0;
reg           main_sdram_dfi_p3_cas_n = 1'd1;
wire          main_sdram_dfi_p3_cke;
reg           main_sdram_dfi_p3_cs_n = 1'd1;
wire          main_sdram_dfi_p3_odt;
reg           main_sdram_dfi_p3_ras_n = 1'd1;
wire  [127:0] main_sdram_dfi_p3_rddata;
reg           main_sdram_dfi_p3_rddata_en = 1'd0;
wire          main_sdram_dfi_p3_rddata_valid;
wire          main_sdram_dfi_p3_reset_n;
reg           main_sdram_dfi_p3_we_n = 1'd1;
wire  [127:0] main_sdram_dfi_p3_wrdata;
reg           main_sdram_dfi_p3_wrdata_en = 1'd0;
wire   [15:0] main_sdram_dfi_p3_wrdata_mask;
reg           main_sdram_en0 = 1'd0;
reg           main_sdram_en1 = 1'd0;
reg           main_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p0_address = 16'd0;
reg     [2:0] main_sdram_ext_dfi_p0_bank = 3'd0;
reg           main_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           main_sdram_ext_dfi_p0_cke = 1'd0;
reg           main_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           main_sdram_ext_dfi_p0_odt = 1'd0;
reg           main_sdram_ext_dfi_p0_ras_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p0_rddata = 128'd0;
reg           main_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           main_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           main_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           main_sdram_ext_dfi_p0_we_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p0_wrdata = 128'd0;
reg           main_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg    [15:0] main_sdram_ext_dfi_p0_wrdata_mask = 16'd0;
reg           main_sdram_ext_dfi_p1_act_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p1_address = 16'd0;
reg     [2:0] main_sdram_ext_dfi_p1_bank = 3'd0;
reg           main_sdram_ext_dfi_p1_cas_n = 1'd1;
reg           main_sdram_ext_dfi_p1_cke = 1'd0;
reg           main_sdram_ext_dfi_p1_cs_n = 1'd1;
reg           main_sdram_ext_dfi_p1_odt = 1'd0;
reg           main_sdram_ext_dfi_p1_ras_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p1_rddata = 128'd0;
reg           main_sdram_ext_dfi_p1_rddata_en = 1'd0;
reg           main_sdram_ext_dfi_p1_rddata_valid = 1'd0;
reg           main_sdram_ext_dfi_p1_reset_n = 1'd0;
reg           main_sdram_ext_dfi_p1_we_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p1_wrdata = 128'd0;
reg           main_sdram_ext_dfi_p1_wrdata_en = 1'd0;
reg    [15:0] main_sdram_ext_dfi_p1_wrdata_mask = 16'd0;
reg           main_sdram_ext_dfi_p2_act_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p2_address = 16'd0;
reg     [2:0] main_sdram_ext_dfi_p2_bank = 3'd0;
reg           main_sdram_ext_dfi_p2_cas_n = 1'd1;
reg           main_sdram_ext_dfi_p2_cke = 1'd0;
reg           main_sdram_ext_dfi_p2_cs_n = 1'd1;
reg           main_sdram_ext_dfi_p2_odt = 1'd0;
reg           main_sdram_ext_dfi_p2_ras_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p2_rddata = 128'd0;
reg           main_sdram_ext_dfi_p2_rddata_en = 1'd0;
reg           main_sdram_ext_dfi_p2_rddata_valid = 1'd0;
reg           main_sdram_ext_dfi_p2_reset_n = 1'd0;
reg           main_sdram_ext_dfi_p2_we_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p2_wrdata = 128'd0;
reg           main_sdram_ext_dfi_p2_wrdata_en = 1'd0;
reg    [15:0] main_sdram_ext_dfi_p2_wrdata_mask = 16'd0;
reg           main_sdram_ext_dfi_p3_act_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p3_address = 16'd0;
reg     [2:0] main_sdram_ext_dfi_p3_bank = 3'd0;
reg           main_sdram_ext_dfi_p3_cas_n = 1'd1;
reg           main_sdram_ext_dfi_p3_cke = 1'd0;
reg           main_sdram_ext_dfi_p3_cs_n = 1'd1;
reg           main_sdram_ext_dfi_p3_odt = 1'd0;
reg           main_sdram_ext_dfi_p3_ras_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p3_rddata = 128'd0;
reg           main_sdram_ext_dfi_p3_rddata_en = 1'd0;
reg           main_sdram_ext_dfi_p3_rddata_valid = 1'd0;
reg           main_sdram_ext_dfi_p3_reset_n = 1'd0;
reg           main_sdram_ext_dfi_p3_we_n = 1'd1;
reg   [127:0] main_sdram_ext_dfi_p3_wrdata = 128'd0;
reg           main_sdram_ext_dfi_p3_wrdata_en = 1'd0;
reg    [15:0] main_sdram_ext_dfi_p3_wrdata_mask = 16'd0;
reg           main_sdram_ext_dfi_sel = 1'd0;
wire          main_sdram_go_to_refresh;
wire   [22:0] main_sdram_interface_bank0_addr;
wire          main_sdram_interface_bank0_lock;
wire          main_sdram_interface_bank0_rdata_valid;
wire          main_sdram_interface_bank0_ready;
wire          main_sdram_interface_bank0_valid;
wire          main_sdram_interface_bank0_wdata_ready;
wire          main_sdram_interface_bank0_we;
wire   [22:0] main_sdram_interface_bank1_addr;
wire          main_sdram_interface_bank1_lock;
wire          main_sdram_interface_bank1_rdata_valid;
wire          main_sdram_interface_bank1_ready;
wire          main_sdram_interface_bank1_valid;
wire          main_sdram_interface_bank1_wdata_ready;
wire          main_sdram_interface_bank1_we;
wire   [22:0] main_sdram_interface_bank2_addr;
wire          main_sdram_interface_bank2_lock;
wire          main_sdram_interface_bank2_rdata_valid;
wire          main_sdram_interface_bank2_ready;
wire          main_sdram_interface_bank2_valid;
wire          main_sdram_interface_bank2_wdata_ready;
wire          main_sdram_interface_bank2_we;
wire   [22:0] main_sdram_interface_bank3_addr;
wire          main_sdram_interface_bank3_lock;
wire          main_sdram_interface_bank3_rdata_valid;
wire          main_sdram_interface_bank3_ready;
wire          main_sdram_interface_bank3_valid;
wire          main_sdram_interface_bank3_wdata_ready;
wire          main_sdram_interface_bank3_we;
wire   [22:0] main_sdram_interface_bank4_addr;
wire          main_sdram_interface_bank4_lock;
wire          main_sdram_interface_bank4_rdata_valid;
wire          main_sdram_interface_bank4_ready;
wire          main_sdram_interface_bank4_valid;
wire          main_sdram_interface_bank4_wdata_ready;
wire          main_sdram_interface_bank4_we;
wire   [22:0] main_sdram_interface_bank5_addr;
wire          main_sdram_interface_bank5_lock;
wire          main_sdram_interface_bank5_rdata_valid;
wire          main_sdram_interface_bank5_ready;
wire          main_sdram_interface_bank5_valid;
wire          main_sdram_interface_bank5_wdata_ready;
wire          main_sdram_interface_bank5_we;
wire   [22:0] main_sdram_interface_bank6_addr;
wire          main_sdram_interface_bank6_lock;
wire          main_sdram_interface_bank6_rdata_valid;
wire          main_sdram_interface_bank6_ready;
wire          main_sdram_interface_bank6_valid;
wire          main_sdram_interface_bank6_wdata_ready;
wire          main_sdram_interface_bank6_we;
wire   [22:0] main_sdram_interface_bank7_addr;
wire          main_sdram_interface_bank7_lock;
wire          main_sdram_interface_bank7_rdata_valid;
wire          main_sdram_interface_bank7_ready;
wire          main_sdram_interface_bank7_valid;
wire          main_sdram_interface_bank7_wdata_ready;
wire          main_sdram_interface_bank7_we;
wire  [511:0] main_sdram_interface_rdata;
reg   [511:0] main_sdram_interface_wdata = 512'd0;
reg    [63:0] main_sdram_interface_wdata_we = 64'd0;
reg           main_sdram_master_p0_act_n = 1'd1;
reg    [15:0] main_sdram_master_p0_address = 16'd0;
reg     [2:0] main_sdram_master_p0_bank = 3'd0;
reg           main_sdram_master_p0_cas_n = 1'd1;
reg           main_sdram_master_p0_cke = 1'd0;
reg           main_sdram_master_p0_cs_n = 1'd1;
reg           main_sdram_master_p0_odt = 1'd0;
reg           main_sdram_master_p0_ras_n = 1'd1;
wire  [127:0] main_sdram_master_p0_rddata;
reg           main_sdram_master_p0_rddata_en = 1'd0;
wire          main_sdram_master_p0_rddata_valid;
reg           main_sdram_master_p0_reset_n = 1'd0;
reg           main_sdram_master_p0_we_n = 1'd1;
reg   [127:0] main_sdram_master_p0_wrdata = 128'd0;
reg           main_sdram_master_p0_wrdata_en = 1'd0;
reg    [15:0] main_sdram_master_p0_wrdata_mask = 16'd0;
reg           main_sdram_master_p1_act_n = 1'd1;
reg    [15:0] main_sdram_master_p1_address = 16'd0;
reg     [2:0] main_sdram_master_p1_bank = 3'd0;
reg           main_sdram_master_p1_cas_n = 1'd1;
reg           main_sdram_master_p1_cke = 1'd0;
reg           main_sdram_master_p1_cs_n = 1'd1;
reg           main_sdram_master_p1_odt = 1'd0;
reg           main_sdram_master_p1_ras_n = 1'd1;
wire  [127:0] main_sdram_master_p1_rddata;
reg           main_sdram_master_p1_rddata_en = 1'd0;
wire          main_sdram_master_p1_rddata_valid;
reg           main_sdram_master_p1_reset_n = 1'd0;
reg           main_sdram_master_p1_we_n = 1'd1;
reg   [127:0] main_sdram_master_p1_wrdata = 128'd0;
reg           main_sdram_master_p1_wrdata_en = 1'd0;
reg    [15:0] main_sdram_master_p1_wrdata_mask = 16'd0;
reg           main_sdram_master_p2_act_n = 1'd1;
reg    [15:0] main_sdram_master_p2_address = 16'd0;
reg     [2:0] main_sdram_master_p2_bank = 3'd0;
reg           main_sdram_master_p2_cas_n = 1'd1;
reg           main_sdram_master_p2_cke = 1'd0;
reg           main_sdram_master_p2_cs_n = 1'd1;
reg           main_sdram_master_p2_odt = 1'd0;
reg           main_sdram_master_p2_ras_n = 1'd1;
wire  [127:0] main_sdram_master_p2_rddata;
reg           main_sdram_master_p2_rddata_en = 1'd0;
wire          main_sdram_master_p2_rddata_valid;
reg           main_sdram_master_p2_reset_n = 1'd0;
reg           main_sdram_master_p2_we_n = 1'd1;
reg   [127:0] main_sdram_master_p2_wrdata = 128'd0;
reg           main_sdram_master_p2_wrdata_en = 1'd0;
reg    [15:0] main_sdram_master_p2_wrdata_mask = 16'd0;
reg           main_sdram_master_p3_act_n = 1'd1;
reg    [15:0] main_sdram_master_p3_address = 16'd0;
reg     [2:0] main_sdram_master_p3_bank = 3'd0;
reg           main_sdram_master_p3_cas_n = 1'd1;
reg           main_sdram_master_p3_cke = 1'd0;
reg           main_sdram_master_p3_cs_n = 1'd1;
reg           main_sdram_master_p3_odt = 1'd0;
reg           main_sdram_master_p3_ras_n = 1'd1;
wire  [127:0] main_sdram_master_p3_rddata;
reg           main_sdram_master_p3_rddata_en = 1'd0;
wire          main_sdram_master_p3_rddata_valid;
reg           main_sdram_master_p3_reset_n = 1'd0;
reg           main_sdram_master_p3_we_n = 1'd1;
reg   [127:0] main_sdram_master_p3_wrdata = 128'd0;
reg           main_sdram_master_p3_wrdata_en = 1'd0;
reg    [15:0] main_sdram_master_p3_wrdata_mask = 16'd0;
wire          main_sdram_max_time0;
wire          main_sdram_max_time1;
reg    [15:0] main_sdram_nop_a = 16'd0;
reg     [2:0] main_sdram_nop_ba = 3'd0;
wire          main_sdram_odt;
reg           main_sdram_phaseinjector0_address_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector0_address_storage = 16'd0;
reg           main_sdram_phaseinjector0_baddress_re = 1'd0;
reg     [2:0] main_sdram_phaseinjector0_baddress_storage = 3'd0;
wire          main_sdram_phaseinjector0_command_issue_r;
reg           main_sdram_phaseinjector0_command_issue_re = 1'd0;
reg           main_sdram_phaseinjector0_command_issue_w = 1'd0;
reg           main_sdram_phaseinjector0_command_issue_we = 1'd0;
reg           main_sdram_phaseinjector0_command_re = 1'd0;
reg     [7:0] main_sdram_phaseinjector0_command_storage = 8'd0;
wire          main_sdram_phaseinjector0_csrfield_cas;
wire          main_sdram_phaseinjector0_csrfield_cs;
wire          main_sdram_phaseinjector0_csrfield_cs_bottom;
wire          main_sdram_phaseinjector0_csrfield_cs_top;
wire          main_sdram_phaseinjector0_csrfield_ras;
wire          main_sdram_phaseinjector0_csrfield_rden;
wire          main_sdram_phaseinjector0_csrfield_we;
wire          main_sdram_phaseinjector0_csrfield_wren;
reg           main_sdram_phaseinjector0_rddata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector0_rddata_status = 128'd0;
wire          main_sdram_phaseinjector0_rddata_we;
reg           main_sdram_phaseinjector0_wrdata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector0_wrdata_storage = 128'd0;
reg           main_sdram_phaseinjector1_address_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector1_address_storage = 16'd0;
reg           main_sdram_phaseinjector1_baddress_re = 1'd0;
reg     [2:0] main_sdram_phaseinjector1_baddress_storage = 3'd0;
wire          main_sdram_phaseinjector1_command_issue_r;
reg           main_sdram_phaseinjector1_command_issue_re = 1'd0;
reg           main_sdram_phaseinjector1_command_issue_w = 1'd0;
reg           main_sdram_phaseinjector1_command_issue_we = 1'd0;
reg           main_sdram_phaseinjector1_command_re = 1'd0;
reg     [7:0] main_sdram_phaseinjector1_command_storage = 8'd0;
wire          main_sdram_phaseinjector1_csrfield_cas;
wire          main_sdram_phaseinjector1_csrfield_cs;
wire          main_sdram_phaseinjector1_csrfield_cs_bottom;
wire          main_sdram_phaseinjector1_csrfield_cs_top;
wire          main_sdram_phaseinjector1_csrfield_ras;
wire          main_sdram_phaseinjector1_csrfield_rden;
wire          main_sdram_phaseinjector1_csrfield_we;
wire          main_sdram_phaseinjector1_csrfield_wren;
reg           main_sdram_phaseinjector1_rddata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector1_rddata_status = 128'd0;
wire          main_sdram_phaseinjector1_rddata_we;
reg           main_sdram_phaseinjector1_wrdata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector1_wrdata_storage = 128'd0;
reg           main_sdram_phaseinjector2_address_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector2_address_storage = 16'd0;
reg           main_sdram_phaseinjector2_baddress_re = 1'd0;
reg     [2:0] main_sdram_phaseinjector2_baddress_storage = 3'd0;
wire          main_sdram_phaseinjector2_command_issue_r;
reg           main_sdram_phaseinjector2_command_issue_re = 1'd0;
reg           main_sdram_phaseinjector2_command_issue_w = 1'd0;
reg           main_sdram_phaseinjector2_command_issue_we = 1'd0;
reg           main_sdram_phaseinjector2_command_re = 1'd0;
reg     [7:0] main_sdram_phaseinjector2_command_storage = 8'd0;
wire          main_sdram_phaseinjector2_csrfield_cas;
wire          main_sdram_phaseinjector2_csrfield_cs;
wire          main_sdram_phaseinjector2_csrfield_cs_bottom;
wire          main_sdram_phaseinjector2_csrfield_cs_top;
wire          main_sdram_phaseinjector2_csrfield_ras;
wire          main_sdram_phaseinjector2_csrfield_rden;
wire          main_sdram_phaseinjector2_csrfield_we;
wire          main_sdram_phaseinjector2_csrfield_wren;
reg           main_sdram_phaseinjector2_rddata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector2_rddata_status = 128'd0;
wire          main_sdram_phaseinjector2_rddata_we;
reg           main_sdram_phaseinjector2_wrdata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector2_wrdata_storage = 128'd0;
reg           main_sdram_phaseinjector3_address_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector3_address_storage = 16'd0;
reg           main_sdram_phaseinjector3_baddress_re = 1'd0;
reg     [2:0] main_sdram_phaseinjector3_baddress_storage = 3'd0;
wire          main_sdram_phaseinjector3_command_issue_r;
reg           main_sdram_phaseinjector3_command_issue_re = 1'd0;
reg           main_sdram_phaseinjector3_command_issue_w = 1'd0;
reg           main_sdram_phaseinjector3_command_issue_we = 1'd0;
reg           main_sdram_phaseinjector3_command_re = 1'd0;
reg     [7:0] main_sdram_phaseinjector3_command_storage = 8'd0;
wire          main_sdram_phaseinjector3_csrfield_cas;
wire          main_sdram_phaseinjector3_csrfield_cs;
wire          main_sdram_phaseinjector3_csrfield_cs_bottom;
wire          main_sdram_phaseinjector3_csrfield_cs_top;
wire          main_sdram_phaseinjector3_csrfield_ras;
wire          main_sdram_phaseinjector3_csrfield_rden;
wire          main_sdram_phaseinjector3_csrfield_we;
wire          main_sdram_phaseinjector3_csrfield_wren;
reg           main_sdram_phaseinjector3_rddata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector3_rddata_status = 128'd0;
wire          main_sdram_phaseinjector3_rddata_we;
reg           main_sdram_phaseinjector3_wrdata_re = 1'd0;
reg   [127:0] main_sdram_phaseinjector3_wrdata_storage = 128'd0;
reg           main_sdram_postponer_count = 1'd0;
wire          main_sdram_postponer_req_i;
reg           main_sdram_postponer_req_o = 1'd0;
wire          main_sdram_ras_allowed;
wire    [1:0] main_sdram_rdcmdphase;
reg           main_sdram_re = 1'd0;
wire          main_sdram_read_available;
wire          main_sdram_reset_n;
wire          main_sdram_sel;
reg           main_sdram_sequencer_count = 1'd0;
reg     [5:0] main_sdram_sequencer_counter = 6'd0;
wire          main_sdram_sequencer_done0;
reg           main_sdram_sequencer_done1 = 1'd0;
reg           main_sdram_sequencer_start0 = 1'd0;
wire          main_sdram_sequencer_start1;
wire          main_sdram_slave_p0_act_n;
wire   [15:0] main_sdram_slave_p0_address;
wire    [2:0] main_sdram_slave_p0_bank;
wire          main_sdram_slave_p0_cas_n;
wire          main_sdram_slave_p0_cke;
wire          main_sdram_slave_p0_cs_n;
wire          main_sdram_slave_p0_odt;
wire          main_sdram_slave_p0_ras_n;
reg   [127:0] main_sdram_slave_p0_rddata = 128'd0;
wire          main_sdram_slave_p0_rddata_en;
reg           main_sdram_slave_p0_rddata_valid = 1'd0;
wire          main_sdram_slave_p0_reset_n;
wire          main_sdram_slave_p0_we_n;
wire  [127:0] main_sdram_slave_p0_wrdata;
wire          main_sdram_slave_p0_wrdata_en;
wire   [15:0] main_sdram_slave_p0_wrdata_mask;
wire          main_sdram_slave_p1_act_n;
wire   [15:0] main_sdram_slave_p1_address;
wire    [2:0] main_sdram_slave_p1_bank;
wire          main_sdram_slave_p1_cas_n;
wire          main_sdram_slave_p1_cke;
wire          main_sdram_slave_p1_cs_n;
wire          main_sdram_slave_p1_odt;
wire          main_sdram_slave_p1_ras_n;
reg   [127:0] main_sdram_slave_p1_rddata = 128'd0;
wire          main_sdram_slave_p1_rddata_en;
reg           main_sdram_slave_p1_rddata_valid = 1'd0;
wire          main_sdram_slave_p1_reset_n;
wire          main_sdram_slave_p1_we_n;
wire  [127:0] main_sdram_slave_p1_wrdata;
wire          main_sdram_slave_p1_wrdata_en;
wire   [15:0] main_sdram_slave_p1_wrdata_mask;
wire          main_sdram_slave_p2_act_n;
wire   [15:0] main_sdram_slave_p2_address;
wire    [2:0] main_sdram_slave_p2_bank;
wire          main_sdram_slave_p2_cas_n;
wire          main_sdram_slave_p2_cke;
wire          main_sdram_slave_p2_cs_n;
wire          main_sdram_slave_p2_odt;
wire          main_sdram_slave_p2_ras_n;
reg   [127:0] main_sdram_slave_p2_rddata = 128'd0;
wire          main_sdram_slave_p2_rddata_en;
reg           main_sdram_slave_p2_rddata_valid = 1'd0;
wire          main_sdram_slave_p2_reset_n;
wire          main_sdram_slave_p2_we_n;
wire  [127:0] main_sdram_slave_p2_wrdata;
wire          main_sdram_slave_p2_wrdata_en;
wire   [15:0] main_sdram_slave_p2_wrdata_mask;
wire          main_sdram_slave_p3_act_n;
wire   [15:0] main_sdram_slave_p3_address;
wire    [2:0] main_sdram_slave_p3_bank;
wire          main_sdram_slave_p3_cas_n;
wire          main_sdram_slave_p3_cke;
wire          main_sdram_slave_p3_cs_n;
wire          main_sdram_slave_p3_odt;
wire          main_sdram_slave_p3_ras_n;
reg   [127:0] main_sdram_slave_p3_rddata = 128'd0;
wire          main_sdram_slave_p3_rddata_en;
reg           main_sdram_slave_p3_rddata_valid = 1'd0;
wire          main_sdram_slave_p3_reset_n;
wire          main_sdram_slave_p3_we_n;
wire  [127:0] main_sdram_slave_p3_wrdata;
wire          main_sdram_slave_p3_wrdata_en;
wire   [15:0] main_sdram_slave_p3_wrdata_mask;
reg           main_sdram_steerer0 = 1'd1;
reg           main_sdram_steerer1 = 1'd1;
reg           main_sdram_steerer2 = 1'd1;
reg           main_sdram_steerer3 = 1'd1;
reg           main_sdram_steerer4 = 1'd1;
reg           main_sdram_steerer5 = 1'd1;
reg           main_sdram_steerer6 = 1'd1;
reg           main_sdram_steerer7 = 1'd1;
reg     [1:0] main_sdram_steerer_sel0 = 2'd0;
reg     [1:0] main_sdram_steerer_sel1 = 2'd0;
reg     [1:0] main_sdram_steerer_sel2 = 2'd0;
reg     [1:0] main_sdram_steerer_sel3 = 2'd0;
reg     [3:0] main_sdram_storage = 4'd1;
reg           main_sdram_tccdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           main_sdram_tccdcon_ready = 1'd0;
wire          main_sdram_tccdcon_valid;
wire    [2:0] main_sdram_tfawcon_count;
(* dont_touch = "true" *)
reg           main_sdram_tfawcon_ready = 1'd1;
wire          main_sdram_tfawcon_valid;
reg     [4:0] main_sdram_tfawcon_window = 5'd0;
reg     [4:0] main_sdram_time0 = 5'd0;
reg     [3:0] main_sdram_time1 = 4'd0;
wire    [9:0] main_sdram_timer_count0;
reg     [9:0] main_sdram_timer_count1 = 10'd976;
wire          main_sdram_timer_done0;
wire          main_sdram_timer_done1;
wire          main_sdram_timer_wait;
reg           main_sdram_trrdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           main_sdram_trrdcon_ready = 1'd0;
wire          main_sdram_trrdcon_valid;
reg     [2:0] main_sdram_twtrcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_sdram_twtrcon_ready = 1'd0;
wire          main_sdram_twtrcon_valid;
wire          main_sdram_wants_refresh;
wire          main_sdram_wants_zqcs;
wire    [1:0] main_sdram_wrcmdphase;
wire          main_sdram_write_available;
reg     [4:0] main_sdram_zqcs_executer_counter = 5'd0;
reg           main_sdram_zqcs_executer_done = 1'd0;
reg           main_sdram_zqcs_executer_start = 1'd0;
wire   [26:0] main_sdram_zqcs_timer_count0;
reg    [26:0] main_sdram_zqcs_timer_count1 = 27'd124999999;
wire          main_sdram_zqcs_timer_done0;
wire          main_sdram_zqcs_timer_done1;
wire          main_sdram_zqcs_timer_wait;
reg           main_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_soc_rst = 1'd0;
reg           main_socbushandler_adapted_interface_ar_first = 1'd0;
reg           main_socbushandler_adapted_interface_ar_last = 1'd0;
reg           main_socbushandler_adapted_interface_ar_param_dest = 1'd0;
wire          main_socbushandler_adapted_interface_ar_param_id;
reg           main_socbushandler_adapted_interface_ar_param_user = 1'd0;
wire   [31:0] main_socbushandler_adapted_interface_ar_payload_addr;
wire    [1:0] main_socbushandler_adapted_interface_ar_payload_burst;
wire    [3:0] main_socbushandler_adapted_interface_ar_payload_cache;
wire    [7:0] main_socbushandler_adapted_interface_ar_payload_len;
wire          main_socbushandler_adapted_interface_ar_payload_lock;
wire    [2:0] main_socbushandler_adapted_interface_ar_payload_prot;
wire    [3:0] main_socbushandler_adapted_interface_ar_payload_qos;
reg     [3:0] main_socbushandler_adapted_interface_ar_payload_region = 4'd0;
wire    [2:0] main_socbushandler_adapted_interface_ar_payload_size;
reg           main_socbushandler_adapted_interface_ar_ready = 1'd0;
wire          main_socbushandler_adapted_interface_ar_valid;
reg           main_socbushandler_adapted_interface_aw_first = 1'd0;
reg           main_socbushandler_adapted_interface_aw_last = 1'd0;
reg           main_socbushandler_adapted_interface_aw_param_dest = 1'd0;
wire          main_socbushandler_adapted_interface_aw_param_id;
reg           main_socbushandler_adapted_interface_aw_param_user = 1'd0;
wire   [31:0] main_socbushandler_adapted_interface_aw_payload_addr;
wire    [1:0] main_socbushandler_adapted_interface_aw_payload_burst;
wire    [3:0] main_socbushandler_adapted_interface_aw_payload_cache;
wire    [7:0] main_socbushandler_adapted_interface_aw_payload_len;
wire          main_socbushandler_adapted_interface_aw_payload_lock;
wire    [2:0] main_socbushandler_adapted_interface_aw_payload_prot;
wire    [3:0] main_socbushandler_adapted_interface_aw_payload_qos;
reg     [3:0] main_socbushandler_adapted_interface_aw_payload_region = 4'd0;
wire    [2:0] main_socbushandler_adapted_interface_aw_payload_size;
reg           main_socbushandler_adapted_interface_aw_ready = 1'd0;
wire          main_socbushandler_adapted_interface_aw_valid;
wire          main_socbushandler_adapted_interface_b_first;
wire          main_socbushandler_adapted_interface_b_last;
wire          main_socbushandler_adapted_interface_b_param_dest;
wire          main_socbushandler_adapted_interface_b_param_id;
wire          main_socbushandler_adapted_interface_b_param_user;
wire    [1:0] main_socbushandler_adapted_interface_b_payload_resp;
wire          main_socbushandler_adapted_interface_b_ready;
reg           main_socbushandler_adapted_interface_b_valid = 1'd0;
wire          main_socbushandler_adapted_interface_interface0_adapted_interface_ack;
wire   [29:0] main_socbushandler_adapted_interface_interface0_adapted_interface_adr;
reg     [1:0] main_socbushandler_adapted_interface_interface0_adapted_interface_bte = 2'd0;
reg     [2:0] main_socbushandler_adapted_interface_interface0_adapted_interface_cti = 3'd0;
reg           main_socbushandler_adapted_interface_interface0_adapted_interface_cyc = 1'd0;
wire   [31:0] main_socbushandler_adapted_interface_interface0_adapted_interface_dat_r;
reg    [31:0] main_socbushandler_adapted_interface_interface0_adapted_interface_dat_w = 32'd0;
wire          main_socbushandler_adapted_interface_interface0_adapted_interface_err;
reg     [3:0] main_socbushandler_adapted_interface_interface0_adapted_interface_sel = 4'd0;
reg           main_socbushandler_adapted_interface_interface0_adapted_interface_stb = 1'd0;
reg           main_socbushandler_adapted_interface_interface0_adapted_interface_we = 1'd0;
reg           main_socbushandler_adapted_interface_interface1_adapted_interface_ack = 1'd0;
reg    [31:0] main_socbushandler_adapted_interface_interface1_adapted_interface_adr = 32'd0;
wire    [1:0] main_socbushandler_adapted_interface_interface1_adapted_interface_bte;
wire    [2:0] main_socbushandler_adapted_interface_interface1_adapted_interface_cti;
wire          main_socbushandler_adapted_interface_interface1_adapted_interface_cyc;
reg    [31:0] main_socbushandler_adapted_interface_interface1_adapted_interface_dat_r = 32'd0;
wire   [31:0] main_socbushandler_adapted_interface_interface1_adapted_interface_dat_w;
reg           main_socbushandler_adapted_interface_interface1_adapted_interface_err = 1'd0;
wire    [3:0] main_socbushandler_adapted_interface_interface1_adapted_interface_sel;
wire          main_socbushandler_adapted_interface_interface1_adapted_interface_stb;
wire          main_socbushandler_adapted_interface_interface1_adapted_interface_we;
wire          main_socbushandler_adapted_interface_r_first;
wire          main_socbushandler_adapted_interface_r_last;
wire          main_socbushandler_adapted_interface_r_param_dest;
wire          main_socbushandler_adapted_interface_r_param_id;
wire          main_socbushandler_adapted_interface_r_param_user;
wire   [31:0] main_socbushandler_adapted_interface_r_payload_data;
wire    [1:0] main_socbushandler_adapted_interface_r_payload_resp;
wire          main_socbushandler_adapted_interface_r_ready;
reg           main_socbushandler_adapted_interface_r_valid = 1'd0;
reg           main_socbushandler_adapted_interface_w_first = 1'd0;
wire          main_socbushandler_adapted_interface_w_last;
reg           main_socbushandler_adapted_interface_w_param_dest = 1'd0;
reg           main_socbushandler_adapted_interface_w_param_id = 1'd0;
reg           main_socbushandler_adapted_interface_w_param_user = 1'd0;
wire   [31:0] main_socbushandler_adapted_interface_w_payload_data;
wire    [3:0] main_socbushandler_adapted_interface_w_payload_strb;
reg           main_socbushandler_adapted_interface_w_ready = 1'd0;
wire          main_socbushandler_adapted_interface_w_valid;
wire          main_socbushandler_ar_first;
wire          main_socbushandler_ar_last;
wire          main_socbushandler_ar_param_dest;
wire          main_socbushandler_ar_param_id;
wire          main_socbushandler_ar_param_user;
wire   [31:0] main_socbushandler_ar_payload_addr;
wire    [1:0] main_socbushandler_ar_payload_burst;
wire    [3:0] main_socbushandler_ar_payload_cache;
wire    [7:0] main_socbushandler_ar_payload_len;
wire          main_socbushandler_ar_payload_lock;
wire    [2:0] main_socbushandler_ar_payload_prot;
wire    [3:0] main_socbushandler_ar_payload_qos;
wire    [3:0] main_socbushandler_ar_payload_region;
wire    [2:0] main_socbushandler_ar_payload_size;
reg           main_socbushandler_ar_ready = 1'd0;
wire          main_socbushandler_ar_valid;
wire          main_socbushandler_aw_first;
wire          main_socbushandler_aw_last;
wire          main_socbushandler_aw_param_dest;
wire          main_socbushandler_aw_param_id;
wire          main_socbushandler_aw_param_user;
wire   [31:0] main_socbushandler_aw_payload_addr;
wire    [1:0] main_socbushandler_aw_payload_burst;
wire    [3:0] main_socbushandler_aw_payload_cache;
wire    [7:0] main_socbushandler_aw_payload_len;
wire          main_socbushandler_aw_payload_lock;
wire    [2:0] main_socbushandler_aw_payload_prot;
wire    [3:0] main_socbushandler_aw_payload_qos;
wire    [3:0] main_socbushandler_aw_payload_region;
wire    [2:0] main_socbushandler_aw_payload_size;
reg           main_socbushandler_aw_ready = 1'd0;
wire          main_socbushandler_aw_valid;
wire          main_socbushandler_ax_beat_first;
wire          main_socbushandler_ax_beat_last;
wire          main_socbushandler_ax_beat_param_id;
wire   [31:0] main_socbushandler_ax_beat_payload_addr;
reg           main_socbushandler_ax_beat_ready = 1'd0;
wire          main_socbushandler_ax_beat_valid;
reg           main_socbushandler_ax_burst_first = 1'd0;
reg           main_socbushandler_ax_burst_last = 1'd0;
reg           main_socbushandler_ax_burst_param_dest = 1'd0;
reg           main_socbushandler_ax_burst_param_id = 1'd0;
reg           main_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] main_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_socbushandler_ax_burst_payload_len = 8'd0;
reg           main_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] main_socbushandler_ax_burst_payload_size = 3'd0;
wire          main_socbushandler_ax_burst_ready;
reg           main_socbushandler_ax_burst_valid = 1'd0;
reg           main_socbushandler_b_first = 1'd0;
reg           main_socbushandler_b_last = 1'd0;
reg           main_socbushandler_b_param_dest = 1'd0;
reg           main_socbushandler_b_param_id = 1'd0;
reg           main_socbushandler_b_param_user = 1'd0;
reg     [1:0] main_socbushandler_b_payload_resp = 2'd0;
wire          main_socbushandler_b_ready;
reg           main_socbushandler_b_valid = 1'd0;
reg     [7:0] main_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] main_socbushandler_beat_offset = 13'd0;
wire   [11:0] main_socbushandler_beat_size;
wire   [11:0] main_socbushandler_beat_wrap;
wire   [31:0] main_socbushandler_bridge_addr;
reg    [31:0] main_socbushandler_bridge_ar_payload_addr = 32'd0;
wire          main_socbushandler_bridge_ar_ready;
reg           main_socbushandler_bridge_ar_valid = 1'd0;
reg    [31:0] main_socbushandler_bridge_aw_payload_addr = 32'd0;
wire          main_socbushandler_bridge_aw_ready;
reg           main_socbushandler_bridge_aw_valid = 1'd0;
wire    [1:0] main_socbushandler_bridge_b_payload_resp;
reg           main_socbushandler_bridge_b_ready = 1'd0;
wire          main_socbushandler_bridge_b_valid;
reg           main_socbushandler_bridge_cmd_done = 1'd0;
reg           main_socbushandler_bridge_cmd_done_wishbone2axi_next_value0 = 1'd0;
reg           main_socbushandler_bridge_cmd_done_wishbone2axi_next_value_ce0 = 1'd0;
reg           main_socbushandler_bridge_data_done = 1'd0;
reg           main_socbushandler_bridge_data_done_wishbone2axi_next_value1 = 1'd0;
reg           main_socbushandler_bridge_data_done_wishbone2axi_next_value_ce1 = 1'd0;
wire   [31:0] main_socbushandler_bridge_r_payload_data;
wire    [1:0] main_socbushandler_bridge_r_payload_resp;
reg           main_socbushandler_bridge_r_ready = 1'd0;
wire          main_socbushandler_bridge_r_valid;
reg    [31:0] main_socbushandler_bridge_w_payload_data = 32'd0;
reg     [3:0] main_socbushandler_bridge_w_payload_strb = 4'd0;
wire          main_socbushandler_bridge_w_ready;
reg           main_socbushandler_bridge_w_valid = 1'd0;
reg           main_socbushandler_cmd_done = 1'd0;
reg           main_socbushandler_cmd_done_axi2axilite1_next_value0 = 1'd0;
reg           main_socbushandler_cmd_done_axi2axilite1_next_value_ce0 = 1'd0;
reg           main_socbushandler_count = 1'd0;
reg    [63:0] main_socbushandler_dat_r = 64'd0;
wire          main_socbushandler_done;
reg           main_socbushandler_last_ar_aw_n = 1'd0;
reg           main_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 = 1'd0;
reg           main_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 = 1'd0;
wire          main_socbushandler_pipe_valid_sink_first;
wire          main_socbushandler_pipe_valid_sink_last;
wire          main_socbushandler_pipe_valid_sink_param_dest;
wire          main_socbushandler_pipe_valid_sink_param_id;
wire          main_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] main_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] main_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] main_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] main_socbushandler_pipe_valid_sink_payload_len;
wire          main_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] main_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] main_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] main_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] main_socbushandler_pipe_valid_sink_payload_size;
wire          main_socbushandler_pipe_valid_sink_ready;
wire          main_socbushandler_pipe_valid_sink_valid;
reg           main_socbushandler_pipe_valid_source_first = 1'd0;
reg           main_socbushandler_pipe_valid_source_last = 1'd0;
reg           main_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           main_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           main_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           main_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          main_socbushandler_pipe_valid_source_ready;
reg           main_socbushandler_pipe_valid_source_valid = 1'd0;
reg           main_socbushandler_r_first = 1'd0;
reg           main_socbushandler_r_last = 1'd0;
reg           main_socbushandler_r_param_dest = 1'd0;
reg           main_socbushandler_r_param_id = 1'd0;
reg           main_socbushandler_r_param_user = 1'd0;
reg    [31:0] main_socbushandler_r_payload_data = 32'd0;
reg     [1:0] main_socbushandler_r_payload_resp = 2'd0;
wire          main_socbushandler_r_ready;
reg           main_socbushandler_r_valid = 1'd0;
wire          main_socbushandler_sink_sink_first;
wire          main_socbushandler_sink_sink_last;
wire          main_socbushandler_sink_sink_param_dest;
wire          main_socbushandler_sink_sink_param_id;
wire          main_socbushandler_sink_sink_param_user;
wire   [31:0] main_socbushandler_sink_sink_payload_addr;
wire    [1:0] main_socbushandler_sink_sink_payload_burst;
wire    [3:0] main_socbushandler_sink_sink_payload_cache;
wire    [7:0] main_socbushandler_sink_sink_payload_len;
wire          main_socbushandler_sink_sink_payload_lock;
wire    [2:0] main_socbushandler_sink_sink_payload_prot;
wire    [3:0] main_socbushandler_sink_sink_payload_qos;
wire    [3:0] main_socbushandler_sink_sink_payload_region;
wire    [2:0] main_socbushandler_sink_sink_payload_size;
wire          main_socbushandler_sink_sink_ready;
wire          main_socbushandler_sink_sink_valid;
reg           main_socbushandler_skip = 1'd0;
wire          main_socbushandler_source_source_first;
wire          main_socbushandler_source_source_last;
wire          main_socbushandler_source_source_param_dest;
wire          main_socbushandler_source_source_param_id;
wire          main_socbushandler_source_source_param_user;
wire   [31:0] main_socbushandler_source_source_payload_addr;
wire    [1:0] main_socbushandler_source_source_payload_burst;
wire    [3:0] main_socbushandler_source_source_payload_cache;
wire    [7:0] main_socbushandler_source_source_payload_len;
wire          main_socbushandler_source_source_payload_lock;
wire    [2:0] main_socbushandler_source_source_payload_prot;
wire    [3:0] main_socbushandler_source_source_payload_qos;
wire    [3:0] main_socbushandler_source_source_payload_region;
wire    [2:0] main_socbushandler_source_source_payload_size;
reg           main_socbushandler_source_source_ready = 1'd0;
wire          main_socbushandler_source_source_valid;
wire          main_socbushandler_w_first;
wire          main_socbushandler_w_last;
wire          main_socbushandler_w_param_dest;
wire          main_socbushandler_w_param_id;
wire          main_socbushandler_w_param_user;
wire   [31:0] main_socbushandler_w_payload_data;
wire    [3:0] main_socbushandler_w_payload_strb;
reg           main_socbushandler_w_ready = 1'd0;
wire          main_socbushandler_w_valid;
reg     [1:0] main_storage = 2'd0;
reg           main_timer_en_re = 1'd0;
reg           main_timer_en_storage = 1'd0;
reg           main_timer_enable_re = 1'd0;
reg           main_timer_enable_storage = 1'd0;
wire          main_timer_irq;
reg           main_timer_load_re = 1'd0;
reg    [31:0] main_timer_load_storage = 32'd0;
reg           main_timer_pending_r = 1'd0;
reg           main_timer_pending_re = 1'd0;
reg           main_timer_pending_status = 1'd0;
wire          main_timer_pending_we;
reg           main_timer_reload_re = 1'd0;
reg    [31:0] main_timer_reload_storage = 32'd0;
reg           main_timer_status_re = 1'd0;
reg           main_timer_status_status = 1'd0;
wire          main_timer_status_we;
reg           main_timer_update_value_re = 1'd0;
reg           main_timer_update_value_storage = 1'd0;
reg    [31:0] main_timer_value = 32'd0;
reg           main_timer_value_re = 1'd0;
reg    [31:0] main_timer_value_status = 32'd0;
wire          main_timer_value_we;
wire          main_timer_zero0;
wire          main_timer_zero1;
wire          main_timer_zero2;
reg           main_timer_zero_clear = 1'd0;
reg           main_timer_zero_pending = 1'd0;
wire          main_timer_zero_status;
wire          main_timer_zero_trigger;
reg           main_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_tx_count = 4'd0;
reg     [3:0] main_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_tx_data = 8'd0;
reg     [7:0] main_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_tx_enable = 1'd0;
reg    [31:0] main_tx_phase = 32'd0;
wire          main_tx_sink_first;
wire          main_tx_sink_last;
wire    [7:0] main_tx_sink_payload_data;
reg           main_tx_sink_ready = 1'd0;
wire          main_tx_sink_valid;
reg           main_tx_tick = 1'd0;
reg           main_uart_enable_re = 1'd0;
reg     [1:0] main_uart_enable_storage = 2'd0;
wire          main_uart_irq;
reg     [1:0] main_uart_pending_r = 2'd0;
reg           main_uart_pending_re = 1'd0;
reg     [1:0] main_uart_pending_status = 2'd0;
wire          main_uart_pending_we;
wire          main_uart_rx0;
wire          main_uart_rx1;
wire          main_uart_rx2;
reg           main_uart_rx_clear = 1'd0;
reg     [3:0] main_uart_rx_fifo_consume = 4'd0;
wire          main_uart_rx_fifo_do_read;
wire          main_uart_rx_fifo_fifo_in_first;
wire          main_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_uart_rx_fifo_fifo_in_payload_data;
wire          main_uart_rx_fifo_fifo_out_first;
wire          main_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_uart_rx_fifo_level1;
reg     [3:0] main_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_uart_rx_fifo_rdport_adr;
wire    [9:0] main_uart_rx_fifo_rdport_dat_r;
wire          main_uart_rx_fifo_rdport_re;
wire          main_uart_rx_fifo_re;
reg           main_uart_rx_fifo_readable = 1'd0;
reg           main_uart_rx_fifo_replace = 1'd0;
wire          main_uart_rx_fifo_sink_first;
wire          main_uart_rx_fifo_sink_last;
wire    [7:0] main_uart_rx_fifo_sink_payload_data;
wire          main_uart_rx_fifo_sink_ready;
wire          main_uart_rx_fifo_sink_valid;
wire          main_uart_rx_fifo_source_first;
wire          main_uart_rx_fifo_source_last;
wire    [7:0] main_uart_rx_fifo_source_payload_data;
wire          main_uart_rx_fifo_source_ready;
wire          main_uart_rx_fifo_source_valid;
wire    [9:0] main_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_uart_rx_fifo_syncfifo_dout;
wire          main_uart_rx_fifo_syncfifo_re;
wire          main_uart_rx_fifo_syncfifo_readable;
wire          main_uart_rx_fifo_syncfifo_we;
wire          main_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_uart_rx_fifo_wrport_dat_w;
wire          main_uart_rx_fifo_wrport_we;
reg           main_uart_rx_pending = 1'd0;
wire          main_uart_rx_status;
wire          main_uart_rx_trigger;
reg           main_uart_rx_trigger_d = 1'd0;
reg           main_uart_rxempty_re = 1'd0;
wire          main_uart_rxempty_status;
wire          main_uart_rxempty_we;
reg           main_uart_rxfull_re = 1'd0;
wire          main_uart_rxfull_status;
wire          main_uart_rxfull_we;
wire    [7:0] main_uart_rxtx_r;
reg           main_uart_rxtx_re = 1'd0;
wire    [7:0] main_uart_rxtx_w;
reg           main_uart_rxtx_we = 1'd0;
reg           main_uart_status_re = 1'd0;
reg     [1:0] main_uart_status_status = 2'd0;
wire          main_uart_status_we;
wire          main_uart_tx0;
wire          main_uart_tx1;
wire          main_uart_tx2;
reg           main_uart_tx_clear = 1'd0;
reg     [3:0] main_uart_tx_fifo_consume = 4'd0;
wire          main_uart_tx_fifo_do_read;
wire          main_uart_tx_fifo_fifo_in_first;
wire          main_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_uart_tx_fifo_fifo_in_payload_data;
wire          main_uart_tx_fifo_fifo_out_first;
wire          main_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_uart_tx_fifo_level1;
reg     [3:0] main_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_uart_tx_fifo_rdport_adr;
wire    [9:0] main_uart_tx_fifo_rdport_dat_r;
wire          main_uart_tx_fifo_rdport_re;
wire          main_uart_tx_fifo_re;
reg           main_uart_tx_fifo_readable = 1'd0;
reg           main_uart_tx_fifo_replace = 1'd0;
reg           main_uart_tx_fifo_sink_first = 1'd0;
reg           main_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_uart_tx_fifo_sink_payload_data;
wire          main_uart_tx_fifo_sink_ready;
wire          main_uart_tx_fifo_sink_valid;
wire          main_uart_tx_fifo_source_first;
wire          main_uart_tx_fifo_source_last;
wire    [7:0] main_uart_tx_fifo_source_payload_data;
wire          main_uart_tx_fifo_source_ready;
wire          main_uart_tx_fifo_source_valid;
wire    [9:0] main_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_uart_tx_fifo_syncfifo_dout;
wire          main_uart_tx_fifo_syncfifo_re;
wire          main_uart_tx_fifo_syncfifo_readable;
wire          main_uart_tx_fifo_syncfifo_we;
wire          main_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_uart_tx_fifo_wrport_dat_w;
wire          main_uart_tx_fifo_wrport_we;
reg           main_uart_tx_pending = 1'd0;
wire          main_uart_tx_status;
wire          main_uart_tx_trigger;
reg           main_uart_tx_trigger_d = 1'd0;
reg           main_uart_txempty_re = 1'd0;
wire          main_uart_txempty_status;
wire          main_uart_txempty_we;
reg           main_uart_txfull_re = 1'd0;
wire          main_uart_txfull_status;
wire          main_uart_txfull_we;
wire          main_uart_uart_sink_first;
wire          main_uart_uart_sink_last;
wire    [7:0] main_uart_uart_sink_payload_data;
wire          main_uart_uart_sink_ready;
wire          main_uart_uart_sink_valid;
wire          main_uart_uart_source_first;
wire          main_uart_uart_source_last;
wire    [7:0] main_uart_uart_source_payload_data;
wire          main_uart_uart_source_ready;
wire          main_uart_uart_source_valid;
wire          main_v7_1000basex0;
wire          main_v7_1000basex1;
wire          main_v7_1000basex10;
wire          main_v7_1000basex11;
wire          main_v7_1000basex12;
wire          main_v7_1000basex13;
wire          main_v7_1000basex14;
wire          main_v7_1000basex15;
wire          main_v7_1000basex16;
wire          main_v7_1000basex17;
wire          main_v7_1000basex18;
wire          main_v7_1000basex19;
wire          main_v7_1000basex2;
wire          main_v7_1000basex20;
wire          main_v7_1000basex21;
wire          main_v7_1000basex22;
wire          main_v7_1000basex23;
wire          main_v7_1000basex24;
wire          main_v7_1000basex25;
wire          main_v7_1000basex26;
wire          main_v7_1000basex27;
wire          main_v7_1000basex28;
wire          main_v7_1000basex29;
wire          main_v7_1000basex3;
wire          main_v7_1000basex30;
wire          main_v7_1000basex31;
wire          main_v7_1000basex32;
wire          main_v7_1000basex33;
wire          main_v7_1000basex34;
wire          main_v7_1000basex35;
wire          main_v7_1000basex36;
wire          main_v7_1000basex37;
wire          main_v7_1000basex38;
wire          main_v7_1000basex39;
wire          main_v7_1000basex4;
wire          main_v7_1000basex40;
wire          main_v7_1000basex41;
wire          main_v7_1000basex42;
wire          main_v7_1000basex43;
wire          main_v7_1000basex44;
wire          main_v7_1000basex45;
wire          main_v7_1000basex46;
wire          main_v7_1000basex47;
wire          main_v7_1000basex48;
wire          main_v7_1000basex49;
wire          main_v7_1000basex5;
wire          main_v7_1000basex50;
wire          main_v7_1000basex51;
wire          main_v7_1000basex52;
wire          main_v7_1000basex6;
wire          main_v7_1000basex7;
wire          main_v7_1000basex8;
wire          main_v7_1000basex9;
reg    [19:0] main_v7_1000basex_buf = 20'd0;
reg    [12:0] main_v7_1000basex_cdr_lock_counter = 13'd0;
reg           main_v7_1000basex_cdr_locked = 1'd0;
reg           main_v7_1000basex_gthrxinit_Xxdlysreset0 = 1'd0;
reg           main_v7_1000basex_gthrxinit_Xxdlysreset1 = 1'd0;
reg           main_v7_1000basex_gthrxinit_Xxdlysresetdone0 = 1'd0;
wire          main_v7_1000basex_gthrxinit_Xxdlysresetdone1;
reg           main_v7_1000basex_gthrxinit_Xxphaligndone0 = 1'd0;
wire          main_v7_1000basex_gthrxinit_Xxphaligndone1;
reg           main_v7_1000basex_gthrxinit_Xxphaligndone_r = 1'd1;
wire          main_v7_1000basex_gthrxinit_Xxphaligndone_rising;
wire          main_v7_1000basex_gthrxinit_Xxresetdone0;
wire          main_v7_1000basex_gthrxinit_Xxresetdone1;
reg           main_v7_1000basex_gthrxinit_Xxuserrdy0 = 1'd0;
reg           main_v7_1000basex_gthrxinit_Xxuserrdy1 = 1'd0;
reg    [10:0] main_v7_1000basex_gthrxinit_cdr_lock_timer_count = 11'd1024;
wire          main_v7_1000basex_gthrxinit_cdr_lock_timer_done;
reg           main_v7_1000basex_gthrxinit_cdr_lock_timer_wait = 1'd0;
reg           main_v7_1000basex_gthrxinit_done = 1'd0;
reg           main_v7_1000basex_gthrxinit_drp_done = 1'd1;
reg           main_v7_1000basex_gthrxinit_drp_start = 1'd0;
reg           main_v7_1000basex_gthrxinit_gtXxpd0 = 1'd0;
reg           main_v7_1000basex_gthrxinit_gtXxpd1 = 1'd0;
reg           main_v7_1000basex_gthrxinit_gtXxreset0 = 1'd0;
reg           main_v7_1000basex_gthrxinit_gtXxreset1 = 1'd0;
wire          main_v7_1000basex_gthrxinit_plllock0;
wire          main_v7_1000basex_gthrxinit_plllock1;
reg           main_v7_1000basex_gthrxinit_pllreset = 1'd0;
wire          main_v7_1000basex_gthrxinit_reset;
wire          main_v7_1000basex_gthrxinit_restart;
reg    [16:0] main_v7_1000basex_gthrxinit_watchdog_count = 17'd125000;
wire          main_v7_1000basex_gthrxinit_watchdog_done;
wire          main_v7_1000basex_gthrxinit_watchdog_wait;
reg           main_v7_1000basex_gthtxinit_Xxdlysreset0 = 1'd0;
reg           main_v7_1000basex_gthtxinit_Xxdlysreset1 = 1'd0;
reg           main_v7_1000basex_gthtxinit_Xxdlysresetdone0 = 1'd0;
wire          main_v7_1000basex_gthtxinit_Xxdlysresetdone1;
reg           main_v7_1000basex_gthtxinit_Xxphaligndone0 = 1'd0;
wire          main_v7_1000basex_gthtxinit_Xxphaligndone1;
reg           main_v7_1000basex_gthtxinit_Xxphaligndone_r = 1'd1;
wire          main_v7_1000basex_gthtxinit_Xxphaligndone_rising;
wire          main_v7_1000basex_gthtxinit_Xxresetdone0;
wire          main_v7_1000basex_gthtxinit_Xxresetdone1;
reg           main_v7_1000basex_gthtxinit_Xxuserrdy0 = 1'd0;
reg           main_v7_1000basex_gthtxinit_Xxuserrdy1 = 1'd0;
reg    [10:0] main_v7_1000basex_gthtxinit_cdr_lock_timer_count = 11'd1024;
wire          main_v7_1000basex_gthtxinit_cdr_lock_timer_done;
reg           main_v7_1000basex_gthtxinit_cdr_lock_timer_wait = 1'd0;
reg           main_v7_1000basex_gthtxinit_done = 1'd0;
reg           main_v7_1000basex_gthtxinit_drp_done = 1'd1;
reg           main_v7_1000basex_gthtxinit_drp_start = 1'd0;
reg           main_v7_1000basex_gthtxinit_gtXxpd0 = 1'd0;
reg           main_v7_1000basex_gthtxinit_gtXxpd1 = 1'd0;
reg           main_v7_1000basex_gthtxinit_gtXxreset0 = 1'd0;
reg           main_v7_1000basex_gthtxinit_gtXxreset1 = 1'd0;
wire          main_v7_1000basex_gthtxinit_plllock0;
wire          main_v7_1000basex_gthtxinit_plllock1;
reg           main_v7_1000basex_gthtxinit_pllreset = 1'd0;
wire          main_v7_1000basex_gthtxinit_reset;
reg           main_v7_1000basex_gthtxinit_restart = 1'd0;
reg    [16:0] main_v7_1000basex_gthtxinit_watchdog_count = 17'd125000;
wire          main_v7_1000basex_gthtxinit_watchdog_done;
wire          main_v7_1000basex_gthtxinit_watchdog_wait;
wire          main_v7_1000basex_i;
wire          main_v7_1000basex_o;
reg           main_v7_1000basex_pcs_autoneg_ack = 1'd0;
reg     [2:0] main_v7_1000basex_pcs_c_counter = 3'd0;
reg    [19:0] main_v7_1000basex_pcs_checker_counter = 20'd0;
reg           main_v7_1000basex_pcs_checker_ok = 1'd0;
reg           main_v7_1000basex_pcs_checker_tick = 1'd0;
wire          main_v7_1000basex_pcs_is_sgmii;
reg           main_v7_1000basex_pcs_link_up = 1'd0;
wire          main_v7_1000basex_pcs_linkdown;
reg     [7:0] main_v7_1000basex_pcs_lp_abi_count = 8'd128;
wire          main_v7_1000basex_pcs_lp_abi_done;
reg    [15:0] main_v7_1000basex_pcs_lp_abi_i = 16'd0;
(* dont_touch = "true" *)
reg    [15:0] main_v7_1000basex_pcs_lp_abi_ibuffer = 16'd0;
reg    [15:0] main_v7_1000basex_pcs_lp_abi_o = 16'd0;
wire   [15:0] main_v7_1000basex_pcs_lp_abi_obuffer;
wire          main_v7_1000basex_pcs_lp_abi_ping_i;
wire          main_v7_1000basex_pcs_lp_abi_ping_o0;
reg           main_v7_1000basex_pcs_lp_abi_ping_o1 = 1'd0;
reg           main_v7_1000basex_pcs_lp_abi_ping_toggle_i = 1'd0;
wire          main_v7_1000basex_pcs_lp_abi_ping_toggle_o;
reg           main_v7_1000basex_pcs_lp_abi_ping_toggle_o_r = 1'd0;
wire          main_v7_1000basex_pcs_lp_abi_pong_i;
wire          main_v7_1000basex_pcs_lp_abi_pong_o;
reg           main_v7_1000basex_pcs_lp_abi_pong_toggle_i = 1'd0;
wire          main_v7_1000basex_pcs_lp_abi_pong_toggle_o;
reg           main_v7_1000basex_pcs_lp_abi_pong_toggle_o_r = 1'd0;
reg           main_v7_1000basex_pcs_lp_abi_starter = 1'd1;
wire          main_v7_1000basex_pcs_lp_abi_wait;
wire    [5:0] main_v7_1000basex_pcs_pcsrx_adr;
reg           main_v7_1000basex_pcs_pcsrx_ce = 1'd1;
reg     [2:0] main_v7_1000basex_pcs_pcsrx_code3b = 3'd0;
wire    [4:0] main_v7_1000basex_pcs_pcsrx_code5b;
reg    [15:0] main_v7_1000basex_pcs_pcsrx_config_reg = 16'd0;
reg     [7:0] main_v7_1000basex_pcs_pcsrx_config_reg_lsb = 8'd0;
wire    [7:0] main_v7_1000basex_pcs_pcsrx_d;
wire    [4:0] main_v7_1000basex_pcs_pcsrx_dat_r;
reg           main_v7_1000basex_pcs_pcsrx_first_preamble_byte = 1'd0;
wire    [9:0] main_v7_1000basex_pcs_pcsrx_input;
reg     [9:0] main_v7_1000basex_pcs_pcsrx_input_msb_first = 10'd0;
wire          main_v7_1000basex_pcs_pcsrx_invalid;
reg           main_v7_1000basex_pcs_pcsrx_k = 1'd0;
reg           main_v7_1000basex_pcs_pcsrx_load_config_reg_lsb = 1'd0;
reg           main_v7_1000basex_pcs_pcsrx_load_config_reg_msb = 1'd0;
reg     [3:0] main_v7_1000basex_pcs_pcsrx_ones = 4'd0;
wire          main_v7_1000basex_pcs_pcsrx_re;
wire    [7:0] main_v7_1000basex_pcs_pcsrx_rx_data;
reg           main_v7_1000basex_pcs_pcsrx_rx_en = 1'd0;
wire          main_v7_1000basex_pcs_pcsrx_sample_en;
reg           main_v7_1000basex_pcs_pcsrx_seen_config_reg = 1'd0;
reg           main_v7_1000basex_pcs_pcsrx_seen_valid_ci = 1'd0;
wire    [1:0] main_v7_1000basex_pcs_pcsrx_sgmii_speed;
reg     [9:0] main_v7_1000basex_pcs_pcsrx_timer = 10'd0;
reg           main_v7_1000basex_pcs_pcsrx_timer_en = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_alt7_rd0 = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_alt7_rd1 = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_c_type = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value_ce = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_ce0 = 1'd1;
wire          main_v7_1000basex_pcs_pcstx_ce1;
reg     [3:0] main_v7_1000basex_pcs_pcstx_code4b = 4'd0;
reg           main_v7_1000basex_pcs_pcstx_code4b_flip = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_code4b_unbalanced = 1'd0;
reg     [5:0] main_v7_1000basex_pcs_pcstx_code6b = 6'd0;
reg           main_v7_1000basex_pcs_pcstx_code6b_flip = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_code6b_unbalanced = 1'd0;
wire   [15:0] main_v7_1000basex_pcs_pcstx_config_reg;
reg    [15:0] main_v7_1000basex_pcs_pcstx_config_reg_buffer = 16'd0;
reg           main_v7_1000basex_pcs_pcstx_config_valid = 1'd0;
reg     [7:0] main_v7_1000basex_pcs_pcstx_d0 = 8'd0;
wire    [7:0] main_v7_1000basex_pcs_pcstx_d1;
reg           main_v7_1000basex_pcs_pcstx_disp_in = 1'd0;
wire          main_v7_1000basex_pcs_pcstx_disp_inter;
reg           main_v7_1000basex_pcs_pcstx_disp_out = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_disparity = 1'd0;
reg           main_v7_1000basex_pcs_pcstx_k0 = 1'd0;
wire          main_v7_1000basex_pcs_pcstx_k1;
reg           main_v7_1000basex_pcs_pcstx_load_config_reg_buffer = 1'd0;
reg     [9:0] main_v7_1000basex_pcs_pcstx_output0 = 10'd0;
reg     [9:0] main_v7_1000basex_pcs_pcstx_output1 = 10'd0;
reg     [3:0] main_v7_1000basex_pcs_pcstx_output_4b = 4'd0;
reg     [5:0] main_v7_1000basex_pcs_pcstx_output_6b = 6'd0;
wire    [9:0] main_v7_1000basex_pcs_pcstx_output_msb_first;
reg           main_v7_1000basex_pcs_pcstx_parity = 1'd0;
wire    [1:0] main_v7_1000basex_pcs_pcstx_sgmii_speed;
reg     [9:0] main_v7_1000basex_pcs_pcstx_timer = 10'd0;
reg           main_v7_1000basex_pcs_pcstx_timer_en = 1'd0;
wire    [7:0] main_v7_1000basex_pcs_pcstx_tx_data;
reg           main_v7_1000basex_pcs_pcstx_tx_ready = 1'd0;
wire          main_v7_1000basex_pcs_pcstx_tx_valid;
reg    [15:0] main_v7_1000basex_pcs_prev_config_reg = 16'd0;
reg           main_v7_1000basex_pcs_restart = 1'd0;
reg           main_v7_1000basex_pcs_rx_config_reg_abi_i = 1'd0;
wire          main_v7_1000basex_pcs_rx_config_reg_abi_o;
reg           main_v7_1000basex_pcs_rx_config_reg_abi_toggle_i = 1'd0;
wire          main_v7_1000basex_pcs_rx_config_reg_abi_toggle_o;
reg           main_v7_1000basex_pcs_rx_config_reg_abi_toggle_o_r = 1'd0;
reg           main_v7_1000basex_pcs_rx_config_reg_ack_i = 1'd0;
wire          main_v7_1000basex_pcs_rx_config_reg_ack_o;
reg           main_v7_1000basex_pcs_rx_config_reg_ack_toggle_i = 1'd0;
wire          main_v7_1000basex_pcs_rx_config_reg_ack_toggle_o;
reg           main_v7_1000basex_pcs_rx_config_reg_ack_toggle_o_r = 1'd0;
reg           main_v7_1000basex_pcs_rx_en_d = 1'd0;
wire          main_v7_1000basex_pcs_seen_valid_ci_i;
wire          main_v7_1000basex_pcs_seen_valid_ci_o;
reg           main_v7_1000basex_pcs_seen_valid_ci_toggle_i = 1'd0;
wire          main_v7_1000basex_pcs_seen_valid_ci_toggle_o;
reg           main_v7_1000basex_pcs_seen_valid_ci_toggle_o_r = 1'd0;
wire          main_v7_1000basex_pcs_sink_first;
wire          main_v7_1000basex_pcs_sink_last;
wire    [7:0] main_v7_1000basex_pcs_sink_payload_data;
wire          main_v7_1000basex_pcs_sink_payload_error;
wire          main_v7_1000basex_pcs_sink_payload_last_be;
wire          main_v7_1000basex_pcs_sink_ready;
wire          main_v7_1000basex_pcs_sink_valid;
reg           main_v7_1000basex_pcs_source_first = 1'd0;
wire          main_v7_1000basex_pcs_source_last;
reg     [7:0] main_v7_1000basex_pcs_source_payload_data = 8'd0;
reg           main_v7_1000basex_pcs_source_payload_error = 1'd0;
reg           main_v7_1000basex_pcs_source_payload_last_be = 1'd0;
wire          main_v7_1000basex_pcs_source_ready;
reg           main_v7_1000basex_pcs_source_valid = 1'd0;
reg           main_v7_1000basex_pcs_tx_config_empty = 1'd0;
reg    [20:0] main_v7_1000basex_pcs_waittimer0_count = 21'd1250000;
wire          main_v7_1000basex_pcs_waittimer0_done;
reg           main_v7_1000basex_pcs_waittimer0_wait = 1'd0;
reg    [17:0] main_v7_1000basex_pcs_waittimer1_count = 18'd200000;
wire          main_v7_1000basex_pcs_waittimer1_done;
reg           main_v7_1000basex_pcs_waittimer1_wait = 1'd0;
reg           main_v7_1000basex_phase_half = 1'd0;
reg           main_v7_1000basex_phase_half_rereg = 1'd0;
wire          main_v7_1000basex_pll_lock;
wire          main_v7_1000basex_pll_reset;
reg           main_v7_1000basex_re = 1'd0;
reg     [1:0] main_v7_1000basex_register_spdm_converter_demux = 2'd0;
wire          main_v7_1000basex_register_spdm_converter_load_part;
reg           main_v7_1000basex_register_spdm_converter_sink_first = 1'd0;
reg           main_v7_1000basex_register_spdm_converter_sink_last = 1'd0;
reg     [1:0] main_v7_1000basex_register_spdm_converter_sink_payload_data = 2'd0;
wire          main_v7_1000basex_register_spdm_converter_sink_ready;
reg           main_v7_1000basex_register_spdm_converter_sink_valid = 1'd0;
reg           main_v7_1000basex_register_spdm_converter_source_first = 1'd0;
reg           main_v7_1000basex_register_spdm_converter_source_last = 1'd0;
reg     [7:0] main_v7_1000basex_register_spdm_converter_source_payload_data = 8'd0;
reg     [2:0] main_v7_1000basex_register_spdm_converter_source_payload_valid_token_count = 3'd0;
wire          main_v7_1000basex_register_spdm_converter_source_ready;
wire          main_v7_1000basex_register_spdm_converter_source_valid;
reg           main_v7_1000basex_register_spdm_converter_strobe_all = 1'd0;
reg           main_v7_1000basex_register_spdm_register_SPDM_2_re = 1'd0;
reg    [31:0] main_v7_1000basex_register_spdm_register_SPDM_2_storage = 32'd0;
reg           main_v7_1000basex_register_spdm_register_SPDM_3_re = 1'd0;
reg    [31:0] main_v7_1000basex_register_spdm_register_SPDM_3_storage = 32'd0;
reg           main_v7_1000basex_register_spdm_register_SPDM_4_re = 1'd0;
reg    [31:0] main_v7_1000basex_register_spdm_register_SPDM_4_storage = 32'd0;
reg           main_v7_1000basex_register_spdm_register_SPDM_5_re = 1'd0;
reg     [7:0] main_v7_1000basex_register_spdm_register_SPDM_5_storage = 8'd0;
reg           main_v7_1000basex_register_spdm_register_SPDM_re = 1'd0;
reg    [31:0] main_v7_1000basex_register_spdm_register_SPDM_storage = 32'd0;
reg           main_v7_1000basex_register_spdm_reset = 1'd0;
wire          main_v7_1000basex_register_spdm_source_first;
wire          main_v7_1000basex_register_spdm_source_last;
wire    [7:0] main_v7_1000basex_register_spdm_source_payload_data;
reg           main_v7_1000basex_register_spdm_source_ready = 1'd0;
wire          main_v7_1000basex_register_spdm_source_source_first;
wire          main_v7_1000basex_register_spdm_source_source_last;
wire    [7:0] main_v7_1000basex_register_spdm_source_source_payload_data;
wire          main_v7_1000basex_register_spdm_source_source_ready;
wire          main_v7_1000basex_register_spdm_source_source_valid;
wire          main_v7_1000basex_register_spdm_source_valid;
wire          main_v7_1000basex_reset;
wire   [19:0] main_v7_1000basex_rx_data0;
reg     [9:0] main_v7_1000basex_rx_data1 = 10'd0;
wire   [19:0] main_v7_1000basex_rx_data_half;
wire          main_v7_1000basex_rx_init_reset;
wire          main_v7_1000basex_rx_mmcm_locked0;
wire          main_v7_1000basex_rx_mmcm_locked1;
reg           main_v7_1000basex_rx_mmcm_power_down = 1'd0;
(* dont_touch = "true" *)
reg           main_v7_1000basex_rx_mmcm_reset0 = 1'd1;
wire          main_v7_1000basex_rx_mmcm_reset1;
wire          main_v7_1000basex_rx_reset;
wire          main_v7_1000basex_rx_reset_done;
wire          main_v7_1000basex_rxoutclk;
wire          main_v7_1000basex_rxoutclk_rebuffer;
wire          main_v7_1000basex_s7mmcm0_clkin;
wire          main_v7_1000basex_s7mmcm0_clkout0;
wire          main_v7_1000basex_s7mmcm0_clkout1;
wire          main_v7_1000basex_s7mmcm0_clkout_buf0;
wire          main_v7_1000basex_s7mmcm0_clkout_buf1;
wire          main_v7_1000basex_s7mmcm1_clkin;
wire          main_v7_1000basex_s7mmcm1_clkout0;
wire          main_v7_1000basex_s7mmcm1_clkout1;
wire          main_v7_1000basex_s7mmcm1_clkout_buf0;
wire          main_v7_1000basex_s7mmcm1_clkout_buf1;
reg           main_v7_1000basex_storage = 1'd0;
reg           main_v7_1000basex_toggle_i = 1'd0;
wire          main_v7_1000basex_toggle_o;
reg           main_v7_1000basex_toggle_o_r = 1'd0;
wire   [19:0] main_v7_1000basex_tx_data0;
wire    [9:0] main_v7_1000basex_tx_data1;
reg    [19:0] main_v7_1000basex_tx_data_half = 20'd0;
wire          main_v7_1000basex_tx_init_reset;
wire          main_v7_1000basex_tx_mmcm_locked0;
wire          main_v7_1000basex_tx_mmcm_locked1;
reg           main_v7_1000basex_tx_mmcm_power_down = 1'd0;
(* dont_touch = "true" *)
reg           main_v7_1000basex_tx_mmcm_reset0 = 1'd1;
wire          main_v7_1000basex_tx_mmcm_reset1;
wire          main_v7_1000basex_tx_reset;
wire          main_v7_1000basex_tx_reset_done;
wire          main_v7_1000basex_txoutclk;
wire          main_v7_1000basex_txoutclk_rebuffer;
wire          main_v7ddrphy0;
wire          main_v7ddrphy1;
wire          main_v7ddrphy2;
wire          main_v7ddrphy3;
wire          main_v7ddrphy4;
wire          main_v7ddrphy5;
wire          main_v7ddrphy6;
wire          main_v7ddrphy7;
reg     [7:0] main_v7ddrphy_bitslip00 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip01 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip02 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip03;
reg     [7:0] main_v7ddrphy_bitslip04 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip0_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip0_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip0_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip0_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip0_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip0_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip0_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip0_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip10 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip100 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip101;
reg     [7:0] main_v7ddrphy_bitslip102 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip10_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip10_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip10_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip10_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip11 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip110 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip111;
reg     [7:0] main_v7ddrphy_bitslip112 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip11_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip11_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip11_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip11_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip12 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip120 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip121;
reg     [7:0] main_v7ddrphy_bitslip122 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip12_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip12_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip12_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip12_value1 = 3'd7;
wire    [7:0] main_v7ddrphy_bitslip13;
reg     [7:0] main_v7ddrphy_bitslip130 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip131;
reg     [7:0] main_v7ddrphy_bitslip132 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip13_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip13_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip13_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip13_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip14 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip140 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip141;
reg     [7:0] main_v7ddrphy_bitslip142 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip14_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip14_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip14_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip14_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip150 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip151;
reg     [7:0] main_v7ddrphy_bitslip152 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip15_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip15_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip15_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip15_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip160 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip161;
reg     [7:0] main_v7ddrphy_bitslip162 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip16_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip16_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip16_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip16_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip170 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip171;
reg     [7:0] main_v7ddrphy_bitslip172 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip17_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip17_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip17_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip17_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip180 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip181;
reg     [7:0] main_v7ddrphy_bitslip182 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip18_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip18_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip18_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip18_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip190 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip191;
reg     [7:0] main_v7ddrphy_bitslip192 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip19_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip19_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip19_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip19_value1 = 3'd7;
reg    [15:0] main_v7ddrphy_bitslip1_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip1_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip1_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip1_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip1_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip1_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip1_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip1_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip20 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip200 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip201;
reg     [7:0] main_v7ddrphy_bitslip202 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip20_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip20_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip20_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip20_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip21 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip210 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip211;
reg     [7:0] main_v7ddrphy_bitslip212 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip21_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip21_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip21_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip21_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip22 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip220 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip221;
reg     [7:0] main_v7ddrphy_bitslip222 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip22_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip22_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip22_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip22_value1 = 3'd7;
wire    [7:0] main_v7ddrphy_bitslip23;
reg     [7:0] main_v7ddrphy_bitslip230 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip231;
reg     [7:0] main_v7ddrphy_bitslip232 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip23_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip23_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip23_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip23_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip24 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip240 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip241;
reg     [7:0] main_v7ddrphy_bitslip242 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip24_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip24_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip24_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip24_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip250 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip251;
reg     [7:0] main_v7ddrphy_bitslip252 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip25_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip25_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip25_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip25_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip260 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip261;
reg     [7:0] main_v7ddrphy_bitslip262 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip26_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip26_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip26_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip26_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip270 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip271;
reg     [7:0] main_v7ddrphy_bitslip272 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip27_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip27_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip27_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip27_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip280 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip281;
reg     [7:0] main_v7ddrphy_bitslip282 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip28_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip28_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip28_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip28_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip290 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip291;
reg     [7:0] main_v7ddrphy_bitslip292 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip29_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip29_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip29_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip29_value1 = 3'd7;
reg    [15:0] main_v7ddrphy_bitslip2_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip2_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip2_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip2_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip2_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip2_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip2_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip2_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip30 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip300 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip301;
reg     [7:0] main_v7ddrphy_bitslip302 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip30_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip30_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip30_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip30_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip31 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip310 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip311;
reg     [7:0] main_v7ddrphy_bitslip312 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip31_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip31_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip31_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip31_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip32 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip320 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip321;
reg     [7:0] main_v7ddrphy_bitslip322 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip32_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip32_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip32_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip32_value1 = 3'd7;
wire    [7:0] main_v7ddrphy_bitslip33;
reg     [7:0] main_v7ddrphy_bitslip330 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip331;
reg     [7:0] main_v7ddrphy_bitslip332 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip33_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip33_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip33_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip33_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip34 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip340 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip341;
reg     [7:0] main_v7ddrphy_bitslip342 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip34_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip34_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip34_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip34_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip350 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip351;
reg     [7:0] main_v7ddrphy_bitslip352 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip35_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip35_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip35_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip35_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip360 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip361;
reg     [7:0] main_v7ddrphy_bitslip362 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip36_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip36_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip36_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip36_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip370 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip371;
reg     [7:0] main_v7ddrphy_bitslip372 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip37_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip37_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip37_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip37_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip380 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip381;
reg     [7:0] main_v7ddrphy_bitslip382 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip38_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip38_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip38_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip38_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip390 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip391;
reg     [7:0] main_v7ddrphy_bitslip392 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip39_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip39_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip39_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip39_value1 = 3'd7;
reg    [15:0] main_v7ddrphy_bitslip3_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip3_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip3_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip3_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip3_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip3_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip3_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip3_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip40 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip400 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip401;
reg     [7:0] main_v7ddrphy_bitslip402 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip40_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip40_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip40_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip40_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip41 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip410 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip411;
reg     [7:0] main_v7ddrphy_bitslip412 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip41_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip41_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip41_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip41_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip42 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip420 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip421;
reg     [7:0] main_v7ddrphy_bitslip422 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip42_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip42_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip42_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip42_value1 = 3'd7;
wire    [7:0] main_v7ddrphy_bitslip43;
reg     [7:0] main_v7ddrphy_bitslip430 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip431;
reg     [7:0] main_v7ddrphy_bitslip432 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip43_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip43_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip43_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip43_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip44 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip440 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip441;
reg     [7:0] main_v7ddrphy_bitslip442 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip44_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip44_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip44_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip44_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip450 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip451;
reg     [7:0] main_v7ddrphy_bitslip452 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip45_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip45_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip45_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip45_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip460 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip461;
reg     [7:0] main_v7ddrphy_bitslip462 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip46_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip46_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip46_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip46_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip470 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip471;
reg     [7:0] main_v7ddrphy_bitslip472 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip47_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip47_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip47_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip47_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip480 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip481;
reg     [7:0] main_v7ddrphy_bitslip482 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip48_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip48_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip48_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip48_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip490 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip491;
reg     [7:0] main_v7ddrphy_bitslip492 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip49_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip49_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip49_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip49_value1 = 3'd7;
reg    [15:0] main_v7ddrphy_bitslip4_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip4_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip4_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip4_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip4_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip4_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip4_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip4_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip50 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip500 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip501;
reg     [7:0] main_v7ddrphy_bitslip502 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip50_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip50_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip50_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip50_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip51 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip510 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip511;
reg     [7:0] main_v7ddrphy_bitslip512 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip51_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip51_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip51_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip51_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip52 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip520 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip521;
reg     [7:0] main_v7ddrphy_bitslip522 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip52_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip52_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip52_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip52_value1 = 3'd7;
wire    [7:0] main_v7ddrphy_bitslip53;
reg     [7:0] main_v7ddrphy_bitslip530 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip531;
reg     [7:0] main_v7ddrphy_bitslip532 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip53_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip53_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip53_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip53_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip54 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip540 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip541;
reg     [7:0] main_v7ddrphy_bitslip542 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip54_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip54_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip54_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip54_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip550 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip551;
reg     [7:0] main_v7ddrphy_bitslip552 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip55_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip55_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip55_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip55_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip560 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip561;
reg     [7:0] main_v7ddrphy_bitslip562 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip56_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip56_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip56_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip56_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip570 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip571;
reg     [7:0] main_v7ddrphy_bitslip572 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip57_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip57_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip57_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip57_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip580 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip581;
reg     [7:0] main_v7ddrphy_bitslip582 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip58_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip58_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip58_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip58_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip590 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip591;
reg     [7:0] main_v7ddrphy_bitslip592 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip59_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip59_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip59_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip59_value1 = 3'd7;
reg    [15:0] main_v7ddrphy_bitslip5_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip5_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip5_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip5_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip5_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip5_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip5_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip5_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip60 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip600 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip601;
reg     [7:0] main_v7ddrphy_bitslip602 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip60_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip60_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip60_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip60_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip61 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip610 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip611;
reg     [7:0] main_v7ddrphy_bitslip612 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip61_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip61_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip61_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip61_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip62 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip620 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip621;
reg     [7:0] main_v7ddrphy_bitslip622 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip62_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip62_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip62_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip62_value1 = 3'd7;
wire    [7:0] main_v7ddrphy_bitslip63;
reg     [7:0] main_v7ddrphy_bitslip630 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip631;
reg     [7:0] main_v7ddrphy_bitslip632 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip63_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip63_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip63_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip63_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip64 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip6_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip6_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip6_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip6_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip6_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip6_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip6_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip6_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip70 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip71 = 8'd0;
reg     [7:0] main_v7ddrphy_bitslip72 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip73;
reg     [7:0] main_v7ddrphy_bitslip74 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip7_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip7_r1 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip7_r2 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip7_r3 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip7_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip7_value1 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip7_value2 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip7_value3 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip80 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip81;
reg     [7:0] main_v7ddrphy_bitslip82 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip8_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip8_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip8_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip8_value1 = 3'd7;
reg     [7:0] main_v7ddrphy_bitslip90 = 8'd0;
wire    [7:0] main_v7ddrphy_bitslip91;
reg     [7:0] main_v7ddrphy_bitslip92 = 8'd0;
reg    [15:0] main_v7ddrphy_bitslip9_r0 = 16'd0;
reg    [15:0] main_v7ddrphy_bitslip9_r1 = 16'd0;
reg     [2:0] main_v7ddrphy_bitslip9_value0 = 3'd7;
reg     [2:0] main_v7ddrphy_bitslip9_value1 = 3'd7;
wire          main_v7ddrphy_cdly_inc_r;
reg           main_v7ddrphy_cdly_inc_re = 1'd0;
reg           main_v7ddrphy_cdly_inc_w = 1'd0;
reg           main_v7ddrphy_cdly_inc_we = 1'd0;
wire          main_v7ddrphy_cdly_rst_r;
reg           main_v7ddrphy_cdly_rst_re = 1'd0;
reg           main_v7ddrphy_cdly_rst_w = 1'd0;
reg           main_v7ddrphy_cdly_rst_we = 1'd0;
wire          main_v7ddrphy_dfi_p0_act_n;
wire   [15:0] main_v7ddrphy_dfi_p0_address;
wire    [2:0] main_v7ddrphy_dfi_p0_bank;
wire          main_v7ddrphy_dfi_p0_cas_n;
wire          main_v7ddrphy_dfi_p0_cke;
wire          main_v7ddrphy_dfi_p0_cs_n;
wire          main_v7ddrphy_dfi_p0_odt;
wire          main_v7ddrphy_dfi_p0_ras_n;
reg   [127:0] main_v7ddrphy_dfi_p0_rddata = 128'd0;
wire          main_v7ddrphy_dfi_p0_rddata_en;
wire          main_v7ddrphy_dfi_p0_rddata_valid;
wire          main_v7ddrphy_dfi_p0_reset_n;
wire          main_v7ddrphy_dfi_p0_we_n;
wire  [127:0] main_v7ddrphy_dfi_p0_wrdata;
wire          main_v7ddrphy_dfi_p0_wrdata_en;
wire   [15:0] main_v7ddrphy_dfi_p0_wrdata_mask;
wire          main_v7ddrphy_dfi_p1_act_n;
wire   [15:0] main_v7ddrphy_dfi_p1_address;
wire    [2:0] main_v7ddrphy_dfi_p1_bank;
wire          main_v7ddrphy_dfi_p1_cas_n;
wire          main_v7ddrphy_dfi_p1_cke;
wire          main_v7ddrphy_dfi_p1_cs_n;
wire          main_v7ddrphy_dfi_p1_odt;
wire          main_v7ddrphy_dfi_p1_ras_n;
reg   [127:0] main_v7ddrphy_dfi_p1_rddata = 128'd0;
wire          main_v7ddrphy_dfi_p1_rddata_en;
wire          main_v7ddrphy_dfi_p1_rddata_valid;
wire          main_v7ddrphy_dfi_p1_reset_n;
wire          main_v7ddrphy_dfi_p1_we_n;
wire  [127:0] main_v7ddrphy_dfi_p1_wrdata;
wire          main_v7ddrphy_dfi_p1_wrdata_en;
wire   [15:0] main_v7ddrphy_dfi_p1_wrdata_mask;
wire          main_v7ddrphy_dfi_p2_act_n;
wire   [15:0] main_v7ddrphy_dfi_p2_address;
wire    [2:0] main_v7ddrphy_dfi_p2_bank;
wire          main_v7ddrphy_dfi_p2_cas_n;
wire          main_v7ddrphy_dfi_p2_cke;
wire          main_v7ddrphy_dfi_p2_cs_n;
wire          main_v7ddrphy_dfi_p2_odt;
wire          main_v7ddrphy_dfi_p2_ras_n;
reg   [127:0] main_v7ddrphy_dfi_p2_rddata = 128'd0;
wire          main_v7ddrphy_dfi_p2_rddata_en;
wire          main_v7ddrphy_dfi_p2_rddata_valid;
wire          main_v7ddrphy_dfi_p2_reset_n;
wire          main_v7ddrphy_dfi_p2_we_n;
wire  [127:0] main_v7ddrphy_dfi_p2_wrdata;
wire          main_v7ddrphy_dfi_p2_wrdata_en;
wire   [15:0] main_v7ddrphy_dfi_p2_wrdata_mask;
wire          main_v7ddrphy_dfi_p3_act_n;
wire   [15:0] main_v7ddrphy_dfi_p3_address;
wire    [2:0] main_v7ddrphy_dfi_p3_bank;
wire          main_v7ddrphy_dfi_p3_cas_n;
wire          main_v7ddrphy_dfi_p3_cke;
wire          main_v7ddrphy_dfi_p3_cs_n;
wire          main_v7ddrphy_dfi_p3_odt;
wire          main_v7ddrphy_dfi_p3_ras_n;
reg   [127:0] main_v7ddrphy_dfi_p3_rddata = 128'd0;
wire          main_v7ddrphy_dfi_p3_rddata_en;
wire          main_v7ddrphy_dfi_p3_rddata_valid;
wire          main_v7ddrphy_dfi_p3_reset_n;
wire          main_v7ddrphy_dfi_p3_we_n;
wire  [127:0] main_v7ddrphy_dfi_p3_wrdata;
wire          main_v7ddrphy_dfi_p3_wrdata_en;
wire   [15:0] main_v7ddrphy_dfi_p3_wrdata_mask;
reg           main_v7ddrphy_dly_sel_re = 1'd0;
reg     [7:0] main_v7ddrphy_dly_sel_storage = 8'd0;
wire          main_v7ddrphy_dm_o_nodelay0;
wire          main_v7ddrphy_dm_o_nodelay1;
wire          main_v7ddrphy_dm_o_nodelay2;
wire          main_v7ddrphy_dm_o_nodelay3;
wire          main_v7ddrphy_dm_o_nodelay4;
wire          main_v7ddrphy_dm_o_nodelay5;
wire          main_v7ddrphy_dm_o_nodelay6;
wire          main_v7ddrphy_dm_o_nodelay7;
wire          main_v7ddrphy_dq_i_delayed0;
wire          main_v7ddrphy_dq_i_delayed1;
wire          main_v7ddrphy_dq_i_delayed10;
wire          main_v7ddrphy_dq_i_delayed11;
wire          main_v7ddrphy_dq_i_delayed12;
wire          main_v7ddrphy_dq_i_delayed13;
wire          main_v7ddrphy_dq_i_delayed14;
wire          main_v7ddrphy_dq_i_delayed15;
wire          main_v7ddrphy_dq_i_delayed16;
wire          main_v7ddrphy_dq_i_delayed17;
wire          main_v7ddrphy_dq_i_delayed18;
wire          main_v7ddrphy_dq_i_delayed19;
wire          main_v7ddrphy_dq_i_delayed2;
wire          main_v7ddrphy_dq_i_delayed20;
wire          main_v7ddrphy_dq_i_delayed21;
wire          main_v7ddrphy_dq_i_delayed22;
wire          main_v7ddrphy_dq_i_delayed23;
wire          main_v7ddrphy_dq_i_delayed24;
wire          main_v7ddrphy_dq_i_delayed25;
wire          main_v7ddrphy_dq_i_delayed26;
wire          main_v7ddrphy_dq_i_delayed27;
wire          main_v7ddrphy_dq_i_delayed28;
wire          main_v7ddrphy_dq_i_delayed29;
wire          main_v7ddrphy_dq_i_delayed3;
wire          main_v7ddrphy_dq_i_delayed30;
wire          main_v7ddrphy_dq_i_delayed31;
wire          main_v7ddrphy_dq_i_delayed32;
wire          main_v7ddrphy_dq_i_delayed33;
wire          main_v7ddrphy_dq_i_delayed34;
wire          main_v7ddrphy_dq_i_delayed35;
wire          main_v7ddrphy_dq_i_delayed36;
wire          main_v7ddrphy_dq_i_delayed37;
wire          main_v7ddrphy_dq_i_delayed38;
wire          main_v7ddrphy_dq_i_delayed39;
wire          main_v7ddrphy_dq_i_delayed4;
wire          main_v7ddrphy_dq_i_delayed40;
wire          main_v7ddrphy_dq_i_delayed41;
wire          main_v7ddrphy_dq_i_delayed42;
wire          main_v7ddrphy_dq_i_delayed43;
wire          main_v7ddrphy_dq_i_delayed44;
wire          main_v7ddrphy_dq_i_delayed45;
wire          main_v7ddrphy_dq_i_delayed46;
wire          main_v7ddrphy_dq_i_delayed47;
wire          main_v7ddrphy_dq_i_delayed48;
wire          main_v7ddrphy_dq_i_delayed49;
wire          main_v7ddrphy_dq_i_delayed5;
wire          main_v7ddrphy_dq_i_delayed50;
wire          main_v7ddrphy_dq_i_delayed51;
wire          main_v7ddrphy_dq_i_delayed52;
wire          main_v7ddrphy_dq_i_delayed53;
wire          main_v7ddrphy_dq_i_delayed54;
wire          main_v7ddrphy_dq_i_delayed55;
wire          main_v7ddrphy_dq_i_delayed56;
wire          main_v7ddrphy_dq_i_delayed57;
wire          main_v7ddrphy_dq_i_delayed58;
wire          main_v7ddrphy_dq_i_delayed59;
wire          main_v7ddrphy_dq_i_delayed6;
wire          main_v7ddrphy_dq_i_delayed60;
wire          main_v7ddrphy_dq_i_delayed61;
wire          main_v7ddrphy_dq_i_delayed62;
wire          main_v7ddrphy_dq_i_delayed63;
wire          main_v7ddrphy_dq_i_delayed7;
wire          main_v7ddrphy_dq_i_delayed8;
wire          main_v7ddrphy_dq_i_delayed9;
wire          main_v7ddrphy_dq_i_nodelay0;
wire          main_v7ddrphy_dq_i_nodelay1;
wire          main_v7ddrphy_dq_i_nodelay10;
wire          main_v7ddrphy_dq_i_nodelay11;
wire          main_v7ddrphy_dq_i_nodelay12;
wire          main_v7ddrphy_dq_i_nodelay13;
wire          main_v7ddrphy_dq_i_nodelay14;
wire          main_v7ddrphy_dq_i_nodelay15;
wire          main_v7ddrphy_dq_i_nodelay16;
wire          main_v7ddrphy_dq_i_nodelay17;
wire          main_v7ddrphy_dq_i_nodelay18;
wire          main_v7ddrphy_dq_i_nodelay19;
wire          main_v7ddrphy_dq_i_nodelay2;
wire          main_v7ddrphy_dq_i_nodelay20;
wire          main_v7ddrphy_dq_i_nodelay21;
wire          main_v7ddrphy_dq_i_nodelay22;
wire          main_v7ddrphy_dq_i_nodelay23;
wire          main_v7ddrphy_dq_i_nodelay24;
wire          main_v7ddrphy_dq_i_nodelay25;
wire          main_v7ddrphy_dq_i_nodelay26;
wire          main_v7ddrphy_dq_i_nodelay27;
wire          main_v7ddrphy_dq_i_nodelay28;
wire          main_v7ddrphy_dq_i_nodelay29;
wire          main_v7ddrphy_dq_i_nodelay3;
wire          main_v7ddrphy_dq_i_nodelay30;
wire          main_v7ddrphy_dq_i_nodelay31;
wire          main_v7ddrphy_dq_i_nodelay32;
wire          main_v7ddrphy_dq_i_nodelay33;
wire          main_v7ddrphy_dq_i_nodelay34;
wire          main_v7ddrphy_dq_i_nodelay35;
wire          main_v7ddrphy_dq_i_nodelay36;
wire          main_v7ddrphy_dq_i_nodelay37;
wire          main_v7ddrphy_dq_i_nodelay38;
wire          main_v7ddrphy_dq_i_nodelay39;
wire          main_v7ddrphy_dq_i_nodelay4;
wire          main_v7ddrphy_dq_i_nodelay40;
wire          main_v7ddrphy_dq_i_nodelay41;
wire          main_v7ddrphy_dq_i_nodelay42;
wire          main_v7ddrphy_dq_i_nodelay43;
wire          main_v7ddrphy_dq_i_nodelay44;
wire          main_v7ddrphy_dq_i_nodelay45;
wire          main_v7ddrphy_dq_i_nodelay46;
wire          main_v7ddrphy_dq_i_nodelay47;
wire          main_v7ddrphy_dq_i_nodelay48;
wire          main_v7ddrphy_dq_i_nodelay49;
wire          main_v7ddrphy_dq_i_nodelay5;
wire          main_v7ddrphy_dq_i_nodelay50;
wire          main_v7ddrphy_dq_i_nodelay51;
wire          main_v7ddrphy_dq_i_nodelay52;
wire          main_v7ddrphy_dq_i_nodelay53;
wire          main_v7ddrphy_dq_i_nodelay54;
wire          main_v7ddrphy_dq_i_nodelay55;
wire          main_v7ddrphy_dq_i_nodelay56;
wire          main_v7ddrphy_dq_i_nodelay57;
wire          main_v7ddrphy_dq_i_nodelay58;
wire          main_v7ddrphy_dq_i_nodelay59;
wire          main_v7ddrphy_dq_i_nodelay6;
wire          main_v7ddrphy_dq_i_nodelay60;
wire          main_v7ddrphy_dq_i_nodelay61;
wire          main_v7ddrphy_dq_i_nodelay62;
wire          main_v7ddrphy_dq_i_nodelay63;
wire          main_v7ddrphy_dq_i_nodelay7;
wire          main_v7ddrphy_dq_i_nodelay8;
wire          main_v7ddrphy_dq_i_nodelay9;
wire          main_v7ddrphy_dq_o_delayed0;
wire          main_v7ddrphy_dq_o_delayed1;
wire          main_v7ddrphy_dq_o_delayed10;
wire          main_v7ddrphy_dq_o_delayed11;
wire          main_v7ddrphy_dq_o_delayed12;
wire          main_v7ddrphy_dq_o_delayed13;
wire          main_v7ddrphy_dq_o_delayed14;
wire          main_v7ddrphy_dq_o_delayed15;
wire          main_v7ddrphy_dq_o_delayed16;
wire          main_v7ddrphy_dq_o_delayed17;
wire          main_v7ddrphy_dq_o_delayed18;
wire          main_v7ddrphy_dq_o_delayed19;
wire          main_v7ddrphy_dq_o_delayed2;
wire          main_v7ddrphy_dq_o_delayed20;
wire          main_v7ddrphy_dq_o_delayed21;
wire          main_v7ddrphy_dq_o_delayed22;
wire          main_v7ddrphy_dq_o_delayed23;
wire          main_v7ddrphy_dq_o_delayed24;
wire          main_v7ddrphy_dq_o_delayed25;
wire          main_v7ddrphy_dq_o_delayed26;
wire          main_v7ddrphy_dq_o_delayed27;
wire          main_v7ddrphy_dq_o_delayed28;
wire          main_v7ddrphy_dq_o_delayed29;
wire          main_v7ddrphy_dq_o_delayed3;
wire          main_v7ddrphy_dq_o_delayed30;
wire          main_v7ddrphy_dq_o_delayed31;
wire          main_v7ddrphy_dq_o_delayed32;
wire          main_v7ddrphy_dq_o_delayed33;
wire          main_v7ddrphy_dq_o_delayed34;
wire          main_v7ddrphy_dq_o_delayed35;
wire          main_v7ddrphy_dq_o_delayed36;
wire          main_v7ddrphy_dq_o_delayed37;
wire          main_v7ddrphy_dq_o_delayed38;
wire          main_v7ddrphy_dq_o_delayed39;
wire          main_v7ddrphy_dq_o_delayed4;
wire          main_v7ddrphy_dq_o_delayed40;
wire          main_v7ddrphy_dq_o_delayed41;
wire          main_v7ddrphy_dq_o_delayed42;
wire          main_v7ddrphy_dq_o_delayed43;
wire          main_v7ddrphy_dq_o_delayed44;
wire          main_v7ddrphy_dq_o_delayed45;
wire          main_v7ddrphy_dq_o_delayed46;
wire          main_v7ddrphy_dq_o_delayed47;
wire          main_v7ddrphy_dq_o_delayed48;
wire          main_v7ddrphy_dq_o_delayed49;
wire          main_v7ddrphy_dq_o_delayed5;
wire          main_v7ddrphy_dq_o_delayed50;
wire          main_v7ddrphy_dq_o_delayed51;
wire          main_v7ddrphy_dq_o_delayed52;
wire          main_v7ddrphy_dq_o_delayed53;
wire          main_v7ddrphy_dq_o_delayed54;
wire          main_v7ddrphy_dq_o_delayed55;
wire          main_v7ddrphy_dq_o_delayed56;
wire          main_v7ddrphy_dq_o_delayed57;
wire          main_v7ddrphy_dq_o_delayed58;
wire          main_v7ddrphy_dq_o_delayed59;
wire          main_v7ddrphy_dq_o_delayed6;
wire          main_v7ddrphy_dq_o_delayed60;
wire          main_v7ddrphy_dq_o_delayed61;
wire          main_v7ddrphy_dq_o_delayed62;
wire          main_v7ddrphy_dq_o_delayed63;
wire          main_v7ddrphy_dq_o_delayed7;
wire          main_v7ddrphy_dq_o_delayed8;
wire          main_v7ddrphy_dq_o_delayed9;
wire          main_v7ddrphy_dq_o_nodelay0;
wire          main_v7ddrphy_dq_o_nodelay1;
wire          main_v7ddrphy_dq_o_nodelay10;
wire          main_v7ddrphy_dq_o_nodelay11;
wire          main_v7ddrphy_dq_o_nodelay12;
wire          main_v7ddrphy_dq_o_nodelay13;
wire          main_v7ddrphy_dq_o_nodelay14;
wire          main_v7ddrphy_dq_o_nodelay15;
wire          main_v7ddrphy_dq_o_nodelay16;
wire          main_v7ddrphy_dq_o_nodelay17;
wire          main_v7ddrphy_dq_o_nodelay18;
wire          main_v7ddrphy_dq_o_nodelay19;
wire          main_v7ddrphy_dq_o_nodelay2;
wire          main_v7ddrphy_dq_o_nodelay20;
wire          main_v7ddrphy_dq_o_nodelay21;
wire          main_v7ddrphy_dq_o_nodelay22;
wire          main_v7ddrphy_dq_o_nodelay23;
wire          main_v7ddrphy_dq_o_nodelay24;
wire          main_v7ddrphy_dq_o_nodelay25;
wire          main_v7ddrphy_dq_o_nodelay26;
wire          main_v7ddrphy_dq_o_nodelay27;
wire          main_v7ddrphy_dq_o_nodelay28;
wire          main_v7ddrphy_dq_o_nodelay29;
wire          main_v7ddrphy_dq_o_nodelay3;
wire          main_v7ddrphy_dq_o_nodelay30;
wire          main_v7ddrphy_dq_o_nodelay31;
wire          main_v7ddrphy_dq_o_nodelay32;
wire          main_v7ddrphy_dq_o_nodelay33;
wire          main_v7ddrphy_dq_o_nodelay34;
wire          main_v7ddrphy_dq_o_nodelay35;
wire          main_v7ddrphy_dq_o_nodelay36;
wire          main_v7ddrphy_dq_o_nodelay37;
wire          main_v7ddrphy_dq_o_nodelay38;
wire          main_v7ddrphy_dq_o_nodelay39;
wire          main_v7ddrphy_dq_o_nodelay4;
wire          main_v7ddrphy_dq_o_nodelay40;
wire          main_v7ddrphy_dq_o_nodelay41;
wire          main_v7ddrphy_dq_o_nodelay42;
wire          main_v7ddrphy_dq_o_nodelay43;
wire          main_v7ddrphy_dq_o_nodelay44;
wire          main_v7ddrphy_dq_o_nodelay45;
wire          main_v7ddrphy_dq_o_nodelay46;
wire          main_v7ddrphy_dq_o_nodelay47;
wire          main_v7ddrphy_dq_o_nodelay48;
wire          main_v7ddrphy_dq_o_nodelay49;
wire          main_v7ddrphy_dq_o_nodelay5;
wire          main_v7ddrphy_dq_o_nodelay50;
wire          main_v7ddrphy_dq_o_nodelay51;
wire          main_v7ddrphy_dq_o_nodelay52;
wire          main_v7ddrphy_dq_o_nodelay53;
wire          main_v7ddrphy_dq_o_nodelay54;
wire          main_v7ddrphy_dq_o_nodelay55;
wire          main_v7ddrphy_dq_o_nodelay56;
wire          main_v7ddrphy_dq_o_nodelay57;
wire          main_v7ddrphy_dq_o_nodelay58;
wire          main_v7ddrphy_dq_o_nodelay59;
wire          main_v7ddrphy_dq_o_nodelay6;
wire          main_v7ddrphy_dq_o_nodelay60;
wire          main_v7ddrphy_dq_o_nodelay61;
wire          main_v7ddrphy_dq_o_nodelay62;
wire          main_v7ddrphy_dq_o_nodelay63;
wire          main_v7ddrphy_dq_o_nodelay7;
wire          main_v7ddrphy_dq_o_nodelay8;
wire          main_v7ddrphy_dq_o_nodelay9;
wire          main_v7ddrphy_dq_oe;
wire          main_v7ddrphy_dq_oe_delay_tappeddelayline;
reg           main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          main_v7ddrphy_dq_t0;
wire          main_v7ddrphy_dq_t1;
wire          main_v7ddrphy_dq_t10;
wire          main_v7ddrphy_dq_t11;
wire          main_v7ddrphy_dq_t12;
wire          main_v7ddrphy_dq_t13;
wire          main_v7ddrphy_dq_t14;
wire          main_v7ddrphy_dq_t15;
wire          main_v7ddrphy_dq_t16;
wire          main_v7ddrphy_dq_t17;
wire          main_v7ddrphy_dq_t18;
wire          main_v7ddrphy_dq_t19;
wire          main_v7ddrphy_dq_t2;
wire          main_v7ddrphy_dq_t20;
wire          main_v7ddrphy_dq_t21;
wire          main_v7ddrphy_dq_t22;
wire          main_v7ddrphy_dq_t23;
wire          main_v7ddrphy_dq_t24;
wire          main_v7ddrphy_dq_t25;
wire          main_v7ddrphy_dq_t26;
wire          main_v7ddrphy_dq_t27;
wire          main_v7ddrphy_dq_t28;
wire          main_v7ddrphy_dq_t29;
wire          main_v7ddrphy_dq_t3;
wire          main_v7ddrphy_dq_t30;
wire          main_v7ddrphy_dq_t31;
wire          main_v7ddrphy_dq_t32;
wire          main_v7ddrphy_dq_t33;
wire          main_v7ddrphy_dq_t34;
wire          main_v7ddrphy_dq_t35;
wire          main_v7ddrphy_dq_t36;
wire          main_v7ddrphy_dq_t37;
wire          main_v7ddrphy_dq_t38;
wire          main_v7ddrphy_dq_t39;
wire          main_v7ddrphy_dq_t4;
wire          main_v7ddrphy_dq_t40;
wire          main_v7ddrphy_dq_t41;
wire          main_v7ddrphy_dq_t42;
wire          main_v7ddrphy_dq_t43;
wire          main_v7ddrphy_dq_t44;
wire          main_v7ddrphy_dq_t45;
wire          main_v7ddrphy_dq_t46;
wire          main_v7ddrphy_dq_t47;
wire          main_v7ddrphy_dq_t48;
wire          main_v7ddrphy_dq_t49;
wire          main_v7ddrphy_dq_t5;
wire          main_v7ddrphy_dq_t50;
wire          main_v7ddrphy_dq_t51;
wire          main_v7ddrphy_dq_t52;
wire          main_v7ddrphy_dq_t53;
wire          main_v7ddrphy_dq_t54;
wire          main_v7ddrphy_dq_t55;
wire          main_v7ddrphy_dq_t56;
wire          main_v7ddrphy_dq_t57;
wire          main_v7ddrphy_dq_t58;
wire          main_v7ddrphy_dq_t59;
wire          main_v7ddrphy_dq_t6;
wire          main_v7ddrphy_dq_t60;
wire          main_v7ddrphy_dq_t61;
wire          main_v7ddrphy_dq_t62;
wire          main_v7ddrphy_dq_t63;
wire          main_v7ddrphy_dq_t7;
wire          main_v7ddrphy_dq_t8;
wire          main_v7ddrphy_dq_t9;
wire          main_v7ddrphy_dqs_o_delayed0;
wire          main_v7ddrphy_dqs_o_delayed1;
wire          main_v7ddrphy_dqs_o_delayed2;
wire          main_v7ddrphy_dqs_o_delayed3;
wire          main_v7ddrphy_dqs_o_delayed4;
wire          main_v7ddrphy_dqs_o_delayed5;
wire          main_v7ddrphy_dqs_o_delayed6;
wire          main_v7ddrphy_dqs_o_delayed7;
wire          main_v7ddrphy_dqs_o_no_delay0;
wire          main_v7ddrphy_dqs_o_no_delay1;
wire          main_v7ddrphy_dqs_o_no_delay2;
wire          main_v7ddrphy_dqs_o_no_delay3;
wire          main_v7ddrphy_dqs_o_no_delay4;
wire          main_v7ddrphy_dqs_o_no_delay5;
wire          main_v7ddrphy_dqs_o_no_delay6;
wire          main_v7ddrphy_dqs_o_no_delay7;
reg           main_v7ddrphy_dqs_oe = 1'd0;
wire          main_v7ddrphy_dqs_oe_delay_tappeddelayline;
reg           main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          main_v7ddrphy_dqs_postamble;
wire          main_v7ddrphy_dqs_preamble;
wire          main_v7ddrphy_dqs_t0;
wire          main_v7ddrphy_dqs_t1;
wire          main_v7ddrphy_dqs_t2;
wire          main_v7ddrphy_dqs_t3;
wire          main_v7ddrphy_dqs_t4;
wire          main_v7ddrphy_dqs_t5;
wire          main_v7ddrphy_dqs_t6;
wire          main_v7ddrphy_dqs_t7;
reg           main_v7ddrphy_dqspattern0 = 1'd0;
reg           main_v7ddrphy_dqspattern1 = 1'd0;
reg     [7:0] main_v7ddrphy_dqspattern_o = 8'd0;
reg           main_v7ddrphy_half_sys8x_taps_re = 1'd0;
reg     [4:0] main_v7ddrphy_half_sys8x_taps_storage = 5'd6;
wire          main_v7ddrphy_oq0;
wire          main_v7ddrphy_oq1;
wire          main_v7ddrphy_oq10;
wire          main_v7ddrphy_oq11;
wire          main_v7ddrphy_oq12;
wire          main_v7ddrphy_oq13;
wire          main_v7ddrphy_oq14;
wire          main_v7ddrphy_oq15;
wire          main_v7ddrphy_oq16;
wire          main_v7ddrphy_oq17;
wire          main_v7ddrphy_oq18;
wire          main_v7ddrphy_oq19;
wire          main_v7ddrphy_oq2;
wire          main_v7ddrphy_oq20;
wire          main_v7ddrphy_oq21;
wire          main_v7ddrphy_oq22;
wire          main_v7ddrphy_oq23;
wire          main_v7ddrphy_oq24;
wire          main_v7ddrphy_oq25;
wire          main_v7ddrphy_oq3;
wire          main_v7ddrphy_oq4;
wire          main_v7ddrphy_oq5;
wire          main_v7ddrphy_oq6;
wire          main_v7ddrphy_oq7;
wire          main_v7ddrphy_oq8;
wire          main_v7ddrphy_oq9;
wire    [2:0] main_v7ddrphy_pads_ba;
reg           main_v7ddrphy_rddata_en_tappeddelayline0 = 1'd0;
reg           main_v7ddrphy_rddata_en_tappeddelayline1 = 1'd0;
reg           main_v7ddrphy_rddata_en_tappeddelayline2 = 1'd0;
reg           main_v7ddrphy_rddata_en_tappeddelayline3 = 1'd0;
reg           main_v7ddrphy_rddata_en_tappeddelayline4 = 1'd0;
reg           main_v7ddrphy_rddata_en_tappeddelayline5 = 1'd0;
reg           main_v7ddrphy_rddata_en_tappeddelayline6 = 1'd0;
reg           main_v7ddrphy_rddata_en_tappeddelayline7 = 1'd0;
wire          main_v7ddrphy_rdly_dq_bitslip_r;
reg           main_v7ddrphy_rdly_dq_bitslip_re = 1'd0;
wire          main_v7ddrphy_rdly_dq_bitslip_rst_r;
reg           main_v7ddrphy_rdly_dq_bitslip_rst_re = 1'd0;
reg           main_v7ddrphy_rdly_dq_bitslip_rst_w = 1'd0;
reg           main_v7ddrphy_rdly_dq_bitslip_rst_we = 1'd0;
reg           main_v7ddrphy_rdly_dq_bitslip_w = 1'd0;
reg           main_v7ddrphy_rdly_dq_bitslip_we = 1'd0;
wire          main_v7ddrphy_rdly_dq_inc_r;
reg           main_v7ddrphy_rdly_dq_inc_re = 1'd0;
reg           main_v7ddrphy_rdly_dq_inc_w = 1'd0;
reg           main_v7ddrphy_rdly_dq_inc_we = 1'd0;
wire          main_v7ddrphy_rdly_dq_rst_r;
reg           main_v7ddrphy_rdly_dq_rst_re = 1'd0;
reg           main_v7ddrphy_rdly_dq_rst_w = 1'd0;
reg           main_v7ddrphy_rdly_dq_rst_we = 1'd0;
reg           main_v7ddrphy_rdphase_re = 1'd0;
reg     [1:0] main_v7ddrphy_rdphase_storage = 2'd1;
reg           main_v7ddrphy_rst_re = 1'd0;
reg           main_v7ddrphy_rst_storage = 1'd0;
wire          main_v7ddrphy_sd_clk_se_delayed0;
wire          main_v7ddrphy_sd_clk_se_delayed1;
wire          main_v7ddrphy_sd_clk_se_nodelay0;
wire          main_v7ddrphy_sd_clk_se_nodelay1;
wire          main_v7ddrphy_wdly_dq_bitslip_r;
reg           main_v7ddrphy_wdly_dq_bitslip_re = 1'd0;
wire          main_v7ddrphy_wdly_dq_bitslip_rst_r;
reg           main_v7ddrphy_wdly_dq_bitslip_rst_re = 1'd0;
reg           main_v7ddrphy_wdly_dq_bitslip_rst_w = 1'd0;
reg           main_v7ddrphy_wdly_dq_bitslip_rst_we = 1'd0;
reg           main_v7ddrphy_wdly_dq_bitslip_w = 1'd0;
reg           main_v7ddrphy_wdly_dq_bitslip_we = 1'd0;
wire          main_v7ddrphy_wdly_dq_inc_r;
reg           main_v7ddrphy_wdly_dq_inc_re = 1'd0;
reg           main_v7ddrphy_wdly_dq_inc_w = 1'd0;
reg           main_v7ddrphy_wdly_dq_inc_we = 1'd0;
wire          main_v7ddrphy_wdly_dq_rst_r;
reg           main_v7ddrphy_wdly_dq_rst_re = 1'd0;
reg           main_v7ddrphy_wdly_dq_rst_w = 1'd0;
reg           main_v7ddrphy_wdly_dq_rst_we = 1'd0;
wire          main_v7ddrphy_wdly_dqs_inc_r;
reg           main_v7ddrphy_wdly_dqs_inc_re = 1'd0;
reg           main_v7ddrphy_wdly_dqs_inc_w = 1'd0;
reg           main_v7ddrphy_wdly_dqs_inc_we = 1'd0;
wire          main_v7ddrphy_wdly_dqs_rst_r;
reg           main_v7ddrphy_wdly_dqs_rst_re = 1'd0;
reg           main_v7ddrphy_wdly_dqs_rst_w = 1'd0;
reg           main_v7ddrphy_wdly_dqs_rst_we = 1'd0;
reg           main_v7ddrphy_wlevel_en_re = 1'd0;
reg           main_v7ddrphy_wlevel_en_storage = 1'd0;
wire          main_v7ddrphy_wlevel_strobe_r;
reg           main_v7ddrphy_wlevel_strobe_re = 1'd0;
reg           main_v7ddrphy_wlevel_strobe_w = 1'd0;
reg           main_v7ddrphy_wlevel_strobe_we = 1'd0;
reg           main_v7ddrphy_wrdata_en_tappeddelayline0 = 1'd0;
reg           main_v7ddrphy_wrdata_en_tappeddelayline1 = 1'd0;
reg           main_v7ddrphy_wrdata_en_tappeddelayline2 = 1'd0;
reg           main_v7ddrphy_wrphase_re = 1'd0;
reg     [1:0] main_v7ddrphy_wrphase_storage = 2'd2;
wire          main_wait;
wire          main_write_aw_first;
wire          main_write_aw_last;
wire    [3:0] main_write_aw_param_id;
wire   [31:0] main_write_aw_payload_addr;
reg           main_write_aw_ready = 1'd0;
wire          main_write_aw_valid;
reg           main_write_axi_w_connect = 1'd1;
reg     [7:0] main_write_beat_count = 8'd0;
reg  signed  [12:0] main_write_beat_offset = 13'd0;
wire   [11:0] main_write_beat_size;
wire   [11:0] main_write_beat_wrap;
wire          main_write_can_write;
wire          main_write_cmd_grant;
wire          main_write_cmd_request;
reg     [3:0] main_write_id_buffer_consume = 4'd0;
wire          main_write_id_buffer_do_read;
wire          main_write_id_buffer_fifo_in_first;
wire          main_write_id_buffer_fifo_in_last;
wire    [3:0] main_write_id_buffer_fifo_in_payload_id;
wire          main_write_id_buffer_fifo_out_first;
wire          main_write_id_buffer_fifo_out_last;
wire    [3:0] main_write_id_buffer_fifo_out_payload_id;
reg     [4:0] main_write_id_buffer_level = 5'd0;
reg     [3:0] main_write_id_buffer_produce = 4'd0;
wire    [3:0] main_write_id_buffer_rdport_adr;
wire    [5:0] main_write_id_buffer_rdport_dat_r;
reg           main_write_id_buffer_replace = 1'd0;
reg           main_write_id_buffer_sink_first = 1'd0;
reg           main_write_id_buffer_sink_last = 1'd0;
wire    [3:0] main_write_id_buffer_sink_payload_id;
wire          main_write_id_buffer_sink_ready;
wire          main_write_id_buffer_sink_valid;
wire          main_write_id_buffer_source_first;
wire          main_write_id_buffer_source_last;
wire    [3:0] main_write_id_buffer_source_payload_id;
reg           main_write_id_buffer_source_ready = 1'd0;
wire          main_write_id_buffer_source_valid;
wire    [5:0] main_write_id_buffer_syncfifo_din;
wire    [5:0] main_write_id_buffer_syncfifo_dout;
wire          main_write_id_buffer_syncfifo_re;
wire          main_write_id_buffer_syncfifo_readable;
wire          main_write_id_buffer_syncfifo_we;
wire          main_write_id_buffer_syncfifo_writable;
reg     [3:0] main_write_id_buffer_wrport_adr = 4'd0;
wire    [5:0] main_write_id_buffer_wrport_dat_r;
wire    [5:0] main_write_id_buffer_wrport_dat_w;
wire          main_write_id_buffer_wrport_we;
wire          main_write_pipe_valid_sink_first;
wire          main_write_pipe_valid_sink_last;
wire          main_write_pipe_valid_sink_param_dest;
wire    [3:0] main_write_pipe_valid_sink_param_id;
wire          main_write_pipe_valid_sink_param_user;
wire   [31:0] main_write_pipe_valid_sink_payload_addr;
wire    [1:0] main_write_pipe_valid_sink_payload_burst;
wire    [3:0] main_write_pipe_valid_sink_payload_cache;
wire    [7:0] main_write_pipe_valid_sink_payload_len;
wire          main_write_pipe_valid_sink_payload_lock;
wire    [2:0] main_write_pipe_valid_sink_payload_prot;
wire    [3:0] main_write_pipe_valid_sink_payload_qos;
wire    [3:0] main_write_pipe_valid_sink_payload_region;
wire    [2:0] main_write_pipe_valid_sink_payload_size;
wire          main_write_pipe_valid_sink_ready;
wire          main_write_pipe_valid_sink_valid;
reg           main_write_pipe_valid_source_first = 1'd0;
reg           main_write_pipe_valid_source_last = 1'd0;
reg           main_write_pipe_valid_source_param_dest = 1'd0;
reg     [3:0] main_write_pipe_valid_source_param_id = 4'd0;
reg           main_write_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_write_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_write_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_write_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_write_pipe_valid_source_payload_len = 8'd0;
reg           main_write_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_write_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_write_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_write_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_write_pipe_valid_source_payload_size = 3'd0;
wire          main_write_pipe_valid_source_ready;
reg           main_write_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_write_resp_buffer_consume = 4'd0;
wire          main_write_resp_buffer_do_read;
wire          main_write_resp_buffer_fifo_in_first;
wire          main_write_resp_buffer_fifo_in_last;
wire    [3:0] main_write_resp_buffer_fifo_in_payload_id;
wire    [1:0] main_write_resp_buffer_fifo_in_payload_resp;
wire          main_write_resp_buffer_fifo_out_first;
wire          main_write_resp_buffer_fifo_out_last;
wire    [3:0] main_write_resp_buffer_fifo_out_payload_id;
wire    [1:0] main_write_resp_buffer_fifo_out_payload_resp;
reg     [4:0] main_write_resp_buffer_level = 5'd0;
reg     [3:0] main_write_resp_buffer_produce = 4'd0;
wire    [3:0] main_write_resp_buffer_rdport_adr;
wire    [7:0] main_write_resp_buffer_rdport_dat_r;
reg           main_write_resp_buffer_replace = 1'd0;
reg           main_write_resp_buffer_sink_first = 1'd0;
reg           main_write_resp_buffer_sink_last = 1'd0;
reg     [3:0] main_write_resp_buffer_sink_payload_id = 4'd0;
reg     [1:0] main_write_resp_buffer_sink_payload_resp = 2'd0;
wire          main_write_resp_buffer_sink_ready;
reg           main_write_resp_buffer_sink_valid = 1'd0;
wire          main_write_resp_buffer_source_first;
wire          main_write_resp_buffer_source_last;
wire    [3:0] main_write_resp_buffer_source_payload_id;
wire    [1:0] main_write_resp_buffer_source_payload_resp;
wire          main_write_resp_buffer_source_ready;
wire          main_write_resp_buffer_source_valid;
wire    [7:0] main_write_resp_buffer_syncfifo_din;
wire    [7:0] main_write_resp_buffer_syncfifo_dout;
wire          main_write_resp_buffer_syncfifo_re;
wire          main_write_resp_buffer_syncfifo_readable;
wire          main_write_resp_buffer_syncfifo_we;
wire          main_write_resp_buffer_syncfifo_writable;
reg     [3:0] main_write_resp_buffer_wrport_adr = 4'd0;
wire    [7:0] main_write_resp_buffer_wrport_dat_r;
wire    [7:0] main_write_resp_buffer_wrport_dat_w;
wire          main_write_resp_buffer_wrport_we;
wire          main_write_sink_sink_first;
wire          main_write_sink_sink_last;
wire          main_write_sink_sink_param_dest;
wire    [3:0] main_write_sink_sink_param_id;
wire          main_write_sink_sink_param_user;
wire   [31:0] main_write_sink_sink_payload_addr;
wire    [1:0] main_write_sink_sink_payload_burst;
wire    [3:0] main_write_sink_sink_payload_cache;
wire    [7:0] main_write_sink_sink_payload_len;
wire          main_write_sink_sink_payload_lock;
wire    [2:0] main_write_sink_sink_payload_prot;
wire    [3:0] main_write_sink_sink_payload_qos;
wire    [3:0] main_write_sink_sink_payload_region;
wire    [2:0] main_write_sink_sink_payload_size;
wire          main_write_sink_sink_ready;
wire          main_write_sink_sink_valid;
wire          main_write_source_source_first;
wire          main_write_source_source_last;
wire          main_write_source_source_param_dest;
wire    [3:0] main_write_source_source_param_id;
wire          main_write_source_source_param_user;
wire   [31:0] main_write_source_source_payload_addr;
wire    [1:0] main_write_source_source_payload_burst;
wire    [3:0] main_write_source_source_payload_cache;
wire    [7:0] main_write_source_source_payload_len;
wire          main_write_source_source_payload_lock;
wire    [2:0] main_write_source_source_payload_prot;
wire    [3:0] main_write_source_source_payload_qos;
wire    [3:0] main_write_source_source_payload_region;
wire    [2:0] main_write_source_source_payload_size;
reg           main_write_source_source_ready = 1'd0;
wire          main_write_source_source_valid;
reg     [3:0] main_write_w_buffer_consume = 4'd0;
wire          main_write_w_buffer_dequeue;
wire          main_write_w_buffer_do_read;
wire          main_write_w_buffer_fifo_in_first;
wire          main_write_w_buffer_fifo_in_last;
wire          main_write_w_buffer_fifo_in_param_dest;
wire    [3:0] main_write_w_buffer_fifo_in_param_id;
wire          main_write_w_buffer_fifo_in_param_user;
wire  [511:0] main_write_w_buffer_fifo_in_payload_data;
wire   [63:0] main_write_w_buffer_fifo_in_payload_strb;
wire          main_write_w_buffer_fifo_out_first;
wire          main_write_w_buffer_fifo_out_last;
wire          main_write_w_buffer_fifo_out_param_dest;
wire    [3:0] main_write_w_buffer_fifo_out_param_id;
wire          main_write_w_buffer_fifo_out_param_user;
wire  [511:0] main_write_w_buffer_fifo_out_payload_data;
wire   [63:0] main_write_w_buffer_fifo_out_payload_strb;
reg     [4:0] main_write_w_buffer_level0 = 5'd0;
wire    [4:0] main_write_w_buffer_level1;
reg     [4:0] main_write_w_buffer_level2 = 5'd0;
reg     [3:0] main_write_w_buffer_produce = 4'd0;
wire          main_write_w_buffer_queue;
wire    [3:0] main_write_w_buffer_rdport_adr;
wire  [583:0] main_write_w_buffer_rdport_dat_r;
wire          main_write_w_buffer_rdport_re;
wire          main_write_w_buffer_re;
reg           main_write_w_buffer_readable = 1'd0;
reg           main_write_w_buffer_replace = 1'd0;
reg           main_write_w_buffer_sink_first = 1'd0;
reg           main_write_w_buffer_sink_last = 1'd0;
reg           main_write_w_buffer_sink_param_dest = 1'd0;
reg     [3:0] main_write_w_buffer_sink_param_id = 4'd0;
reg           main_write_w_buffer_sink_param_user = 1'd0;
reg   [511:0] main_write_w_buffer_sink_payload_data = 512'd0;
reg    [63:0] main_write_w_buffer_sink_payload_strb = 64'd0;
wire          main_write_w_buffer_sink_ready;
reg           main_write_w_buffer_sink_valid = 1'd0;
wire          main_write_w_buffer_source_first;
wire          main_write_w_buffer_source_last;
wire          main_write_w_buffer_source_param_dest;
wire    [3:0] main_write_w_buffer_source_param_id;
wire          main_write_w_buffer_source_param_user;
wire  [511:0] main_write_w_buffer_source_payload_data;
wire   [63:0] main_write_w_buffer_source_payload_strb;
wire          main_write_w_buffer_source_ready;
wire          main_write_w_buffer_source_valid;
wire  [583:0] main_write_w_buffer_syncfifo_din;
wire  [583:0] main_write_w_buffer_syncfifo_dout;
wire          main_write_w_buffer_syncfifo_re;
wire          main_write_w_buffer_syncfifo_readable;
wire          main_write_w_buffer_syncfifo_we;
wire          main_write_w_buffer_syncfifo_writable;
reg     [3:0] main_write_w_buffer_wrport_adr = 4'd0;
wire  [583:0] main_write_w_buffer_wrport_dat_r;
wire  [583:0] main_write_w_buffer_wrport_dat_w;
wire          main_write_w_buffer_wrport_we;
wire          sfp_clk;
wire          sfp_rst;
wire          sys4x_clk;
wire          sys4x_rst;
(* dont_touch = "true" *)
wire          sys_clk;
wire          sys_rst;
wire [31:0]   spdm_output; 
wire [31:0]   spdm_control;
wire spdm_wait;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_rocket_reset = (main_soc_rst | main_cpu_rst);
assign sfp_tx_disable_n = 1'd1;
always @(*) begin
    main_crg_rst <= 1'd0;
    if (main_soc_rst) begin
        main_crg_rst <= 1'd1;
    end
end
assign main_bus_error = builder_error;
always @(*) begin
    main_rocket_interrupt <= 8'd0;
    main_rocket_interrupt[2] <= main_ethmac_sram167_irq;
    main_rocket_interrupt[1] <= main_timer_irq;
    main_rocket_interrupt[0] <= main_uart_irq;
end
assign main_crg_reset = (cpu_reset_n | main_crg_rst);
assign sys_clk = main_crg_clkout_buf0;
assign sys4x_clk = main_crg_clkout_buf1;
assign idelay_clk = main_crg_clkout_buf2;
assign sfp_clk = main_crg_clkout_buf3;
assign main_socbushandler_adapted_interface_interface1_adapted_interface_dat_w = main_socbushandler_adapted_interface_interface0_adapted_interface_dat_w;
assign main_socbushandler_adapted_interface_interface0_adapted_interface_dat_r = main_socbushandler_adapted_interface_interface1_adapted_interface_dat_r;
assign main_socbushandler_adapted_interface_interface1_adapted_interface_sel = main_socbushandler_adapted_interface_interface0_adapted_interface_sel;
assign main_socbushandler_adapted_interface_interface1_adapted_interface_cyc = main_socbushandler_adapted_interface_interface0_adapted_interface_cyc;
assign main_socbushandler_adapted_interface_interface1_adapted_interface_stb = main_socbushandler_adapted_interface_interface0_adapted_interface_stb;
assign main_socbushandler_adapted_interface_interface0_adapted_interface_ack = main_socbushandler_adapted_interface_interface1_adapted_interface_ack;
assign main_socbushandler_adapted_interface_interface1_adapted_interface_we = main_socbushandler_adapted_interface_interface0_adapted_interface_we;
assign main_socbushandler_adapted_interface_interface1_adapted_interface_cti = main_socbushandler_adapted_interface_interface0_adapted_interface_cti;
assign main_socbushandler_adapted_interface_interface1_adapted_interface_bte = main_socbushandler_adapted_interface_interface0_adapted_interface_bte;
assign main_socbushandler_adapted_interface_interface0_adapted_interface_err = main_socbushandler_adapted_interface_interface1_adapted_interface_err;
always @(*) begin
    main_socbushandler_adapted_interface_interface1_adapted_interface_adr <= 32'd0;
    main_socbushandler_adapted_interface_interface1_adapted_interface_adr[31:2] <= main_socbushandler_adapted_interface_interface0_adapted_interface_adr;
end
assign main_ethmac_bus_dat_w = main_adapted_interface_adapted_interface_dat_w;
assign main_adapted_interface_adapted_interface_dat_r = main_ethmac_bus_dat_r;
assign main_ethmac_bus_sel = main_adapted_interface_adapted_interface_sel;
assign main_ethmac_bus_cyc = main_adapted_interface_adapted_interface_cyc;
assign main_ethmac_bus_stb = main_adapted_interface_adapted_interface_stb;
assign main_adapted_interface_adapted_interface_ack = main_ethmac_bus_ack;
assign main_ethmac_bus_we = main_adapted_interface_adapted_interface_we;
assign main_ethmac_bus_cti = main_adapted_interface_adapted_interface_cti;
assign main_ethmac_bus_bte = main_adapted_interface_adapted_interface_bte;
assign main_adapted_interface_adapted_interface_err = main_ethmac_bus_err;
assign main_ethmac_bus_adr = main_adapted_interface_adapted_interface_adr[31:2];
assign main_socbushandler_done = (main_socbushandler_count == 1'd1);
always @(*) begin
    main_socbushandler_adapted_interface_interface0_adapted_interface_cti <= 3'd0;
    case (main_rocket_mmio_wb_cti)
        2'd2: begin
            main_socbushandler_adapted_interface_interface0_adapted_interface_cti <= 2'd2;
        end
        3'd7: begin
            main_socbushandler_adapted_interface_interface0_adapted_interface_cti <= (main_socbushandler_done ? 3'd7 : 2'd2);
        end
        default: begin
            main_socbushandler_adapted_interface_interface0_adapted_interface_cti <= 1'd0;
        end
    endcase
    if ((main_rocket_mmio_wb_bte != 1'd0)) begin
        main_socbushandler_adapted_interface_interface0_adapted_interface_cti <= 1'd0;
    end
end
always @(*) begin
    main_rocket_mmio_wb_ack <= 1'd0;
    main_socbushandler_adapted_interface_interface0_adapted_interface_cyc <= 1'd0;
    main_socbushandler_adapted_interface_interface0_adapted_interface_stb <= 1'd0;
    main_socbushandler_adapted_interface_interface0_adapted_interface_we <= 1'd0;
    main_socbushandler_skip <= 1'd0;
    if ((main_rocket_mmio_wb_stb & main_rocket_mmio_wb_cyc)) begin
        main_socbushandler_skip <= ((main_socbushandler_adapted_interface_interface0_adapted_interface_sel == 1'd0) & (main_socbushandler_adapted_interface_interface0_adapted_interface_cti == 1'd0));
        main_socbushandler_adapted_interface_interface0_adapted_interface_cyc <= (~main_socbushandler_skip);
        main_socbushandler_adapted_interface_interface0_adapted_interface_stb <= (~main_socbushandler_skip);
        main_socbushandler_adapted_interface_interface0_adapted_interface_we <= main_rocket_mmio_wb_we;
        if ((main_socbushandler_adapted_interface_interface0_adapted_interface_ack | main_socbushandler_skip)) begin
            main_rocket_mmio_wb_ack <= main_socbushandler_done;
        end
    end
end
assign main_socbushandler_adapted_interface_interface0_adapted_interface_adr = {main_rocket_mmio_wb_adr, main_socbushandler_count};
always @(*) begin
    main_socbushandler_adapted_interface_interface0_adapted_interface_dat_w <= 32'd0;
    case (main_socbushandler_count)
        1'd0: begin
            main_socbushandler_adapted_interface_interface0_adapted_interface_dat_w <= main_rocket_mmio_wb_dat_w[63:0];
        end
        1'd1: begin
            main_socbushandler_adapted_interface_interface0_adapted_interface_dat_w <= main_rocket_mmio_wb_dat_w[63:32];
        end
    endcase
end
always @(*) begin
    main_socbushandler_adapted_interface_interface0_adapted_interface_sel <= 4'd0;
    case (main_socbushandler_count)
        1'd0: begin
            main_socbushandler_adapted_interface_interface0_adapted_interface_sel <= main_rocket_mmio_wb_sel[7:0];
        end
        1'd1: begin
            main_socbushandler_adapted_interface_interface0_adapted_interface_sel <= main_rocket_mmio_wb_sel[7:4];
        end
    endcase
end
assign main_rocket_mmio_wb_dat_r = {main_socbushandler_adapted_interface_interface0_adapted_interface_dat_r, main_socbushandler_dat_r[63:32]};
assign main_socbushandler_bridge_addr = (main_socbushandler_adapted_interface_interface1_adapted_interface_adr - 1'd0);
always @(*) begin
    builder_wishbone2axi_next_state <= 2'd0;
    main_socbushandler_adapted_interface_interface1_adapted_interface_ack <= 1'd0;
    main_socbushandler_adapted_interface_interface1_adapted_interface_dat_r <= 32'd0;
    main_socbushandler_adapted_interface_interface1_adapted_interface_err <= 1'd0;
    main_socbushandler_bridge_ar_payload_addr <= 32'd0;
    main_socbushandler_bridge_ar_valid <= 1'd0;
    main_socbushandler_bridge_aw_payload_addr <= 32'd0;
    main_socbushandler_bridge_aw_valid <= 1'd0;
    main_socbushandler_bridge_b_ready <= 1'd0;
    main_socbushandler_bridge_cmd_done_wishbone2axi_next_value0 <= 1'd0;
    main_socbushandler_bridge_cmd_done_wishbone2axi_next_value_ce0 <= 1'd0;
    main_socbushandler_bridge_data_done_wishbone2axi_next_value1 <= 1'd0;
    main_socbushandler_bridge_data_done_wishbone2axi_next_value_ce1 <= 1'd0;
    main_socbushandler_bridge_r_ready <= 1'd0;
    main_socbushandler_bridge_w_payload_data <= 32'd0;
    main_socbushandler_bridge_w_payload_strb <= 4'd0;
    main_socbushandler_bridge_w_valid <= 1'd0;
    builder_wishbone2axi_next_state <= builder_wishbone2axi_state;
    case (builder_wishbone2axi_state)
        1'd1: begin
            main_socbushandler_bridge_aw_valid <= (~main_socbushandler_bridge_cmd_done);
            main_socbushandler_bridge_aw_payload_addr[31:0] <= main_socbushandler_bridge_addr;
            if ((main_socbushandler_bridge_aw_valid & main_socbushandler_bridge_aw_ready)) begin
                main_socbushandler_bridge_cmd_done_wishbone2axi_next_value0 <= 1'd1;
                main_socbushandler_bridge_cmd_done_wishbone2axi_next_value_ce0 <= 1'd1;
            end
            main_socbushandler_bridge_w_valid <= (~main_socbushandler_bridge_data_done);
            main_socbushandler_bridge_w_payload_data <= main_socbushandler_adapted_interface_interface1_adapted_interface_dat_w;
            main_socbushandler_bridge_w_payload_strb <= main_socbushandler_adapted_interface_interface1_adapted_interface_sel;
            if ((main_socbushandler_bridge_w_valid & main_socbushandler_bridge_w_ready)) begin
                main_socbushandler_bridge_data_done_wishbone2axi_next_value1 <= 1'd1;
                main_socbushandler_bridge_data_done_wishbone2axi_next_value_ce1 <= 1'd1;
            end
            main_socbushandler_bridge_b_ready <= (main_socbushandler_bridge_cmd_done & main_socbushandler_bridge_data_done);
            if ((main_socbushandler_bridge_b_valid & main_socbushandler_bridge_b_ready)) begin
                if ((main_socbushandler_bridge_b_payload_resp == 1'd0)) begin
                    main_socbushandler_adapted_interface_interface1_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_socbushandler_bridge_ar_valid <= (~main_socbushandler_bridge_cmd_done);
            main_socbushandler_bridge_ar_payload_addr[31:0] <= main_socbushandler_bridge_addr;
            if ((main_socbushandler_bridge_ar_valid & main_socbushandler_bridge_ar_ready)) begin
                main_socbushandler_bridge_cmd_done_wishbone2axi_next_value0 <= 1'd1;
                main_socbushandler_bridge_cmd_done_wishbone2axi_next_value_ce0 <= 1'd1;
            end
            main_socbushandler_bridge_r_ready <= main_socbushandler_bridge_cmd_done;
            if ((main_socbushandler_bridge_r_valid & main_socbushandler_bridge_r_ready)) begin
                if ((main_socbushandler_bridge_r_payload_resp == 1'd0)) begin
                    main_socbushandler_adapted_interface_interface1_adapted_interface_dat_r <= main_socbushandler_bridge_r_payload_data;
                    main_socbushandler_adapted_interface_interface1_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_socbushandler_adapted_interface_interface1_adapted_interface_ack <= 1'd1;
            main_socbushandler_adapted_interface_interface1_adapted_interface_err <= 1'd1;
            builder_wishbone2axi_next_state <= 1'd0;
        end
        default: begin
            main_socbushandler_bridge_cmd_done_wishbone2axi_next_value0 <= 1'd0;
            main_socbushandler_bridge_cmd_done_wishbone2axi_next_value_ce0 <= 1'd1;
            main_socbushandler_bridge_data_done_wishbone2axi_next_value1 <= 1'd0;
            main_socbushandler_bridge_data_done_wishbone2axi_next_value_ce1 <= 1'd1;
            if ((main_socbushandler_adapted_interface_interface1_adapted_interface_stb & main_socbushandler_adapted_interface_interface1_adapted_interface_cyc)) begin
                if (main_socbushandler_adapted_interface_interface1_adapted_interface_we) begin
                    builder_wishbone2axi_next_state <= 1'd1;
                end else begin
                    builder_wishbone2axi_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_socbushandler_adapted_interface_aw_valid = main_socbushandler_bridge_aw_valid;
assign main_socbushandler_bridge_aw_ready = main_socbushandler_adapted_interface_aw_ready;
assign main_socbushandler_adapted_interface_aw_payload_addr = main_socbushandler_bridge_aw_payload_addr;
assign main_socbushandler_adapted_interface_aw_payload_burst = 1'd1;
assign main_socbushandler_adapted_interface_aw_payload_len = 1'd0;
assign main_socbushandler_adapted_interface_aw_payload_size = 2'd2;
assign main_socbushandler_adapted_interface_aw_payload_lock = 1'd0;
assign main_socbushandler_adapted_interface_aw_payload_prot = 1'd0;
assign main_socbushandler_adapted_interface_aw_payload_cache = 2'd3;
assign main_socbushandler_adapted_interface_aw_payload_qos = 1'd0;
assign main_socbushandler_adapted_interface_aw_param_id = 1'd0;
assign main_socbushandler_adapted_interface_w_valid = main_socbushandler_bridge_w_valid;
assign main_socbushandler_bridge_w_ready = main_socbushandler_adapted_interface_w_ready;
assign main_socbushandler_adapted_interface_w_payload_data = main_socbushandler_bridge_w_payload_data;
assign main_socbushandler_adapted_interface_w_payload_strb = main_socbushandler_bridge_w_payload_strb;
assign main_socbushandler_adapted_interface_w_last = 1'd1;
assign main_socbushandler_bridge_b_valid = main_socbushandler_adapted_interface_b_valid;
assign main_socbushandler_bridge_b_payload_resp = main_socbushandler_adapted_interface_b_payload_resp;
assign main_socbushandler_adapted_interface_b_ready = main_socbushandler_bridge_b_ready;
assign main_socbushandler_adapted_interface_ar_valid = main_socbushandler_bridge_ar_valid;
assign main_socbushandler_bridge_ar_ready = main_socbushandler_adapted_interface_ar_ready;
assign main_socbushandler_adapted_interface_ar_payload_addr = main_socbushandler_bridge_ar_payload_addr;
assign main_socbushandler_adapted_interface_ar_payload_burst = 1'd1;
assign main_socbushandler_adapted_interface_ar_payload_len = 1'd0;
assign main_socbushandler_adapted_interface_ar_payload_size = 2'd2;
assign main_socbushandler_adapted_interface_ar_payload_lock = 1'd0;
assign main_socbushandler_adapted_interface_ar_payload_prot = 1'd0;
assign main_socbushandler_adapted_interface_ar_payload_cache = 2'd3;
assign main_socbushandler_adapted_interface_ar_payload_qos = 1'd0;
assign main_socbushandler_adapted_interface_ar_param_id = 1'd0;
assign main_socbushandler_bridge_r_valid = main_socbushandler_adapted_interface_r_valid;
assign main_socbushandler_bridge_r_payload_resp = main_socbushandler_adapted_interface_r_payload_resp;
assign main_socbushandler_bridge_r_payload_data = main_socbushandler_adapted_interface_r_payload_data;
assign main_socbushandler_adapted_interface_r_ready = main_socbushandler_bridge_r_ready;
assign main_basesoc_socbushandler_sink_sink_valid = main_basesoc_socbushandler_ax_burst_valid;
assign main_basesoc_socbushandler_ax_burst_ready = main_basesoc_socbushandler_sink_sink_ready;
assign main_basesoc_socbushandler_sink_sink_first = main_basesoc_socbushandler_ax_burst_first;
assign main_basesoc_socbushandler_sink_sink_last = main_basesoc_socbushandler_ax_burst_last;
assign main_basesoc_socbushandler_sink_sink_payload_addr = main_basesoc_socbushandler_ax_burst_payload_addr;
assign main_basesoc_socbushandler_sink_sink_payload_burst = main_basesoc_socbushandler_ax_burst_payload_burst;
assign main_basesoc_socbushandler_sink_sink_payload_len = main_basesoc_socbushandler_ax_burst_payload_len;
assign main_basesoc_socbushandler_sink_sink_payload_size = main_basesoc_socbushandler_ax_burst_payload_size;
assign main_basesoc_socbushandler_sink_sink_payload_lock = main_basesoc_socbushandler_ax_burst_payload_lock;
assign main_basesoc_socbushandler_sink_sink_payload_prot = main_basesoc_socbushandler_ax_burst_payload_prot;
assign main_basesoc_socbushandler_sink_sink_payload_cache = main_basesoc_socbushandler_ax_burst_payload_cache;
assign main_basesoc_socbushandler_sink_sink_payload_qos = main_basesoc_socbushandler_ax_burst_payload_qos;
assign main_basesoc_socbushandler_sink_sink_payload_region = main_basesoc_socbushandler_ax_burst_payload_region;
assign main_basesoc_socbushandler_sink_sink_param_id = main_basesoc_socbushandler_ax_burst_param_id;
assign main_basesoc_socbushandler_sink_sink_param_dest = main_basesoc_socbushandler_ax_burst_param_dest;
assign main_basesoc_socbushandler_sink_sink_param_user = main_basesoc_socbushandler_ax_burst_param_user;
assign main_basesoc_ram_bus_b_ready = 1'd1;
assign main_basesoc_socbushandler_pipe_valid_sink_ready = ((~main_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_socbushandler_pipe_valid_source_ready);
assign main_basesoc_socbushandler_pipe_valid_sink_valid = main_basesoc_socbushandler_sink_sink_valid;
assign main_basesoc_socbushandler_sink_sink_ready = main_basesoc_socbushandler_pipe_valid_sink_ready;
assign main_basesoc_socbushandler_pipe_valid_sink_first = main_basesoc_socbushandler_sink_sink_first;
assign main_basesoc_socbushandler_pipe_valid_sink_last = main_basesoc_socbushandler_sink_sink_last;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_addr = main_basesoc_socbushandler_sink_sink_payload_addr;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_burst = main_basesoc_socbushandler_sink_sink_payload_burst;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_len = main_basesoc_socbushandler_sink_sink_payload_len;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_size = main_basesoc_socbushandler_sink_sink_payload_size;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_lock = main_basesoc_socbushandler_sink_sink_payload_lock;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_prot = main_basesoc_socbushandler_sink_sink_payload_prot;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_cache = main_basesoc_socbushandler_sink_sink_payload_cache;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_qos = main_basesoc_socbushandler_sink_sink_payload_qos;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_region = main_basesoc_socbushandler_sink_sink_payload_region;
assign main_basesoc_socbushandler_pipe_valid_sink_param_id = main_basesoc_socbushandler_sink_sink_param_id;
assign main_basesoc_socbushandler_pipe_valid_sink_param_dest = main_basesoc_socbushandler_sink_sink_param_dest;
assign main_basesoc_socbushandler_pipe_valid_sink_param_user = main_basesoc_socbushandler_sink_sink_param_user;
assign main_basesoc_socbushandler_source_source_valid = main_basesoc_socbushandler_pipe_valid_source_valid;
assign main_basesoc_socbushandler_pipe_valid_source_ready = main_basesoc_socbushandler_source_source_ready;
assign main_basesoc_socbushandler_source_source_first = main_basesoc_socbushandler_pipe_valid_source_first;
assign main_basesoc_socbushandler_source_source_last = main_basesoc_socbushandler_pipe_valid_source_last;
assign main_basesoc_socbushandler_source_source_payload_addr = main_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign main_basesoc_socbushandler_source_source_payload_burst = main_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign main_basesoc_socbushandler_source_source_payload_len = main_basesoc_socbushandler_pipe_valid_source_payload_len;
assign main_basesoc_socbushandler_source_source_payload_size = main_basesoc_socbushandler_pipe_valid_source_payload_size;
assign main_basesoc_socbushandler_source_source_payload_lock = main_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign main_basesoc_socbushandler_source_source_payload_prot = main_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign main_basesoc_socbushandler_source_source_payload_cache = main_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign main_basesoc_socbushandler_source_source_payload_qos = main_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign main_basesoc_socbushandler_source_source_payload_region = main_basesoc_socbushandler_pipe_valid_source_payload_region;
assign main_basesoc_socbushandler_source_source_param_id = main_basesoc_socbushandler_pipe_valid_source_param_id;
assign main_basesoc_socbushandler_source_source_param_dest = main_basesoc_socbushandler_pipe_valid_source_param_dest;
assign main_basesoc_socbushandler_source_source_param_user = main_basesoc_socbushandler_pipe_valid_source_param_user;
assign main_basesoc_socbushandler_beat_size = (1'd1 <<< main_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_socbushandler_beat_wrap = (main_basesoc_socbushandler_source_source_payload_len <<< main_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_socbushandler_ax_beat_valid = (main_basesoc_socbushandler_source_source_valid | (~main_basesoc_socbushandler_ax_beat_first));
assign main_basesoc_socbushandler_ax_beat_first = (main_basesoc_socbushandler_beat_count == 1'd0);
assign main_basesoc_socbushandler_ax_beat_last = (main_basesoc_socbushandler_beat_count == main_basesoc_socbushandler_source_source_payload_len);
assign main_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, main_basesoc_socbushandler_source_source_payload_addr}) + main_basesoc_socbushandler_beat_offset);
assign main_basesoc_socbushandler_ax_beat_param_id = main_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    main_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (main_basesoc_socbushandler_ax_beat_ready) begin
        if (main_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite0_next_state <= 2'd0;
    main_basesoc_ram_bus_ar_payload_addr <= 32'd0;
    main_basesoc_ram_bus_ar_valid <= 1'd0;
    main_basesoc_ram_bus_aw_payload_addr <= 32'd0;
    main_basesoc_ram_bus_aw_valid <= 1'd0;
    main_basesoc_ram_bus_r_ready <= 1'd0;
    main_basesoc_ram_bus_w_payload_data <= 32'd0;
    main_basesoc_ram_bus_w_payload_strb <= 4'd0;
    main_basesoc_ram_bus_w_valid <= 1'd0;
    main_basesoc_socbushandler_ar_ready <= 1'd0;
    main_basesoc_socbushandler_aw_ready <= 1'd0;
    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    main_basesoc_socbushandler_ax_burst_first <= 1'd0;
    main_basesoc_socbushandler_ax_burst_last <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    main_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    main_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    main_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    main_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    main_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    main_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    main_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    main_basesoc_socbushandler_b_param_id <= 1'd0;
    main_basesoc_socbushandler_b_payload_resp <= 2'd0;
    main_basesoc_socbushandler_b_valid <= 1'd0;
    main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
    main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd0;
    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd0;
    main_basesoc_socbushandler_r_last <= 1'd0;
    main_basesoc_socbushandler_r_param_id <= 1'd0;
    main_basesoc_socbushandler_r_payload_data <= 32'd0;
    main_basesoc_socbushandler_r_payload_resp <= 2'd0;
    main_basesoc_socbushandler_r_valid <= 1'd0;
    main_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite0_next_state <= builder_axi2axilite0_state;
    case (builder_axi2axilite0_state)
        1'd1: begin
            main_basesoc_ram_bus_ar_valid <= (main_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_socbushandler_cmd_done));
            main_basesoc_ram_bus_ar_payload_addr <= main_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_ram_bus_ar_ready & (~main_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_ram_bus_ar_ready) begin
                    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_socbushandler_r_valid <= main_basesoc_ram_bus_r_valid;
            main_basesoc_socbushandler_r_last <= main_basesoc_socbushandler_cmd_done;
            main_basesoc_socbushandler_r_payload_resp <= 1'd0;
            main_basesoc_socbushandler_r_param_id <= main_basesoc_socbushandler_ax_beat_param_id;
            main_basesoc_socbushandler_r_payload_data <= main_basesoc_ram_bus_r_payload_data;
            main_basesoc_ram_bus_r_ready <= main_basesoc_socbushandler_r_ready;
            if (((main_basesoc_socbushandler_r_valid & main_basesoc_socbushandler_r_last) & main_basesoc_socbushandler_r_ready)) begin
                main_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite0_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_basesoc_ram_bus_aw_valid <= (main_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_socbushandler_cmd_done));
            main_basesoc_ram_bus_aw_payload_addr <= main_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_ram_bus_aw_ready & (~main_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_ram_bus_aw_ready) begin
                    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_ram_bus_w_valid <= main_basesoc_socbushandler_w_valid;
            main_basesoc_ram_bus_w_payload_data <= main_basesoc_socbushandler_w_payload_data;
            main_basesoc_ram_bus_w_payload_strb <= main_basesoc_socbushandler_w_payload_strb;
            main_basesoc_socbushandler_w_ready <= main_basesoc_ram_bus_w_ready;
            if (((main_basesoc_socbushandler_w_valid & main_basesoc_socbushandler_w_last) & main_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite0_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_socbushandler_b_valid <= 1'd1;
            main_basesoc_socbushandler_b_payload_resp <= 1'd0;
            main_basesoc_socbushandler_b_param_id <= main_basesoc_socbushandler_ax_beat_param_id;
            if (main_basesoc_socbushandler_b_ready) begin
                main_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite0_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
            main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
            if ((main_basesoc_socbushandler_ar_valid & main_basesoc_socbushandler_aw_valid)) begin
                if (main_basesoc_socbushandler_last_ar_aw_n) begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_aw_valid;
                    main_basesoc_socbushandler_aw_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_aw_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_aw_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_aw_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_aw_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_aw_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_aw_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_aw_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_aw_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_aw_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_aw_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_aw_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_aw_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_aw_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_aw_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 2'd2;
                end else begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_ar_valid;
                    main_basesoc_socbushandler_ar_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_ar_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_ar_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_ar_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_ar_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_socbushandler_ar_valid) begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_ar_valid;
                    main_basesoc_socbushandler_ar_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_ar_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_ar_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_ar_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_ar_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 1'd1;
                end else begin
                    if (main_basesoc_socbushandler_aw_valid) begin
                        main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_aw_valid;
                        main_basesoc_socbushandler_aw_ready <= main_basesoc_socbushandler_ax_burst_ready;
                        main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_aw_first;
                        main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_aw_last;
                        main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_aw_payload_addr;
                        main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_aw_payload_burst;
                        main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_aw_payload_len;
                        main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_aw_payload_size;
                        main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_aw_payload_lock;
                        main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_aw_payload_prot;
                        main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_aw_payload_cache;
                        main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_aw_payload_qos;
                        main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_aw_payload_region;
                        main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_aw_param_id;
                        main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_aw_param_dest;
                        main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_aw_param_user;
                        main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                        main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                        builder_axi2axilite0_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_socbushandler_sink_sink_valid = main_socbushandler_ax_burst_valid;
assign main_socbushandler_ax_burst_ready = main_socbushandler_sink_sink_ready;
assign main_socbushandler_sink_sink_first = main_socbushandler_ax_burst_first;
assign main_socbushandler_sink_sink_last = main_socbushandler_ax_burst_last;
assign main_socbushandler_sink_sink_payload_addr = main_socbushandler_ax_burst_payload_addr;
assign main_socbushandler_sink_sink_payload_burst = main_socbushandler_ax_burst_payload_burst;
assign main_socbushandler_sink_sink_payload_len = main_socbushandler_ax_burst_payload_len;
assign main_socbushandler_sink_sink_payload_size = main_socbushandler_ax_burst_payload_size;
assign main_socbushandler_sink_sink_payload_lock = main_socbushandler_ax_burst_payload_lock;
assign main_socbushandler_sink_sink_payload_prot = main_socbushandler_ax_burst_payload_prot;
assign main_socbushandler_sink_sink_payload_cache = main_socbushandler_ax_burst_payload_cache;
assign main_socbushandler_sink_sink_payload_qos = main_socbushandler_ax_burst_payload_qos;
assign main_socbushandler_sink_sink_payload_region = main_socbushandler_ax_burst_payload_region;
assign main_socbushandler_sink_sink_param_id = main_socbushandler_ax_burst_param_id;
assign main_socbushandler_sink_sink_param_dest = main_socbushandler_ax_burst_param_dest;
assign main_socbushandler_sink_sink_param_user = main_socbushandler_ax_burst_param_user;
assign main_ram_bus_b_ready = 1'd1;
assign main_socbushandler_pipe_valid_sink_ready = ((~main_socbushandler_pipe_valid_source_valid) | main_socbushandler_pipe_valid_source_ready);
assign main_socbushandler_pipe_valid_sink_valid = main_socbushandler_sink_sink_valid;
assign main_socbushandler_sink_sink_ready = main_socbushandler_pipe_valid_sink_ready;
assign main_socbushandler_pipe_valid_sink_first = main_socbushandler_sink_sink_first;
assign main_socbushandler_pipe_valid_sink_last = main_socbushandler_sink_sink_last;
assign main_socbushandler_pipe_valid_sink_payload_addr = main_socbushandler_sink_sink_payload_addr;
assign main_socbushandler_pipe_valid_sink_payload_burst = main_socbushandler_sink_sink_payload_burst;
assign main_socbushandler_pipe_valid_sink_payload_len = main_socbushandler_sink_sink_payload_len;
assign main_socbushandler_pipe_valid_sink_payload_size = main_socbushandler_sink_sink_payload_size;
assign main_socbushandler_pipe_valid_sink_payload_lock = main_socbushandler_sink_sink_payload_lock;
assign main_socbushandler_pipe_valid_sink_payload_prot = main_socbushandler_sink_sink_payload_prot;
assign main_socbushandler_pipe_valid_sink_payload_cache = main_socbushandler_sink_sink_payload_cache;
assign main_socbushandler_pipe_valid_sink_payload_qos = main_socbushandler_sink_sink_payload_qos;
assign main_socbushandler_pipe_valid_sink_payload_region = main_socbushandler_sink_sink_payload_region;
assign main_socbushandler_pipe_valid_sink_param_id = main_socbushandler_sink_sink_param_id;
assign main_socbushandler_pipe_valid_sink_param_dest = main_socbushandler_sink_sink_param_dest;
assign main_socbushandler_pipe_valid_sink_param_user = main_socbushandler_sink_sink_param_user;
assign main_socbushandler_source_source_valid = main_socbushandler_pipe_valid_source_valid;
assign main_socbushandler_pipe_valid_source_ready = main_socbushandler_source_source_ready;
assign main_socbushandler_source_source_first = main_socbushandler_pipe_valid_source_first;
assign main_socbushandler_source_source_last = main_socbushandler_pipe_valid_source_last;
assign main_socbushandler_source_source_payload_addr = main_socbushandler_pipe_valid_source_payload_addr;
assign main_socbushandler_source_source_payload_burst = main_socbushandler_pipe_valid_source_payload_burst;
assign main_socbushandler_source_source_payload_len = main_socbushandler_pipe_valid_source_payload_len;
assign main_socbushandler_source_source_payload_size = main_socbushandler_pipe_valid_source_payload_size;
assign main_socbushandler_source_source_payload_lock = main_socbushandler_pipe_valid_source_payload_lock;
assign main_socbushandler_source_source_payload_prot = main_socbushandler_pipe_valid_source_payload_prot;
assign main_socbushandler_source_source_payload_cache = main_socbushandler_pipe_valid_source_payload_cache;
assign main_socbushandler_source_source_payload_qos = main_socbushandler_pipe_valid_source_payload_qos;
assign main_socbushandler_source_source_payload_region = main_socbushandler_pipe_valid_source_payload_region;
assign main_socbushandler_source_source_param_id = main_socbushandler_pipe_valid_source_param_id;
assign main_socbushandler_source_source_param_dest = main_socbushandler_pipe_valid_source_param_dest;
assign main_socbushandler_source_source_param_user = main_socbushandler_pipe_valid_source_param_user;
assign main_socbushandler_beat_size = (1'd1 <<< main_socbushandler_source_source_payload_size);
assign main_socbushandler_beat_wrap = (main_socbushandler_source_source_payload_len <<< main_socbushandler_source_source_payload_size);
assign main_socbushandler_ax_beat_valid = (main_socbushandler_source_source_valid | (~main_socbushandler_ax_beat_first));
assign main_socbushandler_ax_beat_first = (main_socbushandler_beat_count == 1'd0);
assign main_socbushandler_ax_beat_last = (main_socbushandler_beat_count == main_socbushandler_source_source_payload_len);
assign main_socbushandler_ax_beat_payload_addr = ($signed({1'd0, main_socbushandler_source_source_payload_addr}) + main_socbushandler_beat_offset);
assign main_socbushandler_ax_beat_param_id = main_socbushandler_source_source_param_id;
always @(*) begin
    main_socbushandler_source_source_ready <= 1'd0;
    if (main_socbushandler_ax_beat_ready) begin
        if (main_socbushandler_ax_beat_last) begin
            main_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite1_next_state <= 2'd0;
    main_ram_bus_ar_payload_addr <= 32'd0;
    main_ram_bus_ar_valid <= 1'd0;
    main_ram_bus_aw_payload_addr <= 32'd0;
    main_ram_bus_aw_valid <= 1'd0;
    main_ram_bus_r_ready <= 1'd0;
    main_ram_bus_w_payload_data <= 32'd0;
    main_ram_bus_w_payload_strb <= 4'd0;
    main_ram_bus_w_valid <= 1'd0;
    main_socbushandler_ar_ready <= 1'd0;
    main_socbushandler_aw_ready <= 1'd0;
    main_socbushandler_ax_beat_ready <= 1'd0;
    main_socbushandler_ax_burst_first <= 1'd0;
    main_socbushandler_ax_burst_last <= 1'd0;
    main_socbushandler_ax_burst_param_dest <= 1'd0;
    main_socbushandler_ax_burst_param_id <= 1'd0;
    main_socbushandler_ax_burst_param_user <= 1'd0;
    main_socbushandler_ax_burst_payload_addr <= 32'd0;
    main_socbushandler_ax_burst_payload_burst <= 2'd0;
    main_socbushandler_ax_burst_payload_cache <= 4'd0;
    main_socbushandler_ax_burst_payload_len <= 8'd0;
    main_socbushandler_ax_burst_payload_lock <= 1'd0;
    main_socbushandler_ax_burst_payload_prot <= 3'd0;
    main_socbushandler_ax_burst_payload_qos <= 4'd0;
    main_socbushandler_ax_burst_payload_region <= 4'd0;
    main_socbushandler_ax_burst_payload_size <= 3'd0;
    main_socbushandler_ax_burst_valid <= 1'd0;
    main_socbushandler_b_param_id <= 1'd0;
    main_socbushandler_b_payload_resp <= 2'd0;
    main_socbushandler_b_valid <= 1'd0;
    main_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd0;
    main_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd0;
    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd0;
    main_socbushandler_r_last <= 1'd0;
    main_socbushandler_r_param_id <= 1'd0;
    main_socbushandler_r_payload_data <= 32'd0;
    main_socbushandler_r_payload_resp <= 2'd0;
    main_socbushandler_r_valid <= 1'd0;
    main_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite1_next_state <= builder_axi2axilite1_state;
    case (builder_axi2axilite1_state)
        1'd1: begin
            main_ram_bus_ar_valid <= (main_socbushandler_ax_beat_valid & (~main_socbushandler_cmd_done));
            main_ram_bus_ar_payload_addr <= main_socbushandler_ax_beat_payload_addr;
            main_socbushandler_ax_beat_ready <= (main_ram_bus_ar_ready & (~main_socbushandler_cmd_done));
            if ((main_socbushandler_ax_beat_valid & main_socbushandler_ax_beat_last)) begin
                if (main_ram_bus_ar_ready) begin
                    main_socbushandler_ax_beat_ready <= 1'd0;
                    main_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    main_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            main_socbushandler_r_valid <= main_ram_bus_r_valid;
            main_socbushandler_r_last <= main_socbushandler_cmd_done;
            main_socbushandler_r_payload_resp <= 1'd0;
            main_socbushandler_r_param_id <= main_socbushandler_ax_beat_param_id;
            main_socbushandler_r_payload_data <= main_ram_bus_r_payload_data;
            main_ram_bus_r_ready <= main_socbushandler_r_ready;
            if (((main_socbushandler_r_valid & main_socbushandler_r_last) & main_socbushandler_r_ready)) begin
                main_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite1_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_ram_bus_aw_valid <= (main_socbushandler_ax_beat_valid & (~main_socbushandler_cmd_done));
            main_ram_bus_aw_payload_addr <= main_socbushandler_ax_beat_payload_addr;
            main_socbushandler_ax_beat_ready <= (main_ram_bus_aw_ready & (~main_socbushandler_cmd_done));
            if ((main_socbushandler_ax_beat_valid & main_socbushandler_ax_beat_last)) begin
                if (main_ram_bus_aw_ready) begin
                    main_socbushandler_ax_beat_ready <= 1'd0;
                    main_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    main_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            main_ram_bus_w_valid <= main_socbushandler_w_valid;
            main_ram_bus_w_payload_data <= main_socbushandler_w_payload_data;
            main_ram_bus_w_payload_strb <= main_socbushandler_w_payload_strb;
            main_socbushandler_w_ready <= main_ram_bus_w_ready;
            if (((main_socbushandler_w_valid & main_socbushandler_w_last) & main_socbushandler_w_ready)) begin
                builder_axi2axilite1_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_socbushandler_b_valid <= 1'd1;
            main_socbushandler_b_payload_resp <= 1'd0;
            main_socbushandler_b_param_id <= main_socbushandler_ax_beat_param_id;
            if (main_socbushandler_b_ready) begin
                main_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite1_next_state <= 1'd0;
            end
        end
        default: begin
            main_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd0;
            main_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
            if ((main_socbushandler_ar_valid & main_socbushandler_aw_valid)) begin
                if (main_socbushandler_last_ar_aw_n) begin
                    main_socbushandler_ax_burst_valid <= main_socbushandler_aw_valid;
                    main_socbushandler_aw_ready <= main_socbushandler_ax_burst_ready;
                    main_socbushandler_ax_burst_first <= main_socbushandler_aw_first;
                    main_socbushandler_ax_burst_last <= main_socbushandler_aw_last;
                    main_socbushandler_ax_burst_payload_addr <= main_socbushandler_aw_payload_addr;
                    main_socbushandler_ax_burst_payload_burst <= main_socbushandler_aw_payload_burst;
                    main_socbushandler_ax_burst_payload_len <= main_socbushandler_aw_payload_len;
                    main_socbushandler_ax_burst_payload_size <= main_socbushandler_aw_payload_size;
                    main_socbushandler_ax_burst_payload_lock <= main_socbushandler_aw_payload_lock;
                    main_socbushandler_ax_burst_payload_prot <= main_socbushandler_aw_payload_prot;
                    main_socbushandler_ax_burst_payload_cache <= main_socbushandler_aw_payload_cache;
                    main_socbushandler_ax_burst_payload_qos <= main_socbushandler_aw_payload_qos;
                    main_socbushandler_ax_burst_payload_region <= main_socbushandler_aw_payload_region;
                    main_socbushandler_ax_burst_param_id <= main_socbushandler_aw_param_id;
                    main_socbushandler_ax_burst_param_dest <= main_socbushandler_aw_param_dest;
                    main_socbushandler_ax_burst_param_user <= main_socbushandler_aw_param_user;
                    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 2'd2;
                end else begin
                    main_socbushandler_ax_burst_valid <= main_socbushandler_ar_valid;
                    main_socbushandler_ar_ready <= main_socbushandler_ax_burst_ready;
                    main_socbushandler_ax_burst_first <= main_socbushandler_ar_first;
                    main_socbushandler_ax_burst_last <= main_socbushandler_ar_last;
                    main_socbushandler_ax_burst_payload_addr <= main_socbushandler_ar_payload_addr;
                    main_socbushandler_ax_burst_payload_burst <= main_socbushandler_ar_payload_burst;
                    main_socbushandler_ax_burst_payload_len <= main_socbushandler_ar_payload_len;
                    main_socbushandler_ax_burst_payload_size <= main_socbushandler_ar_payload_size;
                    main_socbushandler_ax_burst_payload_lock <= main_socbushandler_ar_payload_lock;
                    main_socbushandler_ax_burst_payload_prot <= main_socbushandler_ar_payload_prot;
                    main_socbushandler_ax_burst_payload_cache <= main_socbushandler_ar_payload_cache;
                    main_socbushandler_ax_burst_payload_qos <= main_socbushandler_ar_payload_qos;
                    main_socbushandler_ax_burst_payload_region <= main_socbushandler_ar_payload_region;
                    main_socbushandler_ax_burst_param_id <= main_socbushandler_ar_param_id;
                    main_socbushandler_ax_burst_param_dest <= main_socbushandler_ar_param_dest;
                    main_socbushandler_ax_burst_param_user <= main_socbushandler_ar_param_user;
                    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 1'd1;
                end
            end else begin
                if (main_socbushandler_ar_valid) begin
                    main_socbushandler_ax_burst_valid <= main_socbushandler_ar_valid;
                    main_socbushandler_ar_ready <= main_socbushandler_ax_burst_ready;
                    main_socbushandler_ax_burst_first <= main_socbushandler_ar_first;
                    main_socbushandler_ax_burst_last <= main_socbushandler_ar_last;
                    main_socbushandler_ax_burst_payload_addr <= main_socbushandler_ar_payload_addr;
                    main_socbushandler_ax_burst_payload_burst <= main_socbushandler_ar_payload_burst;
                    main_socbushandler_ax_burst_payload_len <= main_socbushandler_ar_payload_len;
                    main_socbushandler_ax_burst_payload_size <= main_socbushandler_ar_payload_size;
                    main_socbushandler_ax_burst_payload_lock <= main_socbushandler_ar_payload_lock;
                    main_socbushandler_ax_burst_payload_prot <= main_socbushandler_ar_payload_prot;
                    main_socbushandler_ax_burst_payload_cache <= main_socbushandler_ar_payload_cache;
                    main_socbushandler_ax_burst_payload_qos <= main_socbushandler_ar_payload_qos;
                    main_socbushandler_ax_burst_payload_region <= main_socbushandler_ar_payload_region;
                    main_socbushandler_ax_burst_param_id <= main_socbushandler_ar_param_id;
                    main_socbushandler_ax_burst_param_dest <= main_socbushandler_ar_param_dest;
                    main_socbushandler_ax_burst_param_user <= main_socbushandler_ar_param_user;
                    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    main_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 1'd1;
                end else begin
                    if (main_socbushandler_aw_valid) begin
                        main_socbushandler_ax_burst_valid <= main_socbushandler_aw_valid;
                        main_socbushandler_aw_ready <= main_socbushandler_ax_burst_ready;
                        main_socbushandler_ax_burst_first <= main_socbushandler_aw_first;
                        main_socbushandler_ax_burst_last <= main_socbushandler_aw_last;
                        main_socbushandler_ax_burst_payload_addr <= main_socbushandler_aw_payload_addr;
                        main_socbushandler_ax_burst_payload_burst <= main_socbushandler_aw_payload_burst;
                        main_socbushandler_ax_burst_payload_len <= main_socbushandler_aw_payload_len;
                        main_socbushandler_ax_burst_payload_size <= main_socbushandler_aw_payload_size;
                        main_socbushandler_ax_burst_payload_lock <= main_socbushandler_aw_payload_lock;
                        main_socbushandler_ax_burst_payload_prot <= main_socbushandler_aw_payload_prot;
                        main_socbushandler_ax_burst_payload_cache <= main_socbushandler_aw_payload_cache;
                        main_socbushandler_ax_burst_payload_qos <= main_socbushandler_aw_payload_qos;
                        main_socbushandler_ax_burst_payload_region <= main_socbushandler_aw_payload_region;
                        main_socbushandler_ax_burst_param_id <= main_socbushandler_aw_param_id;
                        main_socbushandler_ax_burst_param_dest <= main_socbushandler_aw_param_dest;
                        main_socbushandler_ax_burst_param_user <= main_socbushandler_aw_param_user;
                        main_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                        main_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                        builder_axi2axilite1_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_bridge_axi2axi_lite_sink_sink_valid = main_bridge_axi2axi_lite_ax_burst_valid;
assign main_bridge_axi2axi_lite_ax_burst_ready = main_bridge_axi2axi_lite_sink_sink_ready;
assign main_bridge_axi2axi_lite_sink_sink_first = main_bridge_axi2axi_lite_ax_burst_first;
assign main_bridge_axi2axi_lite_sink_sink_last = main_bridge_axi2axi_lite_ax_burst_last;
assign main_bridge_axi2axi_lite_sink_sink_payload_addr = main_bridge_axi2axi_lite_ax_burst_payload_addr;
assign main_bridge_axi2axi_lite_sink_sink_payload_burst = main_bridge_axi2axi_lite_ax_burst_payload_burst;
assign main_bridge_axi2axi_lite_sink_sink_payload_len = main_bridge_axi2axi_lite_ax_burst_payload_len;
assign main_bridge_axi2axi_lite_sink_sink_payload_size = main_bridge_axi2axi_lite_ax_burst_payload_size;
assign main_bridge_axi2axi_lite_sink_sink_payload_lock = main_bridge_axi2axi_lite_ax_burst_payload_lock;
assign main_bridge_axi2axi_lite_sink_sink_payload_prot = main_bridge_axi2axi_lite_ax_burst_payload_prot;
assign main_bridge_axi2axi_lite_sink_sink_payload_cache = main_bridge_axi2axi_lite_ax_burst_payload_cache;
assign main_bridge_axi2axi_lite_sink_sink_payload_qos = main_bridge_axi2axi_lite_ax_burst_payload_qos;
assign main_bridge_axi2axi_lite_sink_sink_payload_region = main_bridge_axi2axi_lite_ax_burst_payload_region;
assign main_bridge_axi2axi_lite_sink_sink_param_id = main_bridge_axi2axi_lite_ax_burst_param_id;
assign main_bridge_axi2axi_lite_sink_sink_param_dest = main_bridge_axi2axi_lite_ax_burst_param_dest;
assign main_bridge_axi2axi_lite_sink_sink_param_user = main_bridge_axi2axi_lite_ax_burst_param_user;
assign main_bridge_b_ready = 1'd1;
assign main_bridge_axi2axi_lite_pipe_valid_sink_ready = ((~main_bridge_axi2axi_lite_pipe_valid_source_valid) | main_bridge_axi2axi_lite_pipe_valid_source_ready);
assign main_bridge_axi2axi_lite_pipe_valid_sink_valid = main_bridge_axi2axi_lite_sink_sink_valid;
assign main_bridge_axi2axi_lite_sink_sink_ready = main_bridge_axi2axi_lite_pipe_valid_sink_ready;
assign main_bridge_axi2axi_lite_pipe_valid_sink_first = main_bridge_axi2axi_lite_sink_sink_first;
assign main_bridge_axi2axi_lite_pipe_valid_sink_last = main_bridge_axi2axi_lite_sink_sink_last;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_addr = main_bridge_axi2axi_lite_sink_sink_payload_addr;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_burst = main_bridge_axi2axi_lite_sink_sink_payload_burst;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_len = main_bridge_axi2axi_lite_sink_sink_payload_len;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_size = main_bridge_axi2axi_lite_sink_sink_payload_size;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_lock = main_bridge_axi2axi_lite_sink_sink_payload_lock;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_prot = main_bridge_axi2axi_lite_sink_sink_payload_prot;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_cache = main_bridge_axi2axi_lite_sink_sink_payload_cache;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_qos = main_bridge_axi2axi_lite_sink_sink_payload_qos;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_region = main_bridge_axi2axi_lite_sink_sink_payload_region;
assign main_bridge_axi2axi_lite_pipe_valid_sink_param_id = main_bridge_axi2axi_lite_sink_sink_param_id;
assign main_bridge_axi2axi_lite_pipe_valid_sink_param_dest = main_bridge_axi2axi_lite_sink_sink_param_dest;
assign main_bridge_axi2axi_lite_pipe_valid_sink_param_user = main_bridge_axi2axi_lite_sink_sink_param_user;
assign main_bridge_axi2axi_lite_source_source_valid = main_bridge_axi2axi_lite_pipe_valid_source_valid;
assign main_bridge_axi2axi_lite_pipe_valid_source_ready = main_bridge_axi2axi_lite_source_source_ready;
assign main_bridge_axi2axi_lite_source_source_first = main_bridge_axi2axi_lite_pipe_valid_source_first;
assign main_bridge_axi2axi_lite_source_source_last = main_bridge_axi2axi_lite_pipe_valid_source_last;
assign main_bridge_axi2axi_lite_source_source_payload_addr = main_bridge_axi2axi_lite_pipe_valid_source_payload_addr;
assign main_bridge_axi2axi_lite_source_source_payload_burst = main_bridge_axi2axi_lite_pipe_valid_source_payload_burst;
assign main_bridge_axi2axi_lite_source_source_payload_len = main_bridge_axi2axi_lite_pipe_valid_source_payload_len;
assign main_bridge_axi2axi_lite_source_source_payload_size = main_bridge_axi2axi_lite_pipe_valid_source_payload_size;
assign main_bridge_axi2axi_lite_source_source_payload_lock = main_bridge_axi2axi_lite_pipe_valid_source_payload_lock;
assign main_bridge_axi2axi_lite_source_source_payload_prot = main_bridge_axi2axi_lite_pipe_valid_source_payload_prot;
assign main_bridge_axi2axi_lite_source_source_payload_cache = main_bridge_axi2axi_lite_pipe_valid_source_payload_cache;
assign main_bridge_axi2axi_lite_source_source_payload_qos = main_bridge_axi2axi_lite_pipe_valid_source_payload_qos;
assign main_bridge_axi2axi_lite_source_source_payload_region = main_bridge_axi2axi_lite_pipe_valid_source_payload_region;
assign main_bridge_axi2axi_lite_source_source_param_id = main_bridge_axi2axi_lite_pipe_valid_source_param_id;
assign main_bridge_axi2axi_lite_source_source_param_dest = main_bridge_axi2axi_lite_pipe_valid_source_param_dest;
assign main_bridge_axi2axi_lite_source_source_param_user = main_bridge_axi2axi_lite_pipe_valid_source_param_user;
assign main_bridge_axi2axi_lite_beat_size = (1'd1 <<< main_bridge_axi2axi_lite_source_source_payload_size);
assign main_bridge_axi2axi_lite_beat_wrap = (main_bridge_axi2axi_lite_source_source_payload_len <<< main_bridge_axi2axi_lite_source_source_payload_size);
assign main_bridge_axi2axi_lite_ax_beat_valid = (main_bridge_axi2axi_lite_source_source_valid | (~main_bridge_axi2axi_lite_ax_beat_first));
assign main_bridge_axi2axi_lite_ax_beat_first = (main_bridge_axi2axi_lite_beat_count == 1'd0);
assign main_bridge_axi2axi_lite_ax_beat_last = (main_bridge_axi2axi_lite_beat_count == main_bridge_axi2axi_lite_source_source_payload_len);
assign main_bridge_axi2axi_lite_ax_beat_payload_addr = ($signed({1'd0, main_bridge_axi2axi_lite_source_source_payload_addr}) + main_bridge_axi2axi_lite_beat_offset);
assign main_bridge_axi2axi_lite_ax_beat_param_id = main_bridge_axi2axi_lite_source_source_param_id;
always @(*) begin
    main_bridge_axi2axi_lite_source_source_ready <= 1'd0;
    if (main_bridge_axi2axi_lite_ax_beat_ready) begin
        if (main_bridge_axi2axi_lite_ax_beat_last) begin
            main_bridge_axi2axi_lite_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite_next_state <= 2'd0;
    main_adapted_interface_ar_ready <= 1'd0;
    main_adapted_interface_aw_ready <= 1'd0;
    main_adapted_interface_b_param_id <= 1'd0;
    main_adapted_interface_b_payload_resp <= 2'd0;
    main_adapted_interface_b_valid <= 1'd0;
    main_adapted_interface_r_last <= 1'd0;
    main_adapted_interface_r_param_id <= 1'd0;
    main_adapted_interface_r_payload_data <= 32'd0;
    main_adapted_interface_r_payload_resp <= 2'd0;
    main_adapted_interface_r_valid <= 1'd0;
    main_adapted_interface_w_ready <= 1'd0;
    main_bridge_ar_payload_addr <= 32'd0;
    main_bridge_ar_valid <= 1'd0;
    main_bridge_aw_payload_addr <= 32'd0;
    main_bridge_aw_valid <= 1'd0;
    main_bridge_axi2axi_lite_ax_beat_ready <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_first <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_last <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_param_dest <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_param_id <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_param_user <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_addr <= 32'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_burst <= 2'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_cache <= 4'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_len <= 8'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_lock <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_prot <= 3'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_qos <= 4'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_region <= 4'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_size <= 3'd0;
    main_bridge_axi2axi_lite_ax_burst_valid <= 1'd0;
    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd0;
    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd0;
    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd0;
    main_bridge_r_ready <= 1'd0;
    main_bridge_w_payload_data <= 32'd0;
    main_bridge_w_payload_strb <= 4'd0;
    main_bridge_w_valid <= 1'd0;
    builder_axi2axilite_next_state <= builder_axi2axilite_state;
    case (builder_axi2axilite_state)
        1'd1: begin
            main_bridge_ar_valid <= (main_bridge_axi2axi_lite_ax_beat_valid & (~main_bridge_axi2axi_lite_cmd_done));
            main_bridge_ar_payload_addr <= main_bridge_axi2axi_lite_ax_beat_payload_addr;
            main_bridge_axi2axi_lite_ax_beat_ready <= (main_bridge_ar_ready & (~main_bridge_axi2axi_lite_cmd_done));
            if ((main_bridge_axi2axi_lite_ax_beat_valid & main_bridge_axi2axi_lite_ax_beat_last)) begin
                if (main_bridge_ar_ready) begin
                    main_bridge_axi2axi_lite_ax_beat_ready <= 1'd0;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd1;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            main_adapted_interface_r_valid <= main_bridge_r_valid;
            main_adapted_interface_r_last <= main_bridge_axi2axi_lite_cmd_done;
            main_adapted_interface_r_payload_resp <= 1'd0;
            main_adapted_interface_r_param_id <= main_bridge_axi2axi_lite_ax_beat_param_id;
            main_adapted_interface_r_payload_data <= main_bridge_r_payload_data;
            main_bridge_r_ready <= main_adapted_interface_r_ready;
            if (((main_adapted_interface_r_valid & main_adapted_interface_r_last) & main_adapted_interface_r_ready)) begin
                main_bridge_axi2axi_lite_ax_beat_ready <= 1'd1;
                builder_axi2axilite_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_bridge_aw_valid <= (main_bridge_axi2axi_lite_ax_beat_valid & (~main_bridge_axi2axi_lite_cmd_done));
            main_bridge_aw_payload_addr <= main_bridge_axi2axi_lite_ax_beat_payload_addr;
            main_bridge_axi2axi_lite_ax_beat_ready <= (main_bridge_aw_ready & (~main_bridge_axi2axi_lite_cmd_done));
            if ((main_bridge_axi2axi_lite_ax_beat_valid & main_bridge_axi2axi_lite_ax_beat_last)) begin
                if (main_bridge_aw_ready) begin
                    main_bridge_axi2axi_lite_ax_beat_ready <= 1'd0;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd1;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            main_bridge_w_valid <= main_adapted_interface_w_valid;
            main_bridge_w_payload_data <= main_adapted_interface_w_payload_data;
            main_bridge_w_payload_strb <= main_adapted_interface_w_payload_strb;
            main_adapted_interface_w_ready <= main_bridge_w_ready;
            if (((main_adapted_interface_w_valid & main_adapted_interface_w_last) & main_adapted_interface_w_ready)) begin
                builder_axi2axilite_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_adapted_interface_b_valid <= 1'd1;
            main_adapted_interface_b_payload_resp <= 1'd0;
            main_adapted_interface_b_param_id <= main_bridge_axi2axi_lite_ax_beat_param_id;
            if (main_adapted_interface_b_ready) begin
                main_bridge_axi2axi_lite_ax_beat_ready <= 1'd1;
                builder_axi2axilite_next_state <= 1'd0;
            end
        end
        default: begin
            main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd0;
            main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
            if ((main_adapted_interface_ar_valid & main_adapted_interface_aw_valid)) begin
                if (main_bridge_axi2axi_lite_last_ar_aw_n) begin
                    main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_aw_valid;
                    main_adapted_interface_aw_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                    main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_aw_first;
                    main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_aw_last;
                    main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_aw_payload_addr;
                    main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_aw_payload_burst;
                    main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_aw_payload_len;
                    main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_aw_payload_size;
                    main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_aw_payload_lock;
                    main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_aw_payload_prot;
                    main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_aw_payload_cache;
                    main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_aw_payload_qos;
                    main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_aw_payload_region;
                    main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_aw_param_id;
                    main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_aw_param_dest;
                    main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_aw_param_user;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_axi2axilite_next_state <= 2'd2;
                end else begin
                    main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_ar_valid;
                    main_adapted_interface_ar_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                    main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_ar_first;
                    main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_ar_last;
                    main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_ar_payload_addr;
                    main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_ar_payload_burst;
                    main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_ar_payload_len;
                    main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_ar_payload_size;
                    main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_ar_payload_lock;
                    main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_ar_payload_prot;
                    main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_ar_payload_cache;
                    main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_ar_payload_qos;
                    main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_ar_payload_region;
                    main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_ar_param_id;
                    main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_ar_param_dest;
                    main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_ar_param_user;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd1;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_axi2axilite_next_state <= 1'd1;
                end
            end else begin
                if (main_adapted_interface_ar_valid) begin
                    main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_ar_valid;
                    main_adapted_interface_ar_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                    main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_ar_first;
                    main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_ar_last;
                    main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_ar_payload_addr;
                    main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_ar_payload_burst;
                    main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_ar_payload_len;
                    main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_ar_payload_size;
                    main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_ar_payload_lock;
                    main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_ar_payload_prot;
                    main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_ar_payload_cache;
                    main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_ar_payload_qos;
                    main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_ar_payload_region;
                    main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_ar_param_id;
                    main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_ar_param_dest;
                    main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_ar_param_user;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd1;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_axi2axilite_next_state <= 1'd1;
                end else begin
                    if (main_adapted_interface_aw_valid) begin
                        main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_aw_valid;
                        main_adapted_interface_aw_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                        main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_aw_first;
                        main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_aw_last;
                        main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_aw_payload_addr;
                        main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_aw_payload_burst;
                        main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_aw_payload_len;
                        main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_aw_payload_size;
                        main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_aw_payload_lock;
                        main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_aw_payload_prot;
                        main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_aw_payload_cache;
                        main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_aw_payload_qos;
                        main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_aw_payload_region;
                        main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_aw_param_id;
                        main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_aw_param_dest;
                        main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_aw_param_user;
                        main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
                        main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                        builder_axi2axilite_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_bridge_axi_lite2wishbone_r_addr = (main_bridge_ar_payload_addr - 1'd0);
assign main_bridge_axi_lite2wishbone_w_addr = (main_bridge_aw_payload_addr - 1'd0);
always @(*) begin
    builder_axilite2wishbone_next_state <= 3'd0;
    main_adapted_interface_adapted_interface_adr <= 32'd0;
    main_adapted_interface_adapted_interface_cyc <= 1'd0;
    main_adapted_interface_adapted_interface_dat_w <= 32'd0;
    main_adapted_interface_adapted_interface_sel <= 4'd0;
    main_adapted_interface_adapted_interface_stb <= 1'd0;
    main_adapted_interface_adapted_interface_we <= 1'd0;
    main_bridge_ar_ready <= 1'd0;
    main_bridge_aw_ready <= 1'd0;
    main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1 <= 32'd0;
    main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1 <= 1'd0;
    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd0;
    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd0;
    main_bridge_b_payload_resp <= 2'd0;
    main_bridge_b_valid <= 1'd0;
    main_bridge_r_payload_data <= 32'd0;
    main_bridge_r_payload_resp <= 2'd0;
    main_bridge_r_valid <= 1'd0;
    main_bridge_w_ready <= 1'd0;
    builder_axilite2wishbone_next_state <= builder_axilite2wishbone_state;
    case (builder_axilite2wishbone_state)
        1'd1: begin
            main_adapted_interface_adapted_interface_stb <= 1'd1;
            main_adapted_interface_adapted_interface_cyc <= 1'd1;
            main_adapted_interface_adapted_interface_adr <= main_bridge_axi_lite2wishbone_r_addr[31:0];
            main_adapted_interface_adapted_interface_sel <= 4'd15;
            if (main_adapted_interface_adapted_interface_ack) begin
                main_bridge_ar_ready <= 1'd1;
                main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1 <= main_adapted_interface_adapted_interface_dat_r;
                main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1 <= 1'd1;
                builder_axilite2wishbone_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_bridge_r_valid <= 1'd1;
            main_bridge_r_payload_resp <= 1'd0;
            main_bridge_r_payload_data <= main_bridge_axi_lite2wishbone_data;
            if (main_bridge_r_ready) begin
                builder_axilite2wishbone_next_state <= 1'd0;
            end
        end
        2'd3: begin
            main_adapted_interface_adapted_interface_stb <= main_bridge_w_valid;
            main_adapted_interface_adapted_interface_cyc <= main_bridge_w_valid;
            main_adapted_interface_adapted_interface_we <= 1'd1;
            main_adapted_interface_adapted_interface_adr <= main_bridge_axi_lite2wishbone_w_addr[31:0];
            main_adapted_interface_adapted_interface_sel <= main_bridge_w_payload_strb;
            main_adapted_interface_adapted_interface_dat_w <= main_bridge_w_payload_data;
            if (main_adapted_interface_adapted_interface_ack) begin
                main_bridge_aw_ready <= 1'd1;
                main_bridge_w_ready <= 1'd1;
                builder_axilite2wishbone_next_state <= 3'd4;
            end
        end
        3'd4: begin
            main_bridge_b_valid <= 1'd1;
            main_bridge_b_payload_resp <= 1'd0;
            if (main_bridge_b_ready) begin
                builder_axilite2wishbone_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_bridge_ar_valid & main_bridge_aw_valid)) begin
                if (main_bridge_axi_lite2wishbone_last_ar_aw_n) begin
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd0;
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_axilite2wishbone_next_state <= 2'd3;
                end else begin
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd1;
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_axilite2wishbone_next_state <= 1'd1;
                end
            end else begin
                if (main_bridge_ar_valid) begin
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd1;
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_axilite2wishbone_next_state <= 1'd1;
                end else begin
                    if (main_bridge_aw_valid) begin
                        main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd0;
                        main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                        builder_axilite2wishbone_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign builder_basesoc_socbushandler_sink_sink_valid = builder_basesoc_socbushandler_ax_burst_valid;
assign builder_basesoc_socbushandler_ax_burst_ready = builder_basesoc_socbushandler_sink_sink_ready;
assign builder_basesoc_socbushandler_sink_sink_first = builder_basesoc_socbushandler_ax_burst_first;
assign builder_basesoc_socbushandler_sink_sink_last = builder_basesoc_socbushandler_ax_burst_last;
assign builder_basesoc_socbushandler_sink_sink_payload_addr = builder_basesoc_socbushandler_ax_burst_payload_addr;
assign builder_basesoc_socbushandler_sink_sink_payload_burst = builder_basesoc_socbushandler_ax_burst_payload_burst;
assign builder_basesoc_socbushandler_sink_sink_payload_len = builder_basesoc_socbushandler_ax_burst_payload_len;
assign builder_basesoc_socbushandler_sink_sink_payload_size = builder_basesoc_socbushandler_ax_burst_payload_size;
assign builder_basesoc_socbushandler_sink_sink_payload_lock = builder_basesoc_socbushandler_ax_burst_payload_lock;
assign builder_basesoc_socbushandler_sink_sink_payload_prot = builder_basesoc_socbushandler_ax_burst_payload_prot;
assign builder_basesoc_socbushandler_sink_sink_payload_cache = builder_basesoc_socbushandler_ax_burst_payload_cache;
assign builder_basesoc_socbushandler_sink_sink_payload_qos = builder_basesoc_socbushandler_ax_burst_payload_qos;
assign builder_basesoc_socbushandler_sink_sink_payload_region = builder_basesoc_socbushandler_ax_burst_payload_region;
assign builder_basesoc_socbushandler_sink_sink_param_id = builder_basesoc_socbushandler_ax_burst_param_id;
assign builder_basesoc_socbushandler_sink_sink_param_dest = builder_basesoc_socbushandler_ax_burst_param_dest;
assign builder_basesoc_socbushandler_sink_sink_param_user = builder_basesoc_socbushandler_ax_burst_param_user;
assign builder_basesoc_axiliteinterface_b_ready = 1'd1;
assign builder_basesoc_socbushandler_pipe_valid_sink_ready = ((~builder_basesoc_socbushandler_pipe_valid_source_valid) | builder_basesoc_socbushandler_pipe_valid_source_ready);
assign builder_basesoc_socbushandler_pipe_valid_sink_valid = builder_basesoc_socbushandler_sink_sink_valid;
assign builder_basesoc_socbushandler_sink_sink_ready = builder_basesoc_socbushandler_pipe_valid_sink_ready;
assign builder_basesoc_socbushandler_pipe_valid_sink_first = builder_basesoc_socbushandler_sink_sink_first;
assign builder_basesoc_socbushandler_pipe_valid_sink_last = builder_basesoc_socbushandler_sink_sink_last;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_addr = builder_basesoc_socbushandler_sink_sink_payload_addr;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_burst = builder_basesoc_socbushandler_sink_sink_payload_burst;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_len = builder_basesoc_socbushandler_sink_sink_payload_len;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_size = builder_basesoc_socbushandler_sink_sink_payload_size;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_lock = builder_basesoc_socbushandler_sink_sink_payload_lock;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_prot = builder_basesoc_socbushandler_sink_sink_payload_prot;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_cache = builder_basesoc_socbushandler_sink_sink_payload_cache;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_qos = builder_basesoc_socbushandler_sink_sink_payload_qos;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_region = builder_basesoc_socbushandler_sink_sink_payload_region;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_id = builder_basesoc_socbushandler_sink_sink_param_id;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_dest = builder_basesoc_socbushandler_sink_sink_param_dest;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_user = builder_basesoc_socbushandler_sink_sink_param_user;
assign builder_basesoc_socbushandler_source_source_valid = builder_basesoc_socbushandler_pipe_valid_source_valid;
assign builder_basesoc_socbushandler_pipe_valid_source_ready = builder_basesoc_socbushandler_source_source_ready;
assign builder_basesoc_socbushandler_source_source_first = builder_basesoc_socbushandler_pipe_valid_source_first;
assign builder_basesoc_socbushandler_source_source_last = builder_basesoc_socbushandler_pipe_valid_source_last;
assign builder_basesoc_socbushandler_source_source_payload_addr = builder_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign builder_basesoc_socbushandler_source_source_payload_burst = builder_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign builder_basesoc_socbushandler_source_source_payload_len = builder_basesoc_socbushandler_pipe_valid_source_payload_len;
assign builder_basesoc_socbushandler_source_source_payload_size = builder_basesoc_socbushandler_pipe_valid_source_payload_size;
assign builder_basesoc_socbushandler_source_source_payload_lock = builder_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign builder_basesoc_socbushandler_source_source_payload_prot = builder_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign builder_basesoc_socbushandler_source_source_payload_cache = builder_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign builder_basesoc_socbushandler_source_source_payload_qos = builder_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign builder_basesoc_socbushandler_source_source_payload_region = builder_basesoc_socbushandler_pipe_valid_source_payload_region;
assign builder_basesoc_socbushandler_source_source_param_id = builder_basesoc_socbushandler_pipe_valid_source_param_id;
assign builder_basesoc_socbushandler_source_source_param_dest = builder_basesoc_socbushandler_pipe_valid_source_param_dest;
assign builder_basesoc_socbushandler_source_source_param_user = builder_basesoc_socbushandler_pipe_valid_source_param_user;
assign builder_basesoc_socbushandler_beat_size = (1'd1 <<< builder_basesoc_socbushandler_source_source_payload_size);
assign builder_basesoc_socbushandler_beat_wrap = (builder_basesoc_socbushandler_source_source_payload_len <<< builder_basesoc_socbushandler_source_source_payload_size);
assign builder_basesoc_socbushandler_ax_beat_valid = (builder_basesoc_socbushandler_source_source_valid | (~builder_basesoc_socbushandler_ax_beat_first));
assign builder_basesoc_socbushandler_ax_beat_first = (builder_basesoc_socbushandler_beat_count == 1'd0);
assign builder_basesoc_socbushandler_ax_beat_last = (builder_basesoc_socbushandler_beat_count == builder_basesoc_socbushandler_source_source_payload_len);
assign builder_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, builder_basesoc_socbushandler_source_source_payload_addr}) + builder_basesoc_socbushandler_beat_offset);
assign builder_basesoc_socbushandler_ax_beat_param_id = builder_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    builder_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (builder_basesoc_socbushandler_ax_beat_ready) begin
        if (builder_basesoc_socbushandler_ax_beat_last) begin
            builder_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite2_next_state <= 2'd0;
    builder_basesoc_axiliteinterface_ar_payload_addr <= 32'd0;
    builder_basesoc_axiliteinterface_ar_valid <= 1'd0;
    builder_basesoc_axiliteinterface_aw_payload_addr <= 32'd0;
    builder_basesoc_axiliteinterface_aw_valid <= 1'd0;
    builder_basesoc_axiliteinterface_r_ready <= 1'd0;
    builder_basesoc_axiliteinterface_w_payload_data <= 32'd0;
    builder_basesoc_axiliteinterface_w_payload_strb <= 4'd0;
    builder_basesoc_axiliteinterface_w_valid <= 1'd0;
    builder_basesoc_socbushandler_ar_ready <= 1'd0;
    builder_basesoc_socbushandler_aw_ready <= 1'd0;
    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_first <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_last <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    builder_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    builder_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    builder_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    builder_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    builder_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    builder_basesoc_socbushandler_b_param_id <= 1'd0;
    builder_basesoc_socbushandler_b_payload_resp <= 2'd0;
    builder_basesoc_socbushandler_b_valid <= 1'd0;
    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd0;
    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd0;
    builder_basesoc_socbushandler_r_last <= 1'd0;
    builder_basesoc_socbushandler_r_param_id <= 1'd0;
    builder_basesoc_socbushandler_r_payload_data <= 32'd0;
    builder_basesoc_socbushandler_r_payload_resp <= 2'd0;
    builder_basesoc_socbushandler_r_valid <= 1'd0;
    builder_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite2_next_state <= builder_axi2axilite2_state;
    case (builder_axi2axilite2_state)
        1'd1: begin
            builder_basesoc_axiliteinterface_ar_valid <= (builder_basesoc_socbushandler_ax_beat_valid & (~builder_basesoc_socbushandler_cmd_done));
            builder_basesoc_axiliteinterface_ar_payload_addr <= builder_basesoc_socbushandler_ax_beat_payload_addr;
            builder_basesoc_socbushandler_ax_beat_ready <= (builder_basesoc_axiliteinterface_ar_ready & (~builder_basesoc_socbushandler_cmd_done));
            if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_last)) begin
                if (builder_basesoc_axiliteinterface_ar_ready) begin
                    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            builder_basesoc_socbushandler_r_valid <= builder_basesoc_axiliteinterface_r_valid;
            builder_basesoc_socbushandler_r_last <= builder_basesoc_socbushandler_cmd_done;
            builder_basesoc_socbushandler_r_payload_resp <= 1'd0;
            builder_basesoc_socbushandler_r_param_id <= builder_basesoc_socbushandler_ax_beat_param_id;
            builder_basesoc_socbushandler_r_payload_data <= builder_basesoc_axiliteinterface_r_payload_data;
            builder_basesoc_axiliteinterface_r_ready <= builder_basesoc_socbushandler_r_ready;
            if (((builder_basesoc_socbushandler_r_valid & builder_basesoc_socbushandler_r_last) & builder_basesoc_socbushandler_r_ready)) begin
                builder_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite2_next_state <= 1'd0;
            end
        end
        2'd2: begin
            builder_basesoc_axiliteinterface_aw_valid <= (builder_basesoc_socbushandler_ax_beat_valid & (~builder_basesoc_socbushandler_cmd_done));
            builder_basesoc_axiliteinterface_aw_payload_addr <= builder_basesoc_socbushandler_ax_beat_payload_addr;
            builder_basesoc_socbushandler_ax_beat_ready <= (builder_basesoc_axiliteinterface_aw_ready & (~builder_basesoc_socbushandler_cmd_done));
            if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_last)) begin
                if (builder_basesoc_axiliteinterface_aw_ready) begin
                    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            builder_basesoc_axiliteinterface_w_valid <= builder_basesoc_socbushandler_w_valid;
            builder_basesoc_axiliteinterface_w_payload_data <= builder_basesoc_socbushandler_w_payload_data;
            builder_basesoc_axiliteinterface_w_payload_strb <= builder_basesoc_socbushandler_w_payload_strb;
            builder_basesoc_socbushandler_w_ready <= builder_basesoc_axiliteinterface_w_ready;
            if (((builder_basesoc_socbushandler_w_valid & builder_basesoc_socbushandler_w_last) & builder_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite2_next_state <= 2'd3;
            end
        end
        2'd3: begin
            builder_basesoc_socbushandler_b_valid <= 1'd1;
            builder_basesoc_socbushandler_b_payload_resp <= 1'd0;
            builder_basesoc_socbushandler_b_param_id <= builder_basesoc_socbushandler_ax_beat_param_id;
            if (builder_basesoc_socbushandler_b_ready) begin
                builder_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite2_next_state <= 1'd0;
            end
        end
        default: begin
            builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
            builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
            if ((builder_basesoc_socbushandler_ar_valid & builder_basesoc_socbushandler_aw_valid)) begin
                if (builder_basesoc_socbushandler_last_ar_aw_n) begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_aw_valid;
                    builder_basesoc_socbushandler_aw_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_aw_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_aw_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_aw_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_aw_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_aw_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_aw_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_aw_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_aw_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_aw_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_aw_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_aw_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_aw_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_aw_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_aw_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 2'd2;
                end else begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_ar_valid;
                    builder_basesoc_socbushandler_ar_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_ar_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_ar_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_ar_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_ar_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_ar_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_ar_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_ar_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_ar_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_ar_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_ar_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_ar_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_ar_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_ar_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_ar_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 1'd1;
                end
            end else begin
                if (builder_basesoc_socbushandler_ar_valid) begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_ar_valid;
                    builder_basesoc_socbushandler_ar_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_ar_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_ar_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_ar_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_ar_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_ar_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_ar_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_ar_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_ar_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_ar_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_ar_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_ar_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_ar_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_ar_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_ar_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 1'd1;
                end else begin
                    if (builder_basesoc_socbushandler_aw_valid) begin
                        builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_aw_valid;
                        builder_basesoc_socbushandler_aw_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                        builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_aw_first;
                        builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_aw_last;
                        builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_aw_payload_addr;
                        builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_aw_payload_burst;
                        builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_aw_payload_len;
                        builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_aw_payload_size;
                        builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_aw_payload_lock;
                        builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_aw_payload_prot;
                        builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_aw_payload_cache;
                        builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_aw_payload_qos;
                        builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_aw_payload_region;
                        builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_aw_param_id;
                        builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_aw_param_dest;
                        builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_aw_param_user;
                        builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                        builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                        builder_axi2axilite2_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign builder_aw_valid = builder_comb_rhs_array_muxed0;
assign builder_aw_first = builder_comb_rhs_array_muxed1;
assign builder_aw_last = builder_comb_rhs_array_muxed2;
assign builder_aw_payload_addr = builder_comb_rhs_array_muxed3;
assign builder_aw_payload_burst = builder_comb_rhs_array_muxed4;
assign builder_aw_payload_len = builder_comb_rhs_array_muxed5;
assign builder_aw_payload_size = builder_comb_rhs_array_muxed6;
assign builder_aw_payload_lock = builder_comb_rhs_array_muxed7;
assign builder_aw_payload_prot = builder_comb_rhs_array_muxed8;
assign builder_aw_payload_cache = builder_comb_rhs_array_muxed9;
assign builder_aw_payload_qos = builder_comb_rhs_array_muxed10;
assign builder_aw_payload_region = builder_comb_rhs_array_muxed11;
assign builder_aw_param_id = builder_comb_rhs_array_muxed12;
assign builder_aw_param_dest = builder_comb_rhs_array_muxed13;
assign builder_aw_param_user = builder_comb_rhs_array_muxed14;
assign builder_w_valid = builder_comb_rhs_array_muxed15;
assign builder_w_first = builder_comb_rhs_array_muxed16;
assign builder_w_last = builder_comb_rhs_array_muxed17;
assign builder_w_payload_data = builder_comb_rhs_array_muxed18;
assign builder_w_payload_strb = builder_comb_rhs_array_muxed19;
assign builder_w_param_id = builder_comb_rhs_array_muxed20;
assign builder_w_param_dest = builder_comb_rhs_array_muxed21;
assign builder_w_param_user = builder_comb_rhs_array_muxed22;
assign builder_b_ready = builder_comb_rhs_array_muxed23;
assign builder_ar_valid = builder_comb_rhs_array_muxed24;
assign builder_ar_first = builder_comb_rhs_array_muxed25;
assign builder_ar_last = builder_comb_rhs_array_muxed26;
assign builder_ar_payload_addr = builder_comb_rhs_array_muxed27;
assign builder_ar_payload_burst = builder_comb_rhs_array_muxed28;
assign builder_ar_payload_len = builder_comb_rhs_array_muxed29;
assign builder_ar_payload_size = builder_comb_rhs_array_muxed30;
assign builder_ar_payload_lock = builder_comb_rhs_array_muxed31;
assign builder_ar_payload_prot = builder_comb_rhs_array_muxed32;
assign builder_ar_payload_cache = builder_comb_rhs_array_muxed33;
assign builder_ar_payload_qos = builder_comb_rhs_array_muxed34;
assign builder_ar_payload_region = builder_comb_rhs_array_muxed35;
assign builder_ar_param_id = builder_comb_rhs_array_muxed36;
assign builder_ar_param_dest = builder_comb_rhs_array_muxed37;
assign builder_ar_param_user = builder_comb_rhs_array_muxed38;
assign builder_r_ready = builder_comb_rhs_array_muxed39;
always @(*) begin
    main_socbushandler_adapted_interface_aw_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_socbushandler_adapted_interface_aw_ready <= builder_aw_ready;
    end
end
always @(*) begin
    main_socbushandler_adapted_interface_w_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_socbushandler_adapted_interface_w_ready <= builder_w_ready;
    end
end
always @(*) begin
    main_socbushandler_adapted_interface_b_valid <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_socbushandler_adapted_interface_b_valid <= builder_b_valid;
    end
end
assign main_socbushandler_adapted_interface_b_first = builder_b_first;
assign main_socbushandler_adapted_interface_b_last = builder_b_last;
assign main_socbushandler_adapted_interface_b_payload_resp = builder_b_payload_resp;
assign main_socbushandler_adapted_interface_b_param_id = builder_b_param_id;
assign main_socbushandler_adapted_interface_b_param_dest = builder_b_param_dest;
assign main_socbushandler_adapted_interface_b_param_user = builder_b_param_user;
always @(*) begin
    main_socbushandler_adapted_interface_ar_ready <= 1'd0;
    if ((builder_rr_read_grant == 1'd0)) begin
        main_socbushandler_adapted_interface_ar_ready <= builder_ar_ready;
    end
end
always @(*) begin
    main_socbushandler_adapted_interface_r_valid <= 1'd0;
    if ((builder_rr_read_grant == 1'd0)) begin
        main_socbushandler_adapted_interface_r_valid <= builder_r_valid;
    end
end
assign main_socbushandler_adapted_interface_r_first = builder_r_first;
assign main_socbushandler_adapted_interface_r_last = builder_r_last;
assign main_socbushandler_adapted_interface_r_payload_resp = builder_r_payload_resp;
assign main_socbushandler_adapted_interface_r_payload_data = builder_r_payload_data;
assign main_socbushandler_adapted_interface_r_param_id = builder_r_param_id;
assign main_socbushandler_adapted_interface_r_param_dest = builder_r_param_dest;
assign main_socbushandler_adapted_interface_r_param_user = builder_r_param_user;
assign builder_rr_write_ce = ((~((builder_aw_valid | builder_w_valid) | builder_b_valid)) & builder_wr_lock_empty);
assign builder_rr_read_ce = ((~(builder_ar_valid | builder_r_valid)) & builder_rd_lock_empty);
assign builder_rr_write_request = {((main_socbushandler_adapted_interface_aw_valid | main_socbushandler_adapted_interface_w_valid) | main_socbushandler_adapted_interface_b_valid)};
assign builder_rr_read_request = {(main_socbushandler_adapted_interface_ar_valid | main_socbushandler_adapted_interface_r_valid)};
assign builder_rr_write_grant = 1'd0;
assign builder_rr_read_grant = 1'd0;
assign builder_wr_lock_full = (builder_wr_lock_counter == 8'd255);
assign builder_wr_lock_empty = (builder_wr_lock_counter == 1'd0);
assign builder_wr_lock_stall = ((builder_aw_valid & builder_aw_ready) & builder_wr_lock_full);
assign builder_rd_lock_full = (builder_rd_lock_counter == 8'd255);
assign builder_rd_lock_empty = (builder_rd_lock_counter == 1'd0);
assign builder_rd_lock_stall = ((builder_ar_valid & builder_ar_ready) & builder_rd_lock_full);
always @(*) begin
    builder_slave_sel_dec0 <= 4'd0;
    builder_slave_sel_dec0[0] <= (builder_rhs_slice_proxy0[29:19] == 8'd128);
    builder_slave_sel_dec0[1] <= (builder_rhs_slice_proxy2[29:15] == 12'd2176);
    builder_slave_sel_dec0[2] <= (builder_rhs_slice_proxy4[29:11] == 17'd98304);
    builder_slave_sel_dec0[3] <= (builder_rhs_slice_proxy6[29:14] == 13'd4608);
end
always @(*) begin
    builder_slave_sel_dec1 <= 4'd0;
    builder_slave_sel_dec1[0] <= (builder_rhs_slice_proxy1[29:19] == 8'd128);
    builder_slave_sel_dec1[1] <= (builder_rhs_slice_proxy3[29:15] == 12'd2176);
    builder_slave_sel_dec1[2] <= (builder_rhs_slice_proxy5[29:11] == 17'd98304);
    builder_slave_sel_dec1[3] <= (builder_rhs_slice_proxy7[29:14] == 13'd4608);
end
always @(*) begin
    builder_slave_sel0 <= 4'd0;
    if (builder_axirequestcounter0_empty) begin
        builder_slave_sel0 <= builder_slave_sel_dec0;
    end else begin
        builder_slave_sel0 <= builder_slave_sel_reg0;
    end
end
always @(*) begin
    builder_slave_sel1 <= 4'd0;
    if (builder_axirequestcounter1_empty) begin
        builder_slave_sel1 <= builder_slave_sel_dec1;
    end else begin
        builder_slave_sel1 <= builder_slave_sel_reg1;
    end
end
assign main_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[0]);
assign main_basesoc_socbushandler_aw_first = builder_aw_first;
assign main_basesoc_socbushandler_aw_last = builder_aw_last;
assign main_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign main_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign main_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign main_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign main_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign main_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign main_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign main_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign main_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign main_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign main_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign main_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign main_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[0]);
assign main_basesoc_socbushandler_w_first = builder_w_first;
assign main_basesoc_socbushandler_w_last = builder_w_last;
assign main_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign main_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign main_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign main_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign main_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign main_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[0]);
assign main_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[0]);
assign main_basesoc_socbushandler_ar_first = builder_ar_first;
assign main_basesoc_socbushandler_ar_last = builder_ar_last;
assign main_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign main_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign main_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign main_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign main_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign main_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign main_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign main_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign main_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign main_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign main_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign main_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign main_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[0]);
assign main_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[1]);
assign main_socbushandler_aw_first = builder_aw_first;
assign main_socbushandler_aw_last = builder_aw_last;
assign main_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign main_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign main_socbushandler_aw_payload_len = builder_aw_payload_len;
assign main_socbushandler_aw_payload_size = builder_aw_payload_size;
assign main_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign main_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign main_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign main_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign main_socbushandler_aw_payload_region = builder_aw_payload_region;
assign main_socbushandler_aw_param_id = builder_aw_param_id;
assign main_socbushandler_aw_param_dest = builder_aw_param_dest;
assign main_socbushandler_aw_param_user = builder_aw_param_user;
assign main_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[1]);
assign main_socbushandler_w_first = builder_w_first;
assign main_socbushandler_w_last = builder_w_last;
assign main_socbushandler_w_payload_data = builder_w_payload_data;
assign main_socbushandler_w_payload_strb = builder_w_payload_strb;
assign main_socbushandler_w_param_id = builder_w_param_id;
assign main_socbushandler_w_param_dest = builder_w_param_dest;
assign main_socbushandler_w_param_user = builder_w_param_user;
assign main_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[1]);
assign main_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[1]);
assign main_socbushandler_ar_first = builder_ar_first;
assign main_socbushandler_ar_last = builder_ar_last;
assign main_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign main_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign main_socbushandler_ar_payload_len = builder_ar_payload_len;
assign main_socbushandler_ar_payload_size = builder_ar_payload_size;
assign main_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign main_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign main_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign main_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign main_socbushandler_ar_payload_region = builder_ar_payload_region;
assign main_socbushandler_ar_param_id = builder_ar_param_id;
assign main_socbushandler_ar_param_dest = builder_ar_param_dest;
assign main_socbushandler_ar_param_user = builder_ar_param_user;
assign main_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[1]);
assign main_adapted_interface_aw_valid = (builder_aw_valid & builder_slave_sel0[2]);
assign main_adapted_interface_aw_first = builder_aw_first;
assign main_adapted_interface_aw_last = builder_aw_last;
assign main_adapted_interface_aw_payload_addr = builder_aw_payload_addr;
assign main_adapted_interface_aw_payload_burst = builder_aw_payload_burst;
assign main_adapted_interface_aw_payload_len = builder_aw_payload_len;
assign main_adapted_interface_aw_payload_size = builder_aw_payload_size;
assign main_adapted_interface_aw_payload_lock = builder_aw_payload_lock;
assign main_adapted_interface_aw_payload_prot = builder_aw_payload_prot;
assign main_adapted_interface_aw_payload_cache = builder_aw_payload_cache;
assign main_adapted_interface_aw_payload_qos = builder_aw_payload_qos;
assign main_adapted_interface_aw_payload_region = builder_aw_payload_region;
assign main_adapted_interface_aw_param_id = builder_aw_param_id;
assign main_adapted_interface_aw_param_dest = builder_aw_param_dest;
assign main_adapted_interface_aw_param_user = builder_aw_param_user;
assign main_adapted_interface_w_valid = (builder_w_valid & builder_slave_sel0[2]);
assign main_adapted_interface_w_first = builder_w_first;
assign main_adapted_interface_w_last = builder_w_last;
assign main_adapted_interface_w_payload_data = builder_w_payload_data;
assign main_adapted_interface_w_payload_strb = builder_w_payload_strb;
assign main_adapted_interface_w_param_id = builder_w_param_id;
assign main_adapted_interface_w_param_dest = builder_w_param_dest;
assign main_adapted_interface_w_param_user = builder_w_param_user;
assign main_adapted_interface_b_ready = (builder_b_ready & builder_slave_sel0[2]);
assign main_adapted_interface_ar_valid = (builder_ar_valid & builder_slave_sel1[2]);
assign main_adapted_interface_ar_first = builder_ar_first;
assign main_adapted_interface_ar_last = builder_ar_last;
assign main_adapted_interface_ar_payload_addr = builder_ar_payload_addr;
assign main_adapted_interface_ar_payload_burst = builder_ar_payload_burst;
assign main_adapted_interface_ar_payload_len = builder_ar_payload_len;
assign main_adapted_interface_ar_payload_size = builder_ar_payload_size;
assign main_adapted_interface_ar_payload_lock = builder_ar_payload_lock;
assign main_adapted_interface_ar_payload_prot = builder_ar_payload_prot;
assign main_adapted_interface_ar_payload_cache = builder_ar_payload_cache;
assign main_adapted_interface_ar_payload_qos = builder_ar_payload_qos;
assign main_adapted_interface_ar_payload_region = builder_ar_payload_region;
assign main_adapted_interface_ar_param_id = builder_ar_param_id;
assign main_adapted_interface_ar_param_dest = builder_ar_param_dest;
assign main_adapted_interface_ar_param_user = builder_ar_param_user;
assign main_adapted_interface_r_ready = (builder_r_ready & builder_slave_sel1[2]);
assign builder_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[3]);
assign builder_basesoc_socbushandler_aw_first = builder_aw_first;
assign builder_basesoc_socbushandler_aw_last = builder_aw_last;
assign builder_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign builder_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign builder_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign builder_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign builder_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign builder_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign builder_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign builder_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign builder_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign builder_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign builder_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign builder_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign builder_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[3]);
assign builder_basesoc_socbushandler_w_first = builder_w_first;
assign builder_basesoc_socbushandler_w_last = builder_w_last;
assign builder_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign builder_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign builder_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign builder_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign builder_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign builder_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[3]);
assign builder_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[3]);
assign builder_basesoc_socbushandler_ar_first = builder_ar_first;
assign builder_basesoc_socbushandler_ar_last = builder_ar_last;
assign builder_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign builder_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign builder_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign builder_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign builder_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign builder_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign builder_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign builder_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign builder_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign builder_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign builder_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign builder_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign builder_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[3]);
assign builder_b_first = ((((main_basesoc_socbushandler_b_first & {1{builder_slave_sel0[0]}}) | (main_socbushandler_b_first & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_first & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_first & {1{builder_slave_sel0[3]}}));
assign builder_b_last = ((((main_basesoc_socbushandler_b_last & {1{builder_slave_sel0[0]}}) | (main_socbushandler_b_last & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_last & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_last & {1{builder_slave_sel0[3]}}));
assign builder_b_param_id = ((((main_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[0]}}) | (main_socbushandler_b_param_id & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_param_id & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[3]}}));
assign builder_b_param_dest = ((((main_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[0]}}) | (main_socbushandler_b_param_dest & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_param_dest & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[3]}}));
assign builder_b_param_user = ((((main_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[0]}}) | (main_socbushandler_b_param_user & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_param_user & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[3]}}));
assign builder_r_first = ((((main_basesoc_socbushandler_r_first & {1{builder_slave_sel1[0]}}) | (main_socbushandler_r_first & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_first & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_first & {1{builder_slave_sel1[3]}}));
assign builder_r_param_id = ((((main_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[0]}}) | (main_socbushandler_r_param_id & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_param_id & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[3]}}));
assign builder_r_param_dest = ((((main_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[0]}}) | (main_socbushandler_r_param_dest & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_param_dest & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[3]}}));
assign builder_r_param_user = ((((main_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[0]}}) | (main_socbushandler_r_param_user & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_param_user & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[3]}}));
assign builder_axirequestcounter0_full = (builder_axirequestcounter0_counter == 8'd255);
assign builder_axirequestcounter0_empty = (builder_axirequestcounter0_counter == 1'd0);
assign builder_axirequestcounter0_stall = ((builder_aw_valid & builder_aw_ready) & builder_axirequestcounter0_full);
assign builder_axirequestcounter1_full = (builder_axirequestcounter1_counter == 8'd255);
assign builder_axirequestcounter1_empty = (builder_axirequestcounter1_counter == 1'd0);
assign builder_axirequestcounter1_stall = ((builder_ar_valid & builder_ar_ready) & builder_axirequestcounter1_full);
assign builder_error = (builder_wr_error | builder_rd_error);
assign builder_wr_timer_done = (builder_wr_timer_count == 1'd0);
assign builder_rd_timer_done = (builder_rd_timer_count == 1'd0);
always @(*) begin
    builder_aw_ready <= 1'd0;
    builder_b_payload_resp <= 2'd0;
    builder_b_valid <= 1'd0;
    builder_fsm0_next_state <= 1'd0;
    builder_w_ready <= 1'd0;
    builder_wr_error <= 1'd0;
    builder_wr_timer_wait <= 1'd0;
    builder_aw_ready <= ((((main_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[0]}}) | (main_socbushandler_aw_ready & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_aw_ready & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[3]}}));
    builder_w_ready <= ((((main_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[0]}}) | (main_socbushandler_w_ready & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_w_ready & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[3]}}));
    builder_b_valid <= ((((main_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[0]}}) | (main_socbushandler_b_valid & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_valid & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[3]}}));
    builder_b_payload_resp <= ((((main_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[0]}}) | (main_socbushandler_b_payload_resp & {2{builder_slave_sel0[1]}})) | (main_adapted_interface_b_payload_resp & {2{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[3]}}));
    builder_fsm0_next_state <= builder_fsm0_state;
    case (builder_fsm0_state)
        1'd1: begin
            builder_aw_ready <= builder_aw_valid;
            builder_w_ready <= builder_w_valid;
            builder_b_valid <= ((~builder_aw_valid) & (~builder_w_valid));
            builder_b_payload_resp <= 2'd2;
            if ((builder_b_valid & builder_b_ready)) begin
                builder_fsm0_next_state <= 1'd0;
            end
        end
        default: begin
            builder_wr_timer_wait <= ((builder_aw_valid & (~builder_aw_ready)) | (builder_w_valid & (~builder_w_ready)));
            if ((builder_wr_timer_done & builder_wr_timer_wait)) begin
                builder_wr_error <= 1'd1;
                builder_fsm0_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_ar_ready <= 1'd0;
    builder_fsm1_next_state <= 1'd0;
    builder_r_last <= 1'd0;
    builder_r_payload_data <= 32'd0;
    builder_r_payload_resp <= 2'd0;
    builder_r_valid <= 1'd0;
    builder_rd_error <= 1'd0;
    builder_rd_timer_wait <= 1'd0;
    builder_ar_ready <= ((((main_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[0]}}) | (main_socbushandler_ar_ready & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_ar_ready & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[3]}}));
    builder_r_valid <= ((((main_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[0]}}) | (main_socbushandler_r_valid & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_valid & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[3]}}));
    builder_r_last <= ((((main_basesoc_socbushandler_r_last & {1{builder_slave_sel1[0]}}) | (main_socbushandler_r_last & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_last & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_last & {1{builder_slave_sel1[3]}}));
    builder_r_payload_resp <= ((((main_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[0]}}) | (main_socbushandler_r_payload_resp & {2{builder_slave_sel1[1]}})) | (main_adapted_interface_r_payload_resp & {2{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[3]}}));
    builder_r_payload_data <= ((((main_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[0]}}) | (main_socbushandler_r_payload_data & {32{builder_slave_sel1[1]}})) | (main_adapted_interface_r_payload_data & {32{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[3]}}));
    builder_fsm1_next_state <= builder_fsm1_state;
    case (builder_fsm1_state)
        1'd1: begin
            builder_ar_ready <= builder_ar_valid;
            builder_r_valid <= (~builder_ar_valid);
            builder_r_last <= 1'd1;
            builder_r_payload_resp <= 2'd2;
            builder_r_payload_data <= 32'd4294967295;
            if ((builder_r_valid & builder_r_ready)) begin
                builder_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            builder_rd_timer_wait <= (builder_ar_valid & (~builder_ar_ready));
            if ((builder_rd_timer_done & builder_rd_timer_wait)) begin
                builder_rd_error <= 1'd1;
                builder_fsm1_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_bus_errors_status = main_bus_errors;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_valid = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_valid;
assign main_rocket_mmio_a2w_axi2axi_lite_ax_burst_ready = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_ready;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_first = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_first;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_last = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_last;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_addr = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_addr;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_burst = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_burst;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_len = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_len;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_size = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_size;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_lock = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_lock;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_prot = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_prot;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_cache = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_cache;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_qos = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_qos;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_region = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_region;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_id = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_id;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_dest = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_dest;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_user = main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_user;
assign main_rocket_mmio_a2w_b_ready = 1'd1;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_ready = ((~main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_valid) | main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_ready);
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_valid = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_valid;
assign main_rocket_mmio_a2w_axi2axi_lite_sink_sink_ready = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_ready;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_first = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_first;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_last = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_last;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_addr = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_addr;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_burst = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_burst;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_len = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_len;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_size = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_size;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_lock = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_lock;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_prot = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_prot;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_cache = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_cache;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_qos = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_qos;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_region = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_payload_region;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_id = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_id;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_dest = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_dest;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_user = main_rocket_mmio_a2w_axi2axi_lite_sink_sink_param_user;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_valid = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_valid;
assign main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_ready = main_rocket_mmio_a2w_axi2axi_lite_source_source_ready;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_first = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_first;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_last = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_last;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_addr = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_addr;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_burst = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_burst;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_len = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_len;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_size = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_size;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_lock = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_lock;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_prot = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_prot;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_cache = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_cache;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_qos = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_qos;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_region = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_region;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_param_id = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_id;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_param_dest = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_dest;
assign main_rocket_mmio_a2w_axi2axi_lite_source_source_param_user = main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_user;
assign main_rocket_mmio_a2w_axi2axi_lite_beat_size = (1'd1 <<< main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_size);
assign main_rocket_mmio_a2w_axi2axi_lite_beat_wrap = (main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_len <<< main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_size);
assign main_rocket_mmio_a2w_axi2axi_lite_ax_beat_valid = (main_rocket_mmio_a2w_axi2axi_lite_source_source_valid | (~main_rocket_mmio_a2w_axi2axi_lite_ax_beat_first));
assign main_rocket_mmio_a2w_axi2axi_lite_ax_beat_first = (main_rocket_mmio_a2w_axi2axi_lite_beat_count == 1'd0);
assign main_rocket_mmio_a2w_axi2axi_lite_ax_beat_last = (main_rocket_mmio_a2w_axi2axi_lite_beat_count == main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_len);
assign main_rocket_mmio_a2w_axi2axi_lite_ax_beat_payload_addr = ($signed({1'd0, main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_addr}) + main_rocket_mmio_a2w_axi2axi_lite_beat_offset);
assign main_rocket_mmio_a2w_axi2axi_lite_ax_beat_param_id = main_rocket_mmio_a2w_axi2axi_lite_source_source_param_id;
always @(*) begin
    main_rocket_mmio_a2w_axi2axi_lite_source_source_ready <= 1'd0;
    if (main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready) begin
        if (main_rocket_mmio_a2w_axi2axi_lite_ax_beat_last) begin
            main_rocket_mmio_a2w_axi2axi_lite_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_basesoc_rocket_axi2axilite_next_state <= 2'd0;
    main_rocket_mmio_a2w_ar_payload_addr <= 32'd0;
    main_rocket_mmio_a2w_ar_valid <= 1'd0;
    main_rocket_mmio_a2w_aw_payload_addr <= 32'd0;
    main_rocket_mmio_a2w_aw_valid <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_first <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_last <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_dest <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_id <= 4'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_user <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_addr <= 32'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_burst <= 2'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_cache <= 4'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_len <= 8'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_lock <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_prot <= 3'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_qos <= 4'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_region <= 4'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_size <= 3'd0;
    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_valid <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value0 <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value_ce0 <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value1 <= 1'd0;
    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value_ce1 <= 1'd0;
    main_rocket_mmio_a2w_r_ready <= 1'd0;
    main_rocket_mmio_a2w_w_payload_data <= 64'd0;
    main_rocket_mmio_a2w_w_payload_strb <= 8'd0;
    main_rocket_mmio_a2w_w_valid <= 1'd0;
    main_rocket_mmio_axi_ar_ready <= 1'd0;
    main_rocket_mmio_axi_aw_ready <= 1'd0;
    main_rocket_mmio_axi_b_param_id <= 4'd0;
    main_rocket_mmio_axi_b_payload_resp <= 2'd0;
    main_rocket_mmio_axi_b_valid <= 1'd0;
    main_rocket_mmio_axi_r_last <= 1'd0;
    main_rocket_mmio_axi_r_param_id <= 4'd0;
    main_rocket_mmio_axi_r_payload_data <= 64'd0;
    main_rocket_mmio_axi_r_payload_resp <= 2'd0;
    main_rocket_mmio_axi_r_valid <= 1'd0;
    main_rocket_mmio_axi_w_ready <= 1'd0;
    builder_basesoc_rocket_axi2axilite_next_state <= builder_basesoc_rocket_axi2axilite_state;
    case (builder_basesoc_rocket_axi2axilite_state)
        1'd1: begin
            main_rocket_mmio_a2w_ar_valid <= (main_rocket_mmio_a2w_axi2axi_lite_ax_beat_valid & (~main_rocket_mmio_a2w_axi2axi_lite_cmd_done));
            main_rocket_mmio_a2w_ar_payload_addr <= main_rocket_mmio_a2w_axi2axi_lite_ax_beat_payload_addr;
            main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready <= (main_rocket_mmio_a2w_ar_ready & (~main_rocket_mmio_a2w_axi2axi_lite_cmd_done));
            if ((main_rocket_mmio_a2w_axi2axi_lite_ax_beat_valid & main_rocket_mmio_a2w_axi2axi_lite_ax_beat_last)) begin
                if (main_rocket_mmio_a2w_ar_ready) begin
                    main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready <= 1'd0;
                    main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value0 <= 1'd1;
                    main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            main_rocket_mmio_axi_r_valid <= main_rocket_mmio_a2w_r_valid;
            main_rocket_mmio_axi_r_last <= main_rocket_mmio_a2w_axi2axi_lite_cmd_done;
            main_rocket_mmio_axi_r_payload_resp <= 1'd0;
            main_rocket_mmio_axi_r_param_id <= main_rocket_mmio_a2w_axi2axi_lite_ax_beat_param_id;
            main_rocket_mmio_axi_r_payload_data <= main_rocket_mmio_a2w_r_payload_data;
            main_rocket_mmio_a2w_r_ready <= main_rocket_mmio_axi_r_ready;
            if (((main_rocket_mmio_axi_r_valid & main_rocket_mmio_axi_r_last) & main_rocket_mmio_axi_r_ready)) begin
                main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready <= 1'd1;
                builder_basesoc_rocket_axi2axilite_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_rocket_mmio_a2w_aw_valid <= (main_rocket_mmio_a2w_axi2axi_lite_ax_beat_valid & (~main_rocket_mmio_a2w_axi2axi_lite_cmd_done));
            main_rocket_mmio_a2w_aw_payload_addr <= main_rocket_mmio_a2w_axi2axi_lite_ax_beat_payload_addr;
            main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready <= (main_rocket_mmio_a2w_aw_ready & (~main_rocket_mmio_a2w_axi2axi_lite_cmd_done));
            if ((main_rocket_mmio_a2w_axi2axi_lite_ax_beat_valid & main_rocket_mmio_a2w_axi2axi_lite_ax_beat_last)) begin
                if (main_rocket_mmio_a2w_aw_ready) begin
                    main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready <= 1'd0;
                    main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value0 <= 1'd1;
                    main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            main_rocket_mmio_a2w_w_valid <= main_rocket_mmio_axi_w_valid;
            main_rocket_mmio_a2w_w_payload_data <= main_rocket_mmio_axi_w_payload_data;
            main_rocket_mmio_a2w_w_payload_strb <= main_rocket_mmio_axi_w_payload_strb;
            main_rocket_mmio_axi_w_ready <= main_rocket_mmio_a2w_w_ready;
            if (((main_rocket_mmio_axi_w_valid & main_rocket_mmio_axi_w_last) & main_rocket_mmio_axi_w_ready)) begin
                builder_basesoc_rocket_axi2axilite_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_rocket_mmio_axi_b_valid <= 1'd1;
            main_rocket_mmio_axi_b_payload_resp <= 1'd0;
            main_rocket_mmio_axi_b_param_id <= main_rocket_mmio_a2w_axi2axi_lite_ax_beat_param_id;
            if (main_rocket_mmio_axi_b_ready) begin
                main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready <= 1'd1;
                builder_basesoc_rocket_axi2axilite_next_state <= 1'd0;
            end
        end
        default: begin
            main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value0 <= 1'd0;
            main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value_ce0 <= 1'd1;
            if ((main_rocket_mmio_axi_ar_valid & main_rocket_mmio_axi_aw_valid)) begin
                if (main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n) begin
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_valid <= main_rocket_mmio_axi_aw_valid;
                    main_rocket_mmio_axi_aw_ready <= main_rocket_mmio_a2w_axi2axi_lite_ax_burst_ready;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_first <= main_rocket_mmio_axi_aw_first;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_last <= main_rocket_mmio_axi_aw_last;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_addr <= main_rocket_mmio_axi_aw_payload_addr;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_burst <= main_rocket_mmio_axi_aw_payload_burst;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_len <= main_rocket_mmio_axi_aw_payload_len;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_size <= main_rocket_mmio_axi_aw_payload_size;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_lock <= main_rocket_mmio_axi_aw_payload_lock;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_prot <= main_rocket_mmio_axi_aw_payload_prot;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_cache <= main_rocket_mmio_axi_aw_payload_cache;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_qos <= main_rocket_mmio_axi_aw_payload_qos;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_region <= main_rocket_mmio_axi_aw_payload_region;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_id <= main_rocket_mmio_axi_aw_param_id;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_dest <= main_rocket_mmio_axi_aw_param_dest;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_user <= main_rocket_mmio_axi_aw_param_user;
                    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value1 <= 1'd0;
                    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_basesoc_rocket_axi2axilite_next_state <= 2'd2;
                end else begin
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_valid <= main_rocket_mmio_axi_ar_valid;
                    main_rocket_mmio_axi_ar_ready <= main_rocket_mmio_a2w_axi2axi_lite_ax_burst_ready;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_first <= main_rocket_mmio_axi_ar_first;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_last <= main_rocket_mmio_axi_ar_last;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_addr <= main_rocket_mmio_axi_ar_payload_addr;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_burst <= main_rocket_mmio_axi_ar_payload_burst;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_len <= main_rocket_mmio_axi_ar_payload_len;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_size <= main_rocket_mmio_axi_ar_payload_size;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_lock <= main_rocket_mmio_axi_ar_payload_lock;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_prot <= main_rocket_mmio_axi_ar_payload_prot;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_cache <= main_rocket_mmio_axi_ar_payload_cache;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_qos <= main_rocket_mmio_axi_ar_payload_qos;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_region <= main_rocket_mmio_axi_ar_payload_region;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_id <= main_rocket_mmio_axi_ar_param_id;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_dest <= main_rocket_mmio_axi_ar_param_dest;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_user <= main_rocket_mmio_axi_ar_param_user;
                    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value1 <= 1'd1;
                    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_basesoc_rocket_axi2axilite_next_state <= 1'd1;
                end
            end else begin
                if (main_rocket_mmio_axi_ar_valid) begin
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_valid <= main_rocket_mmio_axi_ar_valid;
                    main_rocket_mmio_axi_ar_ready <= main_rocket_mmio_a2w_axi2axi_lite_ax_burst_ready;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_first <= main_rocket_mmio_axi_ar_first;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_last <= main_rocket_mmio_axi_ar_last;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_addr <= main_rocket_mmio_axi_ar_payload_addr;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_burst <= main_rocket_mmio_axi_ar_payload_burst;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_len <= main_rocket_mmio_axi_ar_payload_len;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_size <= main_rocket_mmio_axi_ar_payload_size;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_lock <= main_rocket_mmio_axi_ar_payload_lock;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_prot <= main_rocket_mmio_axi_ar_payload_prot;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_cache <= main_rocket_mmio_axi_ar_payload_cache;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_qos <= main_rocket_mmio_axi_ar_payload_qos;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_region <= main_rocket_mmio_axi_ar_payload_region;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_id <= main_rocket_mmio_axi_ar_param_id;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_dest <= main_rocket_mmio_axi_ar_param_dest;
                    main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_user <= main_rocket_mmio_axi_ar_param_user;
                    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value1 <= 1'd1;
                    main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_basesoc_rocket_axi2axilite_next_state <= 1'd1;
                end else begin
                    if (main_rocket_mmio_axi_aw_valid) begin
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_valid <= main_rocket_mmio_axi_aw_valid;
                        main_rocket_mmio_axi_aw_ready <= main_rocket_mmio_a2w_axi2axi_lite_ax_burst_ready;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_first <= main_rocket_mmio_axi_aw_first;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_last <= main_rocket_mmio_axi_aw_last;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_addr <= main_rocket_mmio_axi_aw_payload_addr;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_burst <= main_rocket_mmio_axi_aw_payload_burst;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_len <= main_rocket_mmio_axi_aw_payload_len;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_size <= main_rocket_mmio_axi_aw_payload_size;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_lock <= main_rocket_mmio_axi_aw_payload_lock;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_prot <= main_rocket_mmio_axi_aw_payload_prot;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_cache <= main_rocket_mmio_axi_aw_payload_cache;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_qos <= main_rocket_mmio_axi_aw_payload_qos;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_payload_region <= main_rocket_mmio_axi_aw_payload_region;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_id <= main_rocket_mmio_axi_aw_param_id;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_dest <= main_rocket_mmio_axi_aw_param_dest;
                        main_rocket_mmio_a2w_axi2axi_lite_ax_burst_param_user <= main_rocket_mmio_axi_aw_param_user;
                        main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value1 <= 1'd0;
                        main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value_ce1 <= 1'd1;
                        builder_basesoc_rocket_axi2axilite_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_rocket_mmio_a2w_axi_lite2wishbone_r_addr = (main_rocket_mmio_a2w_ar_payload_addr - 1'd0);
assign main_rocket_mmio_a2w_axi_lite2wishbone_w_addr = (main_rocket_mmio_a2w_aw_payload_addr - 1'd0);
always @(*) begin
    builder_basesoc_rocket_axilite2wishbone_next_state <= 3'd0;
    main_rocket_mmio_a2w_ar_ready <= 1'd0;
    main_rocket_mmio_a2w_aw_ready <= 1'd0;
    main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value1 <= 64'd0;
    main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value_ce1 <= 1'd0;
    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value0 <= 1'd0;
    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value_ce0 <= 1'd0;
    main_rocket_mmio_a2w_b_payload_resp <= 2'd0;
    main_rocket_mmio_a2w_b_valid <= 1'd0;
    main_rocket_mmio_a2w_r_payload_data <= 64'd0;
    main_rocket_mmio_a2w_r_payload_resp <= 2'd0;
    main_rocket_mmio_a2w_r_valid <= 1'd0;
    main_rocket_mmio_a2w_w_ready <= 1'd0;
    main_rocket_mmio_wb_adr <= 29'd0;
    main_rocket_mmio_wb_cyc <= 1'd0;
    main_rocket_mmio_wb_dat_w <= 64'd0;
    main_rocket_mmio_wb_sel <= 8'd0;
    main_rocket_mmio_wb_stb <= 1'd0;
    main_rocket_mmio_wb_we <= 1'd0;
    builder_basesoc_rocket_axilite2wishbone_next_state <= builder_basesoc_rocket_axilite2wishbone_state;
    case (builder_basesoc_rocket_axilite2wishbone_state)
        1'd1: begin
            main_rocket_mmio_wb_stb <= 1'd1;
            main_rocket_mmio_wb_cyc <= 1'd1;
            main_rocket_mmio_wb_adr <= main_rocket_mmio_a2w_axi_lite2wishbone_r_addr[31:3];
            main_rocket_mmio_wb_sel <= 8'd255;
            if (main_rocket_mmio_wb_ack) begin
                main_rocket_mmio_a2w_ar_ready <= 1'd1;
                main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value1 <= main_rocket_mmio_wb_dat_r;
                main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value_ce1 <= 1'd1;
                builder_basesoc_rocket_axilite2wishbone_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_rocket_mmio_a2w_r_valid <= 1'd1;
            main_rocket_mmio_a2w_r_payload_resp <= 1'd0;
            main_rocket_mmio_a2w_r_payload_data <= main_rocket_mmio_a2w_axi_lite2wishbone_data;
            if (main_rocket_mmio_a2w_r_ready) begin
                builder_basesoc_rocket_axilite2wishbone_next_state <= 1'd0;
            end
        end
        2'd3: begin
            main_rocket_mmio_wb_stb <= main_rocket_mmio_a2w_w_valid;
            main_rocket_mmio_wb_cyc <= main_rocket_mmio_a2w_w_valid;
            main_rocket_mmio_wb_we <= 1'd1;
            main_rocket_mmio_wb_adr <= main_rocket_mmio_a2w_axi_lite2wishbone_w_addr[31:3];
            main_rocket_mmio_wb_sel <= main_rocket_mmio_a2w_w_payload_strb;
            main_rocket_mmio_wb_dat_w <= main_rocket_mmio_a2w_w_payload_data;
            if (main_rocket_mmio_wb_ack) begin
                main_rocket_mmio_a2w_aw_ready <= 1'd1;
                main_rocket_mmio_a2w_w_ready <= 1'd1;
                builder_basesoc_rocket_axilite2wishbone_next_state <= 3'd4;
            end
        end
        3'd4: begin
            main_rocket_mmio_a2w_b_valid <= 1'd1;
            main_rocket_mmio_a2w_b_payload_resp <= 1'd0;
            if (main_rocket_mmio_a2w_b_ready) begin
                builder_basesoc_rocket_axilite2wishbone_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_rocket_mmio_a2w_ar_valid & main_rocket_mmio_a2w_aw_valid)) begin
                if (main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n) begin
                    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value0 <= 1'd0;
                    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_basesoc_rocket_axilite2wishbone_next_state <= 2'd3;
                end else begin
                    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value0 <= 1'd1;
                    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_basesoc_rocket_axilite2wishbone_next_state <= 1'd1;
                end
            end else begin
                if (main_rocket_mmio_a2w_ar_valid) begin
                    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value0 <= 1'd1;
                    main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_basesoc_rocket_axilite2wishbone_next_state <= 1'd1;
                end else begin
                    if (main_rocket_mmio_a2w_aw_valid) begin
                        main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value0 <= 1'd0;
                        main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value_ce0 <= 1'd1;
                        builder_basesoc_rocket_axilite2wishbone_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_rocket_l2fb_a2w_addr = (main_rocket_l2fb_wb_adr - 1'd0);
always @(*) begin
    builder_basesoc_rocket_next_state <= 2'd0;
    main_rocket_l2fb_a2w_ar_payload_addr <= 32'd0;
    main_rocket_l2fb_a2w_ar_valid <= 1'd0;
    main_rocket_l2fb_a2w_aw_payload_addr <= 32'd0;
    main_rocket_l2fb_a2w_aw_valid <= 1'd0;
    main_rocket_l2fb_a2w_b_ready <= 1'd0;
    main_rocket_l2fb_a2w_cmd_done_rocket_next_value0 <= 1'd0;
    main_rocket_l2fb_a2w_cmd_done_rocket_next_value_ce0 <= 1'd0;
    main_rocket_l2fb_a2w_data_done_rocket_next_value1 <= 1'd0;
    main_rocket_l2fb_a2w_data_done_rocket_next_value_ce1 <= 1'd0;
    main_rocket_l2fb_a2w_r_ready <= 1'd0;
    main_rocket_l2fb_a2w_w_payload_data <= 64'd0;
    main_rocket_l2fb_a2w_w_payload_strb <= 8'd0;
    main_rocket_l2fb_a2w_w_valid <= 1'd0;
    main_rocket_l2fb_wb_ack <= 1'd0;
    main_rocket_l2fb_wb_dat_r <= 64'd0;
    main_rocket_l2fb_wb_err <= 1'd0;
    builder_basesoc_rocket_next_state <= builder_basesoc_rocket_state;
    case (builder_basesoc_rocket_state)
        1'd1: begin
            main_rocket_l2fb_a2w_aw_valid <= (~main_rocket_l2fb_a2w_cmd_done);
            main_rocket_l2fb_a2w_aw_payload_addr[31:3] <= main_rocket_l2fb_a2w_addr;
            if ((main_rocket_l2fb_a2w_aw_valid & main_rocket_l2fb_a2w_aw_ready)) begin
                main_rocket_l2fb_a2w_cmd_done_rocket_next_value0 <= 1'd1;
                main_rocket_l2fb_a2w_cmd_done_rocket_next_value_ce0 <= 1'd1;
            end
            main_rocket_l2fb_a2w_w_valid <= (~main_rocket_l2fb_a2w_data_done);
            main_rocket_l2fb_a2w_w_payload_data <= main_rocket_l2fb_wb_dat_w;
            main_rocket_l2fb_a2w_w_payload_strb <= main_rocket_l2fb_wb_sel;
            if ((main_rocket_l2fb_a2w_w_valid & main_rocket_l2fb_a2w_w_ready)) begin
                main_rocket_l2fb_a2w_data_done_rocket_next_value1 <= 1'd1;
                main_rocket_l2fb_a2w_data_done_rocket_next_value_ce1 <= 1'd1;
            end
            main_rocket_l2fb_a2w_b_ready <= (main_rocket_l2fb_a2w_cmd_done & main_rocket_l2fb_a2w_data_done);
            if ((main_rocket_l2fb_a2w_b_valid & main_rocket_l2fb_a2w_b_ready)) begin
                if ((main_rocket_l2fb_a2w_b_payload_resp == 1'd0)) begin
                    main_rocket_l2fb_wb_ack <= 1'd1;
                    builder_basesoc_rocket_next_state <= 1'd0;
                end else begin
                    builder_basesoc_rocket_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_rocket_l2fb_a2w_ar_valid <= (~main_rocket_l2fb_a2w_cmd_done);
            main_rocket_l2fb_a2w_ar_payload_addr[31:3] <= main_rocket_l2fb_a2w_addr;
            if ((main_rocket_l2fb_a2w_ar_valid & main_rocket_l2fb_a2w_ar_ready)) begin
                main_rocket_l2fb_a2w_cmd_done_rocket_next_value0 <= 1'd1;
                main_rocket_l2fb_a2w_cmd_done_rocket_next_value_ce0 <= 1'd1;
            end
            main_rocket_l2fb_a2w_r_ready <= main_rocket_l2fb_a2w_cmd_done;
            if ((main_rocket_l2fb_a2w_r_valid & main_rocket_l2fb_a2w_r_ready)) begin
                if ((main_rocket_l2fb_a2w_r_payload_resp == 1'd0)) begin
                    main_rocket_l2fb_wb_dat_r <= main_rocket_l2fb_a2w_r_payload_data;
                    main_rocket_l2fb_wb_ack <= 1'd1;
                    builder_basesoc_rocket_next_state <= 1'd0;
                end else begin
                    builder_basesoc_rocket_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_rocket_l2fb_wb_ack <= 1'd1;
            main_rocket_l2fb_wb_err <= 1'd1;
            builder_basesoc_rocket_next_state <= 1'd0;
        end
        default: begin
            main_rocket_l2fb_a2w_cmd_done_rocket_next_value0 <= 1'd0;
            main_rocket_l2fb_a2w_cmd_done_rocket_next_value_ce0 <= 1'd1;
            main_rocket_l2fb_a2w_data_done_rocket_next_value1 <= 1'd0;
            main_rocket_l2fb_a2w_data_done_rocket_next_value_ce1 <= 1'd1;
            if ((main_rocket_l2fb_wb_stb & main_rocket_l2fb_wb_cyc)) begin
                if (main_rocket_l2fb_wb_we) begin
                    builder_basesoc_rocket_next_state <= 1'd1;
                end else begin
                    builder_basesoc_rocket_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_rocket_l2fb_axi_aw_valid = main_rocket_l2fb_a2w_aw_valid;
assign main_rocket_l2fb_a2w_aw_ready = main_rocket_l2fb_axi_aw_ready;
assign main_rocket_l2fb_axi_aw_payload_addr = main_rocket_l2fb_a2w_aw_payload_addr;
assign main_rocket_l2fb_axi_aw_payload_burst = 1'd1;
assign main_rocket_l2fb_axi_aw_payload_len = 1'd0;
assign main_rocket_l2fb_axi_aw_payload_size = 2'd3;
assign main_rocket_l2fb_axi_aw_payload_lock = 1'd0;
assign main_rocket_l2fb_axi_aw_payload_prot = 1'd0;
assign main_rocket_l2fb_axi_aw_payload_cache = 2'd3;
assign main_rocket_l2fb_axi_aw_payload_qos = 1'd0;
assign main_rocket_l2fb_axi_aw_param_id = 1'd0;
assign main_rocket_l2fb_axi_w_valid = main_rocket_l2fb_a2w_w_valid;
assign main_rocket_l2fb_a2w_w_ready = main_rocket_l2fb_axi_w_ready;
assign main_rocket_l2fb_axi_w_payload_data = main_rocket_l2fb_a2w_w_payload_data;
assign main_rocket_l2fb_axi_w_payload_strb = main_rocket_l2fb_a2w_w_payload_strb;
assign main_rocket_l2fb_axi_w_last = 1'd1;
assign main_rocket_l2fb_a2w_b_valid = main_rocket_l2fb_axi_b_valid;
assign main_rocket_l2fb_a2w_b_payload_resp = main_rocket_l2fb_axi_b_payload_resp;
assign main_rocket_l2fb_axi_b_ready = main_rocket_l2fb_a2w_b_ready;
assign main_rocket_l2fb_axi_ar_valid = main_rocket_l2fb_a2w_ar_valid;
assign main_rocket_l2fb_a2w_ar_ready = main_rocket_l2fb_axi_ar_ready;
assign main_rocket_l2fb_axi_ar_payload_addr = main_rocket_l2fb_a2w_ar_payload_addr;
assign main_rocket_l2fb_axi_ar_payload_burst = 1'd1;
assign main_rocket_l2fb_axi_ar_payload_len = 1'd0;
assign main_rocket_l2fb_axi_ar_payload_size = 2'd3;
assign main_rocket_l2fb_axi_ar_payload_lock = 1'd0;
assign main_rocket_l2fb_axi_ar_payload_prot = 1'd0;
assign main_rocket_l2fb_axi_ar_payload_cache = 2'd3;
assign main_rocket_l2fb_axi_ar_payload_qos = 1'd0;
assign main_rocket_l2fb_axi_ar_param_id = 1'd0;
assign main_rocket_l2fb_a2w_r_valid = main_rocket_l2fb_axi_r_valid;
assign main_rocket_l2fb_a2w_r_payload_resp = main_rocket_l2fb_axi_r_payload_resp;
assign main_rocket_l2fb_a2w_r_payload_data = main_rocket_l2fb_axi_r_payload_data;
assign main_rocket_l2fb_axi_r_ready = main_rocket_l2fb_a2w_r_ready;
always @(*) begin
    builder_basesoc_axilitesram0_next_state <= 2'd0;
    main_basesoc_adr <= 19'd0;
    main_basesoc_do_read <= 1'd0;
    main_basesoc_do_write <= 1'd0;
    main_basesoc_last_was_read_axilitesram0_next_value1 <= 1'd0;
    main_basesoc_last_was_read_axilitesram0_next_value_ce1 <= 1'd0;
    main_basesoc_port_dat_r_latched_axilitesram0_next_value0 <= 32'd0;
    main_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0 <= 1'd0;
    main_basesoc_ram_bus_ar_ready <= 1'd0;
    main_basesoc_ram_bus_aw_ready <= 1'd0;
    main_basesoc_ram_bus_b_payload_resp <= 2'd0;
    main_basesoc_ram_bus_b_valid <= 1'd0;
    main_basesoc_ram_bus_r_payload_data <= 32'd0;
    main_basesoc_ram_bus_r_payload_resp <= 2'd0;
    main_basesoc_ram_bus_r_valid <= 1'd0;
    main_basesoc_ram_bus_w_ready <= 1'd0;
    builder_basesoc_axilitesram0_next_state <= builder_basesoc_axilitesram0_state;
    case (builder_basesoc_axilitesram0_state)
        1'd1: begin
            main_basesoc_port_dat_r_latched_axilitesram0_next_value0 <= main_basesoc_dat_r;
            main_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0 <= 1'd1;
            builder_basesoc_axilitesram0_next_state <= 2'd2;
        end
        2'd2: begin
            main_basesoc_last_was_read_axilitesram0_next_value1 <= 1'd1;
            main_basesoc_last_was_read_axilitesram0_next_value_ce1 <= 1'd1;
            main_basesoc_ram_bus_r_payload_data <= main_basesoc_port_dat_r_latched;
            main_basesoc_ram_bus_r_payload_resp <= 1'd0;
            main_basesoc_ram_bus_r_valid <= 1'd1;
            if (main_basesoc_ram_bus_r_ready) begin
                builder_basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        2'd3: begin
            main_basesoc_last_was_read_axilitesram0_next_value1 <= 1'd0;
            main_basesoc_last_was_read_axilitesram0_next_value_ce1 <= 1'd1;
            main_basesoc_ram_bus_b_valid <= 1'd1;
            main_basesoc_ram_bus_b_payload_resp <= 1'd0;
            if (main_basesoc_ram_bus_b_ready) begin
                builder_basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_ram_bus_aw_valid & main_basesoc_ram_bus_ar_valid)) begin
                main_basesoc_do_write <= main_basesoc_last_was_read;
                main_basesoc_do_read <= (~main_basesoc_last_was_read);
            end else begin
                main_basesoc_do_write <= main_basesoc_ram_bus_aw_valid;
                main_basesoc_do_read <= main_basesoc_ram_bus_ar_valid;
            end
            main_basesoc_ram_bus_aw_ready <= (main_basesoc_last_was_read | (~main_basesoc_ram_bus_ar_valid));
            main_basesoc_ram_bus_ar_ready <= ((~main_basesoc_last_was_read) | (~main_basesoc_ram_bus_aw_valid));
            if (main_basesoc_do_write) begin
                main_basesoc_adr <= main_basesoc_ram_bus_aw_payload_addr[31:2];
                if (main_basesoc_ram_bus_w_valid) begin
                    main_basesoc_ram_bus_w_ready <= 1'd1;
                    builder_basesoc_axilitesram0_next_state <= 2'd3;
                end
            end else begin
                if (main_basesoc_do_read) begin
                    main_basesoc_adr <= main_basesoc_ram_bus_ar_payload_addr[31:2];
                    builder_basesoc_axilitesram0_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    main_ram_dat_w <= 32'd0;
    main_ram_dat_w <= main_ram_bus_w_payload_data;
    main_ram_dat_w <= main_ram_bus_w_payload_data;
end
always @(*) begin
    main_ram_we <= 4'd0;
    main_ram_we[0] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[0]);
    main_ram_we[1] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[1]);
    main_ram_we[2] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[2]);
    main_ram_we[3] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[3]);
    main_ram_we[0] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[0]);
    main_ram_we[1] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[1]);
    main_ram_we[2] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[2]);
    main_ram_we[3] <= ((main_ram_bus_w_valid & main_ram_bus_w_ready) & main_ram_bus_w_payload_strb[3]);
end
always @(*) begin
    builder_basesoc_axilitesram1_next_state <= 2'd0;
    main_ram_adr <= 15'd0;
    main_ram_bus_ar_ready <= 1'd0;
    main_ram_bus_aw_ready <= 1'd0;
    main_ram_bus_b_payload_resp <= 2'd0;
    main_ram_bus_b_valid <= 1'd0;
    main_ram_bus_r_payload_data <= 32'd0;
    main_ram_bus_r_payload_resp <= 2'd0;
    main_ram_bus_r_valid <= 1'd0;
    main_ram_bus_w_ready <= 1'd0;
    main_ram_do_read <= 1'd0;
    main_ram_do_write <= 1'd0;
    main_ram_last_was_read_axilitesram1_next_value1 <= 1'd0;
    main_ram_last_was_read_axilitesram1_next_value_ce1 <= 1'd0;
    main_ram_port_dat_r_latched_axilitesram1_next_value0 <= 32'd0;
    main_ram_port_dat_r_latched_axilitesram1_next_value_ce0 <= 1'd0;
    builder_basesoc_axilitesram1_next_state <= builder_basesoc_axilitesram1_state;
    case (builder_basesoc_axilitesram1_state)
        1'd1: begin
            main_ram_port_dat_r_latched_axilitesram1_next_value0 <= main_ram_dat_r;
            main_ram_port_dat_r_latched_axilitesram1_next_value_ce0 <= 1'd1;
            builder_basesoc_axilitesram1_next_state <= 2'd2;
        end
        2'd2: begin
            main_ram_last_was_read_axilitesram1_next_value1 <= 1'd1;
            main_ram_last_was_read_axilitesram1_next_value_ce1 <= 1'd1;
            main_ram_bus_r_payload_data <= main_ram_port_dat_r_latched;
            main_ram_bus_r_payload_resp <= 1'd0;
            main_ram_bus_r_valid <= 1'd1;
            if (main_ram_bus_r_ready) begin
                builder_basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        2'd3: begin
            main_ram_last_was_read_axilitesram1_next_value1 <= 1'd0;
            main_ram_last_was_read_axilitesram1_next_value_ce1 <= 1'd1;
            main_ram_bus_b_valid <= 1'd1;
            main_ram_bus_b_payload_resp <= 1'd0;
            if (main_ram_bus_b_ready) begin
                builder_basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_ram_bus_aw_valid & main_ram_bus_ar_valid)) begin
                main_ram_do_write <= main_ram_last_was_read;
                main_ram_do_read <= (~main_ram_last_was_read);
            end else begin
                main_ram_do_write <= main_ram_bus_aw_valid;
                main_ram_do_read <= main_ram_bus_ar_valid;
            end
            main_ram_bus_aw_ready <= (main_ram_last_was_read | (~main_ram_bus_ar_valid));
            main_ram_bus_ar_ready <= ((~main_ram_last_was_read) | (~main_ram_bus_aw_valid));
            if (main_ram_do_write) begin
                main_ram_adr <= main_ram_bus_aw_payload_addr[31:2];
                if (main_ram_bus_w_valid) begin
                    main_ram_bus_w_ready <= 1'd1;
                    builder_basesoc_axilitesram1_next_state <= 2'd3;
                end
            end else begin
                if (main_ram_do_read) begin
                    main_ram_adr <= main_ram_bus_ar_payload_addr[31:2];
                    builder_basesoc_axilitesram1_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_rs232phytx_next_state <= 1'd0;
    main_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_tx_enable <= 1'd0;
    main_tx_sink_ready <= 1'd0;
    builder_basesoc_rs232phytx_next_state <= builder_basesoc_rs232phytx_state;
    case (builder_basesoc_rs232phytx_state)
        1'd1: begin
            main_tx_enable <= 1'd1;
            if (main_tx_tick) begin
                main_serial_tx_rs232phytx_next_value1 <= main_tx_data;
                main_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_tx_count_rs232phytx_next_value0 <= (main_tx_count + 1'd1);
                main_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_tx_data_rs232phytx_next_value2 <= {1'd1, main_tx_data[7:1]};
                main_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_tx_count == 4'd9)) begin
                    main_tx_sink_ready <= 1'd1;
                    builder_basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_tx_sink_valid) begin
                main_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_tx_data_rs232phytx_next_value2 <= main_tx_sink_payload_data;
                main_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_rs232phyrx_next_state <= 1'd0;
    main_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_rx_enable <= 1'd0;
    main_rx_source_payload_data <= 8'd0;
    main_rx_source_valid <= 1'd0;
    builder_basesoc_rs232phyrx_next_state <= builder_basesoc_rs232phyrx_state;
    case (builder_basesoc_rs232phyrx_state)
        1'd1: begin
            main_rx_enable <= 1'd1;
            if (main_rx_tick) begin
                main_rx_count_rs232phyrx_next_value0 <= (main_rx_count + 1'd1);
                main_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_rx_data_rs232phyrx_next_value1 <= {main_rx_rx, main_rx_data[7:1]};
                main_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_rx_count == 4'd9)) begin
                    main_rx_source_valid <= (main_rx_rx == 1'd1);
                    main_rx_source_payload_data <= main_rx_data;
                    builder_basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_rx_rx == 1'd0) & (main_rx_rx_d == 1'd1))) begin
                builder_basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_uart_uart_sink_valid = main_rx_source_valid;
assign main_rx_source_ready = main_uart_uart_sink_ready;
assign main_uart_uart_sink_first = main_rx_source_first;
assign main_uart_uart_sink_last = main_rx_source_last;
assign main_uart_uart_sink_payload_data = main_rx_source_payload_data;
assign main_tx_sink_valid = main_uart_uart_source_valid;
assign main_uart_uart_source_ready = main_tx_sink_ready;
assign main_tx_sink_first = main_uart_uart_source_first;
assign main_tx_sink_last = main_uart_uart_source_last;
assign main_tx_sink_payload_data = main_uart_uart_source_payload_data;
assign main_uart_tx_fifo_sink_valid = main_uart_rxtx_re;
assign main_uart_tx_fifo_sink_payload_data = main_uart_rxtx_r;
assign main_uart_uart_source_valid = main_uart_tx_fifo_source_valid;
assign main_uart_tx_fifo_source_ready = main_uart_uart_source_ready;
assign main_uart_uart_source_first = main_uart_tx_fifo_source_first;
assign main_uart_uart_source_last = main_uart_tx_fifo_source_last;
assign main_uart_uart_source_payload_data = main_uart_tx_fifo_source_payload_data;
assign main_uart_txfull_status = (~main_uart_tx_fifo_sink_ready);
assign main_uart_txempty_status = (~main_uart_tx_fifo_source_valid);
assign main_uart_tx_trigger = main_uart_tx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_valid = main_uart_uart_sink_valid;
assign main_uart_uart_sink_ready = main_uart_rx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_first = main_uart_uart_sink_first;
assign main_uart_rx_fifo_sink_last = main_uart_uart_sink_last;
assign main_uart_rx_fifo_sink_payload_data = main_uart_uart_sink_payload_data;
assign main_uart_rxtx_w = main_uart_rx_fifo_source_payload_data;
assign main_uart_rx_fifo_source_ready = (main_uart_rx_clear | (1'd0 & main_uart_rxtx_we));
assign main_uart_rxempty_status = (~main_uart_rx_fifo_source_valid);
assign main_uart_rxfull_status = (~main_uart_rx_fifo_sink_ready);
assign main_uart_rx_trigger = main_uart_rx_fifo_source_valid;
assign main_uart_tx0 = main_uart_tx_status;
assign main_uart_tx1 = main_uart_tx_pending;
always @(*) begin
    main_uart_tx_clear <= 1'd0;
    if ((main_uart_pending_re & main_uart_pending_r[0])) begin
        main_uart_tx_clear <= 1'd1;
    end
end
assign main_uart_rx0 = main_uart_rx_status;
assign main_uart_rx1 = main_uart_rx_pending;
always @(*) begin
    main_uart_rx_clear <= 1'd0;
    if ((main_uart_pending_re & main_uart_pending_r[1])) begin
        main_uart_rx_clear <= 1'd1;
    end
end
assign main_uart_irq = ((main_uart_pending_status[0] & main_uart_enable_storage[0]) | (main_uart_pending_status[1] & main_uart_enable_storage[1]));
assign main_uart_tx_status = main_uart_tx_trigger;
assign main_uart_rx_status = main_uart_rx_trigger;
assign main_uart_tx_fifo_syncfifo_din = {main_uart_tx_fifo_fifo_in_last, main_uart_tx_fifo_fifo_in_first, main_uart_tx_fifo_fifo_in_payload_data};
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign main_uart_tx_fifo_sink_ready = main_uart_tx_fifo_syncfifo_writable;
assign main_uart_tx_fifo_syncfifo_we = main_uart_tx_fifo_sink_valid;
assign main_uart_tx_fifo_fifo_in_first = main_uart_tx_fifo_sink_first;
assign main_uart_tx_fifo_fifo_in_last = main_uart_tx_fifo_sink_last;
assign main_uart_tx_fifo_fifo_in_payload_data = main_uart_tx_fifo_sink_payload_data;
assign main_uart_tx_fifo_source_valid = main_uart_tx_fifo_readable;
assign main_uart_tx_fifo_source_first = main_uart_tx_fifo_fifo_out_first;
assign main_uart_tx_fifo_source_last = main_uart_tx_fifo_fifo_out_last;
assign main_uart_tx_fifo_source_payload_data = main_uart_tx_fifo_fifo_out_payload_data;
assign main_uart_tx_fifo_re = main_uart_tx_fifo_source_ready;
assign main_uart_tx_fifo_syncfifo_re = (main_uart_tx_fifo_syncfifo_readable & ((~main_uart_tx_fifo_readable) | main_uart_tx_fifo_re));
assign main_uart_tx_fifo_level1 = (main_uart_tx_fifo_level0 + main_uart_tx_fifo_readable);
always @(*) begin
    main_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_uart_tx_fifo_replace) begin
        main_uart_tx_fifo_wrport_adr <= (main_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_uart_tx_fifo_wrport_adr <= main_uart_tx_fifo_produce;
    end
end
assign main_uart_tx_fifo_wrport_dat_w = main_uart_tx_fifo_syncfifo_din;
assign main_uart_tx_fifo_wrport_we = (main_uart_tx_fifo_syncfifo_we & (main_uart_tx_fifo_syncfifo_writable | main_uart_tx_fifo_replace));
assign main_uart_tx_fifo_do_read = (main_uart_tx_fifo_syncfifo_readable & main_uart_tx_fifo_syncfifo_re);
assign main_uart_tx_fifo_rdport_adr = main_uart_tx_fifo_consume;
assign main_uart_tx_fifo_syncfifo_dout = main_uart_tx_fifo_rdport_dat_r;
assign main_uart_tx_fifo_rdport_re = main_uart_tx_fifo_do_read;
assign main_uart_tx_fifo_syncfifo_writable = (main_uart_tx_fifo_level0 != 5'd16);
assign main_uart_tx_fifo_syncfifo_readable = (main_uart_tx_fifo_level0 != 1'd0);
assign main_uart_rx_fifo_syncfifo_din = {main_uart_rx_fifo_fifo_in_last, main_uart_rx_fifo_fifo_in_first, main_uart_rx_fifo_fifo_in_payload_data};
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign main_uart_rx_fifo_sink_ready = main_uart_rx_fifo_syncfifo_writable;
assign main_uart_rx_fifo_syncfifo_we = main_uart_rx_fifo_sink_valid;
assign main_uart_rx_fifo_fifo_in_first = main_uart_rx_fifo_sink_first;
assign main_uart_rx_fifo_fifo_in_last = main_uart_rx_fifo_sink_last;
assign main_uart_rx_fifo_fifo_in_payload_data = main_uart_rx_fifo_sink_payload_data;
assign main_uart_rx_fifo_source_valid = main_uart_rx_fifo_readable;
assign main_uart_rx_fifo_source_first = main_uart_rx_fifo_fifo_out_first;
assign main_uart_rx_fifo_source_last = main_uart_rx_fifo_fifo_out_last;
assign main_uart_rx_fifo_source_payload_data = main_uart_rx_fifo_fifo_out_payload_data;
assign main_uart_rx_fifo_re = main_uart_rx_fifo_source_ready;
assign main_uart_rx_fifo_syncfifo_re = (main_uart_rx_fifo_syncfifo_readable & ((~main_uart_rx_fifo_readable) | main_uart_rx_fifo_re));
assign main_uart_rx_fifo_level1 = (main_uart_rx_fifo_level0 + main_uart_rx_fifo_readable);
always @(*) begin
    main_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_uart_rx_fifo_replace) begin
        main_uart_rx_fifo_wrport_adr <= (main_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_uart_rx_fifo_wrport_adr <= main_uart_rx_fifo_produce;
    end
end
assign main_uart_rx_fifo_wrport_dat_w = main_uart_rx_fifo_syncfifo_din;
assign main_uart_rx_fifo_wrport_we = (main_uart_rx_fifo_syncfifo_we & (main_uart_rx_fifo_syncfifo_writable | main_uart_rx_fifo_replace));
assign main_uart_rx_fifo_do_read = (main_uart_rx_fifo_syncfifo_readable & main_uart_rx_fifo_syncfifo_re);
assign main_uart_rx_fifo_rdport_adr = main_uart_rx_fifo_consume;
assign main_uart_rx_fifo_syncfifo_dout = main_uart_rx_fifo_rdport_dat_r;
assign main_uart_rx_fifo_rdport_re = main_uart_rx_fifo_do_read;
assign main_uart_rx_fifo_syncfifo_writable = (main_uart_rx_fifo_level0 != 5'd16);
assign main_uart_rx_fifo_syncfifo_readable = (main_uart_rx_fifo_level0 != 1'd0);
assign main_timer_zero_trigger = (main_timer_value == 1'd0);
assign main_timer_zero0 = main_timer_zero_status;
assign main_timer_zero1 = main_timer_zero_pending;
always @(*) begin
    main_timer_zero_clear <= 1'd0;
    if ((main_timer_pending_re & main_timer_pending_r)) begin
        main_timer_zero_clear <= 1'd1;
    end
end
assign main_timer_irq = (main_timer_pending_status & main_timer_enable_storage);
assign main_timer_zero_status = main_timer_zero_trigger;
assign ddram_ba = main_v7ddrphy_pads_ba;
assign main_v7ddrphy_dqs_oe_delay_tappeddelayline = ((main_v7ddrphy_dqs_preamble | main_v7ddrphy_dqs_oe) | main_v7ddrphy_dqs_postamble);
assign main_v7ddrphy_dq_oe_delay_tappeddelayline = ((main_v7ddrphy_dqs_preamble | main_v7ddrphy_dq_oe) | main_v7ddrphy_dqs_postamble);
always @(*) begin
    main_v7ddrphy_dfi_p0_rddata <= 128'd0;
    main_v7ddrphy_dfi_p0_rddata[0] <= main_v7ddrphy_bitslip04[0];
    main_v7ddrphy_dfi_p0_rddata[64] <= main_v7ddrphy_bitslip04[1];
    main_v7ddrphy_dfi_p0_rddata[1] <= main_v7ddrphy_bitslip14[0];
    main_v7ddrphy_dfi_p0_rddata[65] <= main_v7ddrphy_bitslip14[1];
    main_v7ddrphy_dfi_p0_rddata[2] <= main_v7ddrphy_bitslip24[0];
    main_v7ddrphy_dfi_p0_rddata[66] <= main_v7ddrphy_bitslip24[1];
    main_v7ddrphy_dfi_p0_rddata[3] <= main_v7ddrphy_bitslip34[0];
    main_v7ddrphy_dfi_p0_rddata[67] <= main_v7ddrphy_bitslip34[1];
    main_v7ddrphy_dfi_p0_rddata[4] <= main_v7ddrphy_bitslip44[0];
    main_v7ddrphy_dfi_p0_rddata[68] <= main_v7ddrphy_bitslip44[1];
    main_v7ddrphy_dfi_p0_rddata[5] <= main_v7ddrphy_bitslip54[0];
    main_v7ddrphy_dfi_p0_rddata[69] <= main_v7ddrphy_bitslip54[1];
    main_v7ddrphy_dfi_p0_rddata[6] <= main_v7ddrphy_bitslip64[0];
    main_v7ddrphy_dfi_p0_rddata[70] <= main_v7ddrphy_bitslip64[1];
    main_v7ddrphy_dfi_p0_rddata[7] <= main_v7ddrphy_bitslip74[0];
    main_v7ddrphy_dfi_p0_rddata[71] <= main_v7ddrphy_bitslip74[1];
    main_v7ddrphy_dfi_p0_rddata[8] <= main_v7ddrphy_bitslip82[0];
    main_v7ddrphy_dfi_p0_rddata[72] <= main_v7ddrphy_bitslip82[1];
    main_v7ddrphy_dfi_p0_rddata[9] <= main_v7ddrphy_bitslip92[0];
    main_v7ddrphy_dfi_p0_rddata[73] <= main_v7ddrphy_bitslip92[1];
    main_v7ddrphy_dfi_p0_rddata[10] <= main_v7ddrphy_bitslip102[0];
    main_v7ddrphy_dfi_p0_rddata[74] <= main_v7ddrphy_bitslip102[1];
    main_v7ddrphy_dfi_p0_rddata[11] <= main_v7ddrphy_bitslip112[0];
    main_v7ddrphy_dfi_p0_rddata[75] <= main_v7ddrphy_bitslip112[1];
    main_v7ddrphy_dfi_p0_rddata[12] <= main_v7ddrphy_bitslip122[0];
    main_v7ddrphy_dfi_p0_rddata[76] <= main_v7ddrphy_bitslip122[1];
    main_v7ddrphy_dfi_p0_rddata[13] <= main_v7ddrphy_bitslip132[0];
    main_v7ddrphy_dfi_p0_rddata[77] <= main_v7ddrphy_bitslip132[1];
    main_v7ddrphy_dfi_p0_rddata[14] <= main_v7ddrphy_bitslip142[0];
    main_v7ddrphy_dfi_p0_rddata[78] <= main_v7ddrphy_bitslip142[1];
    main_v7ddrphy_dfi_p0_rddata[15] <= main_v7ddrphy_bitslip152[0];
    main_v7ddrphy_dfi_p0_rddata[79] <= main_v7ddrphy_bitslip152[1];
    main_v7ddrphy_dfi_p0_rddata[16] <= main_v7ddrphy_bitslip162[0];
    main_v7ddrphy_dfi_p0_rddata[80] <= main_v7ddrphy_bitslip162[1];
    main_v7ddrphy_dfi_p0_rddata[17] <= main_v7ddrphy_bitslip172[0];
    main_v7ddrphy_dfi_p0_rddata[81] <= main_v7ddrphy_bitslip172[1];
    main_v7ddrphy_dfi_p0_rddata[18] <= main_v7ddrphy_bitslip182[0];
    main_v7ddrphy_dfi_p0_rddata[82] <= main_v7ddrphy_bitslip182[1];
    main_v7ddrphy_dfi_p0_rddata[19] <= main_v7ddrphy_bitslip192[0];
    main_v7ddrphy_dfi_p0_rddata[83] <= main_v7ddrphy_bitslip192[1];
    main_v7ddrphy_dfi_p0_rddata[20] <= main_v7ddrphy_bitslip202[0];
    main_v7ddrphy_dfi_p0_rddata[84] <= main_v7ddrphy_bitslip202[1];
    main_v7ddrphy_dfi_p0_rddata[21] <= main_v7ddrphy_bitslip212[0];
    main_v7ddrphy_dfi_p0_rddata[85] <= main_v7ddrphy_bitslip212[1];
    main_v7ddrphy_dfi_p0_rddata[22] <= main_v7ddrphy_bitslip222[0];
    main_v7ddrphy_dfi_p0_rddata[86] <= main_v7ddrphy_bitslip222[1];
    main_v7ddrphy_dfi_p0_rddata[23] <= main_v7ddrphy_bitslip232[0];
    main_v7ddrphy_dfi_p0_rddata[87] <= main_v7ddrphy_bitslip232[1];
    main_v7ddrphy_dfi_p0_rddata[24] <= main_v7ddrphy_bitslip242[0];
    main_v7ddrphy_dfi_p0_rddata[88] <= main_v7ddrphy_bitslip242[1];
    main_v7ddrphy_dfi_p0_rddata[25] <= main_v7ddrphy_bitslip252[0];
    main_v7ddrphy_dfi_p0_rddata[89] <= main_v7ddrphy_bitslip252[1];
    main_v7ddrphy_dfi_p0_rddata[26] <= main_v7ddrphy_bitslip262[0];
    main_v7ddrphy_dfi_p0_rddata[90] <= main_v7ddrphy_bitslip262[1];
    main_v7ddrphy_dfi_p0_rddata[27] <= main_v7ddrphy_bitslip272[0];
    main_v7ddrphy_dfi_p0_rddata[91] <= main_v7ddrphy_bitslip272[1];
    main_v7ddrphy_dfi_p0_rddata[28] <= main_v7ddrphy_bitslip282[0];
    main_v7ddrphy_dfi_p0_rddata[92] <= main_v7ddrphy_bitslip282[1];
    main_v7ddrphy_dfi_p0_rddata[29] <= main_v7ddrphy_bitslip292[0];
    main_v7ddrphy_dfi_p0_rddata[93] <= main_v7ddrphy_bitslip292[1];
    main_v7ddrphy_dfi_p0_rddata[30] <= main_v7ddrphy_bitslip302[0];
    main_v7ddrphy_dfi_p0_rddata[94] <= main_v7ddrphy_bitslip302[1];
    main_v7ddrphy_dfi_p0_rddata[31] <= main_v7ddrphy_bitslip312[0];
    main_v7ddrphy_dfi_p0_rddata[95] <= main_v7ddrphy_bitslip312[1];
    main_v7ddrphy_dfi_p0_rddata[32] <= main_v7ddrphy_bitslip322[0];
    main_v7ddrphy_dfi_p0_rddata[96] <= main_v7ddrphy_bitslip322[1];
    main_v7ddrphy_dfi_p0_rddata[33] <= main_v7ddrphy_bitslip332[0];
    main_v7ddrphy_dfi_p0_rddata[97] <= main_v7ddrphy_bitslip332[1];
    main_v7ddrphy_dfi_p0_rddata[34] <= main_v7ddrphy_bitslip342[0];
    main_v7ddrphy_dfi_p0_rddata[98] <= main_v7ddrphy_bitslip342[1];
    main_v7ddrphy_dfi_p0_rddata[35] <= main_v7ddrphy_bitslip352[0];
    main_v7ddrphy_dfi_p0_rddata[99] <= main_v7ddrphy_bitslip352[1];
    main_v7ddrphy_dfi_p0_rddata[36] <= main_v7ddrphy_bitslip362[0];
    main_v7ddrphy_dfi_p0_rddata[100] <= main_v7ddrphy_bitslip362[1];
    main_v7ddrphy_dfi_p0_rddata[37] <= main_v7ddrphy_bitslip372[0];
    main_v7ddrphy_dfi_p0_rddata[101] <= main_v7ddrphy_bitslip372[1];
    main_v7ddrphy_dfi_p0_rddata[38] <= main_v7ddrphy_bitslip382[0];
    main_v7ddrphy_dfi_p0_rddata[102] <= main_v7ddrphy_bitslip382[1];
    main_v7ddrphy_dfi_p0_rddata[39] <= main_v7ddrphy_bitslip392[0];
    main_v7ddrphy_dfi_p0_rddata[103] <= main_v7ddrphy_bitslip392[1];
    main_v7ddrphy_dfi_p0_rddata[40] <= main_v7ddrphy_bitslip402[0];
    main_v7ddrphy_dfi_p0_rddata[104] <= main_v7ddrphy_bitslip402[1];
    main_v7ddrphy_dfi_p0_rddata[41] <= main_v7ddrphy_bitslip412[0];
    main_v7ddrphy_dfi_p0_rddata[105] <= main_v7ddrphy_bitslip412[1];
    main_v7ddrphy_dfi_p0_rddata[42] <= main_v7ddrphy_bitslip422[0];
    main_v7ddrphy_dfi_p0_rddata[106] <= main_v7ddrphy_bitslip422[1];
    main_v7ddrphy_dfi_p0_rddata[43] <= main_v7ddrphy_bitslip432[0];
    main_v7ddrphy_dfi_p0_rddata[107] <= main_v7ddrphy_bitslip432[1];
    main_v7ddrphy_dfi_p0_rddata[44] <= main_v7ddrphy_bitslip442[0];
    main_v7ddrphy_dfi_p0_rddata[108] <= main_v7ddrphy_bitslip442[1];
    main_v7ddrphy_dfi_p0_rddata[45] <= main_v7ddrphy_bitslip452[0];
    main_v7ddrphy_dfi_p0_rddata[109] <= main_v7ddrphy_bitslip452[1];
    main_v7ddrphy_dfi_p0_rddata[46] <= main_v7ddrphy_bitslip462[0];
    main_v7ddrphy_dfi_p0_rddata[110] <= main_v7ddrphy_bitslip462[1];
    main_v7ddrphy_dfi_p0_rddata[47] <= main_v7ddrphy_bitslip472[0];
    main_v7ddrphy_dfi_p0_rddata[111] <= main_v7ddrphy_bitslip472[1];
    main_v7ddrphy_dfi_p0_rddata[48] <= main_v7ddrphy_bitslip482[0];
    main_v7ddrphy_dfi_p0_rddata[112] <= main_v7ddrphy_bitslip482[1];
    main_v7ddrphy_dfi_p0_rddata[49] <= main_v7ddrphy_bitslip492[0];
    main_v7ddrphy_dfi_p0_rddata[113] <= main_v7ddrphy_bitslip492[1];
    main_v7ddrphy_dfi_p0_rddata[50] <= main_v7ddrphy_bitslip502[0];
    main_v7ddrphy_dfi_p0_rddata[114] <= main_v7ddrphy_bitslip502[1];
    main_v7ddrphy_dfi_p0_rddata[51] <= main_v7ddrphy_bitslip512[0];
    main_v7ddrphy_dfi_p0_rddata[115] <= main_v7ddrphy_bitslip512[1];
    main_v7ddrphy_dfi_p0_rddata[52] <= main_v7ddrphy_bitslip522[0];
    main_v7ddrphy_dfi_p0_rddata[116] <= main_v7ddrphy_bitslip522[1];
    main_v7ddrphy_dfi_p0_rddata[53] <= main_v7ddrphy_bitslip532[0];
    main_v7ddrphy_dfi_p0_rddata[117] <= main_v7ddrphy_bitslip532[1];
    main_v7ddrphy_dfi_p0_rddata[54] <= main_v7ddrphy_bitslip542[0];
    main_v7ddrphy_dfi_p0_rddata[118] <= main_v7ddrphy_bitslip542[1];
    main_v7ddrphy_dfi_p0_rddata[55] <= main_v7ddrphy_bitslip552[0];
    main_v7ddrphy_dfi_p0_rddata[119] <= main_v7ddrphy_bitslip552[1];
    main_v7ddrphy_dfi_p0_rddata[56] <= main_v7ddrphy_bitslip562[0];
    main_v7ddrphy_dfi_p0_rddata[120] <= main_v7ddrphy_bitslip562[1];
    main_v7ddrphy_dfi_p0_rddata[57] <= main_v7ddrphy_bitslip572[0];
    main_v7ddrphy_dfi_p0_rddata[121] <= main_v7ddrphy_bitslip572[1];
    main_v7ddrphy_dfi_p0_rddata[58] <= main_v7ddrphy_bitslip582[0];
    main_v7ddrphy_dfi_p0_rddata[122] <= main_v7ddrphy_bitslip582[1];
    main_v7ddrphy_dfi_p0_rddata[59] <= main_v7ddrphy_bitslip592[0];
    main_v7ddrphy_dfi_p0_rddata[123] <= main_v7ddrphy_bitslip592[1];
    main_v7ddrphy_dfi_p0_rddata[60] <= main_v7ddrphy_bitslip602[0];
    main_v7ddrphy_dfi_p0_rddata[124] <= main_v7ddrphy_bitslip602[1];
    main_v7ddrphy_dfi_p0_rddata[61] <= main_v7ddrphy_bitslip612[0];
    main_v7ddrphy_dfi_p0_rddata[125] <= main_v7ddrphy_bitslip612[1];
    main_v7ddrphy_dfi_p0_rddata[62] <= main_v7ddrphy_bitslip622[0];
    main_v7ddrphy_dfi_p0_rddata[126] <= main_v7ddrphy_bitslip622[1];
    main_v7ddrphy_dfi_p0_rddata[63] <= main_v7ddrphy_bitslip632[0];
    main_v7ddrphy_dfi_p0_rddata[127] <= main_v7ddrphy_bitslip632[1];
end
always @(*) begin
    main_v7ddrphy_dfi_p1_rddata <= 128'd0;
    main_v7ddrphy_dfi_p1_rddata[0] <= main_v7ddrphy_bitslip04[2];
    main_v7ddrphy_dfi_p1_rddata[64] <= main_v7ddrphy_bitslip04[3];
    main_v7ddrphy_dfi_p1_rddata[1] <= main_v7ddrphy_bitslip14[2];
    main_v7ddrphy_dfi_p1_rddata[65] <= main_v7ddrphy_bitslip14[3];
    main_v7ddrphy_dfi_p1_rddata[2] <= main_v7ddrphy_bitslip24[2];
    main_v7ddrphy_dfi_p1_rddata[66] <= main_v7ddrphy_bitslip24[3];
    main_v7ddrphy_dfi_p1_rddata[3] <= main_v7ddrphy_bitslip34[2];
    main_v7ddrphy_dfi_p1_rddata[67] <= main_v7ddrphy_bitslip34[3];
    main_v7ddrphy_dfi_p1_rddata[4] <= main_v7ddrphy_bitslip44[2];
    main_v7ddrphy_dfi_p1_rddata[68] <= main_v7ddrphy_bitslip44[3];
    main_v7ddrphy_dfi_p1_rddata[5] <= main_v7ddrphy_bitslip54[2];
    main_v7ddrphy_dfi_p1_rddata[69] <= main_v7ddrphy_bitslip54[3];
    main_v7ddrphy_dfi_p1_rddata[6] <= main_v7ddrphy_bitslip64[2];
    main_v7ddrphy_dfi_p1_rddata[70] <= main_v7ddrphy_bitslip64[3];
    main_v7ddrphy_dfi_p1_rddata[7] <= main_v7ddrphy_bitslip74[2];
    main_v7ddrphy_dfi_p1_rddata[71] <= main_v7ddrphy_bitslip74[3];
    main_v7ddrphy_dfi_p1_rddata[8] <= main_v7ddrphy_bitslip82[2];
    main_v7ddrphy_dfi_p1_rddata[72] <= main_v7ddrphy_bitslip82[3];
    main_v7ddrphy_dfi_p1_rddata[9] <= main_v7ddrphy_bitslip92[2];
    main_v7ddrphy_dfi_p1_rddata[73] <= main_v7ddrphy_bitslip92[3];
    main_v7ddrphy_dfi_p1_rddata[10] <= main_v7ddrphy_bitslip102[2];
    main_v7ddrphy_dfi_p1_rddata[74] <= main_v7ddrphy_bitslip102[3];
    main_v7ddrphy_dfi_p1_rddata[11] <= main_v7ddrphy_bitslip112[2];
    main_v7ddrphy_dfi_p1_rddata[75] <= main_v7ddrphy_bitslip112[3];
    main_v7ddrphy_dfi_p1_rddata[12] <= main_v7ddrphy_bitslip122[2];
    main_v7ddrphy_dfi_p1_rddata[76] <= main_v7ddrphy_bitslip122[3];
    main_v7ddrphy_dfi_p1_rddata[13] <= main_v7ddrphy_bitslip132[2];
    main_v7ddrphy_dfi_p1_rddata[77] <= main_v7ddrphy_bitslip132[3];
    main_v7ddrphy_dfi_p1_rddata[14] <= main_v7ddrphy_bitslip142[2];
    main_v7ddrphy_dfi_p1_rddata[78] <= main_v7ddrphy_bitslip142[3];
    main_v7ddrphy_dfi_p1_rddata[15] <= main_v7ddrphy_bitslip152[2];
    main_v7ddrphy_dfi_p1_rddata[79] <= main_v7ddrphy_bitslip152[3];
    main_v7ddrphy_dfi_p1_rddata[16] <= main_v7ddrphy_bitslip162[2];
    main_v7ddrphy_dfi_p1_rddata[80] <= main_v7ddrphy_bitslip162[3];
    main_v7ddrphy_dfi_p1_rddata[17] <= main_v7ddrphy_bitslip172[2];
    main_v7ddrphy_dfi_p1_rddata[81] <= main_v7ddrphy_bitslip172[3];
    main_v7ddrphy_dfi_p1_rddata[18] <= main_v7ddrphy_bitslip182[2];
    main_v7ddrphy_dfi_p1_rddata[82] <= main_v7ddrphy_bitslip182[3];
    main_v7ddrphy_dfi_p1_rddata[19] <= main_v7ddrphy_bitslip192[2];
    main_v7ddrphy_dfi_p1_rddata[83] <= main_v7ddrphy_bitslip192[3];
    main_v7ddrphy_dfi_p1_rddata[20] <= main_v7ddrphy_bitslip202[2];
    main_v7ddrphy_dfi_p1_rddata[84] <= main_v7ddrphy_bitslip202[3];
    main_v7ddrphy_dfi_p1_rddata[21] <= main_v7ddrphy_bitslip212[2];
    main_v7ddrphy_dfi_p1_rddata[85] <= main_v7ddrphy_bitslip212[3];
    main_v7ddrphy_dfi_p1_rddata[22] <= main_v7ddrphy_bitslip222[2];
    main_v7ddrphy_dfi_p1_rddata[86] <= main_v7ddrphy_bitslip222[3];
    main_v7ddrphy_dfi_p1_rddata[23] <= main_v7ddrphy_bitslip232[2];
    main_v7ddrphy_dfi_p1_rddata[87] <= main_v7ddrphy_bitslip232[3];
    main_v7ddrphy_dfi_p1_rddata[24] <= main_v7ddrphy_bitslip242[2];
    main_v7ddrphy_dfi_p1_rddata[88] <= main_v7ddrphy_bitslip242[3];
    main_v7ddrphy_dfi_p1_rddata[25] <= main_v7ddrphy_bitslip252[2];
    main_v7ddrphy_dfi_p1_rddata[89] <= main_v7ddrphy_bitslip252[3];
    main_v7ddrphy_dfi_p1_rddata[26] <= main_v7ddrphy_bitslip262[2];
    main_v7ddrphy_dfi_p1_rddata[90] <= main_v7ddrphy_bitslip262[3];
    main_v7ddrphy_dfi_p1_rddata[27] <= main_v7ddrphy_bitslip272[2];
    main_v7ddrphy_dfi_p1_rddata[91] <= main_v7ddrphy_bitslip272[3];
    main_v7ddrphy_dfi_p1_rddata[28] <= main_v7ddrphy_bitslip282[2];
    main_v7ddrphy_dfi_p1_rddata[92] <= main_v7ddrphy_bitslip282[3];
    main_v7ddrphy_dfi_p1_rddata[29] <= main_v7ddrphy_bitslip292[2];
    main_v7ddrphy_dfi_p1_rddata[93] <= main_v7ddrphy_bitslip292[3];
    main_v7ddrphy_dfi_p1_rddata[30] <= main_v7ddrphy_bitslip302[2];
    main_v7ddrphy_dfi_p1_rddata[94] <= main_v7ddrphy_bitslip302[3];
    main_v7ddrphy_dfi_p1_rddata[31] <= main_v7ddrphy_bitslip312[2];
    main_v7ddrphy_dfi_p1_rddata[95] <= main_v7ddrphy_bitslip312[3];
    main_v7ddrphy_dfi_p1_rddata[32] <= main_v7ddrphy_bitslip322[2];
    main_v7ddrphy_dfi_p1_rddata[96] <= main_v7ddrphy_bitslip322[3];
    main_v7ddrphy_dfi_p1_rddata[33] <= main_v7ddrphy_bitslip332[2];
    main_v7ddrphy_dfi_p1_rddata[97] <= main_v7ddrphy_bitslip332[3];
    main_v7ddrphy_dfi_p1_rddata[34] <= main_v7ddrphy_bitslip342[2];
    main_v7ddrphy_dfi_p1_rddata[98] <= main_v7ddrphy_bitslip342[3];
    main_v7ddrphy_dfi_p1_rddata[35] <= main_v7ddrphy_bitslip352[2];
    main_v7ddrphy_dfi_p1_rddata[99] <= main_v7ddrphy_bitslip352[3];
    main_v7ddrphy_dfi_p1_rddata[36] <= main_v7ddrphy_bitslip362[2];
    main_v7ddrphy_dfi_p1_rddata[100] <= main_v7ddrphy_bitslip362[3];
    main_v7ddrphy_dfi_p1_rddata[37] <= main_v7ddrphy_bitslip372[2];
    main_v7ddrphy_dfi_p1_rddata[101] <= main_v7ddrphy_bitslip372[3];
    main_v7ddrphy_dfi_p1_rddata[38] <= main_v7ddrphy_bitslip382[2];
    main_v7ddrphy_dfi_p1_rddata[102] <= main_v7ddrphy_bitslip382[3];
    main_v7ddrphy_dfi_p1_rddata[39] <= main_v7ddrphy_bitslip392[2];
    main_v7ddrphy_dfi_p1_rddata[103] <= main_v7ddrphy_bitslip392[3];
    main_v7ddrphy_dfi_p1_rddata[40] <= main_v7ddrphy_bitslip402[2];
    main_v7ddrphy_dfi_p1_rddata[104] <= main_v7ddrphy_bitslip402[3];
    main_v7ddrphy_dfi_p1_rddata[41] <= main_v7ddrphy_bitslip412[2];
    main_v7ddrphy_dfi_p1_rddata[105] <= main_v7ddrphy_bitslip412[3];
    main_v7ddrphy_dfi_p1_rddata[42] <= main_v7ddrphy_bitslip422[2];
    main_v7ddrphy_dfi_p1_rddata[106] <= main_v7ddrphy_bitslip422[3];
    main_v7ddrphy_dfi_p1_rddata[43] <= main_v7ddrphy_bitslip432[2];
    main_v7ddrphy_dfi_p1_rddata[107] <= main_v7ddrphy_bitslip432[3];
    main_v7ddrphy_dfi_p1_rddata[44] <= main_v7ddrphy_bitslip442[2];
    main_v7ddrphy_dfi_p1_rddata[108] <= main_v7ddrphy_bitslip442[3];
    main_v7ddrphy_dfi_p1_rddata[45] <= main_v7ddrphy_bitslip452[2];
    main_v7ddrphy_dfi_p1_rddata[109] <= main_v7ddrphy_bitslip452[3];
    main_v7ddrphy_dfi_p1_rddata[46] <= main_v7ddrphy_bitslip462[2];
    main_v7ddrphy_dfi_p1_rddata[110] <= main_v7ddrphy_bitslip462[3];
    main_v7ddrphy_dfi_p1_rddata[47] <= main_v7ddrphy_bitslip472[2];
    main_v7ddrphy_dfi_p1_rddata[111] <= main_v7ddrphy_bitslip472[3];
    main_v7ddrphy_dfi_p1_rddata[48] <= main_v7ddrphy_bitslip482[2];
    main_v7ddrphy_dfi_p1_rddata[112] <= main_v7ddrphy_bitslip482[3];
    main_v7ddrphy_dfi_p1_rddata[49] <= main_v7ddrphy_bitslip492[2];
    main_v7ddrphy_dfi_p1_rddata[113] <= main_v7ddrphy_bitslip492[3];
    main_v7ddrphy_dfi_p1_rddata[50] <= main_v7ddrphy_bitslip502[2];
    main_v7ddrphy_dfi_p1_rddata[114] <= main_v7ddrphy_bitslip502[3];
    main_v7ddrphy_dfi_p1_rddata[51] <= main_v7ddrphy_bitslip512[2];
    main_v7ddrphy_dfi_p1_rddata[115] <= main_v7ddrphy_bitslip512[3];
    main_v7ddrphy_dfi_p1_rddata[52] <= main_v7ddrphy_bitslip522[2];
    main_v7ddrphy_dfi_p1_rddata[116] <= main_v7ddrphy_bitslip522[3];
    main_v7ddrphy_dfi_p1_rddata[53] <= main_v7ddrphy_bitslip532[2];
    main_v7ddrphy_dfi_p1_rddata[117] <= main_v7ddrphy_bitslip532[3];
    main_v7ddrphy_dfi_p1_rddata[54] <= main_v7ddrphy_bitslip542[2];
    main_v7ddrphy_dfi_p1_rddata[118] <= main_v7ddrphy_bitslip542[3];
    main_v7ddrphy_dfi_p1_rddata[55] <= main_v7ddrphy_bitslip552[2];
    main_v7ddrphy_dfi_p1_rddata[119] <= main_v7ddrphy_bitslip552[3];
    main_v7ddrphy_dfi_p1_rddata[56] <= main_v7ddrphy_bitslip562[2];
    main_v7ddrphy_dfi_p1_rddata[120] <= main_v7ddrphy_bitslip562[3];
    main_v7ddrphy_dfi_p1_rddata[57] <= main_v7ddrphy_bitslip572[2];
    main_v7ddrphy_dfi_p1_rddata[121] <= main_v7ddrphy_bitslip572[3];
    main_v7ddrphy_dfi_p1_rddata[58] <= main_v7ddrphy_bitslip582[2];
    main_v7ddrphy_dfi_p1_rddata[122] <= main_v7ddrphy_bitslip582[3];
    main_v7ddrphy_dfi_p1_rddata[59] <= main_v7ddrphy_bitslip592[2];
    main_v7ddrphy_dfi_p1_rddata[123] <= main_v7ddrphy_bitslip592[3];
    main_v7ddrphy_dfi_p1_rddata[60] <= main_v7ddrphy_bitslip602[2];
    main_v7ddrphy_dfi_p1_rddata[124] <= main_v7ddrphy_bitslip602[3];
    main_v7ddrphy_dfi_p1_rddata[61] <= main_v7ddrphy_bitslip612[2];
    main_v7ddrphy_dfi_p1_rddata[125] <= main_v7ddrphy_bitslip612[3];
    main_v7ddrphy_dfi_p1_rddata[62] <= main_v7ddrphy_bitslip622[2];
    main_v7ddrphy_dfi_p1_rddata[126] <= main_v7ddrphy_bitslip622[3];
    main_v7ddrphy_dfi_p1_rddata[63] <= main_v7ddrphy_bitslip632[2];
    main_v7ddrphy_dfi_p1_rddata[127] <= main_v7ddrphy_bitslip632[3];
end
always @(*) begin
    main_v7ddrphy_dfi_p2_rddata <= 128'd0;
    main_v7ddrphy_dfi_p2_rddata[0] <= main_v7ddrphy_bitslip04[4];
    main_v7ddrphy_dfi_p2_rddata[64] <= main_v7ddrphy_bitslip04[5];
    main_v7ddrphy_dfi_p2_rddata[1] <= main_v7ddrphy_bitslip14[4];
    main_v7ddrphy_dfi_p2_rddata[65] <= main_v7ddrphy_bitslip14[5];
    main_v7ddrphy_dfi_p2_rddata[2] <= main_v7ddrphy_bitslip24[4];
    main_v7ddrphy_dfi_p2_rddata[66] <= main_v7ddrphy_bitslip24[5];
    main_v7ddrphy_dfi_p2_rddata[3] <= main_v7ddrphy_bitslip34[4];
    main_v7ddrphy_dfi_p2_rddata[67] <= main_v7ddrphy_bitslip34[5];
    main_v7ddrphy_dfi_p2_rddata[4] <= main_v7ddrphy_bitslip44[4];
    main_v7ddrphy_dfi_p2_rddata[68] <= main_v7ddrphy_bitslip44[5];
    main_v7ddrphy_dfi_p2_rddata[5] <= main_v7ddrphy_bitslip54[4];
    main_v7ddrphy_dfi_p2_rddata[69] <= main_v7ddrphy_bitslip54[5];
    main_v7ddrphy_dfi_p2_rddata[6] <= main_v7ddrphy_bitslip64[4];
    main_v7ddrphy_dfi_p2_rddata[70] <= main_v7ddrphy_bitslip64[5];
    main_v7ddrphy_dfi_p2_rddata[7] <= main_v7ddrphy_bitslip74[4];
    main_v7ddrphy_dfi_p2_rddata[71] <= main_v7ddrphy_bitslip74[5];
    main_v7ddrphy_dfi_p2_rddata[8] <= main_v7ddrphy_bitslip82[4];
    main_v7ddrphy_dfi_p2_rddata[72] <= main_v7ddrphy_bitslip82[5];
    main_v7ddrphy_dfi_p2_rddata[9] <= main_v7ddrphy_bitslip92[4];
    main_v7ddrphy_dfi_p2_rddata[73] <= main_v7ddrphy_bitslip92[5];
    main_v7ddrphy_dfi_p2_rddata[10] <= main_v7ddrphy_bitslip102[4];
    main_v7ddrphy_dfi_p2_rddata[74] <= main_v7ddrphy_bitslip102[5];
    main_v7ddrphy_dfi_p2_rddata[11] <= main_v7ddrphy_bitslip112[4];
    main_v7ddrphy_dfi_p2_rddata[75] <= main_v7ddrphy_bitslip112[5];
    main_v7ddrphy_dfi_p2_rddata[12] <= main_v7ddrphy_bitslip122[4];
    main_v7ddrphy_dfi_p2_rddata[76] <= main_v7ddrphy_bitslip122[5];
    main_v7ddrphy_dfi_p2_rddata[13] <= main_v7ddrphy_bitslip132[4];
    main_v7ddrphy_dfi_p2_rddata[77] <= main_v7ddrphy_bitslip132[5];
    main_v7ddrphy_dfi_p2_rddata[14] <= main_v7ddrphy_bitslip142[4];
    main_v7ddrphy_dfi_p2_rddata[78] <= main_v7ddrphy_bitslip142[5];
    main_v7ddrphy_dfi_p2_rddata[15] <= main_v7ddrphy_bitslip152[4];
    main_v7ddrphy_dfi_p2_rddata[79] <= main_v7ddrphy_bitslip152[5];
    main_v7ddrphy_dfi_p2_rddata[16] <= main_v7ddrphy_bitslip162[4];
    main_v7ddrphy_dfi_p2_rddata[80] <= main_v7ddrphy_bitslip162[5];
    main_v7ddrphy_dfi_p2_rddata[17] <= main_v7ddrphy_bitslip172[4];
    main_v7ddrphy_dfi_p2_rddata[81] <= main_v7ddrphy_bitslip172[5];
    main_v7ddrphy_dfi_p2_rddata[18] <= main_v7ddrphy_bitslip182[4];
    main_v7ddrphy_dfi_p2_rddata[82] <= main_v7ddrphy_bitslip182[5];
    main_v7ddrphy_dfi_p2_rddata[19] <= main_v7ddrphy_bitslip192[4];
    main_v7ddrphy_dfi_p2_rddata[83] <= main_v7ddrphy_bitslip192[5];
    main_v7ddrphy_dfi_p2_rddata[20] <= main_v7ddrphy_bitslip202[4];
    main_v7ddrphy_dfi_p2_rddata[84] <= main_v7ddrphy_bitslip202[5];
    main_v7ddrphy_dfi_p2_rddata[21] <= main_v7ddrphy_bitslip212[4];
    main_v7ddrphy_dfi_p2_rddata[85] <= main_v7ddrphy_bitslip212[5];
    main_v7ddrphy_dfi_p2_rddata[22] <= main_v7ddrphy_bitslip222[4];
    main_v7ddrphy_dfi_p2_rddata[86] <= main_v7ddrphy_bitslip222[5];
    main_v7ddrphy_dfi_p2_rddata[23] <= main_v7ddrphy_bitslip232[4];
    main_v7ddrphy_dfi_p2_rddata[87] <= main_v7ddrphy_bitslip232[5];
    main_v7ddrphy_dfi_p2_rddata[24] <= main_v7ddrphy_bitslip242[4];
    main_v7ddrphy_dfi_p2_rddata[88] <= main_v7ddrphy_bitslip242[5];
    main_v7ddrphy_dfi_p2_rddata[25] <= main_v7ddrphy_bitslip252[4];
    main_v7ddrphy_dfi_p2_rddata[89] <= main_v7ddrphy_bitslip252[5];
    main_v7ddrphy_dfi_p2_rddata[26] <= main_v7ddrphy_bitslip262[4];
    main_v7ddrphy_dfi_p2_rddata[90] <= main_v7ddrphy_bitslip262[5];
    main_v7ddrphy_dfi_p2_rddata[27] <= main_v7ddrphy_bitslip272[4];
    main_v7ddrphy_dfi_p2_rddata[91] <= main_v7ddrphy_bitslip272[5];
    main_v7ddrphy_dfi_p2_rddata[28] <= main_v7ddrphy_bitslip282[4];
    main_v7ddrphy_dfi_p2_rddata[92] <= main_v7ddrphy_bitslip282[5];
    main_v7ddrphy_dfi_p2_rddata[29] <= main_v7ddrphy_bitslip292[4];
    main_v7ddrphy_dfi_p2_rddata[93] <= main_v7ddrphy_bitslip292[5];
    main_v7ddrphy_dfi_p2_rddata[30] <= main_v7ddrphy_bitslip302[4];
    main_v7ddrphy_dfi_p2_rddata[94] <= main_v7ddrphy_bitslip302[5];
    main_v7ddrphy_dfi_p2_rddata[31] <= main_v7ddrphy_bitslip312[4];
    main_v7ddrphy_dfi_p2_rddata[95] <= main_v7ddrphy_bitslip312[5];
    main_v7ddrphy_dfi_p2_rddata[32] <= main_v7ddrphy_bitslip322[4];
    main_v7ddrphy_dfi_p2_rddata[96] <= main_v7ddrphy_bitslip322[5];
    main_v7ddrphy_dfi_p2_rddata[33] <= main_v7ddrphy_bitslip332[4];
    main_v7ddrphy_dfi_p2_rddata[97] <= main_v7ddrphy_bitslip332[5];
    main_v7ddrphy_dfi_p2_rddata[34] <= main_v7ddrphy_bitslip342[4];
    main_v7ddrphy_dfi_p2_rddata[98] <= main_v7ddrphy_bitslip342[5];
    main_v7ddrphy_dfi_p2_rddata[35] <= main_v7ddrphy_bitslip352[4];
    main_v7ddrphy_dfi_p2_rddata[99] <= main_v7ddrphy_bitslip352[5];
    main_v7ddrphy_dfi_p2_rddata[36] <= main_v7ddrphy_bitslip362[4];
    main_v7ddrphy_dfi_p2_rddata[100] <= main_v7ddrphy_bitslip362[5];
    main_v7ddrphy_dfi_p2_rddata[37] <= main_v7ddrphy_bitslip372[4];
    main_v7ddrphy_dfi_p2_rddata[101] <= main_v7ddrphy_bitslip372[5];
    main_v7ddrphy_dfi_p2_rddata[38] <= main_v7ddrphy_bitslip382[4];
    main_v7ddrphy_dfi_p2_rddata[102] <= main_v7ddrphy_bitslip382[5];
    main_v7ddrphy_dfi_p2_rddata[39] <= main_v7ddrphy_bitslip392[4];
    main_v7ddrphy_dfi_p2_rddata[103] <= main_v7ddrphy_bitslip392[5];
    main_v7ddrphy_dfi_p2_rddata[40] <= main_v7ddrphy_bitslip402[4];
    main_v7ddrphy_dfi_p2_rddata[104] <= main_v7ddrphy_bitslip402[5];
    main_v7ddrphy_dfi_p2_rddata[41] <= main_v7ddrphy_bitslip412[4];
    main_v7ddrphy_dfi_p2_rddata[105] <= main_v7ddrphy_bitslip412[5];
    main_v7ddrphy_dfi_p2_rddata[42] <= main_v7ddrphy_bitslip422[4];
    main_v7ddrphy_dfi_p2_rddata[106] <= main_v7ddrphy_bitslip422[5];
    main_v7ddrphy_dfi_p2_rddata[43] <= main_v7ddrphy_bitslip432[4];
    main_v7ddrphy_dfi_p2_rddata[107] <= main_v7ddrphy_bitslip432[5];
    main_v7ddrphy_dfi_p2_rddata[44] <= main_v7ddrphy_bitslip442[4];
    main_v7ddrphy_dfi_p2_rddata[108] <= main_v7ddrphy_bitslip442[5];
    main_v7ddrphy_dfi_p2_rddata[45] <= main_v7ddrphy_bitslip452[4];
    main_v7ddrphy_dfi_p2_rddata[109] <= main_v7ddrphy_bitslip452[5];
    main_v7ddrphy_dfi_p2_rddata[46] <= main_v7ddrphy_bitslip462[4];
    main_v7ddrphy_dfi_p2_rddata[110] <= main_v7ddrphy_bitslip462[5];
    main_v7ddrphy_dfi_p2_rddata[47] <= main_v7ddrphy_bitslip472[4];
    main_v7ddrphy_dfi_p2_rddata[111] <= main_v7ddrphy_bitslip472[5];
    main_v7ddrphy_dfi_p2_rddata[48] <= main_v7ddrphy_bitslip482[4];
    main_v7ddrphy_dfi_p2_rddata[112] <= main_v7ddrphy_bitslip482[5];
    main_v7ddrphy_dfi_p2_rddata[49] <= main_v7ddrphy_bitslip492[4];
    main_v7ddrphy_dfi_p2_rddata[113] <= main_v7ddrphy_bitslip492[5];
    main_v7ddrphy_dfi_p2_rddata[50] <= main_v7ddrphy_bitslip502[4];
    main_v7ddrphy_dfi_p2_rddata[114] <= main_v7ddrphy_bitslip502[5];
    main_v7ddrphy_dfi_p2_rddata[51] <= main_v7ddrphy_bitslip512[4];
    main_v7ddrphy_dfi_p2_rddata[115] <= main_v7ddrphy_bitslip512[5];
    main_v7ddrphy_dfi_p2_rddata[52] <= main_v7ddrphy_bitslip522[4];
    main_v7ddrphy_dfi_p2_rddata[116] <= main_v7ddrphy_bitslip522[5];
    main_v7ddrphy_dfi_p2_rddata[53] <= main_v7ddrphy_bitslip532[4];
    main_v7ddrphy_dfi_p2_rddata[117] <= main_v7ddrphy_bitslip532[5];
    main_v7ddrphy_dfi_p2_rddata[54] <= main_v7ddrphy_bitslip542[4];
    main_v7ddrphy_dfi_p2_rddata[118] <= main_v7ddrphy_bitslip542[5];
    main_v7ddrphy_dfi_p2_rddata[55] <= main_v7ddrphy_bitslip552[4];
    main_v7ddrphy_dfi_p2_rddata[119] <= main_v7ddrphy_bitslip552[5];
    main_v7ddrphy_dfi_p2_rddata[56] <= main_v7ddrphy_bitslip562[4];
    main_v7ddrphy_dfi_p2_rddata[120] <= main_v7ddrphy_bitslip562[5];
    main_v7ddrphy_dfi_p2_rddata[57] <= main_v7ddrphy_bitslip572[4];
    main_v7ddrphy_dfi_p2_rddata[121] <= main_v7ddrphy_bitslip572[5];
    main_v7ddrphy_dfi_p2_rddata[58] <= main_v7ddrphy_bitslip582[4];
    main_v7ddrphy_dfi_p2_rddata[122] <= main_v7ddrphy_bitslip582[5];
    main_v7ddrphy_dfi_p2_rddata[59] <= main_v7ddrphy_bitslip592[4];
    main_v7ddrphy_dfi_p2_rddata[123] <= main_v7ddrphy_bitslip592[5];
    main_v7ddrphy_dfi_p2_rddata[60] <= main_v7ddrphy_bitslip602[4];
    main_v7ddrphy_dfi_p2_rddata[124] <= main_v7ddrphy_bitslip602[5];
    main_v7ddrphy_dfi_p2_rddata[61] <= main_v7ddrphy_bitslip612[4];
    main_v7ddrphy_dfi_p2_rddata[125] <= main_v7ddrphy_bitslip612[5];
    main_v7ddrphy_dfi_p2_rddata[62] <= main_v7ddrphy_bitslip622[4];
    main_v7ddrphy_dfi_p2_rddata[126] <= main_v7ddrphy_bitslip622[5];
    main_v7ddrphy_dfi_p2_rddata[63] <= main_v7ddrphy_bitslip632[4];
    main_v7ddrphy_dfi_p2_rddata[127] <= main_v7ddrphy_bitslip632[5];
end
always @(*) begin
    main_v7ddrphy_dfi_p3_rddata <= 128'd0;
    main_v7ddrphy_dfi_p3_rddata[0] <= main_v7ddrphy_bitslip04[6];
    main_v7ddrphy_dfi_p3_rddata[64] <= main_v7ddrphy_bitslip04[7];
    main_v7ddrphy_dfi_p3_rddata[1] <= main_v7ddrphy_bitslip14[6];
    main_v7ddrphy_dfi_p3_rddata[65] <= main_v7ddrphy_bitslip14[7];
    main_v7ddrphy_dfi_p3_rddata[2] <= main_v7ddrphy_bitslip24[6];
    main_v7ddrphy_dfi_p3_rddata[66] <= main_v7ddrphy_bitslip24[7];
    main_v7ddrphy_dfi_p3_rddata[3] <= main_v7ddrphy_bitslip34[6];
    main_v7ddrphy_dfi_p3_rddata[67] <= main_v7ddrphy_bitslip34[7];
    main_v7ddrphy_dfi_p3_rddata[4] <= main_v7ddrphy_bitslip44[6];
    main_v7ddrphy_dfi_p3_rddata[68] <= main_v7ddrphy_bitslip44[7];
    main_v7ddrphy_dfi_p3_rddata[5] <= main_v7ddrphy_bitslip54[6];
    main_v7ddrphy_dfi_p3_rddata[69] <= main_v7ddrphy_bitslip54[7];
    main_v7ddrphy_dfi_p3_rddata[6] <= main_v7ddrphy_bitslip64[6];
    main_v7ddrphy_dfi_p3_rddata[70] <= main_v7ddrphy_bitslip64[7];
    main_v7ddrphy_dfi_p3_rddata[7] <= main_v7ddrphy_bitslip74[6];
    main_v7ddrphy_dfi_p3_rddata[71] <= main_v7ddrphy_bitslip74[7];
    main_v7ddrphy_dfi_p3_rddata[8] <= main_v7ddrphy_bitslip82[6];
    main_v7ddrphy_dfi_p3_rddata[72] <= main_v7ddrphy_bitslip82[7];
    main_v7ddrphy_dfi_p3_rddata[9] <= main_v7ddrphy_bitslip92[6];
    main_v7ddrphy_dfi_p3_rddata[73] <= main_v7ddrphy_bitslip92[7];
    main_v7ddrphy_dfi_p3_rddata[10] <= main_v7ddrphy_bitslip102[6];
    main_v7ddrphy_dfi_p3_rddata[74] <= main_v7ddrphy_bitslip102[7];
    main_v7ddrphy_dfi_p3_rddata[11] <= main_v7ddrphy_bitslip112[6];
    main_v7ddrphy_dfi_p3_rddata[75] <= main_v7ddrphy_bitslip112[7];
    main_v7ddrphy_dfi_p3_rddata[12] <= main_v7ddrphy_bitslip122[6];
    main_v7ddrphy_dfi_p3_rddata[76] <= main_v7ddrphy_bitslip122[7];
    main_v7ddrphy_dfi_p3_rddata[13] <= main_v7ddrphy_bitslip132[6];
    main_v7ddrphy_dfi_p3_rddata[77] <= main_v7ddrphy_bitslip132[7];
    main_v7ddrphy_dfi_p3_rddata[14] <= main_v7ddrphy_bitslip142[6];
    main_v7ddrphy_dfi_p3_rddata[78] <= main_v7ddrphy_bitslip142[7];
    main_v7ddrphy_dfi_p3_rddata[15] <= main_v7ddrphy_bitslip152[6];
    main_v7ddrphy_dfi_p3_rddata[79] <= main_v7ddrphy_bitslip152[7];
    main_v7ddrphy_dfi_p3_rddata[16] <= main_v7ddrphy_bitslip162[6];
    main_v7ddrphy_dfi_p3_rddata[80] <= main_v7ddrphy_bitslip162[7];
    main_v7ddrphy_dfi_p3_rddata[17] <= main_v7ddrphy_bitslip172[6];
    main_v7ddrphy_dfi_p3_rddata[81] <= main_v7ddrphy_bitslip172[7];
    main_v7ddrphy_dfi_p3_rddata[18] <= main_v7ddrphy_bitslip182[6];
    main_v7ddrphy_dfi_p3_rddata[82] <= main_v7ddrphy_bitslip182[7];
    main_v7ddrphy_dfi_p3_rddata[19] <= main_v7ddrphy_bitslip192[6];
    main_v7ddrphy_dfi_p3_rddata[83] <= main_v7ddrphy_bitslip192[7];
    main_v7ddrphy_dfi_p3_rddata[20] <= main_v7ddrphy_bitslip202[6];
    main_v7ddrphy_dfi_p3_rddata[84] <= main_v7ddrphy_bitslip202[7];
    main_v7ddrphy_dfi_p3_rddata[21] <= main_v7ddrphy_bitslip212[6];
    main_v7ddrphy_dfi_p3_rddata[85] <= main_v7ddrphy_bitslip212[7];
    main_v7ddrphy_dfi_p3_rddata[22] <= main_v7ddrphy_bitslip222[6];
    main_v7ddrphy_dfi_p3_rddata[86] <= main_v7ddrphy_bitslip222[7];
    main_v7ddrphy_dfi_p3_rddata[23] <= main_v7ddrphy_bitslip232[6];
    main_v7ddrphy_dfi_p3_rddata[87] <= main_v7ddrphy_bitslip232[7];
    main_v7ddrphy_dfi_p3_rddata[24] <= main_v7ddrphy_bitslip242[6];
    main_v7ddrphy_dfi_p3_rddata[88] <= main_v7ddrphy_bitslip242[7];
    main_v7ddrphy_dfi_p3_rddata[25] <= main_v7ddrphy_bitslip252[6];
    main_v7ddrphy_dfi_p3_rddata[89] <= main_v7ddrphy_bitslip252[7];
    main_v7ddrphy_dfi_p3_rddata[26] <= main_v7ddrphy_bitslip262[6];
    main_v7ddrphy_dfi_p3_rddata[90] <= main_v7ddrphy_bitslip262[7];
    main_v7ddrphy_dfi_p3_rddata[27] <= main_v7ddrphy_bitslip272[6];
    main_v7ddrphy_dfi_p3_rddata[91] <= main_v7ddrphy_bitslip272[7];
    main_v7ddrphy_dfi_p3_rddata[28] <= main_v7ddrphy_bitslip282[6];
    main_v7ddrphy_dfi_p3_rddata[92] <= main_v7ddrphy_bitslip282[7];
    main_v7ddrphy_dfi_p3_rddata[29] <= main_v7ddrphy_bitslip292[6];
    main_v7ddrphy_dfi_p3_rddata[93] <= main_v7ddrphy_bitslip292[7];
    main_v7ddrphy_dfi_p3_rddata[30] <= main_v7ddrphy_bitslip302[6];
    main_v7ddrphy_dfi_p3_rddata[94] <= main_v7ddrphy_bitslip302[7];
    main_v7ddrphy_dfi_p3_rddata[31] <= main_v7ddrphy_bitslip312[6];
    main_v7ddrphy_dfi_p3_rddata[95] <= main_v7ddrphy_bitslip312[7];
    main_v7ddrphy_dfi_p3_rddata[32] <= main_v7ddrphy_bitslip322[6];
    main_v7ddrphy_dfi_p3_rddata[96] <= main_v7ddrphy_bitslip322[7];
    main_v7ddrphy_dfi_p3_rddata[33] <= main_v7ddrphy_bitslip332[6];
    main_v7ddrphy_dfi_p3_rddata[97] <= main_v7ddrphy_bitslip332[7];
    main_v7ddrphy_dfi_p3_rddata[34] <= main_v7ddrphy_bitslip342[6];
    main_v7ddrphy_dfi_p3_rddata[98] <= main_v7ddrphy_bitslip342[7];
    main_v7ddrphy_dfi_p3_rddata[35] <= main_v7ddrphy_bitslip352[6];
    main_v7ddrphy_dfi_p3_rddata[99] <= main_v7ddrphy_bitslip352[7];
    main_v7ddrphy_dfi_p3_rddata[36] <= main_v7ddrphy_bitslip362[6];
    main_v7ddrphy_dfi_p3_rddata[100] <= main_v7ddrphy_bitslip362[7];
    main_v7ddrphy_dfi_p3_rddata[37] <= main_v7ddrphy_bitslip372[6];
    main_v7ddrphy_dfi_p3_rddata[101] <= main_v7ddrphy_bitslip372[7];
    main_v7ddrphy_dfi_p3_rddata[38] <= main_v7ddrphy_bitslip382[6];
    main_v7ddrphy_dfi_p3_rddata[102] <= main_v7ddrphy_bitslip382[7];
    main_v7ddrphy_dfi_p3_rddata[39] <= main_v7ddrphy_bitslip392[6];
    main_v7ddrphy_dfi_p3_rddata[103] <= main_v7ddrphy_bitslip392[7];
    main_v7ddrphy_dfi_p3_rddata[40] <= main_v7ddrphy_bitslip402[6];
    main_v7ddrphy_dfi_p3_rddata[104] <= main_v7ddrphy_bitslip402[7];
    main_v7ddrphy_dfi_p3_rddata[41] <= main_v7ddrphy_bitslip412[6];
    main_v7ddrphy_dfi_p3_rddata[105] <= main_v7ddrphy_bitslip412[7];
    main_v7ddrphy_dfi_p3_rddata[42] <= main_v7ddrphy_bitslip422[6];
    main_v7ddrphy_dfi_p3_rddata[106] <= main_v7ddrphy_bitslip422[7];
    main_v7ddrphy_dfi_p3_rddata[43] <= main_v7ddrphy_bitslip432[6];
    main_v7ddrphy_dfi_p3_rddata[107] <= main_v7ddrphy_bitslip432[7];
    main_v7ddrphy_dfi_p3_rddata[44] <= main_v7ddrphy_bitslip442[6];
    main_v7ddrphy_dfi_p3_rddata[108] <= main_v7ddrphy_bitslip442[7];
    main_v7ddrphy_dfi_p3_rddata[45] <= main_v7ddrphy_bitslip452[6];
    main_v7ddrphy_dfi_p3_rddata[109] <= main_v7ddrphy_bitslip452[7];
    main_v7ddrphy_dfi_p3_rddata[46] <= main_v7ddrphy_bitslip462[6];
    main_v7ddrphy_dfi_p3_rddata[110] <= main_v7ddrphy_bitslip462[7];
    main_v7ddrphy_dfi_p3_rddata[47] <= main_v7ddrphy_bitslip472[6];
    main_v7ddrphy_dfi_p3_rddata[111] <= main_v7ddrphy_bitslip472[7];
    main_v7ddrphy_dfi_p3_rddata[48] <= main_v7ddrphy_bitslip482[6];
    main_v7ddrphy_dfi_p3_rddata[112] <= main_v7ddrphy_bitslip482[7];
    main_v7ddrphy_dfi_p3_rddata[49] <= main_v7ddrphy_bitslip492[6];
    main_v7ddrphy_dfi_p3_rddata[113] <= main_v7ddrphy_bitslip492[7];
    main_v7ddrphy_dfi_p3_rddata[50] <= main_v7ddrphy_bitslip502[6];
    main_v7ddrphy_dfi_p3_rddata[114] <= main_v7ddrphy_bitslip502[7];
    main_v7ddrphy_dfi_p3_rddata[51] <= main_v7ddrphy_bitslip512[6];
    main_v7ddrphy_dfi_p3_rddata[115] <= main_v7ddrphy_bitslip512[7];
    main_v7ddrphy_dfi_p3_rddata[52] <= main_v7ddrphy_bitslip522[6];
    main_v7ddrphy_dfi_p3_rddata[116] <= main_v7ddrphy_bitslip522[7];
    main_v7ddrphy_dfi_p3_rddata[53] <= main_v7ddrphy_bitslip532[6];
    main_v7ddrphy_dfi_p3_rddata[117] <= main_v7ddrphy_bitslip532[7];
    main_v7ddrphy_dfi_p3_rddata[54] <= main_v7ddrphy_bitslip542[6];
    main_v7ddrphy_dfi_p3_rddata[118] <= main_v7ddrphy_bitslip542[7];
    main_v7ddrphy_dfi_p3_rddata[55] <= main_v7ddrphy_bitslip552[6];
    main_v7ddrphy_dfi_p3_rddata[119] <= main_v7ddrphy_bitslip552[7];
    main_v7ddrphy_dfi_p3_rddata[56] <= main_v7ddrphy_bitslip562[6];
    main_v7ddrphy_dfi_p3_rddata[120] <= main_v7ddrphy_bitslip562[7];
    main_v7ddrphy_dfi_p3_rddata[57] <= main_v7ddrphy_bitslip572[6];
    main_v7ddrphy_dfi_p3_rddata[121] <= main_v7ddrphy_bitslip572[7];
    main_v7ddrphy_dfi_p3_rddata[58] <= main_v7ddrphy_bitslip582[6];
    main_v7ddrphy_dfi_p3_rddata[122] <= main_v7ddrphy_bitslip582[7];
    main_v7ddrphy_dfi_p3_rddata[59] <= main_v7ddrphy_bitslip592[6];
    main_v7ddrphy_dfi_p3_rddata[123] <= main_v7ddrphy_bitslip592[7];
    main_v7ddrphy_dfi_p3_rddata[60] <= main_v7ddrphy_bitslip602[6];
    main_v7ddrphy_dfi_p3_rddata[124] <= main_v7ddrphy_bitslip602[7];
    main_v7ddrphy_dfi_p3_rddata[61] <= main_v7ddrphy_bitslip612[6];
    main_v7ddrphy_dfi_p3_rddata[125] <= main_v7ddrphy_bitslip612[7];
    main_v7ddrphy_dfi_p3_rddata[62] <= main_v7ddrphy_bitslip622[6];
    main_v7ddrphy_dfi_p3_rddata[126] <= main_v7ddrphy_bitslip622[7];
    main_v7ddrphy_dfi_p3_rddata[63] <= main_v7ddrphy_bitslip632[6];
    main_v7ddrphy_dfi_p3_rddata[127] <= main_v7ddrphy_bitslip632[7];
end
assign main_v7ddrphy_dfi_p0_rddata_valid = (main_v7ddrphy_rddata_en_tappeddelayline7 | main_v7ddrphy_wlevel_en_storage);
assign main_v7ddrphy_dfi_p1_rddata_valid = (main_v7ddrphy_rddata_en_tappeddelayline7 | main_v7ddrphy_wlevel_en_storage);
assign main_v7ddrphy_dfi_p2_rddata_valid = (main_v7ddrphy_rddata_en_tappeddelayline7 | main_v7ddrphy_wlevel_en_storage);
assign main_v7ddrphy_dfi_p3_rddata_valid = (main_v7ddrphy_rddata_en_tappeddelayline7 | main_v7ddrphy_wlevel_en_storage);
assign main_v7ddrphy_dq_oe = main_v7ddrphy_wrdata_en_tappeddelayline1;
always @(*) begin
    main_v7ddrphy_dqs_oe <= 1'd0;
    if (main_v7ddrphy_wlevel_en_storage) begin
        main_v7ddrphy_dqs_oe <= 1'd1;
    end else begin
        main_v7ddrphy_dqs_oe <= main_v7ddrphy_dq_oe;
    end
end
assign main_v7ddrphy_dqs_preamble = (main_v7ddrphy_wrdata_en_tappeddelayline0 & (~main_v7ddrphy_wrdata_en_tappeddelayline1));
assign main_v7ddrphy_dqs_postamble = (main_v7ddrphy_wrdata_en_tappeddelayline2 & (~main_v7ddrphy_wrdata_en_tappeddelayline1));
always @(*) begin
    main_v7ddrphy_dqspattern_o <= 8'd0;
    main_v7ddrphy_dqspattern_o <= 7'd85;
    if (main_v7ddrphy_dqspattern0) begin
        main_v7ddrphy_dqspattern_o <= 5'd21;
    end
    if (main_v7ddrphy_dqspattern1) begin
        main_v7ddrphy_dqspattern_o <= 7'd84;
    end
    if (main_v7ddrphy_wlevel_en_storage) begin
        main_v7ddrphy_dqspattern_o <= 1'd0;
        if (main_v7ddrphy_wlevel_strobe_re) begin
            main_v7ddrphy_dqspattern_o <= 1'd1;
        end
    end
end
always @(*) begin
    main_v7ddrphy_bitslip00 <= 8'd0;
    case (main_v7ddrphy_bitslip0_value0)
        1'd0: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip00 <= main_v7ddrphy_bitslip0_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip10 <= 8'd0;
    case (main_v7ddrphy_bitslip1_value0)
        1'd0: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip10 <= main_v7ddrphy_bitslip1_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip20 <= 8'd0;
    case (main_v7ddrphy_bitslip2_value0)
        1'd0: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip20 <= main_v7ddrphy_bitslip2_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip30 <= 8'd0;
    case (main_v7ddrphy_bitslip3_value0)
        1'd0: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip30 <= main_v7ddrphy_bitslip3_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip40 <= 8'd0;
    case (main_v7ddrphy_bitslip4_value0)
        1'd0: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip40 <= main_v7ddrphy_bitslip4_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip50 <= 8'd0;
    case (main_v7ddrphy_bitslip5_value0)
        1'd0: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip50 <= main_v7ddrphy_bitslip5_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip60 <= 8'd0;
    case (main_v7ddrphy_bitslip6_value0)
        1'd0: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip60 <= main_v7ddrphy_bitslip6_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip70 <= 8'd0;
    case (main_v7ddrphy_bitslip7_value0)
        1'd0: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip70 <= main_v7ddrphy_bitslip7_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip01 <= 8'd0;
    case (main_v7ddrphy_bitslip0_value1)
        1'd0: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip01 <= main_v7ddrphy_bitslip0_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip11 <= 8'd0;
    case (main_v7ddrphy_bitslip1_value1)
        1'd0: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip11 <= main_v7ddrphy_bitslip1_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip21 <= 8'd0;
    case (main_v7ddrphy_bitslip2_value1)
        1'd0: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip21 <= main_v7ddrphy_bitslip2_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip31 <= 8'd0;
    case (main_v7ddrphy_bitslip3_value1)
        1'd0: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip31 <= main_v7ddrphy_bitslip3_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip41 <= 8'd0;
    case (main_v7ddrphy_bitslip4_value1)
        1'd0: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip41 <= main_v7ddrphy_bitslip4_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip51 <= 8'd0;
    case (main_v7ddrphy_bitslip5_value1)
        1'd0: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip51 <= main_v7ddrphy_bitslip5_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip61 <= 8'd0;
    case (main_v7ddrphy_bitslip6_value1)
        1'd0: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip61 <= main_v7ddrphy_bitslip6_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip71 <= 8'd0;
    case (main_v7ddrphy_bitslip7_value1)
        1'd0: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip71 <= main_v7ddrphy_bitslip7_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip02 <= 8'd0;
    case (main_v7ddrphy_bitslip0_value2)
        1'd0: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip02 <= main_v7ddrphy_bitslip0_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip04 <= 8'd0;
    case (main_v7ddrphy_bitslip0_value3)
        1'd0: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip04 <= main_v7ddrphy_bitslip0_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip12 <= 8'd0;
    case (main_v7ddrphy_bitslip1_value2)
        1'd0: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip12 <= main_v7ddrphy_bitslip1_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip14 <= 8'd0;
    case (main_v7ddrphy_bitslip1_value3)
        1'd0: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip14 <= main_v7ddrphy_bitslip1_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip22 <= 8'd0;
    case (main_v7ddrphy_bitslip2_value2)
        1'd0: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip22 <= main_v7ddrphy_bitslip2_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip24 <= 8'd0;
    case (main_v7ddrphy_bitslip2_value3)
        1'd0: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip24 <= main_v7ddrphy_bitslip2_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip32 <= 8'd0;
    case (main_v7ddrphy_bitslip3_value2)
        1'd0: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip32 <= main_v7ddrphy_bitslip3_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip34 <= 8'd0;
    case (main_v7ddrphy_bitslip3_value3)
        1'd0: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip34 <= main_v7ddrphy_bitslip3_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip42 <= 8'd0;
    case (main_v7ddrphy_bitslip4_value2)
        1'd0: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip42 <= main_v7ddrphy_bitslip4_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip44 <= 8'd0;
    case (main_v7ddrphy_bitslip4_value3)
        1'd0: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip44 <= main_v7ddrphy_bitslip4_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip52 <= 8'd0;
    case (main_v7ddrphy_bitslip5_value2)
        1'd0: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip52 <= main_v7ddrphy_bitslip5_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip54 <= 8'd0;
    case (main_v7ddrphy_bitslip5_value3)
        1'd0: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip54 <= main_v7ddrphy_bitslip5_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip62 <= 8'd0;
    case (main_v7ddrphy_bitslip6_value2)
        1'd0: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip62 <= main_v7ddrphy_bitslip6_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip64 <= 8'd0;
    case (main_v7ddrphy_bitslip6_value3)
        1'd0: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip64 <= main_v7ddrphy_bitslip6_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip72 <= 8'd0;
    case (main_v7ddrphy_bitslip7_value2)
        1'd0: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip72 <= main_v7ddrphy_bitslip7_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip74 <= 8'd0;
    case (main_v7ddrphy_bitslip7_value3)
        1'd0: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip74 <= main_v7ddrphy_bitslip7_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip80 <= 8'd0;
    case (main_v7ddrphy_bitslip8_value0)
        1'd0: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip80 <= main_v7ddrphy_bitslip8_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip82 <= 8'd0;
    case (main_v7ddrphy_bitslip8_value1)
        1'd0: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip82 <= main_v7ddrphy_bitslip8_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip90 <= 8'd0;
    case (main_v7ddrphy_bitslip9_value0)
        1'd0: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip90 <= main_v7ddrphy_bitslip9_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip92 <= 8'd0;
    case (main_v7ddrphy_bitslip9_value1)
        1'd0: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip92 <= main_v7ddrphy_bitslip9_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip100 <= 8'd0;
    case (main_v7ddrphy_bitslip10_value0)
        1'd0: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip100 <= main_v7ddrphy_bitslip10_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip102 <= 8'd0;
    case (main_v7ddrphy_bitslip10_value1)
        1'd0: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip102 <= main_v7ddrphy_bitslip10_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip110 <= 8'd0;
    case (main_v7ddrphy_bitslip11_value0)
        1'd0: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip110 <= main_v7ddrphy_bitslip11_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip112 <= 8'd0;
    case (main_v7ddrphy_bitslip11_value1)
        1'd0: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip112 <= main_v7ddrphy_bitslip11_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip120 <= 8'd0;
    case (main_v7ddrphy_bitslip12_value0)
        1'd0: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip120 <= main_v7ddrphy_bitslip12_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip122 <= 8'd0;
    case (main_v7ddrphy_bitslip12_value1)
        1'd0: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip122 <= main_v7ddrphy_bitslip12_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip130 <= 8'd0;
    case (main_v7ddrphy_bitslip13_value0)
        1'd0: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip130 <= main_v7ddrphy_bitslip13_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip132 <= 8'd0;
    case (main_v7ddrphy_bitslip13_value1)
        1'd0: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip132 <= main_v7ddrphy_bitslip13_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip140 <= 8'd0;
    case (main_v7ddrphy_bitslip14_value0)
        1'd0: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip140 <= main_v7ddrphy_bitslip14_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip142 <= 8'd0;
    case (main_v7ddrphy_bitslip14_value1)
        1'd0: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip142 <= main_v7ddrphy_bitslip14_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip150 <= 8'd0;
    case (main_v7ddrphy_bitslip15_value0)
        1'd0: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip150 <= main_v7ddrphy_bitslip15_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip152 <= 8'd0;
    case (main_v7ddrphy_bitslip15_value1)
        1'd0: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip152 <= main_v7ddrphy_bitslip15_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip160 <= 8'd0;
    case (main_v7ddrphy_bitslip16_value0)
        1'd0: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip160 <= main_v7ddrphy_bitslip16_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip162 <= 8'd0;
    case (main_v7ddrphy_bitslip16_value1)
        1'd0: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip162 <= main_v7ddrphy_bitslip16_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip170 <= 8'd0;
    case (main_v7ddrphy_bitslip17_value0)
        1'd0: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip170 <= main_v7ddrphy_bitslip17_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip172 <= 8'd0;
    case (main_v7ddrphy_bitslip17_value1)
        1'd0: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip172 <= main_v7ddrphy_bitslip17_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip180 <= 8'd0;
    case (main_v7ddrphy_bitslip18_value0)
        1'd0: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip180 <= main_v7ddrphy_bitslip18_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip182 <= 8'd0;
    case (main_v7ddrphy_bitslip18_value1)
        1'd0: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip182 <= main_v7ddrphy_bitslip18_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip190 <= 8'd0;
    case (main_v7ddrphy_bitslip19_value0)
        1'd0: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip190 <= main_v7ddrphy_bitslip19_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip192 <= 8'd0;
    case (main_v7ddrphy_bitslip19_value1)
        1'd0: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip192 <= main_v7ddrphy_bitslip19_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip200 <= 8'd0;
    case (main_v7ddrphy_bitslip20_value0)
        1'd0: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip200 <= main_v7ddrphy_bitslip20_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip202 <= 8'd0;
    case (main_v7ddrphy_bitslip20_value1)
        1'd0: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip202 <= main_v7ddrphy_bitslip20_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip210 <= 8'd0;
    case (main_v7ddrphy_bitslip21_value0)
        1'd0: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip210 <= main_v7ddrphy_bitslip21_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip212 <= 8'd0;
    case (main_v7ddrphy_bitslip21_value1)
        1'd0: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip212 <= main_v7ddrphy_bitslip21_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip220 <= 8'd0;
    case (main_v7ddrphy_bitslip22_value0)
        1'd0: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip220 <= main_v7ddrphy_bitslip22_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip222 <= 8'd0;
    case (main_v7ddrphy_bitslip22_value1)
        1'd0: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip222 <= main_v7ddrphy_bitslip22_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip230 <= 8'd0;
    case (main_v7ddrphy_bitslip23_value0)
        1'd0: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip230 <= main_v7ddrphy_bitslip23_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip232 <= 8'd0;
    case (main_v7ddrphy_bitslip23_value1)
        1'd0: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip232 <= main_v7ddrphy_bitslip23_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip240 <= 8'd0;
    case (main_v7ddrphy_bitslip24_value0)
        1'd0: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip240 <= main_v7ddrphy_bitslip24_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip242 <= 8'd0;
    case (main_v7ddrphy_bitslip24_value1)
        1'd0: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip242 <= main_v7ddrphy_bitslip24_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip250 <= 8'd0;
    case (main_v7ddrphy_bitslip25_value0)
        1'd0: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip250 <= main_v7ddrphy_bitslip25_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip252 <= 8'd0;
    case (main_v7ddrphy_bitslip25_value1)
        1'd0: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip252 <= main_v7ddrphy_bitslip25_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip260 <= 8'd0;
    case (main_v7ddrphy_bitslip26_value0)
        1'd0: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip260 <= main_v7ddrphy_bitslip26_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip262 <= 8'd0;
    case (main_v7ddrphy_bitslip26_value1)
        1'd0: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip262 <= main_v7ddrphy_bitslip26_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip270 <= 8'd0;
    case (main_v7ddrphy_bitslip27_value0)
        1'd0: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip270 <= main_v7ddrphy_bitslip27_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip272 <= 8'd0;
    case (main_v7ddrphy_bitslip27_value1)
        1'd0: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip272 <= main_v7ddrphy_bitslip27_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip280 <= 8'd0;
    case (main_v7ddrphy_bitslip28_value0)
        1'd0: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip280 <= main_v7ddrphy_bitslip28_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip282 <= 8'd0;
    case (main_v7ddrphy_bitslip28_value1)
        1'd0: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip282 <= main_v7ddrphy_bitslip28_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip290 <= 8'd0;
    case (main_v7ddrphy_bitslip29_value0)
        1'd0: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip290 <= main_v7ddrphy_bitslip29_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip292 <= 8'd0;
    case (main_v7ddrphy_bitslip29_value1)
        1'd0: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip292 <= main_v7ddrphy_bitslip29_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip300 <= 8'd0;
    case (main_v7ddrphy_bitslip30_value0)
        1'd0: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip300 <= main_v7ddrphy_bitslip30_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip302 <= 8'd0;
    case (main_v7ddrphy_bitslip30_value1)
        1'd0: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip302 <= main_v7ddrphy_bitslip30_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip310 <= 8'd0;
    case (main_v7ddrphy_bitslip31_value0)
        1'd0: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip310 <= main_v7ddrphy_bitslip31_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip312 <= 8'd0;
    case (main_v7ddrphy_bitslip31_value1)
        1'd0: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip312 <= main_v7ddrphy_bitslip31_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip320 <= 8'd0;
    case (main_v7ddrphy_bitslip32_value0)
        1'd0: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip320 <= main_v7ddrphy_bitslip32_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip322 <= 8'd0;
    case (main_v7ddrphy_bitslip32_value1)
        1'd0: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip322 <= main_v7ddrphy_bitslip32_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip330 <= 8'd0;
    case (main_v7ddrphy_bitslip33_value0)
        1'd0: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip330 <= main_v7ddrphy_bitslip33_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip332 <= 8'd0;
    case (main_v7ddrphy_bitslip33_value1)
        1'd0: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip332 <= main_v7ddrphy_bitslip33_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip340 <= 8'd0;
    case (main_v7ddrphy_bitslip34_value0)
        1'd0: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip340 <= main_v7ddrphy_bitslip34_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip342 <= 8'd0;
    case (main_v7ddrphy_bitslip34_value1)
        1'd0: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip342 <= main_v7ddrphy_bitslip34_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip350 <= 8'd0;
    case (main_v7ddrphy_bitslip35_value0)
        1'd0: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip350 <= main_v7ddrphy_bitslip35_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip352 <= 8'd0;
    case (main_v7ddrphy_bitslip35_value1)
        1'd0: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip352 <= main_v7ddrphy_bitslip35_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip360 <= 8'd0;
    case (main_v7ddrphy_bitslip36_value0)
        1'd0: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip360 <= main_v7ddrphy_bitslip36_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip362 <= 8'd0;
    case (main_v7ddrphy_bitslip36_value1)
        1'd0: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip362 <= main_v7ddrphy_bitslip36_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip370 <= 8'd0;
    case (main_v7ddrphy_bitslip37_value0)
        1'd0: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip370 <= main_v7ddrphy_bitslip37_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip372 <= 8'd0;
    case (main_v7ddrphy_bitslip37_value1)
        1'd0: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip372 <= main_v7ddrphy_bitslip37_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip380 <= 8'd0;
    case (main_v7ddrphy_bitslip38_value0)
        1'd0: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip380 <= main_v7ddrphy_bitslip38_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip382 <= 8'd0;
    case (main_v7ddrphy_bitslip38_value1)
        1'd0: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip382 <= main_v7ddrphy_bitslip38_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip390 <= 8'd0;
    case (main_v7ddrphy_bitslip39_value0)
        1'd0: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip390 <= main_v7ddrphy_bitslip39_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip392 <= 8'd0;
    case (main_v7ddrphy_bitslip39_value1)
        1'd0: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip392 <= main_v7ddrphy_bitslip39_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip400 <= 8'd0;
    case (main_v7ddrphy_bitslip40_value0)
        1'd0: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip400 <= main_v7ddrphy_bitslip40_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip402 <= 8'd0;
    case (main_v7ddrphy_bitslip40_value1)
        1'd0: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip402 <= main_v7ddrphy_bitslip40_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip410 <= 8'd0;
    case (main_v7ddrphy_bitslip41_value0)
        1'd0: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip410 <= main_v7ddrphy_bitslip41_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip412 <= 8'd0;
    case (main_v7ddrphy_bitslip41_value1)
        1'd0: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip412 <= main_v7ddrphy_bitslip41_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip420 <= 8'd0;
    case (main_v7ddrphy_bitslip42_value0)
        1'd0: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip420 <= main_v7ddrphy_bitslip42_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip422 <= 8'd0;
    case (main_v7ddrphy_bitslip42_value1)
        1'd0: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip422 <= main_v7ddrphy_bitslip42_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip430 <= 8'd0;
    case (main_v7ddrphy_bitslip43_value0)
        1'd0: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip430 <= main_v7ddrphy_bitslip43_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip432 <= 8'd0;
    case (main_v7ddrphy_bitslip43_value1)
        1'd0: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip432 <= main_v7ddrphy_bitslip43_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip440 <= 8'd0;
    case (main_v7ddrphy_bitslip44_value0)
        1'd0: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip440 <= main_v7ddrphy_bitslip44_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip442 <= 8'd0;
    case (main_v7ddrphy_bitslip44_value1)
        1'd0: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip442 <= main_v7ddrphy_bitslip44_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip450 <= 8'd0;
    case (main_v7ddrphy_bitslip45_value0)
        1'd0: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip450 <= main_v7ddrphy_bitslip45_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip452 <= 8'd0;
    case (main_v7ddrphy_bitslip45_value1)
        1'd0: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip452 <= main_v7ddrphy_bitslip45_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip460 <= 8'd0;
    case (main_v7ddrphy_bitslip46_value0)
        1'd0: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip460 <= main_v7ddrphy_bitslip46_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip462 <= 8'd0;
    case (main_v7ddrphy_bitslip46_value1)
        1'd0: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip462 <= main_v7ddrphy_bitslip46_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip470 <= 8'd0;
    case (main_v7ddrphy_bitslip47_value0)
        1'd0: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip470 <= main_v7ddrphy_bitslip47_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip472 <= 8'd0;
    case (main_v7ddrphy_bitslip47_value1)
        1'd0: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip472 <= main_v7ddrphy_bitslip47_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip480 <= 8'd0;
    case (main_v7ddrphy_bitslip48_value0)
        1'd0: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip480 <= main_v7ddrphy_bitslip48_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip482 <= 8'd0;
    case (main_v7ddrphy_bitslip48_value1)
        1'd0: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip482 <= main_v7ddrphy_bitslip48_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip490 <= 8'd0;
    case (main_v7ddrphy_bitslip49_value0)
        1'd0: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip490 <= main_v7ddrphy_bitslip49_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip492 <= 8'd0;
    case (main_v7ddrphy_bitslip49_value1)
        1'd0: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip492 <= main_v7ddrphy_bitslip49_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip500 <= 8'd0;
    case (main_v7ddrphy_bitslip50_value0)
        1'd0: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip500 <= main_v7ddrphy_bitslip50_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip502 <= 8'd0;
    case (main_v7ddrphy_bitslip50_value1)
        1'd0: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip502 <= main_v7ddrphy_bitslip50_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip510 <= 8'd0;
    case (main_v7ddrphy_bitslip51_value0)
        1'd0: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip510 <= main_v7ddrphy_bitslip51_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip512 <= 8'd0;
    case (main_v7ddrphy_bitslip51_value1)
        1'd0: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip512 <= main_v7ddrphy_bitslip51_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip520 <= 8'd0;
    case (main_v7ddrphy_bitslip52_value0)
        1'd0: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip520 <= main_v7ddrphy_bitslip52_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip522 <= 8'd0;
    case (main_v7ddrphy_bitslip52_value1)
        1'd0: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip522 <= main_v7ddrphy_bitslip52_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip530 <= 8'd0;
    case (main_v7ddrphy_bitslip53_value0)
        1'd0: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip530 <= main_v7ddrphy_bitslip53_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip532 <= 8'd0;
    case (main_v7ddrphy_bitslip53_value1)
        1'd0: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip532 <= main_v7ddrphy_bitslip53_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip540 <= 8'd0;
    case (main_v7ddrphy_bitslip54_value0)
        1'd0: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip540 <= main_v7ddrphy_bitslip54_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip542 <= 8'd0;
    case (main_v7ddrphy_bitslip54_value1)
        1'd0: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip542 <= main_v7ddrphy_bitslip54_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip550 <= 8'd0;
    case (main_v7ddrphy_bitslip55_value0)
        1'd0: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip550 <= main_v7ddrphy_bitslip55_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip552 <= 8'd0;
    case (main_v7ddrphy_bitslip55_value1)
        1'd0: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip552 <= main_v7ddrphy_bitslip55_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip560 <= 8'd0;
    case (main_v7ddrphy_bitslip56_value0)
        1'd0: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip560 <= main_v7ddrphy_bitslip56_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip562 <= 8'd0;
    case (main_v7ddrphy_bitslip56_value1)
        1'd0: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip562 <= main_v7ddrphy_bitslip56_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip570 <= 8'd0;
    case (main_v7ddrphy_bitslip57_value0)
        1'd0: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip570 <= main_v7ddrphy_bitslip57_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip572 <= 8'd0;
    case (main_v7ddrphy_bitslip57_value1)
        1'd0: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip572 <= main_v7ddrphy_bitslip57_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip580 <= 8'd0;
    case (main_v7ddrphy_bitslip58_value0)
        1'd0: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip580 <= main_v7ddrphy_bitslip58_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip582 <= 8'd0;
    case (main_v7ddrphy_bitslip58_value1)
        1'd0: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip582 <= main_v7ddrphy_bitslip58_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip590 <= 8'd0;
    case (main_v7ddrphy_bitslip59_value0)
        1'd0: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip590 <= main_v7ddrphy_bitslip59_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip592 <= 8'd0;
    case (main_v7ddrphy_bitslip59_value1)
        1'd0: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip592 <= main_v7ddrphy_bitslip59_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip600 <= 8'd0;
    case (main_v7ddrphy_bitslip60_value0)
        1'd0: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip600 <= main_v7ddrphy_bitslip60_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip602 <= 8'd0;
    case (main_v7ddrphy_bitslip60_value1)
        1'd0: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip602 <= main_v7ddrphy_bitslip60_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip610 <= 8'd0;
    case (main_v7ddrphy_bitslip61_value0)
        1'd0: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip610 <= main_v7ddrphy_bitslip61_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip612 <= 8'd0;
    case (main_v7ddrphy_bitslip61_value1)
        1'd0: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip612 <= main_v7ddrphy_bitslip61_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip620 <= 8'd0;
    case (main_v7ddrphy_bitslip62_value0)
        1'd0: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip620 <= main_v7ddrphy_bitslip62_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip622 <= 8'd0;
    case (main_v7ddrphy_bitslip62_value1)
        1'd0: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip622 <= main_v7ddrphy_bitslip62_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip630 <= 8'd0;
    case (main_v7ddrphy_bitslip63_value0)
        1'd0: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip630 <= main_v7ddrphy_bitslip63_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_v7ddrphy_bitslip632 <= 8'd0;
    case (main_v7ddrphy_bitslip63_value1)
        1'd0: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[8:1];
        end
        1'd1: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[9:2];
        end
        2'd2: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[10:3];
        end
        2'd3: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[11:4];
        end
        3'd4: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[12:5];
        end
        3'd5: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[13:6];
        end
        3'd6: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[14:7];
        end
        3'd7: begin
            main_v7ddrphy_bitslip632 <= main_v7ddrphy_bitslip63_r1[15:8];
        end
    endcase
end
assign main_v7ddrphy_dfi_p0_address = main_sdram_master_p0_address;
assign main_v7ddrphy_dfi_p0_bank = main_sdram_master_p0_bank;
assign main_v7ddrphy_dfi_p0_cas_n = main_sdram_master_p0_cas_n;
assign main_v7ddrphy_dfi_p0_cs_n = main_sdram_master_p0_cs_n;
assign main_v7ddrphy_dfi_p0_ras_n = main_sdram_master_p0_ras_n;
assign main_v7ddrphy_dfi_p0_we_n = main_sdram_master_p0_we_n;
assign main_v7ddrphy_dfi_p0_cke = main_sdram_master_p0_cke;
assign main_v7ddrphy_dfi_p0_odt = main_sdram_master_p0_odt;
assign main_v7ddrphy_dfi_p0_reset_n = main_sdram_master_p0_reset_n;
assign main_v7ddrphy_dfi_p0_act_n = main_sdram_master_p0_act_n;
assign main_v7ddrphy_dfi_p0_wrdata = main_sdram_master_p0_wrdata;
assign main_v7ddrphy_dfi_p0_wrdata_en = main_sdram_master_p0_wrdata_en;
assign main_v7ddrphy_dfi_p0_wrdata_mask = main_sdram_master_p0_wrdata_mask;
assign main_v7ddrphy_dfi_p0_rddata_en = main_sdram_master_p0_rddata_en;
assign main_sdram_master_p0_rddata = main_v7ddrphy_dfi_p0_rddata;
assign main_sdram_master_p0_rddata_valid = main_v7ddrphy_dfi_p0_rddata_valid;
assign main_v7ddrphy_dfi_p1_address = main_sdram_master_p1_address;
assign main_v7ddrphy_dfi_p1_bank = main_sdram_master_p1_bank;
assign main_v7ddrphy_dfi_p1_cas_n = main_sdram_master_p1_cas_n;
assign main_v7ddrphy_dfi_p1_cs_n = main_sdram_master_p1_cs_n;
assign main_v7ddrphy_dfi_p1_ras_n = main_sdram_master_p1_ras_n;
assign main_v7ddrphy_dfi_p1_we_n = main_sdram_master_p1_we_n;
assign main_v7ddrphy_dfi_p1_cke = main_sdram_master_p1_cke;
assign main_v7ddrphy_dfi_p1_odt = main_sdram_master_p1_odt;
assign main_v7ddrphy_dfi_p1_reset_n = main_sdram_master_p1_reset_n;
assign main_v7ddrphy_dfi_p1_act_n = main_sdram_master_p1_act_n;
assign main_v7ddrphy_dfi_p1_wrdata = main_sdram_master_p1_wrdata;
assign main_v7ddrphy_dfi_p1_wrdata_en = main_sdram_master_p1_wrdata_en;
assign main_v7ddrphy_dfi_p1_wrdata_mask = main_sdram_master_p1_wrdata_mask;
assign main_v7ddrphy_dfi_p1_rddata_en = main_sdram_master_p1_rddata_en;
assign main_sdram_master_p1_rddata = main_v7ddrphy_dfi_p1_rddata;
assign main_sdram_master_p1_rddata_valid = main_v7ddrphy_dfi_p1_rddata_valid;
assign main_v7ddrphy_dfi_p2_address = main_sdram_master_p2_address;
assign main_v7ddrphy_dfi_p2_bank = main_sdram_master_p2_bank;
assign main_v7ddrphy_dfi_p2_cas_n = main_sdram_master_p2_cas_n;
assign main_v7ddrphy_dfi_p2_cs_n = main_sdram_master_p2_cs_n;
assign main_v7ddrphy_dfi_p2_ras_n = main_sdram_master_p2_ras_n;
assign main_v7ddrphy_dfi_p2_we_n = main_sdram_master_p2_we_n;
assign main_v7ddrphy_dfi_p2_cke = main_sdram_master_p2_cke;
assign main_v7ddrphy_dfi_p2_odt = main_sdram_master_p2_odt;
assign main_v7ddrphy_dfi_p2_reset_n = main_sdram_master_p2_reset_n;
assign main_v7ddrphy_dfi_p2_act_n = main_sdram_master_p2_act_n;
assign main_v7ddrphy_dfi_p2_wrdata = main_sdram_master_p2_wrdata;
assign main_v7ddrphy_dfi_p2_wrdata_en = main_sdram_master_p2_wrdata_en;
assign main_v7ddrphy_dfi_p2_wrdata_mask = main_sdram_master_p2_wrdata_mask;
assign main_v7ddrphy_dfi_p2_rddata_en = main_sdram_master_p2_rddata_en;
assign main_sdram_master_p2_rddata = main_v7ddrphy_dfi_p2_rddata;
assign main_sdram_master_p2_rddata_valid = main_v7ddrphy_dfi_p2_rddata_valid;
assign main_v7ddrphy_dfi_p3_address = main_sdram_master_p3_address;
assign main_v7ddrphy_dfi_p3_bank = main_sdram_master_p3_bank;
assign main_v7ddrphy_dfi_p3_cas_n = main_sdram_master_p3_cas_n;
assign main_v7ddrphy_dfi_p3_cs_n = main_sdram_master_p3_cs_n;
assign main_v7ddrphy_dfi_p3_ras_n = main_sdram_master_p3_ras_n;
assign main_v7ddrphy_dfi_p3_we_n = main_sdram_master_p3_we_n;
assign main_v7ddrphy_dfi_p3_cke = main_sdram_master_p3_cke;
assign main_v7ddrphy_dfi_p3_odt = main_sdram_master_p3_odt;
assign main_v7ddrphy_dfi_p3_reset_n = main_sdram_master_p3_reset_n;
assign main_v7ddrphy_dfi_p3_act_n = main_sdram_master_p3_act_n;
assign main_v7ddrphy_dfi_p3_wrdata = main_sdram_master_p3_wrdata;
assign main_v7ddrphy_dfi_p3_wrdata_en = main_sdram_master_p3_wrdata_en;
assign main_v7ddrphy_dfi_p3_wrdata_mask = main_sdram_master_p3_wrdata_mask;
assign main_v7ddrphy_dfi_p3_rddata_en = main_sdram_master_p3_rddata_en;
assign main_sdram_master_p3_rddata = main_v7ddrphy_dfi_p3_rddata;
assign main_sdram_master_p3_rddata_valid = main_v7ddrphy_dfi_p3_rddata_valid;
assign main_sdram_slave_p0_address = main_sdram_dfi_p0_address;
assign main_sdram_slave_p0_bank = main_sdram_dfi_p0_bank;
assign main_sdram_slave_p0_cas_n = main_sdram_dfi_p0_cas_n;
assign main_sdram_slave_p0_cs_n = main_sdram_dfi_p0_cs_n;
assign main_sdram_slave_p0_ras_n = main_sdram_dfi_p0_ras_n;
assign main_sdram_slave_p0_we_n = main_sdram_dfi_p0_we_n;
assign main_sdram_slave_p0_cke = main_sdram_dfi_p0_cke;
assign main_sdram_slave_p0_odt = main_sdram_dfi_p0_odt;
assign main_sdram_slave_p0_reset_n = main_sdram_dfi_p0_reset_n;
assign main_sdram_slave_p0_act_n = main_sdram_dfi_p0_act_n;
assign main_sdram_slave_p0_wrdata = main_sdram_dfi_p0_wrdata;
assign main_sdram_slave_p0_wrdata_en = main_sdram_dfi_p0_wrdata_en;
assign main_sdram_slave_p0_wrdata_mask = main_sdram_dfi_p0_wrdata_mask;
assign main_sdram_slave_p0_rddata_en = main_sdram_dfi_p0_rddata_en;
assign main_sdram_dfi_p0_rddata = main_sdram_slave_p0_rddata;
assign main_sdram_dfi_p0_rddata_valid = main_sdram_slave_p0_rddata_valid;
assign main_sdram_slave_p1_address = main_sdram_dfi_p1_address;
assign main_sdram_slave_p1_bank = main_sdram_dfi_p1_bank;
assign main_sdram_slave_p1_cas_n = main_sdram_dfi_p1_cas_n;
assign main_sdram_slave_p1_cs_n = main_sdram_dfi_p1_cs_n;
assign main_sdram_slave_p1_ras_n = main_sdram_dfi_p1_ras_n;
assign main_sdram_slave_p1_we_n = main_sdram_dfi_p1_we_n;
assign main_sdram_slave_p1_cke = main_sdram_dfi_p1_cke;
assign main_sdram_slave_p1_odt = main_sdram_dfi_p1_odt;
assign main_sdram_slave_p1_reset_n = main_sdram_dfi_p1_reset_n;
assign main_sdram_slave_p1_act_n = main_sdram_dfi_p1_act_n;
assign main_sdram_slave_p1_wrdata = main_sdram_dfi_p1_wrdata;
assign main_sdram_slave_p1_wrdata_en = main_sdram_dfi_p1_wrdata_en;
assign main_sdram_slave_p1_wrdata_mask = main_sdram_dfi_p1_wrdata_mask;
assign main_sdram_slave_p1_rddata_en = main_sdram_dfi_p1_rddata_en;
assign main_sdram_dfi_p1_rddata = main_sdram_slave_p1_rddata;
assign main_sdram_dfi_p1_rddata_valid = main_sdram_slave_p1_rddata_valid;
assign main_sdram_slave_p2_address = main_sdram_dfi_p2_address;
assign main_sdram_slave_p2_bank = main_sdram_dfi_p2_bank;
assign main_sdram_slave_p2_cas_n = main_sdram_dfi_p2_cas_n;
assign main_sdram_slave_p2_cs_n = main_sdram_dfi_p2_cs_n;
assign main_sdram_slave_p2_ras_n = main_sdram_dfi_p2_ras_n;
assign main_sdram_slave_p2_we_n = main_sdram_dfi_p2_we_n;
assign main_sdram_slave_p2_cke = main_sdram_dfi_p2_cke;
assign main_sdram_slave_p2_odt = main_sdram_dfi_p2_odt;
assign main_sdram_slave_p2_reset_n = main_sdram_dfi_p2_reset_n;
assign main_sdram_slave_p2_act_n = main_sdram_dfi_p2_act_n;
assign main_sdram_slave_p2_wrdata = main_sdram_dfi_p2_wrdata;
assign main_sdram_slave_p2_wrdata_en = main_sdram_dfi_p2_wrdata_en;
assign main_sdram_slave_p2_wrdata_mask = main_sdram_dfi_p2_wrdata_mask;
assign main_sdram_slave_p2_rddata_en = main_sdram_dfi_p2_rddata_en;
assign main_sdram_dfi_p2_rddata = main_sdram_slave_p2_rddata;
assign main_sdram_dfi_p2_rddata_valid = main_sdram_slave_p2_rddata_valid;
assign main_sdram_slave_p3_address = main_sdram_dfi_p3_address;
assign main_sdram_slave_p3_bank = main_sdram_dfi_p3_bank;
assign main_sdram_slave_p3_cas_n = main_sdram_dfi_p3_cas_n;
assign main_sdram_slave_p3_cs_n = main_sdram_dfi_p3_cs_n;
assign main_sdram_slave_p3_ras_n = main_sdram_dfi_p3_ras_n;
assign main_sdram_slave_p3_we_n = main_sdram_dfi_p3_we_n;
assign main_sdram_slave_p3_cke = main_sdram_dfi_p3_cke;
assign main_sdram_slave_p3_odt = main_sdram_dfi_p3_odt;
assign main_sdram_slave_p3_reset_n = main_sdram_dfi_p3_reset_n;
assign main_sdram_slave_p3_act_n = main_sdram_dfi_p3_act_n;
assign main_sdram_slave_p3_wrdata = main_sdram_dfi_p3_wrdata;
assign main_sdram_slave_p3_wrdata_en = main_sdram_dfi_p3_wrdata_en;
assign main_sdram_slave_p3_wrdata_mask = main_sdram_dfi_p3_wrdata_mask;
assign main_sdram_slave_p3_rddata_en = main_sdram_dfi_p3_rddata_en;
assign main_sdram_dfi_p3_rddata = main_sdram_slave_p3_rddata;
assign main_sdram_dfi_p3_rddata_valid = main_sdram_slave_p3_rddata_valid;
always @(*) begin
    main_sdram_csr_dfi_p0_rddata <= 128'd0;
    main_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    main_sdram_csr_dfi_p1_rddata <= 128'd0;
    main_sdram_csr_dfi_p1_rddata_valid <= 1'd0;
    main_sdram_csr_dfi_p2_rddata <= 128'd0;
    main_sdram_csr_dfi_p2_rddata_valid <= 1'd0;
    main_sdram_csr_dfi_p3_rddata <= 128'd0;
    main_sdram_csr_dfi_p3_rddata_valid <= 1'd0;
    main_sdram_ext_dfi_p0_rddata <= 128'd0;
    main_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    main_sdram_ext_dfi_p1_rddata <= 128'd0;
    main_sdram_ext_dfi_p1_rddata_valid <= 1'd0;
    main_sdram_ext_dfi_p2_rddata <= 128'd0;
    main_sdram_ext_dfi_p2_rddata_valid <= 1'd0;
    main_sdram_ext_dfi_p3_rddata <= 128'd0;
    main_sdram_ext_dfi_p3_rddata_valid <= 1'd0;
    main_sdram_master_p0_act_n <= 1'd1;
    main_sdram_master_p0_address <= 16'd0;
    main_sdram_master_p0_bank <= 3'd0;
    main_sdram_master_p0_cas_n <= 1'd1;
    main_sdram_master_p0_cke <= 1'd0;
    main_sdram_master_p0_cs_n <= 1'd1;
    main_sdram_master_p0_odt <= 1'd0;
    main_sdram_master_p0_ras_n <= 1'd1;
    main_sdram_master_p0_rddata_en <= 1'd0;
    main_sdram_master_p0_reset_n <= 1'd0;
    main_sdram_master_p0_we_n <= 1'd1;
    main_sdram_master_p0_wrdata <= 128'd0;
    main_sdram_master_p0_wrdata_en <= 1'd0;
    main_sdram_master_p0_wrdata_mask <= 16'd0;
    main_sdram_master_p1_act_n <= 1'd1;
    main_sdram_master_p1_address <= 16'd0;
    main_sdram_master_p1_bank <= 3'd0;
    main_sdram_master_p1_cas_n <= 1'd1;
    main_sdram_master_p1_cke <= 1'd0;
    main_sdram_master_p1_cs_n <= 1'd1;
    main_sdram_master_p1_odt <= 1'd0;
    main_sdram_master_p1_ras_n <= 1'd1;
    main_sdram_master_p1_rddata_en <= 1'd0;
    main_sdram_master_p1_reset_n <= 1'd0;
    main_sdram_master_p1_we_n <= 1'd1;
    main_sdram_master_p1_wrdata <= 128'd0;
    main_sdram_master_p1_wrdata_en <= 1'd0;
    main_sdram_master_p1_wrdata_mask <= 16'd0;
    main_sdram_master_p2_act_n <= 1'd1;
    main_sdram_master_p2_address <= 16'd0;
    main_sdram_master_p2_bank <= 3'd0;
    main_sdram_master_p2_cas_n <= 1'd1;
    main_sdram_master_p2_cke <= 1'd0;
    main_sdram_master_p2_cs_n <= 1'd1;
    main_sdram_master_p2_odt <= 1'd0;
    main_sdram_master_p2_ras_n <= 1'd1;
    main_sdram_master_p2_rddata_en <= 1'd0;
    main_sdram_master_p2_reset_n <= 1'd0;
    main_sdram_master_p2_we_n <= 1'd1;
    main_sdram_master_p2_wrdata <= 128'd0;
    main_sdram_master_p2_wrdata_en <= 1'd0;
    main_sdram_master_p2_wrdata_mask <= 16'd0;
    main_sdram_master_p3_act_n <= 1'd1;
    main_sdram_master_p3_address <= 16'd0;
    main_sdram_master_p3_bank <= 3'd0;
    main_sdram_master_p3_cas_n <= 1'd1;
    main_sdram_master_p3_cke <= 1'd0;
    main_sdram_master_p3_cs_n <= 1'd1;
    main_sdram_master_p3_odt <= 1'd0;
    main_sdram_master_p3_ras_n <= 1'd1;
    main_sdram_master_p3_rddata_en <= 1'd0;
    main_sdram_master_p3_reset_n <= 1'd0;
    main_sdram_master_p3_we_n <= 1'd1;
    main_sdram_master_p3_wrdata <= 128'd0;
    main_sdram_master_p3_wrdata_en <= 1'd0;
    main_sdram_master_p3_wrdata_mask <= 16'd0;
    main_sdram_slave_p0_rddata <= 128'd0;
    main_sdram_slave_p0_rddata_valid <= 1'd0;
    main_sdram_slave_p1_rddata <= 128'd0;
    main_sdram_slave_p1_rddata_valid <= 1'd0;
    main_sdram_slave_p2_rddata <= 128'd0;
    main_sdram_slave_p2_rddata_valid <= 1'd0;
    main_sdram_slave_p3_rddata <= 128'd0;
    main_sdram_slave_p3_rddata_valid <= 1'd0;
    if (main_sdram_sel) begin
        if (main_sdram_ext_dfi_sel) begin
            main_sdram_master_p0_address <= main_sdram_ext_dfi_p0_address;
            main_sdram_master_p0_bank <= main_sdram_ext_dfi_p0_bank;
            main_sdram_master_p0_cas_n <= main_sdram_ext_dfi_p0_cas_n;
            main_sdram_master_p0_cs_n <= main_sdram_ext_dfi_p0_cs_n;
            main_sdram_master_p0_ras_n <= main_sdram_ext_dfi_p0_ras_n;
            main_sdram_master_p0_we_n <= main_sdram_ext_dfi_p0_we_n;
            main_sdram_master_p0_cke <= main_sdram_ext_dfi_p0_cke;
            main_sdram_master_p0_odt <= main_sdram_ext_dfi_p0_odt;
            main_sdram_master_p0_reset_n <= main_sdram_ext_dfi_p0_reset_n;
            main_sdram_master_p0_act_n <= main_sdram_ext_dfi_p0_act_n;
            main_sdram_master_p0_wrdata <= main_sdram_ext_dfi_p0_wrdata;
            main_sdram_master_p0_wrdata_en <= main_sdram_ext_dfi_p0_wrdata_en;
            main_sdram_master_p0_wrdata_mask <= main_sdram_ext_dfi_p0_wrdata_mask;
            main_sdram_master_p0_rddata_en <= main_sdram_ext_dfi_p0_rddata_en;
            main_sdram_ext_dfi_p0_rddata <= main_sdram_master_p0_rddata;
            main_sdram_ext_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
            main_sdram_master_p1_address <= main_sdram_ext_dfi_p1_address;
            main_sdram_master_p1_bank <= main_sdram_ext_dfi_p1_bank;
            main_sdram_master_p1_cas_n <= main_sdram_ext_dfi_p1_cas_n;
            main_sdram_master_p1_cs_n <= main_sdram_ext_dfi_p1_cs_n;
            main_sdram_master_p1_ras_n <= main_sdram_ext_dfi_p1_ras_n;
            main_sdram_master_p1_we_n <= main_sdram_ext_dfi_p1_we_n;
            main_sdram_master_p1_cke <= main_sdram_ext_dfi_p1_cke;
            main_sdram_master_p1_odt <= main_sdram_ext_dfi_p1_odt;
            main_sdram_master_p1_reset_n <= main_sdram_ext_dfi_p1_reset_n;
            main_sdram_master_p1_act_n <= main_sdram_ext_dfi_p1_act_n;
            main_sdram_master_p1_wrdata <= main_sdram_ext_dfi_p1_wrdata;
            main_sdram_master_p1_wrdata_en <= main_sdram_ext_dfi_p1_wrdata_en;
            main_sdram_master_p1_wrdata_mask <= main_sdram_ext_dfi_p1_wrdata_mask;
            main_sdram_master_p1_rddata_en <= main_sdram_ext_dfi_p1_rddata_en;
            main_sdram_ext_dfi_p1_rddata <= main_sdram_master_p1_rddata;
            main_sdram_ext_dfi_p1_rddata_valid <= main_sdram_master_p1_rddata_valid;
            main_sdram_master_p2_address <= main_sdram_ext_dfi_p2_address;
            main_sdram_master_p2_bank <= main_sdram_ext_dfi_p2_bank;
            main_sdram_master_p2_cas_n <= main_sdram_ext_dfi_p2_cas_n;
            main_sdram_master_p2_cs_n <= main_sdram_ext_dfi_p2_cs_n;
            main_sdram_master_p2_ras_n <= main_sdram_ext_dfi_p2_ras_n;
            main_sdram_master_p2_we_n <= main_sdram_ext_dfi_p2_we_n;
            main_sdram_master_p2_cke <= main_sdram_ext_dfi_p2_cke;
            main_sdram_master_p2_odt <= main_sdram_ext_dfi_p2_odt;
            main_sdram_master_p2_reset_n <= main_sdram_ext_dfi_p2_reset_n;
            main_sdram_master_p2_act_n <= main_sdram_ext_dfi_p2_act_n;
            main_sdram_master_p2_wrdata <= main_sdram_ext_dfi_p2_wrdata;
            main_sdram_master_p2_wrdata_en <= main_sdram_ext_dfi_p2_wrdata_en;
            main_sdram_master_p2_wrdata_mask <= main_sdram_ext_dfi_p2_wrdata_mask;
            main_sdram_master_p2_rddata_en <= main_sdram_ext_dfi_p2_rddata_en;
            main_sdram_ext_dfi_p2_rddata <= main_sdram_master_p2_rddata;
            main_sdram_ext_dfi_p2_rddata_valid <= main_sdram_master_p2_rddata_valid;
            main_sdram_master_p3_address <= main_sdram_ext_dfi_p3_address;
            main_sdram_master_p3_bank <= main_sdram_ext_dfi_p3_bank;
            main_sdram_master_p3_cas_n <= main_sdram_ext_dfi_p3_cas_n;
            main_sdram_master_p3_cs_n <= main_sdram_ext_dfi_p3_cs_n;
            main_sdram_master_p3_ras_n <= main_sdram_ext_dfi_p3_ras_n;
            main_sdram_master_p3_we_n <= main_sdram_ext_dfi_p3_we_n;
            main_sdram_master_p3_cke <= main_sdram_ext_dfi_p3_cke;
            main_sdram_master_p3_odt <= main_sdram_ext_dfi_p3_odt;
            main_sdram_master_p3_reset_n <= main_sdram_ext_dfi_p3_reset_n;
            main_sdram_master_p3_act_n <= main_sdram_ext_dfi_p3_act_n;
            main_sdram_master_p3_wrdata <= main_sdram_ext_dfi_p3_wrdata;
            main_sdram_master_p3_wrdata_en <= main_sdram_ext_dfi_p3_wrdata_en;
            main_sdram_master_p3_wrdata_mask <= main_sdram_ext_dfi_p3_wrdata_mask;
            main_sdram_master_p3_rddata_en <= main_sdram_ext_dfi_p3_rddata_en;
            main_sdram_ext_dfi_p3_rddata <= main_sdram_master_p3_rddata;
            main_sdram_ext_dfi_p3_rddata_valid <= main_sdram_master_p3_rddata_valid;
        end else begin
            main_sdram_master_p0_address <= main_sdram_slave_p0_address;
            main_sdram_master_p0_bank <= main_sdram_slave_p0_bank;
            main_sdram_master_p0_cas_n <= main_sdram_slave_p0_cas_n;
            main_sdram_master_p0_cs_n <= main_sdram_slave_p0_cs_n;
            main_sdram_master_p0_ras_n <= main_sdram_slave_p0_ras_n;
            main_sdram_master_p0_we_n <= main_sdram_slave_p0_we_n;
            main_sdram_master_p0_cke <= main_sdram_slave_p0_cke;
            main_sdram_master_p0_odt <= main_sdram_slave_p0_odt;
            main_sdram_master_p0_reset_n <= main_sdram_slave_p0_reset_n;
            main_sdram_master_p0_act_n <= main_sdram_slave_p0_act_n;
            main_sdram_master_p0_wrdata <= main_sdram_slave_p0_wrdata;
            main_sdram_master_p0_wrdata_en <= main_sdram_slave_p0_wrdata_en;
            main_sdram_master_p0_wrdata_mask <= main_sdram_slave_p0_wrdata_mask;
            main_sdram_master_p0_rddata_en <= main_sdram_slave_p0_rddata_en;
            main_sdram_slave_p0_rddata <= main_sdram_master_p0_rddata;
            main_sdram_slave_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
            main_sdram_master_p1_address <= main_sdram_slave_p1_address;
            main_sdram_master_p1_bank <= main_sdram_slave_p1_bank;
            main_sdram_master_p1_cas_n <= main_sdram_slave_p1_cas_n;
            main_sdram_master_p1_cs_n <= main_sdram_slave_p1_cs_n;
            main_sdram_master_p1_ras_n <= main_sdram_slave_p1_ras_n;
            main_sdram_master_p1_we_n <= main_sdram_slave_p1_we_n;
            main_sdram_master_p1_cke <= main_sdram_slave_p1_cke;
            main_sdram_master_p1_odt <= main_sdram_slave_p1_odt;
            main_sdram_master_p1_reset_n <= main_sdram_slave_p1_reset_n;
            main_sdram_master_p1_act_n <= main_sdram_slave_p1_act_n;
            main_sdram_master_p1_wrdata <= main_sdram_slave_p1_wrdata;
            main_sdram_master_p1_wrdata_en <= main_sdram_slave_p1_wrdata_en;
            main_sdram_master_p1_wrdata_mask <= main_sdram_slave_p1_wrdata_mask;
            main_sdram_master_p1_rddata_en <= main_sdram_slave_p1_rddata_en;
            main_sdram_slave_p1_rddata <= main_sdram_master_p1_rddata;
            main_sdram_slave_p1_rddata_valid <= main_sdram_master_p1_rddata_valid;
            main_sdram_master_p2_address <= main_sdram_slave_p2_address;
            main_sdram_master_p2_bank <= main_sdram_slave_p2_bank;
            main_sdram_master_p2_cas_n <= main_sdram_slave_p2_cas_n;
            main_sdram_master_p2_cs_n <= main_sdram_slave_p2_cs_n;
            main_sdram_master_p2_ras_n <= main_sdram_slave_p2_ras_n;
            main_sdram_master_p2_we_n <= main_sdram_slave_p2_we_n;
            main_sdram_master_p2_cke <= main_sdram_slave_p2_cke;
            main_sdram_master_p2_odt <= main_sdram_slave_p2_odt;
            main_sdram_master_p2_reset_n <= main_sdram_slave_p2_reset_n;
            main_sdram_master_p2_act_n <= main_sdram_slave_p2_act_n;
            main_sdram_master_p2_wrdata <= main_sdram_slave_p2_wrdata;
            main_sdram_master_p2_wrdata_en <= main_sdram_slave_p2_wrdata_en;
            main_sdram_master_p2_wrdata_mask <= main_sdram_slave_p2_wrdata_mask;
            main_sdram_master_p2_rddata_en <= main_sdram_slave_p2_rddata_en;
            main_sdram_slave_p2_rddata <= main_sdram_master_p2_rddata;
            main_sdram_slave_p2_rddata_valid <= main_sdram_master_p2_rddata_valid;
            main_sdram_master_p3_address <= main_sdram_slave_p3_address;
            main_sdram_master_p3_bank <= main_sdram_slave_p3_bank;
            main_sdram_master_p3_cas_n <= main_sdram_slave_p3_cas_n;
            main_sdram_master_p3_cs_n <= main_sdram_slave_p3_cs_n;
            main_sdram_master_p3_ras_n <= main_sdram_slave_p3_ras_n;
            main_sdram_master_p3_we_n <= main_sdram_slave_p3_we_n;
            main_sdram_master_p3_cke <= main_sdram_slave_p3_cke;
            main_sdram_master_p3_odt <= main_sdram_slave_p3_odt;
            main_sdram_master_p3_reset_n <= main_sdram_slave_p3_reset_n;
            main_sdram_master_p3_act_n <= main_sdram_slave_p3_act_n;
            main_sdram_master_p3_wrdata <= main_sdram_slave_p3_wrdata;
            main_sdram_master_p3_wrdata_en <= main_sdram_slave_p3_wrdata_en;
            main_sdram_master_p3_wrdata_mask <= main_sdram_slave_p3_wrdata_mask;
            main_sdram_master_p3_rddata_en <= main_sdram_slave_p3_rddata_en;
            main_sdram_slave_p3_rddata <= main_sdram_master_p3_rddata;
            main_sdram_slave_p3_rddata_valid <= main_sdram_master_p3_rddata_valid;
            if (1'd0) begin
                main_sdram_master_p0_cs_n <= {2{main_sdram_slave_p0_cs_n}};
                main_sdram_master_p1_cs_n <= {2{main_sdram_slave_p1_cs_n}};
                main_sdram_master_p2_cs_n <= {2{main_sdram_slave_p2_cs_n}};
                main_sdram_master_p3_cs_n <= {2{main_sdram_slave_p3_cs_n}};
            end
        end
    end else begin
        main_sdram_master_p0_address <= main_sdram_csr_dfi_p0_address;
        main_sdram_master_p0_bank <= main_sdram_csr_dfi_p0_bank;
        main_sdram_master_p0_cas_n <= main_sdram_csr_dfi_p0_cas_n;
        main_sdram_master_p0_cs_n <= main_sdram_csr_dfi_p0_cs_n;
        main_sdram_master_p0_ras_n <= main_sdram_csr_dfi_p0_ras_n;
        main_sdram_master_p0_we_n <= main_sdram_csr_dfi_p0_we_n;
        main_sdram_master_p0_cke <= main_sdram_csr_dfi_p0_cke;
        main_sdram_master_p0_odt <= main_sdram_csr_dfi_p0_odt;
        main_sdram_master_p0_reset_n <= main_sdram_csr_dfi_p0_reset_n;
        main_sdram_master_p0_act_n <= main_sdram_csr_dfi_p0_act_n;
        main_sdram_master_p0_wrdata <= main_sdram_csr_dfi_p0_wrdata;
        main_sdram_master_p0_wrdata_en <= main_sdram_csr_dfi_p0_wrdata_en;
        main_sdram_master_p0_wrdata_mask <= main_sdram_csr_dfi_p0_wrdata_mask;
        main_sdram_master_p0_rddata_en <= main_sdram_csr_dfi_p0_rddata_en;
        main_sdram_csr_dfi_p0_rddata <= main_sdram_master_p0_rddata;
        main_sdram_csr_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
        main_sdram_master_p1_address <= main_sdram_csr_dfi_p1_address;
        main_sdram_master_p1_bank <= main_sdram_csr_dfi_p1_bank;
        main_sdram_master_p1_cas_n <= main_sdram_csr_dfi_p1_cas_n;
        main_sdram_master_p1_cs_n <= main_sdram_csr_dfi_p1_cs_n;
        main_sdram_master_p1_ras_n <= main_sdram_csr_dfi_p1_ras_n;
        main_sdram_master_p1_we_n <= main_sdram_csr_dfi_p1_we_n;
        main_sdram_master_p1_cke <= main_sdram_csr_dfi_p1_cke;
        main_sdram_master_p1_odt <= main_sdram_csr_dfi_p1_odt;
        main_sdram_master_p1_reset_n <= main_sdram_csr_dfi_p1_reset_n;
        main_sdram_master_p1_act_n <= main_sdram_csr_dfi_p1_act_n;
        main_sdram_master_p1_wrdata <= main_sdram_csr_dfi_p1_wrdata;
        main_sdram_master_p1_wrdata_en <= main_sdram_csr_dfi_p1_wrdata_en;
        main_sdram_master_p1_wrdata_mask <= main_sdram_csr_dfi_p1_wrdata_mask;
        main_sdram_master_p1_rddata_en <= main_sdram_csr_dfi_p1_rddata_en;
        main_sdram_csr_dfi_p1_rddata <= main_sdram_master_p1_rddata;
        main_sdram_csr_dfi_p1_rddata_valid <= main_sdram_master_p1_rddata_valid;
        main_sdram_master_p2_address <= main_sdram_csr_dfi_p2_address;
        main_sdram_master_p2_bank <= main_sdram_csr_dfi_p2_bank;
        main_sdram_master_p2_cas_n <= main_sdram_csr_dfi_p2_cas_n;
        main_sdram_master_p2_cs_n <= main_sdram_csr_dfi_p2_cs_n;
        main_sdram_master_p2_ras_n <= main_sdram_csr_dfi_p2_ras_n;
        main_sdram_master_p2_we_n <= main_sdram_csr_dfi_p2_we_n;
        main_sdram_master_p2_cke <= main_sdram_csr_dfi_p2_cke;
        main_sdram_master_p2_odt <= main_sdram_csr_dfi_p2_odt;
        main_sdram_master_p2_reset_n <= main_sdram_csr_dfi_p2_reset_n;
        main_sdram_master_p2_act_n <= main_sdram_csr_dfi_p2_act_n;
        main_sdram_master_p2_wrdata <= main_sdram_csr_dfi_p2_wrdata;
        main_sdram_master_p2_wrdata_en <= main_sdram_csr_dfi_p2_wrdata_en;
        main_sdram_master_p2_wrdata_mask <= main_sdram_csr_dfi_p2_wrdata_mask;
        main_sdram_master_p2_rddata_en <= main_sdram_csr_dfi_p2_rddata_en;
        main_sdram_csr_dfi_p2_rddata <= main_sdram_master_p2_rddata;
        main_sdram_csr_dfi_p2_rddata_valid <= main_sdram_master_p2_rddata_valid;
        main_sdram_master_p3_address <= main_sdram_csr_dfi_p3_address;
        main_sdram_master_p3_bank <= main_sdram_csr_dfi_p3_bank;
        main_sdram_master_p3_cas_n <= main_sdram_csr_dfi_p3_cas_n;
        main_sdram_master_p3_cs_n <= main_sdram_csr_dfi_p3_cs_n;
        main_sdram_master_p3_ras_n <= main_sdram_csr_dfi_p3_ras_n;
        main_sdram_master_p3_we_n <= main_sdram_csr_dfi_p3_we_n;
        main_sdram_master_p3_cke <= main_sdram_csr_dfi_p3_cke;
        main_sdram_master_p3_odt <= main_sdram_csr_dfi_p3_odt;
        main_sdram_master_p3_reset_n <= main_sdram_csr_dfi_p3_reset_n;
        main_sdram_master_p3_act_n <= main_sdram_csr_dfi_p3_act_n;
        main_sdram_master_p3_wrdata <= main_sdram_csr_dfi_p3_wrdata;
        main_sdram_master_p3_wrdata_en <= main_sdram_csr_dfi_p3_wrdata_en;
        main_sdram_master_p3_wrdata_mask <= main_sdram_csr_dfi_p3_wrdata_mask;
        main_sdram_master_p3_rddata_en <= main_sdram_csr_dfi_p3_rddata_en;
        main_sdram_csr_dfi_p3_rddata <= main_sdram_master_p3_rddata;
        main_sdram_csr_dfi_p3_rddata_valid <= main_sdram_master_p3_rddata_valid;
    end
end
always @(*) begin
    main_sdram_csr_dfi_p0_cke <= 1'd0;
    main_sdram_csr_dfi_p0_cke <= main_sdram_cke;
end
always @(*) begin
    main_sdram_csr_dfi_p1_cke <= 1'd0;
    main_sdram_csr_dfi_p1_cke <= main_sdram_cke;
end
always @(*) begin
    main_sdram_csr_dfi_p2_cke <= 1'd0;
    main_sdram_csr_dfi_p2_cke <= main_sdram_cke;
end
always @(*) begin
    main_sdram_csr_dfi_p3_cke <= 1'd0;
    main_sdram_csr_dfi_p3_cke <= main_sdram_cke;
end
always @(*) begin
    main_sdram_csr_dfi_p0_odt <= 1'd0;
    main_sdram_csr_dfi_p0_odt <= main_sdram_odt;
end
always @(*) begin
    main_sdram_csr_dfi_p1_odt <= 1'd0;
    main_sdram_csr_dfi_p1_odt <= main_sdram_odt;
end
always @(*) begin
    main_sdram_csr_dfi_p2_odt <= 1'd0;
    main_sdram_csr_dfi_p2_odt <= main_sdram_odt;
end
always @(*) begin
    main_sdram_csr_dfi_p3_odt <= 1'd0;
    main_sdram_csr_dfi_p3_odt <= main_sdram_odt;
end
assign main_sdram_csr_dfi_p0_reset_n = main_sdram_reset_n;
assign main_sdram_csr_dfi_p1_reset_n = main_sdram_reset_n;
assign main_sdram_csr_dfi_p2_reset_n = main_sdram_reset_n;
assign main_sdram_csr_dfi_p3_reset_n = main_sdram_reset_n;
always @(*) begin
    main_sdram_csr_dfi_p0_cas_n <= 1'd1;
    main_sdram_csr_dfi_p0_cs_n <= 1'd1;
    main_sdram_csr_dfi_p0_ras_n <= 1'd1;
    main_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (main_sdram_phaseinjector0_command_issue_re) begin
        if (main_sdram_phaseinjector0_csrfield_cs_top) begin
            main_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (main_sdram_phaseinjector0_csrfield_cs_bottom) begin
                main_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                main_sdram_csr_dfi_p0_cs_n <= {1{(~main_sdram_phaseinjector0_csrfield_cs)}};
            end
        end
        main_sdram_csr_dfi_p0_we_n <= (~main_sdram_phaseinjector0_csrfield_we);
        main_sdram_csr_dfi_p0_cas_n <= (~main_sdram_phaseinjector0_csrfield_cas);
        main_sdram_csr_dfi_p0_ras_n <= (~main_sdram_phaseinjector0_csrfield_ras);
    end else begin
        main_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
        main_sdram_csr_dfi_p0_we_n <= 1'd1;
        main_sdram_csr_dfi_p0_cas_n <= 1'd1;
        main_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign main_sdram_csr_dfi_p0_address = main_sdram_phaseinjector0_address_storage;
assign main_sdram_csr_dfi_p0_bank = main_sdram_phaseinjector0_baddress_storage;
assign main_sdram_csr_dfi_p0_wrdata_en = (main_sdram_phaseinjector0_command_issue_re & main_sdram_phaseinjector0_csrfield_wren);
assign main_sdram_csr_dfi_p0_rddata_en = (main_sdram_phaseinjector0_command_issue_re & main_sdram_phaseinjector0_csrfield_rden);
assign main_sdram_csr_dfi_p0_wrdata = main_sdram_phaseinjector0_wrdata_storage;
assign main_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
always @(*) begin
    main_sdram_csr_dfi_p1_cas_n <= 1'd1;
    main_sdram_csr_dfi_p1_cs_n <= 1'd1;
    main_sdram_csr_dfi_p1_ras_n <= 1'd1;
    main_sdram_csr_dfi_p1_we_n <= 1'd1;
    if (main_sdram_phaseinjector1_command_issue_re) begin
        if (main_sdram_phaseinjector1_csrfield_cs_top) begin
            main_sdram_csr_dfi_p1_cs_n <= 2'd2;
        end else begin
            if (main_sdram_phaseinjector1_csrfield_cs_bottom) begin
                main_sdram_csr_dfi_p1_cs_n <= 1'd1;
            end else begin
                main_sdram_csr_dfi_p1_cs_n <= {1{(~main_sdram_phaseinjector1_csrfield_cs)}};
            end
        end
        main_sdram_csr_dfi_p1_we_n <= (~main_sdram_phaseinjector1_csrfield_we);
        main_sdram_csr_dfi_p1_cas_n <= (~main_sdram_phaseinjector1_csrfield_cas);
        main_sdram_csr_dfi_p1_ras_n <= (~main_sdram_phaseinjector1_csrfield_ras);
    end else begin
        main_sdram_csr_dfi_p1_cs_n <= {1{1'd1}};
        main_sdram_csr_dfi_p1_we_n <= 1'd1;
        main_sdram_csr_dfi_p1_cas_n <= 1'd1;
        main_sdram_csr_dfi_p1_ras_n <= 1'd1;
    end
end
assign main_sdram_csr_dfi_p1_address = main_sdram_phaseinjector1_address_storage;
assign main_sdram_csr_dfi_p1_bank = main_sdram_phaseinjector1_baddress_storage;
assign main_sdram_csr_dfi_p1_wrdata_en = (main_sdram_phaseinjector1_command_issue_re & main_sdram_phaseinjector1_csrfield_wren);
assign main_sdram_csr_dfi_p1_rddata_en = (main_sdram_phaseinjector1_command_issue_re & main_sdram_phaseinjector1_csrfield_rden);
assign main_sdram_csr_dfi_p1_wrdata = main_sdram_phaseinjector1_wrdata_storage;
assign main_sdram_csr_dfi_p1_wrdata_mask = 1'd0;
always @(*) begin
    main_sdram_csr_dfi_p2_cas_n <= 1'd1;
    main_sdram_csr_dfi_p2_cs_n <= 1'd1;
    main_sdram_csr_dfi_p2_ras_n <= 1'd1;
    main_sdram_csr_dfi_p2_we_n <= 1'd1;
    if (main_sdram_phaseinjector2_command_issue_re) begin
        if (main_sdram_phaseinjector2_csrfield_cs_top) begin
            main_sdram_csr_dfi_p2_cs_n <= 2'd2;
        end else begin
            if (main_sdram_phaseinjector2_csrfield_cs_bottom) begin
                main_sdram_csr_dfi_p2_cs_n <= 1'd1;
            end else begin
                main_sdram_csr_dfi_p2_cs_n <= {1{(~main_sdram_phaseinjector2_csrfield_cs)}};
            end
        end
        main_sdram_csr_dfi_p2_we_n <= (~main_sdram_phaseinjector2_csrfield_we);
        main_sdram_csr_dfi_p2_cas_n <= (~main_sdram_phaseinjector2_csrfield_cas);
        main_sdram_csr_dfi_p2_ras_n <= (~main_sdram_phaseinjector2_csrfield_ras);
    end else begin
        main_sdram_csr_dfi_p2_cs_n <= {1{1'd1}};
        main_sdram_csr_dfi_p2_we_n <= 1'd1;
        main_sdram_csr_dfi_p2_cas_n <= 1'd1;
        main_sdram_csr_dfi_p2_ras_n <= 1'd1;
    end
end
assign main_sdram_csr_dfi_p2_address = main_sdram_phaseinjector2_address_storage;
assign main_sdram_csr_dfi_p2_bank = main_sdram_phaseinjector2_baddress_storage;
assign main_sdram_csr_dfi_p2_wrdata_en = (main_sdram_phaseinjector2_command_issue_re & main_sdram_phaseinjector2_csrfield_wren);
assign main_sdram_csr_dfi_p2_rddata_en = (main_sdram_phaseinjector2_command_issue_re & main_sdram_phaseinjector2_csrfield_rden);
assign main_sdram_csr_dfi_p2_wrdata = main_sdram_phaseinjector2_wrdata_storage;
assign main_sdram_csr_dfi_p2_wrdata_mask = 1'd0;
always @(*) begin
    main_sdram_csr_dfi_p3_cas_n <= 1'd1;
    main_sdram_csr_dfi_p3_cs_n <= 1'd1;
    main_sdram_csr_dfi_p3_ras_n <= 1'd1;
    main_sdram_csr_dfi_p3_we_n <= 1'd1;
    if (main_sdram_phaseinjector3_command_issue_re) begin
        if (main_sdram_phaseinjector3_csrfield_cs_top) begin
            main_sdram_csr_dfi_p3_cs_n <= 2'd2;
        end else begin
            if (main_sdram_phaseinjector3_csrfield_cs_bottom) begin
                main_sdram_csr_dfi_p3_cs_n <= 1'd1;
            end else begin
                main_sdram_csr_dfi_p3_cs_n <= {1{(~main_sdram_phaseinjector3_csrfield_cs)}};
            end
        end
        main_sdram_csr_dfi_p3_we_n <= (~main_sdram_phaseinjector3_csrfield_we);
        main_sdram_csr_dfi_p3_cas_n <= (~main_sdram_phaseinjector3_csrfield_cas);
        main_sdram_csr_dfi_p3_ras_n <= (~main_sdram_phaseinjector3_csrfield_ras);
    end else begin
        main_sdram_csr_dfi_p3_cs_n <= {1{1'd1}};
        main_sdram_csr_dfi_p3_we_n <= 1'd1;
        main_sdram_csr_dfi_p3_cas_n <= 1'd1;
        main_sdram_csr_dfi_p3_ras_n <= 1'd1;
    end
end
assign main_sdram_csr_dfi_p3_address = main_sdram_phaseinjector3_address_storage;
assign main_sdram_csr_dfi_p3_bank = main_sdram_phaseinjector3_baddress_storage;
assign main_sdram_csr_dfi_p3_wrdata_en = (main_sdram_phaseinjector3_command_issue_re & main_sdram_phaseinjector3_csrfield_wren);
assign main_sdram_csr_dfi_p3_rddata_en = (main_sdram_phaseinjector3_command_issue_re & main_sdram_phaseinjector3_csrfield_rden);
assign main_sdram_csr_dfi_p3_wrdata = main_sdram_phaseinjector3_wrdata_storage;
assign main_sdram_csr_dfi_p3_wrdata_mask = 1'd0;
assign main_sdram_bankmachine0_req_valid = main_sdram_interface_bank0_valid;
assign main_sdram_interface_bank0_ready = main_sdram_bankmachine0_req_ready;
assign main_sdram_bankmachine0_req_we = main_sdram_interface_bank0_we;
assign main_sdram_bankmachine0_req_addr = main_sdram_interface_bank0_addr;
assign main_sdram_interface_bank0_lock = main_sdram_bankmachine0_req_lock;
assign main_sdram_interface_bank0_wdata_ready = main_sdram_bankmachine0_req_wdata_ready;
assign main_sdram_interface_bank0_rdata_valid = main_sdram_bankmachine0_req_rdata_valid;
assign main_sdram_bankmachine1_req_valid = main_sdram_interface_bank1_valid;
assign main_sdram_interface_bank1_ready = main_sdram_bankmachine1_req_ready;
assign main_sdram_bankmachine1_req_we = main_sdram_interface_bank1_we;
assign main_sdram_bankmachine1_req_addr = main_sdram_interface_bank1_addr;
assign main_sdram_interface_bank1_lock = main_sdram_bankmachine1_req_lock;
assign main_sdram_interface_bank1_wdata_ready = main_sdram_bankmachine1_req_wdata_ready;
assign main_sdram_interface_bank1_rdata_valid = main_sdram_bankmachine1_req_rdata_valid;
assign main_sdram_bankmachine2_req_valid = main_sdram_interface_bank2_valid;
assign main_sdram_interface_bank2_ready = main_sdram_bankmachine2_req_ready;
assign main_sdram_bankmachine2_req_we = main_sdram_interface_bank2_we;
assign main_sdram_bankmachine2_req_addr = main_sdram_interface_bank2_addr;
assign main_sdram_interface_bank2_lock = main_sdram_bankmachine2_req_lock;
assign main_sdram_interface_bank2_wdata_ready = main_sdram_bankmachine2_req_wdata_ready;
assign main_sdram_interface_bank2_rdata_valid = main_sdram_bankmachine2_req_rdata_valid;
assign main_sdram_bankmachine3_req_valid = main_sdram_interface_bank3_valid;
assign main_sdram_interface_bank3_ready = main_sdram_bankmachine3_req_ready;
assign main_sdram_bankmachine3_req_we = main_sdram_interface_bank3_we;
assign main_sdram_bankmachine3_req_addr = main_sdram_interface_bank3_addr;
assign main_sdram_interface_bank3_lock = main_sdram_bankmachine3_req_lock;
assign main_sdram_interface_bank3_wdata_ready = main_sdram_bankmachine3_req_wdata_ready;
assign main_sdram_interface_bank3_rdata_valid = main_sdram_bankmachine3_req_rdata_valid;
assign main_sdram_bankmachine4_req_valid = main_sdram_interface_bank4_valid;
assign main_sdram_interface_bank4_ready = main_sdram_bankmachine4_req_ready;
assign main_sdram_bankmachine4_req_we = main_sdram_interface_bank4_we;
assign main_sdram_bankmachine4_req_addr = main_sdram_interface_bank4_addr;
assign main_sdram_interface_bank4_lock = main_sdram_bankmachine4_req_lock;
assign main_sdram_interface_bank4_wdata_ready = main_sdram_bankmachine4_req_wdata_ready;
assign main_sdram_interface_bank4_rdata_valid = main_sdram_bankmachine4_req_rdata_valid;
assign main_sdram_bankmachine5_req_valid = main_sdram_interface_bank5_valid;
assign main_sdram_interface_bank5_ready = main_sdram_bankmachine5_req_ready;
assign main_sdram_bankmachine5_req_we = main_sdram_interface_bank5_we;
assign main_sdram_bankmachine5_req_addr = main_sdram_interface_bank5_addr;
assign main_sdram_interface_bank5_lock = main_sdram_bankmachine5_req_lock;
assign main_sdram_interface_bank5_wdata_ready = main_sdram_bankmachine5_req_wdata_ready;
assign main_sdram_interface_bank5_rdata_valid = main_sdram_bankmachine5_req_rdata_valid;
assign main_sdram_bankmachine6_req_valid = main_sdram_interface_bank6_valid;
assign main_sdram_interface_bank6_ready = main_sdram_bankmachine6_req_ready;
assign main_sdram_bankmachine6_req_we = main_sdram_interface_bank6_we;
assign main_sdram_bankmachine6_req_addr = main_sdram_interface_bank6_addr;
assign main_sdram_interface_bank6_lock = main_sdram_bankmachine6_req_lock;
assign main_sdram_interface_bank6_wdata_ready = main_sdram_bankmachine6_req_wdata_ready;
assign main_sdram_interface_bank6_rdata_valid = main_sdram_bankmachine6_req_rdata_valid;
assign main_sdram_bankmachine7_req_valid = main_sdram_interface_bank7_valid;
assign main_sdram_interface_bank7_ready = main_sdram_bankmachine7_req_ready;
assign main_sdram_bankmachine7_req_we = main_sdram_interface_bank7_we;
assign main_sdram_bankmachine7_req_addr = main_sdram_interface_bank7_addr;
assign main_sdram_interface_bank7_lock = main_sdram_bankmachine7_req_lock;
assign main_sdram_interface_bank7_wdata_ready = main_sdram_bankmachine7_req_wdata_ready;
assign main_sdram_interface_bank7_rdata_valid = main_sdram_bankmachine7_req_rdata_valid;
assign main_sdram_timer_wait = (~main_sdram_timer_done0);
assign main_sdram_postponer_req_i = main_sdram_timer_done0;
assign main_sdram_wants_refresh = main_sdram_postponer_req_o;
assign main_sdram_wants_zqcs = main_sdram_zqcs_timer_done0;
assign main_sdram_zqcs_timer_wait = (~main_sdram_zqcs_executer_done);
assign main_sdram_timer_done1 = (main_sdram_timer_count1 == 1'd0);
assign main_sdram_timer_done0 = main_sdram_timer_done1;
assign main_sdram_timer_count0 = main_sdram_timer_count1;
assign main_sdram_sequencer_start1 = (main_sdram_sequencer_start0 | (main_sdram_sequencer_count != 1'd0));
assign main_sdram_sequencer_done0 = (main_sdram_sequencer_done1 & (main_sdram_sequencer_count == 1'd0));
assign main_sdram_zqcs_timer_done1 = (main_sdram_zqcs_timer_count1 == 1'd0);
assign main_sdram_zqcs_timer_done0 = main_sdram_zqcs_timer_done1;
assign main_sdram_zqcs_timer_count0 = main_sdram_zqcs_timer_count1;
always @(*) begin
    builder_basesoc_refresher_next_state <= 2'd0;
    main_sdram_cmd_last <= 1'd0;
    main_sdram_cmd_valid <= 1'd0;
    main_sdram_sequencer_start0 <= 1'd0;
    main_sdram_zqcs_executer_start <= 1'd0;
    builder_basesoc_refresher_next_state <= builder_basesoc_refresher_state;
    case (builder_basesoc_refresher_state)
        1'd1: begin
            main_sdram_cmd_valid <= 1'd1;
            if (main_sdram_cmd_ready) begin
                main_sdram_sequencer_start0 <= 1'd1;
                builder_basesoc_refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_sdram_cmd_valid <= 1'd1;
            if (main_sdram_sequencer_done0) begin
                if (main_sdram_wants_zqcs) begin
                    main_sdram_zqcs_executer_start <= 1'd1;
                    builder_basesoc_refresher_next_state <= 2'd3;
                end else begin
                    main_sdram_cmd_valid <= 1'd0;
                    main_sdram_cmd_last <= 1'd1;
                    builder_basesoc_refresher_next_state <= 1'd0;
                end
            end
        end
        2'd3: begin
            main_sdram_cmd_valid <= 1'd1;
            if (main_sdram_zqcs_executer_done) begin
                main_sdram_cmd_valid <= 1'd0;
                main_sdram_cmd_last <= 1'd1;
                builder_basesoc_refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (main_sdram_wants_refresh) begin
                    builder_basesoc_refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine0_sink_valid = main_sdram_bankmachine0_req_valid;
assign main_sdram_bankmachine0_req_ready = main_sdram_bankmachine0_sink_ready;
assign main_sdram_bankmachine0_sink_payload_we = main_sdram_bankmachine0_req_we;
assign main_sdram_bankmachine0_sink_payload_addr = main_sdram_bankmachine0_req_addr;
assign main_sdram_bankmachine0_sink_sink_valid = main_sdram_bankmachine0_source_valid;
assign main_sdram_bankmachine0_source_ready = main_sdram_bankmachine0_sink_sink_ready;
assign main_sdram_bankmachine0_sink_sink_first = main_sdram_bankmachine0_source_first;
assign main_sdram_bankmachine0_sink_sink_last = main_sdram_bankmachine0_source_last;
assign main_sdram_bankmachine0_sink_sink_payload_we = main_sdram_bankmachine0_source_payload_we;
assign main_sdram_bankmachine0_sink_sink_payload_addr = main_sdram_bankmachine0_source_payload_addr;
assign main_sdram_bankmachine0_source_source_ready = (main_sdram_bankmachine0_req_wdata_ready | main_sdram_bankmachine0_req_rdata_valid);
assign main_sdram_bankmachine0_req_lock = (main_sdram_bankmachine0_source_valid | main_sdram_bankmachine0_source_source_valid);
assign main_sdram_bankmachine0_row_hit = (main_sdram_bankmachine0_row == main_sdram_bankmachine0_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    main_sdram_bankmachine0_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine0_row_col_n_addr_sel) begin
        main_sdram_bankmachine0_cmd_payload_a <= main_sdram_bankmachine0_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine0_cmd_payload_a <= ((main_sdram_bankmachine0_auto_precharge <<< 4'd10) | {main_sdram_bankmachine0_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine0_twtpcon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_cmd_payload_is_write);
assign main_sdram_bankmachine0_trccon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
assign main_sdram_bankmachine0_trascon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
always @(*) begin
    main_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine0_source_valid & main_sdram_bankmachine0_source_source_valid)) begin
        if ((main_sdram_bankmachine0_source_payload_addr[22:7] != main_sdram_bankmachine0_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine0_auto_precharge <= (main_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine0_syncfifo0_din = {main_sdram_bankmachine0_fifo_in_last, main_sdram_bankmachine0_fifo_in_first, main_sdram_bankmachine0_fifo_in_payload_addr, main_sdram_bankmachine0_fifo_in_payload_we};
assign {main_sdram_bankmachine0_fifo_out_last, main_sdram_bankmachine0_fifo_out_first, main_sdram_bankmachine0_fifo_out_payload_addr, main_sdram_bankmachine0_fifo_out_payload_we} = main_sdram_bankmachine0_syncfifo0_dout;
assign main_sdram_bankmachine0_sink_ready = main_sdram_bankmachine0_syncfifo0_writable;
assign main_sdram_bankmachine0_syncfifo0_we = main_sdram_bankmachine0_sink_valid;
assign main_sdram_bankmachine0_fifo_in_first = main_sdram_bankmachine0_sink_first;
assign main_sdram_bankmachine0_fifo_in_last = main_sdram_bankmachine0_sink_last;
assign main_sdram_bankmachine0_fifo_in_payload_we = main_sdram_bankmachine0_sink_payload_we;
assign main_sdram_bankmachine0_fifo_in_payload_addr = main_sdram_bankmachine0_sink_payload_addr;
assign main_sdram_bankmachine0_source_valid = main_sdram_bankmachine0_syncfifo0_readable;
assign main_sdram_bankmachine0_source_first = main_sdram_bankmachine0_fifo_out_first;
assign main_sdram_bankmachine0_source_last = main_sdram_bankmachine0_fifo_out_last;
assign main_sdram_bankmachine0_source_payload_we = main_sdram_bankmachine0_fifo_out_payload_we;
assign main_sdram_bankmachine0_source_payload_addr = main_sdram_bankmachine0_fifo_out_payload_addr;
assign main_sdram_bankmachine0_syncfifo0_re = main_sdram_bankmachine0_source_ready;
always @(*) begin
    main_sdram_bankmachine0_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine0_replace) begin
        main_sdram_bankmachine0_wrport_adr <= (main_sdram_bankmachine0_produce - 1'd1);
    end else begin
        main_sdram_bankmachine0_wrport_adr <= main_sdram_bankmachine0_produce;
    end
end
assign main_sdram_bankmachine0_wrport_dat_w = main_sdram_bankmachine0_syncfifo0_din;
assign main_sdram_bankmachine0_wrport_we = (main_sdram_bankmachine0_syncfifo0_we & (main_sdram_bankmachine0_syncfifo0_writable | main_sdram_bankmachine0_replace));
assign main_sdram_bankmachine0_do_read = (main_sdram_bankmachine0_syncfifo0_readable & main_sdram_bankmachine0_syncfifo0_re);
assign main_sdram_bankmachine0_rdport_adr = main_sdram_bankmachine0_consume;
assign main_sdram_bankmachine0_syncfifo0_dout = main_sdram_bankmachine0_rdport_dat_r;
assign main_sdram_bankmachine0_syncfifo0_writable = (main_sdram_bankmachine0_level != 4'd8);
assign main_sdram_bankmachine0_syncfifo0_readable = (main_sdram_bankmachine0_level != 1'd0);
assign main_sdram_bankmachine0_pipe_valid_sink_ready = ((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready);
assign main_sdram_bankmachine0_pipe_valid_sink_valid = main_sdram_bankmachine0_sink_sink_valid;
assign main_sdram_bankmachine0_sink_sink_ready = main_sdram_bankmachine0_pipe_valid_sink_ready;
assign main_sdram_bankmachine0_pipe_valid_sink_first = main_sdram_bankmachine0_sink_sink_first;
assign main_sdram_bankmachine0_pipe_valid_sink_last = main_sdram_bankmachine0_sink_sink_last;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_we = main_sdram_bankmachine0_sink_sink_payload_we;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_addr = main_sdram_bankmachine0_sink_sink_payload_addr;
assign main_sdram_bankmachine0_source_source_valid = main_sdram_bankmachine0_pipe_valid_source_valid;
assign main_sdram_bankmachine0_pipe_valid_source_ready = main_sdram_bankmachine0_source_source_ready;
assign main_sdram_bankmachine0_source_source_first = main_sdram_bankmachine0_pipe_valid_source_first;
assign main_sdram_bankmachine0_source_source_last = main_sdram_bankmachine0_pipe_valid_source_last;
assign main_sdram_bankmachine0_source_source_payload_we = main_sdram_bankmachine0_pipe_valid_source_payload_we;
assign main_sdram_bankmachine0_source_source_payload_addr = main_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine0_next_state <= 4'd0;
    main_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine0_cmd_valid <= 1'd0;
    main_sdram_bankmachine0_refresh_gnt <= 1'd0;
    main_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine0_row_close <= 1'd0;
    main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine0_row_open <= 1'd0;
    builder_basesoc_bankmachine0_next_state <= builder_basesoc_bankmachine0_state;
    case (builder_basesoc_bankmachine0_state)
        1'd1: begin
            if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
                main_sdram_bankmachine0_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine0_cmd_ready) begin
                    builder_basesoc_bankmachine0_next_state <= 3'd5;
                end
                main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
                builder_basesoc_bankmachine0_next_state <= 3'd5;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine0_trccon_ready) begin
                main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine0_row_open <= 1'd1;
                main_sdram_bankmachine0_cmd_valid <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine0_cmd_ready) begin
                    builder_basesoc_bankmachine0_next_state <= 3'd7;
                end
                main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine0_twtpcon_ready) begin
                main_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
            main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine0_refresh_req)) begin
                builder_basesoc_bankmachine0_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine0_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine0_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine0_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine0_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine0_refresh_req) begin
                builder_basesoc_bankmachine0_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine0_source_source_valid) begin
                    if (main_sdram_bankmachine0_row_opened) begin
                        if (main_sdram_bankmachine0_row_hit) begin
                            main_sdram_bankmachine0_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine0_source_source_payload_we) begin
                                main_sdram_bankmachine0_req_wdata_ready <= main_sdram_bankmachine0_cmd_ready;
                                main_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine0_req_rdata_valid <= main_sdram_bankmachine0_cmd_ready;
                                main_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine0_cmd_ready & main_sdram_bankmachine0_auto_precharge)) begin
                                builder_basesoc_bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine1_sink_valid = main_sdram_bankmachine1_req_valid;
assign main_sdram_bankmachine1_req_ready = main_sdram_bankmachine1_sink_ready;
assign main_sdram_bankmachine1_sink_payload_we = main_sdram_bankmachine1_req_we;
assign main_sdram_bankmachine1_sink_payload_addr = main_sdram_bankmachine1_req_addr;
assign main_sdram_bankmachine1_sink_sink_valid = main_sdram_bankmachine1_source_valid;
assign main_sdram_bankmachine1_source_ready = main_sdram_bankmachine1_sink_sink_ready;
assign main_sdram_bankmachine1_sink_sink_first = main_sdram_bankmachine1_source_first;
assign main_sdram_bankmachine1_sink_sink_last = main_sdram_bankmachine1_source_last;
assign main_sdram_bankmachine1_sink_sink_payload_we = main_sdram_bankmachine1_source_payload_we;
assign main_sdram_bankmachine1_sink_sink_payload_addr = main_sdram_bankmachine1_source_payload_addr;
assign main_sdram_bankmachine1_source_source_ready = (main_sdram_bankmachine1_req_wdata_ready | main_sdram_bankmachine1_req_rdata_valid);
assign main_sdram_bankmachine1_req_lock = (main_sdram_bankmachine1_source_valid | main_sdram_bankmachine1_source_source_valid);
assign main_sdram_bankmachine1_row_hit = (main_sdram_bankmachine1_row == main_sdram_bankmachine1_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    main_sdram_bankmachine1_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine1_row_col_n_addr_sel) begin
        main_sdram_bankmachine1_cmd_payload_a <= main_sdram_bankmachine1_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine1_cmd_payload_a <= ((main_sdram_bankmachine1_auto_precharge <<< 4'd10) | {main_sdram_bankmachine1_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine1_twtpcon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_cmd_payload_is_write);
assign main_sdram_bankmachine1_trccon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
assign main_sdram_bankmachine1_trascon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
always @(*) begin
    main_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine1_source_valid & main_sdram_bankmachine1_source_source_valid)) begin
        if ((main_sdram_bankmachine1_source_payload_addr[22:7] != main_sdram_bankmachine1_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine1_auto_precharge <= (main_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine1_syncfifo1_din = {main_sdram_bankmachine1_fifo_in_last, main_sdram_bankmachine1_fifo_in_first, main_sdram_bankmachine1_fifo_in_payload_addr, main_sdram_bankmachine1_fifo_in_payload_we};
assign {main_sdram_bankmachine1_fifo_out_last, main_sdram_bankmachine1_fifo_out_first, main_sdram_bankmachine1_fifo_out_payload_addr, main_sdram_bankmachine1_fifo_out_payload_we} = main_sdram_bankmachine1_syncfifo1_dout;
assign main_sdram_bankmachine1_sink_ready = main_sdram_bankmachine1_syncfifo1_writable;
assign main_sdram_bankmachine1_syncfifo1_we = main_sdram_bankmachine1_sink_valid;
assign main_sdram_bankmachine1_fifo_in_first = main_sdram_bankmachine1_sink_first;
assign main_sdram_bankmachine1_fifo_in_last = main_sdram_bankmachine1_sink_last;
assign main_sdram_bankmachine1_fifo_in_payload_we = main_sdram_bankmachine1_sink_payload_we;
assign main_sdram_bankmachine1_fifo_in_payload_addr = main_sdram_bankmachine1_sink_payload_addr;
assign main_sdram_bankmachine1_source_valid = main_sdram_bankmachine1_syncfifo1_readable;
assign main_sdram_bankmachine1_source_first = main_sdram_bankmachine1_fifo_out_first;
assign main_sdram_bankmachine1_source_last = main_sdram_bankmachine1_fifo_out_last;
assign main_sdram_bankmachine1_source_payload_we = main_sdram_bankmachine1_fifo_out_payload_we;
assign main_sdram_bankmachine1_source_payload_addr = main_sdram_bankmachine1_fifo_out_payload_addr;
assign main_sdram_bankmachine1_syncfifo1_re = main_sdram_bankmachine1_source_ready;
always @(*) begin
    main_sdram_bankmachine1_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine1_replace) begin
        main_sdram_bankmachine1_wrport_adr <= (main_sdram_bankmachine1_produce - 1'd1);
    end else begin
        main_sdram_bankmachine1_wrport_adr <= main_sdram_bankmachine1_produce;
    end
end
assign main_sdram_bankmachine1_wrport_dat_w = main_sdram_bankmachine1_syncfifo1_din;
assign main_sdram_bankmachine1_wrport_we = (main_sdram_bankmachine1_syncfifo1_we & (main_sdram_bankmachine1_syncfifo1_writable | main_sdram_bankmachine1_replace));
assign main_sdram_bankmachine1_do_read = (main_sdram_bankmachine1_syncfifo1_readable & main_sdram_bankmachine1_syncfifo1_re);
assign main_sdram_bankmachine1_rdport_adr = main_sdram_bankmachine1_consume;
assign main_sdram_bankmachine1_syncfifo1_dout = main_sdram_bankmachine1_rdport_dat_r;
assign main_sdram_bankmachine1_syncfifo1_writable = (main_sdram_bankmachine1_level != 4'd8);
assign main_sdram_bankmachine1_syncfifo1_readable = (main_sdram_bankmachine1_level != 1'd0);
assign main_sdram_bankmachine1_pipe_valid_sink_ready = ((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready);
assign main_sdram_bankmachine1_pipe_valid_sink_valid = main_sdram_bankmachine1_sink_sink_valid;
assign main_sdram_bankmachine1_sink_sink_ready = main_sdram_bankmachine1_pipe_valid_sink_ready;
assign main_sdram_bankmachine1_pipe_valid_sink_first = main_sdram_bankmachine1_sink_sink_first;
assign main_sdram_bankmachine1_pipe_valid_sink_last = main_sdram_bankmachine1_sink_sink_last;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_we = main_sdram_bankmachine1_sink_sink_payload_we;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_addr = main_sdram_bankmachine1_sink_sink_payload_addr;
assign main_sdram_bankmachine1_source_source_valid = main_sdram_bankmachine1_pipe_valid_source_valid;
assign main_sdram_bankmachine1_pipe_valid_source_ready = main_sdram_bankmachine1_source_source_ready;
assign main_sdram_bankmachine1_source_source_first = main_sdram_bankmachine1_pipe_valid_source_first;
assign main_sdram_bankmachine1_source_source_last = main_sdram_bankmachine1_pipe_valid_source_last;
assign main_sdram_bankmachine1_source_source_payload_we = main_sdram_bankmachine1_pipe_valid_source_payload_we;
assign main_sdram_bankmachine1_source_source_payload_addr = main_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine1_next_state <= 4'd0;
    main_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine1_cmd_valid <= 1'd0;
    main_sdram_bankmachine1_refresh_gnt <= 1'd0;
    main_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine1_row_close <= 1'd0;
    main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine1_row_open <= 1'd0;
    builder_basesoc_bankmachine1_next_state <= builder_basesoc_bankmachine1_state;
    case (builder_basesoc_bankmachine1_state)
        1'd1: begin
            if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
                main_sdram_bankmachine1_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine1_cmd_ready) begin
                    builder_basesoc_bankmachine1_next_state <= 3'd5;
                end
                main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
                builder_basesoc_bankmachine1_next_state <= 3'd5;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine1_trccon_ready) begin
                main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine1_row_open <= 1'd1;
                main_sdram_bankmachine1_cmd_valid <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine1_cmd_ready) begin
                    builder_basesoc_bankmachine1_next_state <= 3'd7;
                end
                main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine1_twtpcon_ready) begin
                main_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
            main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine1_refresh_req)) begin
                builder_basesoc_bankmachine1_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine1_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine1_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine1_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine1_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine1_refresh_req) begin
                builder_basesoc_bankmachine1_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine1_source_source_valid) begin
                    if (main_sdram_bankmachine1_row_opened) begin
                        if (main_sdram_bankmachine1_row_hit) begin
                            main_sdram_bankmachine1_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine1_source_source_payload_we) begin
                                main_sdram_bankmachine1_req_wdata_ready <= main_sdram_bankmachine1_cmd_ready;
                                main_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine1_req_rdata_valid <= main_sdram_bankmachine1_cmd_ready;
                                main_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine1_cmd_ready & main_sdram_bankmachine1_auto_precharge)) begin
                                builder_basesoc_bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine2_sink_valid = main_sdram_bankmachine2_req_valid;
assign main_sdram_bankmachine2_req_ready = main_sdram_bankmachine2_sink_ready;
assign main_sdram_bankmachine2_sink_payload_we = main_sdram_bankmachine2_req_we;
assign main_sdram_bankmachine2_sink_payload_addr = main_sdram_bankmachine2_req_addr;
assign main_sdram_bankmachine2_sink_sink_valid = main_sdram_bankmachine2_source_valid;
assign main_sdram_bankmachine2_source_ready = main_sdram_bankmachine2_sink_sink_ready;
assign main_sdram_bankmachine2_sink_sink_first = main_sdram_bankmachine2_source_first;
assign main_sdram_bankmachine2_sink_sink_last = main_sdram_bankmachine2_source_last;
assign main_sdram_bankmachine2_sink_sink_payload_we = main_sdram_bankmachine2_source_payload_we;
assign main_sdram_bankmachine2_sink_sink_payload_addr = main_sdram_bankmachine2_source_payload_addr;
assign main_sdram_bankmachine2_source_source_ready = (main_sdram_bankmachine2_req_wdata_ready | main_sdram_bankmachine2_req_rdata_valid);
assign main_sdram_bankmachine2_req_lock = (main_sdram_bankmachine2_source_valid | main_sdram_bankmachine2_source_source_valid);
assign main_sdram_bankmachine2_row_hit = (main_sdram_bankmachine2_row == main_sdram_bankmachine2_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    main_sdram_bankmachine2_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine2_row_col_n_addr_sel) begin
        main_sdram_bankmachine2_cmd_payload_a <= main_sdram_bankmachine2_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine2_cmd_payload_a <= ((main_sdram_bankmachine2_auto_precharge <<< 4'd10) | {main_sdram_bankmachine2_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine2_twtpcon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_cmd_payload_is_write);
assign main_sdram_bankmachine2_trccon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
assign main_sdram_bankmachine2_trascon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
always @(*) begin
    main_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine2_source_valid & main_sdram_bankmachine2_source_source_valid)) begin
        if ((main_sdram_bankmachine2_source_payload_addr[22:7] != main_sdram_bankmachine2_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine2_auto_precharge <= (main_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine2_syncfifo2_din = {main_sdram_bankmachine2_fifo_in_last, main_sdram_bankmachine2_fifo_in_first, main_sdram_bankmachine2_fifo_in_payload_addr, main_sdram_bankmachine2_fifo_in_payload_we};
assign {main_sdram_bankmachine2_fifo_out_last, main_sdram_bankmachine2_fifo_out_first, main_sdram_bankmachine2_fifo_out_payload_addr, main_sdram_bankmachine2_fifo_out_payload_we} = main_sdram_bankmachine2_syncfifo2_dout;
assign main_sdram_bankmachine2_sink_ready = main_sdram_bankmachine2_syncfifo2_writable;
assign main_sdram_bankmachine2_syncfifo2_we = main_sdram_bankmachine2_sink_valid;
assign main_sdram_bankmachine2_fifo_in_first = main_sdram_bankmachine2_sink_first;
assign main_sdram_bankmachine2_fifo_in_last = main_sdram_bankmachine2_sink_last;
assign main_sdram_bankmachine2_fifo_in_payload_we = main_sdram_bankmachine2_sink_payload_we;
assign main_sdram_bankmachine2_fifo_in_payload_addr = main_sdram_bankmachine2_sink_payload_addr;
assign main_sdram_bankmachine2_source_valid = main_sdram_bankmachine2_syncfifo2_readable;
assign main_sdram_bankmachine2_source_first = main_sdram_bankmachine2_fifo_out_first;
assign main_sdram_bankmachine2_source_last = main_sdram_bankmachine2_fifo_out_last;
assign main_sdram_bankmachine2_source_payload_we = main_sdram_bankmachine2_fifo_out_payload_we;
assign main_sdram_bankmachine2_source_payload_addr = main_sdram_bankmachine2_fifo_out_payload_addr;
assign main_sdram_bankmachine2_syncfifo2_re = main_sdram_bankmachine2_source_ready;
always @(*) begin
    main_sdram_bankmachine2_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine2_replace) begin
        main_sdram_bankmachine2_wrport_adr <= (main_sdram_bankmachine2_produce - 1'd1);
    end else begin
        main_sdram_bankmachine2_wrport_adr <= main_sdram_bankmachine2_produce;
    end
end
assign main_sdram_bankmachine2_wrport_dat_w = main_sdram_bankmachine2_syncfifo2_din;
assign main_sdram_bankmachine2_wrport_we = (main_sdram_bankmachine2_syncfifo2_we & (main_sdram_bankmachine2_syncfifo2_writable | main_sdram_bankmachine2_replace));
assign main_sdram_bankmachine2_do_read = (main_sdram_bankmachine2_syncfifo2_readable & main_sdram_bankmachine2_syncfifo2_re);
assign main_sdram_bankmachine2_rdport_adr = main_sdram_bankmachine2_consume;
assign main_sdram_bankmachine2_syncfifo2_dout = main_sdram_bankmachine2_rdport_dat_r;
assign main_sdram_bankmachine2_syncfifo2_writable = (main_sdram_bankmachine2_level != 4'd8);
assign main_sdram_bankmachine2_syncfifo2_readable = (main_sdram_bankmachine2_level != 1'd0);
assign main_sdram_bankmachine2_pipe_valid_sink_ready = ((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready);
assign main_sdram_bankmachine2_pipe_valid_sink_valid = main_sdram_bankmachine2_sink_sink_valid;
assign main_sdram_bankmachine2_sink_sink_ready = main_sdram_bankmachine2_pipe_valid_sink_ready;
assign main_sdram_bankmachine2_pipe_valid_sink_first = main_sdram_bankmachine2_sink_sink_first;
assign main_sdram_bankmachine2_pipe_valid_sink_last = main_sdram_bankmachine2_sink_sink_last;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_we = main_sdram_bankmachine2_sink_sink_payload_we;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_addr = main_sdram_bankmachine2_sink_sink_payload_addr;
assign main_sdram_bankmachine2_source_source_valid = main_sdram_bankmachine2_pipe_valid_source_valid;
assign main_sdram_bankmachine2_pipe_valid_source_ready = main_sdram_bankmachine2_source_source_ready;
assign main_sdram_bankmachine2_source_source_first = main_sdram_bankmachine2_pipe_valid_source_first;
assign main_sdram_bankmachine2_source_source_last = main_sdram_bankmachine2_pipe_valid_source_last;
assign main_sdram_bankmachine2_source_source_payload_we = main_sdram_bankmachine2_pipe_valid_source_payload_we;
assign main_sdram_bankmachine2_source_source_payload_addr = main_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine2_next_state <= 4'd0;
    main_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine2_cmd_valid <= 1'd0;
    main_sdram_bankmachine2_refresh_gnt <= 1'd0;
    main_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine2_row_close <= 1'd0;
    main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine2_row_open <= 1'd0;
    builder_basesoc_bankmachine2_next_state <= builder_basesoc_bankmachine2_state;
    case (builder_basesoc_bankmachine2_state)
        1'd1: begin
            if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
                main_sdram_bankmachine2_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine2_cmd_ready) begin
                    builder_basesoc_bankmachine2_next_state <= 3'd5;
                end
                main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
                builder_basesoc_bankmachine2_next_state <= 3'd5;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine2_trccon_ready) begin
                main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine2_row_open <= 1'd1;
                main_sdram_bankmachine2_cmd_valid <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine2_cmd_ready) begin
                    builder_basesoc_bankmachine2_next_state <= 3'd7;
                end
                main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine2_twtpcon_ready) begin
                main_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
            main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine2_refresh_req)) begin
                builder_basesoc_bankmachine2_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine2_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine2_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine2_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine2_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine2_refresh_req) begin
                builder_basesoc_bankmachine2_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine2_source_source_valid) begin
                    if (main_sdram_bankmachine2_row_opened) begin
                        if (main_sdram_bankmachine2_row_hit) begin
                            main_sdram_bankmachine2_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine2_source_source_payload_we) begin
                                main_sdram_bankmachine2_req_wdata_ready <= main_sdram_bankmachine2_cmd_ready;
                                main_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine2_req_rdata_valid <= main_sdram_bankmachine2_cmd_ready;
                                main_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine2_cmd_ready & main_sdram_bankmachine2_auto_precharge)) begin
                                builder_basesoc_bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine3_sink_valid = main_sdram_bankmachine3_req_valid;
assign main_sdram_bankmachine3_req_ready = main_sdram_bankmachine3_sink_ready;
assign main_sdram_bankmachine3_sink_payload_we = main_sdram_bankmachine3_req_we;
assign main_sdram_bankmachine3_sink_payload_addr = main_sdram_bankmachine3_req_addr;
assign main_sdram_bankmachine3_sink_sink_valid = main_sdram_bankmachine3_source_valid;
assign main_sdram_bankmachine3_source_ready = main_sdram_bankmachine3_sink_sink_ready;
assign main_sdram_bankmachine3_sink_sink_first = main_sdram_bankmachine3_source_first;
assign main_sdram_bankmachine3_sink_sink_last = main_sdram_bankmachine3_source_last;
assign main_sdram_bankmachine3_sink_sink_payload_we = main_sdram_bankmachine3_source_payload_we;
assign main_sdram_bankmachine3_sink_sink_payload_addr = main_sdram_bankmachine3_source_payload_addr;
assign main_sdram_bankmachine3_source_source_ready = (main_sdram_bankmachine3_req_wdata_ready | main_sdram_bankmachine3_req_rdata_valid);
assign main_sdram_bankmachine3_req_lock = (main_sdram_bankmachine3_source_valid | main_sdram_bankmachine3_source_source_valid);
assign main_sdram_bankmachine3_row_hit = (main_sdram_bankmachine3_row == main_sdram_bankmachine3_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    main_sdram_bankmachine3_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine3_row_col_n_addr_sel) begin
        main_sdram_bankmachine3_cmd_payload_a <= main_sdram_bankmachine3_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine3_cmd_payload_a <= ((main_sdram_bankmachine3_auto_precharge <<< 4'd10) | {main_sdram_bankmachine3_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine3_twtpcon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_cmd_payload_is_write);
assign main_sdram_bankmachine3_trccon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
assign main_sdram_bankmachine3_trascon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
always @(*) begin
    main_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine3_source_valid & main_sdram_bankmachine3_source_source_valid)) begin
        if ((main_sdram_bankmachine3_source_payload_addr[22:7] != main_sdram_bankmachine3_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine3_auto_precharge <= (main_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine3_syncfifo3_din = {main_sdram_bankmachine3_fifo_in_last, main_sdram_bankmachine3_fifo_in_first, main_sdram_bankmachine3_fifo_in_payload_addr, main_sdram_bankmachine3_fifo_in_payload_we};
assign {main_sdram_bankmachine3_fifo_out_last, main_sdram_bankmachine3_fifo_out_first, main_sdram_bankmachine3_fifo_out_payload_addr, main_sdram_bankmachine3_fifo_out_payload_we} = main_sdram_bankmachine3_syncfifo3_dout;
assign main_sdram_bankmachine3_sink_ready = main_sdram_bankmachine3_syncfifo3_writable;
assign main_sdram_bankmachine3_syncfifo3_we = main_sdram_bankmachine3_sink_valid;
assign main_sdram_bankmachine3_fifo_in_first = main_sdram_bankmachine3_sink_first;
assign main_sdram_bankmachine3_fifo_in_last = main_sdram_bankmachine3_sink_last;
assign main_sdram_bankmachine3_fifo_in_payload_we = main_sdram_bankmachine3_sink_payload_we;
assign main_sdram_bankmachine3_fifo_in_payload_addr = main_sdram_bankmachine3_sink_payload_addr;
assign main_sdram_bankmachine3_source_valid = main_sdram_bankmachine3_syncfifo3_readable;
assign main_sdram_bankmachine3_source_first = main_sdram_bankmachine3_fifo_out_first;
assign main_sdram_bankmachine3_source_last = main_sdram_bankmachine3_fifo_out_last;
assign main_sdram_bankmachine3_source_payload_we = main_sdram_bankmachine3_fifo_out_payload_we;
assign main_sdram_bankmachine3_source_payload_addr = main_sdram_bankmachine3_fifo_out_payload_addr;
assign main_sdram_bankmachine3_syncfifo3_re = main_sdram_bankmachine3_source_ready;
always @(*) begin
    main_sdram_bankmachine3_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine3_replace) begin
        main_sdram_bankmachine3_wrport_adr <= (main_sdram_bankmachine3_produce - 1'd1);
    end else begin
        main_sdram_bankmachine3_wrport_adr <= main_sdram_bankmachine3_produce;
    end
end
assign main_sdram_bankmachine3_wrport_dat_w = main_sdram_bankmachine3_syncfifo3_din;
assign main_sdram_bankmachine3_wrport_we = (main_sdram_bankmachine3_syncfifo3_we & (main_sdram_bankmachine3_syncfifo3_writable | main_sdram_bankmachine3_replace));
assign main_sdram_bankmachine3_do_read = (main_sdram_bankmachine3_syncfifo3_readable & main_sdram_bankmachine3_syncfifo3_re);
assign main_sdram_bankmachine3_rdport_adr = main_sdram_bankmachine3_consume;
assign main_sdram_bankmachine3_syncfifo3_dout = main_sdram_bankmachine3_rdport_dat_r;
assign main_sdram_bankmachine3_syncfifo3_writable = (main_sdram_bankmachine3_level != 4'd8);
assign main_sdram_bankmachine3_syncfifo3_readable = (main_sdram_bankmachine3_level != 1'd0);
assign main_sdram_bankmachine3_pipe_valid_sink_ready = ((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready);
assign main_sdram_bankmachine3_pipe_valid_sink_valid = main_sdram_bankmachine3_sink_sink_valid;
assign main_sdram_bankmachine3_sink_sink_ready = main_sdram_bankmachine3_pipe_valid_sink_ready;
assign main_sdram_bankmachine3_pipe_valid_sink_first = main_sdram_bankmachine3_sink_sink_first;
assign main_sdram_bankmachine3_pipe_valid_sink_last = main_sdram_bankmachine3_sink_sink_last;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_we = main_sdram_bankmachine3_sink_sink_payload_we;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_addr = main_sdram_bankmachine3_sink_sink_payload_addr;
assign main_sdram_bankmachine3_source_source_valid = main_sdram_bankmachine3_pipe_valid_source_valid;
assign main_sdram_bankmachine3_pipe_valid_source_ready = main_sdram_bankmachine3_source_source_ready;
assign main_sdram_bankmachine3_source_source_first = main_sdram_bankmachine3_pipe_valid_source_first;
assign main_sdram_bankmachine3_source_source_last = main_sdram_bankmachine3_pipe_valid_source_last;
assign main_sdram_bankmachine3_source_source_payload_we = main_sdram_bankmachine3_pipe_valid_source_payload_we;
assign main_sdram_bankmachine3_source_source_payload_addr = main_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine3_next_state <= 4'd0;
    main_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine3_cmd_valid <= 1'd0;
    main_sdram_bankmachine3_refresh_gnt <= 1'd0;
    main_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine3_row_close <= 1'd0;
    main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine3_row_open <= 1'd0;
    builder_basesoc_bankmachine3_next_state <= builder_basesoc_bankmachine3_state;
    case (builder_basesoc_bankmachine3_state)
        1'd1: begin
            if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
                main_sdram_bankmachine3_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine3_cmd_ready) begin
                    builder_basesoc_bankmachine3_next_state <= 3'd5;
                end
                main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
                builder_basesoc_bankmachine3_next_state <= 3'd5;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine3_trccon_ready) begin
                main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine3_row_open <= 1'd1;
                main_sdram_bankmachine3_cmd_valid <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine3_cmd_ready) begin
                    builder_basesoc_bankmachine3_next_state <= 3'd7;
                end
                main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine3_twtpcon_ready) begin
                main_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
            main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine3_refresh_req)) begin
                builder_basesoc_bankmachine3_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine3_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine3_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine3_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine3_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine3_refresh_req) begin
                builder_basesoc_bankmachine3_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine3_source_source_valid) begin
                    if (main_sdram_bankmachine3_row_opened) begin
                        if (main_sdram_bankmachine3_row_hit) begin
                            main_sdram_bankmachine3_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine3_source_source_payload_we) begin
                                main_sdram_bankmachine3_req_wdata_ready <= main_sdram_bankmachine3_cmd_ready;
                                main_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine3_req_rdata_valid <= main_sdram_bankmachine3_cmd_ready;
                                main_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine3_cmd_ready & main_sdram_bankmachine3_auto_precharge)) begin
                                builder_basesoc_bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine4_sink_valid = main_sdram_bankmachine4_req_valid;
assign main_sdram_bankmachine4_req_ready = main_sdram_bankmachine4_sink_ready;
assign main_sdram_bankmachine4_sink_payload_we = main_sdram_bankmachine4_req_we;
assign main_sdram_bankmachine4_sink_payload_addr = main_sdram_bankmachine4_req_addr;
assign main_sdram_bankmachine4_sink_sink_valid = main_sdram_bankmachine4_source_valid;
assign main_sdram_bankmachine4_source_ready = main_sdram_bankmachine4_sink_sink_ready;
assign main_sdram_bankmachine4_sink_sink_first = main_sdram_bankmachine4_source_first;
assign main_sdram_bankmachine4_sink_sink_last = main_sdram_bankmachine4_source_last;
assign main_sdram_bankmachine4_sink_sink_payload_we = main_sdram_bankmachine4_source_payload_we;
assign main_sdram_bankmachine4_sink_sink_payload_addr = main_sdram_bankmachine4_source_payload_addr;
assign main_sdram_bankmachine4_source_source_ready = (main_sdram_bankmachine4_req_wdata_ready | main_sdram_bankmachine4_req_rdata_valid);
assign main_sdram_bankmachine4_req_lock = (main_sdram_bankmachine4_source_valid | main_sdram_bankmachine4_source_source_valid);
assign main_sdram_bankmachine4_row_hit = (main_sdram_bankmachine4_row == main_sdram_bankmachine4_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine4_cmd_payload_ba = 3'd4;
always @(*) begin
    main_sdram_bankmachine4_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine4_row_col_n_addr_sel) begin
        main_sdram_bankmachine4_cmd_payload_a <= main_sdram_bankmachine4_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine4_cmd_payload_a <= ((main_sdram_bankmachine4_auto_precharge <<< 4'd10) | {main_sdram_bankmachine4_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine4_twtpcon_valid = ((main_sdram_bankmachine4_cmd_valid & main_sdram_bankmachine4_cmd_ready) & main_sdram_bankmachine4_cmd_payload_is_write);
assign main_sdram_bankmachine4_trccon_valid = ((main_sdram_bankmachine4_cmd_valid & main_sdram_bankmachine4_cmd_ready) & main_sdram_bankmachine4_row_open);
assign main_sdram_bankmachine4_trascon_valid = ((main_sdram_bankmachine4_cmd_valid & main_sdram_bankmachine4_cmd_ready) & main_sdram_bankmachine4_row_open);
always @(*) begin
    main_sdram_bankmachine4_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine4_source_valid & main_sdram_bankmachine4_source_source_valid)) begin
        if ((main_sdram_bankmachine4_source_payload_addr[22:7] != main_sdram_bankmachine4_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine4_auto_precharge <= (main_sdram_bankmachine4_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine4_syncfifo4_din = {main_sdram_bankmachine4_fifo_in_last, main_sdram_bankmachine4_fifo_in_first, main_sdram_bankmachine4_fifo_in_payload_addr, main_sdram_bankmachine4_fifo_in_payload_we};
assign {main_sdram_bankmachine4_fifo_out_last, main_sdram_bankmachine4_fifo_out_first, main_sdram_bankmachine4_fifo_out_payload_addr, main_sdram_bankmachine4_fifo_out_payload_we} = main_sdram_bankmachine4_syncfifo4_dout;
assign main_sdram_bankmachine4_sink_ready = main_sdram_bankmachine4_syncfifo4_writable;
assign main_sdram_bankmachine4_syncfifo4_we = main_sdram_bankmachine4_sink_valid;
assign main_sdram_bankmachine4_fifo_in_first = main_sdram_bankmachine4_sink_first;
assign main_sdram_bankmachine4_fifo_in_last = main_sdram_bankmachine4_sink_last;
assign main_sdram_bankmachine4_fifo_in_payload_we = main_sdram_bankmachine4_sink_payload_we;
assign main_sdram_bankmachine4_fifo_in_payload_addr = main_sdram_bankmachine4_sink_payload_addr;
assign main_sdram_bankmachine4_source_valid = main_sdram_bankmachine4_syncfifo4_readable;
assign main_sdram_bankmachine4_source_first = main_sdram_bankmachine4_fifo_out_first;
assign main_sdram_bankmachine4_source_last = main_sdram_bankmachine4_fifo_out_last;
assign main_sdram_bankmachine4_source_payload_we = main_sdram_bankmachine4_fifo_out_payload_we;
assign main_sdram_bankmachine4_source_payload_addr = main_sdram_bankmachine4_fifo_out_payload_addr;
assign main_sdram_bankmachine4_syncfifo4_re = main_sdram_bankmachine4_source_ready;
always @(*) begin
    main_sdram_bankmachine4_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine4_replace) begin
        main_sdram_bankmachine4_wrport_adr <= (main_sdram_bankmachine4_produce - 1'd1);
    end else begin
        main_sdram_bankmachine4_wrport_adr <= main_sdram_bankmachine4_produce;
    end
end
assign main_sdram_bankmachine4_wrport_dat_w = main_sdram_bankmachine4_syncfifo4_din;
assign main_sdram_bankmachine4_wrport_we = (main_sdram_bankmachine4_syncfifo4_we & (main_sdram_bankmachine4_syncfifo4_writable | main_sdram_bankmachine4_replace));
assign main_sdram_bankmachine4_do_read = (main_sdram_bankmachine4_syncfifo4_readable & main_sdram_bankmachine4_syncfifo4_re);
assign main_sdram_bankmachine4_rdport_adr = main_sdram_bankmachine4_consume;
assign main_sdram_bankmachine4_syncfifo4_dout = main_sdram_bankmachine4_rdport_dat_r;
assign main_sdram_bankmachine4_syncfifo4_writable = (main_sdram_bankmachine4_level != 4'd8);
assign main_sdram_bankmachine4_syncfifo4_readable = (main_sdram_bankmachine4_level != 1'd0);
assign main_sdram_bankmachine4_pipe_valid_sink_ready = ((~main_sdram_bankmachine4_pipe_valid_source_valid) | main_sdram_bankmachine4_pipe_valid_source_ready);
assign main_sdram_bankmachine4_pipe_valid_sink_valid = main_sdram_bankmachine4_sink_sink_valid;
assign main_sdram_bankmachine4_sink_sink_ready = main_sdram_bankmachine4_pipe_valid_sink_ready;
assign main_sdram_bankmachine4_pipe_valid_sink_first = main_sdram_bankmachine4_sink_sink_first;
assign main_sdram_bankmachine4_pipe_valid_sink_last = main_sdram_bankmachine4_sink_sink_last;
assign main_sdram_bankmachine4_pipe_valid_sink_payload_we = main_sdram_bankmachine4_sink_sink_payload_we;
assign main_sdram_bankmachine4_pipe_valid_sink_payload_addr = main_sdram_bankmachine4_sink_sink_payload_addr;
assign main_sdram_bankmachine4_source_source_valid = main_sdram_bankmachine4_pipe_valid_source_valid;
assign main_sdram_bankmachine4_pipe_valid_source_ready = main_sdram_bankmachine4_source_source_ready;
assign main_sdram_bankmachine4_source_source_first = main_sdram_bankmachine4_pipe_valid_source_first;
assign main_sdram_bankmachine4_source_source_last = main_sdram_bankmachine4_pipe_valid_source_last;
assign main_sdram_bankmachine4_source_source_payload_we = main_sdram_bankmachine4_pipe_valid_source_payload_we;
assign main_sdram_bankmachine4_source_source_payload_addr = main_sdram_bankmachine4_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine4_next_state <= 4'd0;
    main_sdram_bankmachine4_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine4_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine4_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine4_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine4_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine4_cmd_valid <= 1'd0;
    main_sdram_bankmachine4_refresh_gnt <= 1'd0;
    main_sdram_bankmachine4_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine4_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine4_row_close <= 1'd0;
    main_sdram_bankmachine4_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine4_row_open <= 1'd0;
    builder_basesoc_bankmachine4_next_state <= builder_basesoc_bankmachine4_state;
    case (builder_basesoc_bankmachine4_state)
        1'd1: begin
            if ((main_sdram_bankmachine4_twtpcon_ready & main_sdram_bankmachine4_trascon_ready)) begin
                main_sdram_bankmachine4_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine4_cmd_ready) begin
                    builder_basesoc_bankmachine4_next_state <= 3'd5;
                end
                main_sdram_bankmachine4_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine4_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine4_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine4_twtpcon_ready & main_sdram_bankmachine4_trascon_ready)) begin
                builder_basesoc_bankmachine4_next_state <= 3'd5;
            end
            main_sdram_bankmachine4_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine4_trccon_ready) begin
                main_sdram_bankmachine4_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine4_row_open <= 1'd1;
                main_sdram_bankmachine4_cmd_valid <= 1'd1;
                main_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine4_cmd_ready) begin
                    builder_basesoc_bankmachine4_next_state <= 3'd7;
                end
                main_sdram_bankmachine4_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine4_twtpcon_ready) begin
                main_sdram_bankmachine4_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine4_row_close <= 1'd1;
            main_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine4_refresh_req)) begin
                builder_basesoc_bankmachine4_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine4_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine4_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine4_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine4_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine4_refresh_req) begin
                builder_basesoc_bankmachine4_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine4_source_source_valid) begin
                    if (main_sdram_bankmachine4_row_opened) begin
                        if (main_sdram_bankmachine4_row_hit) begin
                            main_sdram_bankmachine4_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine4_source_source_payload_we) begin
                                main_sdram_bankmachine4_req_wdata_ready <= main_sdram_bankmachine4_cmd_ready;
                                main_sdram_bankmachine4_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine4_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine4_req_rdata_valid <= main_sdram_bankmachine4_cmd_ready;
                                main_sdram_bankmachine4_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine4_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine4_cmd_ready & main_sdram_bankmachine4_auto_precharge)) begin
                                builder_basesoc_bankmachine4_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine4_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine4_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine5_sink_valid = main_sdram_bankmachine5_req_valid;
assign main_sdram_bankmachine5_req_ready = main_sdram_bankmachine5_sink_ready;
assign main_sdram_bankmachine5_sink_payload_we = main_sdram_bankmachine5_req_we;
assign main_sdram_bankmachine5_sink_payload_addr = main_sdram_bankmachine5_req_addr;
assign main_sdram_bankmachine5_sink_sink_valid = main_sdram_bankmachine5_source_valid;
assign main_sdram_bankmachine5_source_ready = main_sdram_bankmachine5_sink_sink_ready;
assign main_sdram_bankmachine5_sink_sink_first = main_sdram_bankmachine5_source_first;
assign main_sdram_bankmachine5_sink_sink_last = main_sdram_bankmachine5_source_last;
assign main_sdram_bankmachine5_sink_sink_payload_we = main_sdram_bankmachine5_source_payload_we;
assign main_sdram_bankmachine5_sink_sink_payload_addr = main_sdram_bankmachine5_source_payload_addr;
assign main_sdram_bankmachine5_source_source_ready = (main_sdram_bankmachine5_req_wdata_ready | main_sdram_bankmachine5_req_rdata_valid);
assign main_sdram_bankmachine5_req_lock = (main_sdram_bankmachine5_source_valid | main_sdram_bankmachine5_source_source_valid);
assign main_sdram_bankmachine5_row_hit = (main_sdram_bankmachine5_row == main_sdram_bankmachine5_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine5_cmd_payload_ba = 3'd5;
always @(*) begin
    main_sdram_bankmachine5_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine5_row_col_n_addr_sel) begin
        main_sdram_bankmachine5_cmd_payload_a <= main_sdram_bankmachine5_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine5_cmd_payload_a <= ((main_sdram_bankmachine5_auto_precharge <<< 4'd10) | {main_sdram_bankmachine5_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine5_twtpcon_valid = ((main_sdram_bankmachine5_cmd_valid & main_sdram_bankmachine5_cmd_ready) & main_sdram_bankmachine5_cmd_payload_is_write);
assign main_sdram_bankmachine5_trccon_valid = ((main_sdram_bankmachine5_cmd_valid & main_sdram_bankmachine5_cmd_ready) & main_sdram_bankmachine5_row_open);
assign main_sdram_bankmachine5_trascon_valid = ((main_sdram_bankmachine5_cmd_valid & main_sdram_bankmachine5_cmd_ready) & main_sdram_bankmachine5_row_open);
always @(*) begin
    main_sdram_bankmachine5_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine5_source_valid & main_sdram_bankmachine5_source_source_valid)) begin
        if ((main_sdram_bankmachine5_source_payload_addr[22:7] != main_sdram_bankmachine5_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine5_auto_precharge <= (main_sdram_bankmachine5_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine5_syncfifo5_din = {main_sdram_bankmachine5_fifo_in_last, main_sdram_bankmachine5_fifo_in_first, main_sdram_bankmachine5_fifo_in_payload_addr, main_sdram_bankmachine5_fifo_in_payload_we};
assign {main_sdram_bankmachine5_fifo_out_last, main_sdram_bankmachine5_fifo_out_first, main_sdram_bankmachine5_fifo_out_payload_addr, main_sdram_bankmachine5_fifo_out_payload_we} = main_sdram_bankmachine5_syncfifo5_dout;
assign main_sdram_bankmachine5_sink_ready = main_sdram_bankmachine5_syncfifo5_writable;
assign main_sdram_bankmachine5_syncfifo5_we = main_sdram_bankmachine5_sink_valid;
assign main_sdram_bankmachine5_fifo_in_first = main_sdram_bankmachine5_sink_first;
assign main_sdram_bankmachine5_fifo_in_last = main_sdram_bankmachine5_sink_last;
assign main_sdram_bankmachine5_fifo_in_payload_we = main_sdram_bankmachine5_sink_payload_we;
assign main_sdram_bankmachine5_fifo_in_payload_addr = main_sdram_bankmachine5_sink_payload_addr;
assign main_sdram_bankmachine5_source_valid = main_sdram_bankmachine5_syncfifo5_readable;
assign main_sdram_bankmachine5_source_first = main_sdram_bankmachine5_fifo_out_first;
assign main_sdram_bankmachine5_source_last = main_sdram_bankmachine5_fifo_out_last;
assign main_sdram_bankmachine5_source_payload_we = main_sdram_bankmachine5_fifo_out_payload_we;
assign main_sdram_bankmachine5_source_payload_addr = main_sdram_bankmachine5_fifo_out_payload_addr;
assign main_sdram_bankmachine5_syncfifo5_re = main_sdram_bankmachine5_source_ready;
always @(*) begin
    main_sdram_bankmachine5_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine5_replace) begin
        main_sdram_bankmachine5_wrport_adr <= (main_sdram_bankmachine5_produce - 1'd1);
    end else begin
        main_sdram_bankmachine5_wrport_adr <= main_sdram_bankmachine5_produce;
    end
end
assign main_sdram_bankmachine5_wrport_dat_w = main_sdram_bankmachine5_syncfifo5_din;
assign main_sdram_bankmachine5_wrport_we = (main_sdram_bankmachine5_syncfifo5_we & (main_sdram_bankmachine5_syncfifo5_writable | main_sdram_bankmachine5_replace));
assign main_sdram_bankmachine5_do_read = (main_sdram_bankmachine5_syncfifo5_readable & main_sdram_bankmachine5_syncfifo5_re);
assign main_sdram_bankmachine5_rdport_adr = main_sdram_bankmachine5_consume;
assign main_sdram_bankmachine5_syncfifo5_dout = main_sdram_bankmachine5_rdport_dat_r;
assign main_sdram_bankmachine5_syncfifo5_writable = (main_sdram_bankmachine5_level != 4'd8);
assign main_sdram_bankmachine5_syncfifo5_readable = (main_sdram_bankmachine5_level != 1'd0);
assign main_sdram_bankmachine5_pipe_valid_sink_ready = ((~main_sdram_bankmachine5_pipe_valid_source_valid) | main_sdram_bankmachine5_pipe_valid_source_ready);
assign main_sdram_bankmachine5_pipe_valid_sink_valid = main_sdram_bankmachine5_sink_sink_valid;
assign main_sdram_bankmachine5_sink_sink_ready = main_sdram_bankmachine5_pipe_valid_sink_ready;
assign main_sdram_bankmachine5_pipe_valid_sink_first = main_sdram_bankmachine5_sink_sink_first;
assign main_sdram_bankmachine5_pipe_valid_sink_last = main_sdram_bankmachine5_sink_sink_last;
assign main_sdram_bankmachine5_pipe_valid_sink_payload_we = main_sdram_bankmachine5_sink_sink_payload_we;
assign main_sdram_bankmachine5_pipe_valid_sink_payload_addr = main_sdram_bankmachine5_sink_sink_payload_addr;
assign main_sdram_bankmachine5_source_source_valid = main_sdram_bankmachine5_pipe_valid_source_valid;
assign main_sdram_bankmachine5_pipe_valid_source_ready = main_sdram_bankmachine5_source_source_ready;
assign main_sdram_bankmachine5_source_source_first = main_sdram_bankmachine5_pipe_valid_source_first;
assign main_sdram_bankmachine5_source_source_last = main_sdram_bankmachine5_pipe_valid_source_last;
assign main_sdram_bankmachine5_source_source_payload_we = main_sdram_bankmachine5_pipe_valid_source_payload_we;
assign main_sdram_bankmachine5_source_source_payload_addr = main_sdram_bankmachine5_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine5_next_state <= 4'd0;
    main_sdram_bankmachine5_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine5_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine5_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine5_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine5_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine5_cmd_valid <= 1'd0;
    main_sdram_bankmachine5_refresh_gnt <= 1'd0;
    main_sdram_bankmachine5_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine5_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine5_row_close <= 1'd0;
    main_sdram_bankmachine5_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine5_row_open <= 1'd0;
    builder_basesoc_bankmachine5_next_state <= builder_basesoc_bankmachine5_state;
    case (builder_basesoc_bankmachine5_state)
        1'd1: begin
            if ((main_sdram_bankmachine5_twtpcon_ready & main_sdram_bankmachine5_trascon_ready)) begin
                main_sdram_bankmachine5_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine5_cmd_ready) begin
                    builder_basesoc_bankmachine5_next_state <= 3'd5;
                end
                main_sdram_bankmachine5_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine5_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine5_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine5_twtpcon_ready & main_sdram_bankmachine5_trascon_ready)) begin
                builder_basesoc_bankmachine5_next_state <= 3'd5;
            end
            main_sdram_bankmachine5_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine5_trccon_ready) begin
                main_sdram_bankmachine5_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine5_row_open <= 1'd1;
                main_sdram_bankmachine5_cmd_valid <= 1'd1;
                main_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine5_cmd_ready) begin
                    builder_basesoc_bankmachine5_next_state <= 3'd7;
                end
                main_sdram_bankmachine5_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine5_twtpcon_ready) begin
                main_sdram_bankmachine5_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine5_row_close <= 1'd1;
            main_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine5_refresh_req)) begin
                builder_basesoc_bankmachine5_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine5_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine5_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine5_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine5_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine5_refresh_req) begin
                builder_basesoc_bankmachine5_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine5_source_source_valid) begin
                    if (main_sdram_bankmachine5_row_opened) begin
                        if (main_sdram_bankmachine5_row_hit) begin
                            main_sdram_bankmachine5_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine5_source_source_payload_we) begin
                                main_sdram_bankmachine5_req_wdata_ready <= main_sdram_bankmachine5_cmd_ready;
                                main_sdram_bankmachine5_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine5_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine5_req_rdata_valid <= main_sdram_bankmachine5_cmd_ready;
                                main_sdram_bankmachine5_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine5_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine5_cmd_ready & main_sdram_bankmachine5_auto_precharge)) begin
                                builder_basesoc_bankmachine5_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine5_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine5_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine6_sink_valid = main_sdram_bankmachine6_req_valid;
assign main_sdram_bankmachine6_req_ready = main_sdram_bankmachine6_sink_ready;
assign main_sdram_bankmachine6_sink_payload_we = main_sdram_bankmachine6_req_we;
assign main_sdram_bankmachine6_sink_payload_addr = main_sdram_bankmachine6_req_addr;
assign main_sdram_bankmachine6_sink_sink_valid = main_sdram_bankmachine6_source_valid;
assign main_sdram_bankmachine6_source_ready = main_sdram_bankmachine6_sink_sink_ready;
assign main_sdram_bankmachine6_sink_sink_first = main_sdram_bankmachine6_source_first;
assign main_sdram_bankmachine6_sink_sink_last = main_sdram_bankmachine6_source_last;
assign main_sdram_bankmachine6_sink_sink_payload_we = main_sdram_bankmachine6_source_payload_we;
assign main_sdram_bankmachine6_sink_sink_payload_addr = main_sdram_bankmachine6_source_payload_addr;
assign main_sdram_bankmachine6_source_source_ready = (main_sdram_bankmachine6_req_wdata_ready | main_sdram_bankmachine6_req_rdata_valid);
assign main_sdram_bankmachine6_req_lock = (main_sdram_bankmachine6_source_valid | main_sdram_bankmachine6_source_source_valid);
assign main_sdram_bankmachine6_row_hit = (main_sdram_bankmachine6_row == main_sdram_bankmachine6_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine6_cmd_payload_ba = 3'd6;
always @(*) begin
    main_sdram_bankmachine6_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine6_row_col_n_addr_sel) begin
        main_sdram_bankmachine6_cmd_payload_a <= main_sdram_bankmachine6_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine6_cmd_payload_a <= ((main_sdram_bankmachine6_auto_precharge <<< 4'd10) | {main_sdram_bankmachine6_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine6_twtpcon_valid = ((main_sdram_bankmachine6_cmd_valid & main_sdram_bankmachine6_cmd_ready) & main_sdram_bankmachine6_cmd_payload_is_write);
assign main_sdram_bankmachine6_trccon_valid = ((main_sdram_bankmachine6_cmd_valid & main_sdram_bankmachine6_cmd_ready) & main_sdram_bankmachine6_row_open);
assign main_sdram_bankmachine6_trascon_valid = ((main_sdram_bankmachine6_cmd_valid & main_sdram_bankmachine6_cmd_ready) & main_sdram_bankmachine6_row_open);
always @(*) begin
    main_sdram_bankmachine6_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine6_source_valid & main_sdram_bankmachine6_source_source_valid)) begin
        if ((main_sdram_bankmachine6_source_payload_addr[22:7] != main_sdram_bankmachine6_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine6_auto_precharge <= (main_sdram_bankmachine6_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine6_syncfifo6_din = {main_sdram_bankmachine6_fifo_in_last, main_sdram_bankmachine6_fifo_in_first, main_sdram_bankmachine6_fifo_in_payload_addr, main_sdram_bankmachine6_fifo_in_payload_we};
assign {main_sdram_bankmachine6_fifo_out_last, main_sdram_bankmachine6_fifo_out_first, main_sdram_bankmachine6_fifo_out_payload_addr, main_sdram_bankmachine6_fifo_out_payload_we} = main_sdram_bankmachine6_syncfifo6_dout;
assign main_sdram_bankmachine6_sink_ready = main_sdram_bankmachine6_syncfifo6_writable;
assign main_sdram_bankmachine6_syncfifo6_we = main_sdram_bankmachine6_sink_valid;
assign main_sdram_bankmachine6_fifo_in_first = main_sdram_bankmachine6_sink_first;
assign main_sdram_bankmachine6_fifo_in_last = main_sdram_bankmachine6_sink_last;
assign main_sdram_bankmachine6_fifo_in_payload_we = main_sdram_bankmachine6_sink_payload_we;
assign main_sdram_bankmachine6_fifo_in_payload_addr = main_sdram_bankmachine6_sink_payload_addr;
assign main_sdram_bankmachine6_source_valid = main_sdram_bankmachine6_syncfifo6_readable;
assign main_sdram_bankmachine6_source_first = main_sdram_bankmachine6_fifo_out_first;
assign main_sdram_bankmachine6_source_last = main_sdram_bankmachine6_fifo_out_last;
assign main_sdram_bankmachine6_source_payload_we = main_sdram_bankmachine6_fifo_out_payload_we;
assign main_sdram_bankmachine6_source_payload_addr = main_sdram_bankmachine6_fifo_out_payload_addr;
assign main_sdram_bankmachine6_syncfifo6_re = main_sdram_bankmachine6_source_ready;
always @(*) begin
    main_sdram_bankmachine6_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine6_replace) begin
        main_sdram_bankmachine6_wrport_adr <= (main_sdram_bankmachine6_produce - 1'd1);
    end else begin
        main_sdram_bankmachine6_wrport_adr <= main_sdram_bankmachine6_produce;
    end
end
assign main_sdram_bankmachine6_wrport_dat_w = main_sdram_bankmachine6_syncfifo6_din;
assign main_sdram_bankmachine6_wrport_we = (main_sdram_bankmachine6_syncfifo6_we & (main_sdram_bankmachine6_syncfifo6_writable | main_sdram_bankmachine6_replace));
assign main_sdram_bankmachine6_do_read = (main_sdram_bankmachine6_syncfifo6_readable & main_sdram_bankmachine6_syncfifo6_re);
assign main_sdram_bankmachine6_rdport_adr = main_sdram_bankmachine6_consume;
assign main_sdram_bankmachine6_syncfifo6_dout = main_sdram_bankmachine6_rdport_dat_r;
assign main_sdram_bankmachine6_syncfifo6_writable = (main_sdram_bankmachine6_level != 4'd8);
assign main_sdram_bankmachine6_syncfifo6_readable = (main_sdram_bankmachine6_level != 1'd0);
assign main_sdram_bankmachine6_pipe_valid_sink_ready = ((~main_sdram_bankmachine6_pipe_valid_source_valid) | main_sdram_bankmachine6_pipe_valid_source_ready);
assign main_sdram_bankmachine6_pipe_valid_sink_valid = main_sdram_bankmachine6_sink_sink_valid;
assign main_sdram_bankmachine6_sink_sink_ready = main_sdram_bankmachine6_pipe_valid_sink_ready;
assign main_sdram_bankmachine6_pipe_valid_sink_first = main_sdram_bankmachine6_sink_sink_first;
assign main_sdram_bankmachine6_pipe_valid_sink_last = main_sdram_bankmachine6_sink_sink_last;
assign main_sdram_bankmachine6_pipe_valid_sink_payload_we = main_sdram_bankmachine6_sink_sink_payload_we;
assign main_sdram_bankmachine6_pipe_valid_sink_payload_addr = main_sdram_bankmachine6_sink_sink_payload_addr;
assign main_sdram_bankmachine6_source_source_valid = main_sdram_bankmachine6_pipe_valid_source_valid;
assign main_sdram_bankmachine6_pipe_valid_source_ready = main_sdram_bankmachine6_source_source_ready;
assign main_sdram_bankmachine6_source_source_first = main_sdram_bankmachine6_pipe_valid_source_first;
assign main_sdram_bankmachine6_source_source_last = main_sdram_bankmachine6_pipe_valid_source_last;
assign main_sdram_bankmachine6_source_source_payload_we = main_sdram_bankmachine6_pipe_valid_source_payload_we;
assign main_sdram_bankmachine6_source_source_payload_addr = main_sdram_bankmachine6_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine6_next_state <= 4'd0;
    main_sdram_bankmachine6_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine6_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine6_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine6_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine6_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine6_cmd_valid <= 1'd0;
    main_sdram_bankmachine6_refresh_gnt <= 1'd0;
    main_sdram_bankmachine6_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine6_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine6_row_close <= 1'd0;
    main_sdram_bankmachine6_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine6_row_open <= 1'd0;
    builder_basesoc_bankmachine6_next_state <= builder_basesoc_bankmachine6_state;
    case (builder_basesoc_bankmachine6_state)
        1'd1: begin
            if ((main_sdram_bankmachine6_twtpcon_ready & main_sdram_bankmachine6_trascon_ready)) begin
                main_sdram_bankmachine6_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine6_cmd_ready) begin
                    builder_basesoc_bankmachine6_next_state <= 3'd5;
                end
                main_sdram_bankmachine6_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine6_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine6_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine6_twtpcon_ready & main_sdram_bankmachine6_trascon_ready)) begin
                builder_basesoc_bankmachine6_next_state <= 3'd5;
            end
            main_sdram_bankmachine6_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine6_trccon_ready) begin
                main_sdram_bankmachine6_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine6_row_open <= 1'd1;
                main_sdram_bankmachine6_cmd_valid <= 1'd1;
                main_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine6_cmd_ready) begin
                    builder_basesoc_bankmachine6_next_state <= 3'd7;
                end
                main_sdram_bankmachine6_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine6_twtpcon_ready) begin
                main_sdram_bankmachine6_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine6_row_close <= 1'd1;
            main_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine6_refresh_req)) begin
                builder_basesoc_bankmachine6_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine6_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine6_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine6_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine6_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine6_refresh_req) begin
                builder_basesoc_bankmachine6_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine6_source_source_valid) begin
                    if (main_sdram_bankmachine6_row_opened) begin
                        if (main_sdram_bankmachine6_row_hit) begin
                            main_sdram_bankmachine6_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine6_source_source_payload_we) begin
                                main_sdram_bankmachine6_req_wdata_ready <= main_sdram_bankmachine6_cmd_ready;
                                main_sdram_bankmachine6_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine6_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine6_req_rdata_valid <= main_sdram_bankmachine6_cmd_ready;
                                main_sdram_bankmachine6_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine6_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine6_cmd_ready & main_sdram_bankmachine6_auto_precharge)) begin
                                builder_basesoc_bankmachine6_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine6_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine6_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine7_sink_valid = main_sdram_bankmachine7_req_valid;
assign main_sdram_bankmachine7_req_ready = main_sdram_bankmachine7_sink_ready;
assign main_sdram_bankmachine7_sink_payload_we = main_sdram_bankmachine7_req_we;
assign main_sdram_bankmachine7_sink_payload_addr = main_sdram_bankmachine7_req_addr;
assign main_sdram_bankmachine7_sink_sink_valid = main_sdram_bankmachine7_source_valid;
assign main_sdram_bankmachine7_source_ready = main_sdram_bankmachine7_sink_sink_ready;
assign main_sdram_bankmachine7_sink_sink_first = main_sdram_bankmachine7_source_first;
assign main_sdram_bankmachine7_sink_sink_last = main_sdram_bankmachine7_source_last;
assign main_sdram_bankmachine7_sink_sink_payload_we = main_sdram_bankmachine7_source_payload_we;
assign main_sdram_bankmachine7_sink_sink_payload_addr = main_sdram_bankmachine7_source_payload_addr;
assign main_sdram_bankmachine7_source_source_ready = (main_sdram_bankmachine7_req_wdata_ready | main_sdram_bankmachine7_req_rdata_valid);
assign main_sdram_bankmachine7_req_lock = (main_sdram_bankmachine7_source_valid | main_sdram_bankmachine7_source_source_valid);
assign main_sdram_bankmachine7_row_hit = (main_sdram_bankmachine7_row == main_sdram_bankmachine7_source_source_payload_addr[22:7]);
assign main_sdram_bankmachine7_cmd_payload_ba = 3'd7;
always @(*) begin
    main_sdram_bankmachine7_cmd_payload_a <= 16'd0;
    if (main_sdram_bankmachine7_row_col_n_addr_sel) begin
        main_sdram_bankmachine7_cmd_payload_a <= main_sdram_bankmachine7_source_source_payload_addr[22:7];
    end else begin
        main_sdram_bankmachine7_cmd_payload_a <= ((main_sdram_bankmachine7_auto_precharge <<< 4'd10) | {main_sdram_bankmachine7_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_sdram_bankmachine7_twtpcon_valid = ((main_sdram_bankmachine7_cmd_valid & main_sdram_bankmachine7_cmd_ready) & main_sdram_bankmachine7_cmd_payload_is_write);
assign main_sdram_bankmachine7_trccon_valid = ((main_sdram_bankmachine7_cmd_valid & main_sdram_bankmachine7_cmd_ready) & main_sdram_bankmachine7_row_open);
assign main_sdram_bankmachine7_trascon_valid = ((main_sdram_bankmachine7_cmd_valid & main_sdram_bankmachine7_cmd_ready) & main_sdram_bankmachine7_row_open);
always @(*) begin
    main_sdram_bankmachine7_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine7_source_valid & main_sdram_bankmachine7_source_source_valid)) begin
        if ((main_sdram_bankmachine7_source_payload_addr[22:7] != main_sdram_bankmachine7_source_source_payload_addr[22:7])) begin
            main_sdram_bankmachine7_auto_precharge <= (main_sdram_bankmachine7_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine7_syncfifo7_din = {main_sdram_bankmachine7_fifo_in_last, main_sdram_bankmachine7_fifo_in_first, main_sdram_bankmachine7_fifo_in_payload_addr, main_sdram_bankmachine7_fifo_in_payload_we};
assign {main_sdram_bankmachine7_fifo_out_last, main_sdram_bankmachine7_fifo_out_first, main_sdram_bankmachine7_fifo_out_payload_addr, main_sdram_bankmachine7_fifo_out_payload_we} = main_sdram_bankmachine7_syncfifo7_dout;
assign main_sdram_bankmachine7_sink_ready = main_sdram_bankmachine7_syncfifo7_writable;
assign main_sdram_bankmachine7_syncfifo7_we = main_sdram_bankmachine7_sink_valid;
assign main_sdram_bankmachine7_fifo_in_first = main_sdram_bankmachine7_sink_first;
assign main_sdram_bankmachine7_fifo_in_last = main_sdram_bankmachine7_sink_last;
assign main_sdram_bankmachine7_fifo_in_payload_we = main_sdram_bankmachine7_sink_payload_we;
assign main_sdram_bankmachine7_fifo_in_payload_addr = main_sdram_bankmachine7_sink_payload_addr;
assign main_sdram_bankmachine7_source_valid = main_sdram_bankmachine7_syncfifo7_readable;
assign main_sdram_bankmachine7_source_first = main_sdram_bankmachine7_fifo_out_first;
assign main_sdram_bankmachine7_source_last = main_sdram_bankmachine7_fifo_out_last;
assign main_sdram_bankmachine7_source_payload_we = main_sdram_bankmachine7_fifo_out_payload_we;
assign main_sdram_bankmachine7_source_payload_addr = main_sdram_bankmachine7_fifo_out_payload_addr;
assign main_sdram_bankmachine7_syncfifo7_re = main_sdram_bankmachine7_source_ready;
always @(*) begin
    main_sdram_bankmachine7_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine7_replace) begin
        main_sdram_bankmachine7_wrport_adr <= (main_sdram_bankmachine7_produce - 1'd1);
    end else begin
        main_sdram_bankmachine7_wrport_adr <= main_sdram_bankmachine7_produce;
    end
end
assign main_sdram_bankmachine7_wrport_dat_w = main_sdram_bankmachine7_syncfifo7_din;
assign main_sdram_bankmachine7_wrport_we = (main_sdram_bankmachine7_syncfifo7_we & (main_sdram_bankmachine7_syncfifo7_writable | main_sdram_bankmachine7_replace));
assign main_sdram_bankmachine7_do_read = (main_sdram_bankmachine7_syncfifo7_readable & main_sdram_bankmachine7_syncfifo7_re);
assign main_sdram_bankmachine7_rdport_adr = main_sdram_bankmachine7_consume;
assign main_sdram_bankmachine7_syncfifo7_dout = main_sdram_bankmachine7_rdport_dat_r;
assign main_sdram_bankmachine7_syncfifo7_writable = (main_sdram_bankmachine7_level != 4'd8);
assign main_sdram_bankmachine7_syncfifo7_readable = (main_sdram_bankmachine7_level != 1'd0);
assign main_sdram_bankmachine7_pipe_valid_sink_ready = ((~main_sdram_bankmachine7_pipe_valid_source_valid) | main_sdram_bankmachine7_pipe_valid_source_ready);
assign main_sdram_bankmachine7_pipe_valid_sink_valid = main_sdram_bankmachine7_sink_sink_valid;
assign main_sdram_bankmachine7_sink_sink_ready = main_sdram_bankmachine7_pipe_valid_sink_ready;
assign main_sdram_bankmachine7_pipe_valid_sink_first = main_sdram_bankmachine7_sink_sink_first;
assign main_sdram_bankmachine7_pipe_valid_sink_last = main_sdram_bankmachine7_sink_sink_last;
assign main_sdram_bankmachine7_pipe_valid_sink_payload_we = main_sdram_bankmachine7_sink_sink_payload_we;
assign main_sdram_bankmachine7_pipe_valid_sink_payload_addr = main_sdram_bankmachine7_sink_sink_payload_addr;
assign main_sdram_bankmachine7_source_source_valid = main_sdram_bankmachine7_pipe_valid_source_valid;
assign main_sdram_bankmachine7_pipe_valid_source_ready = main_sdram_bankmachine7_source_source_ready;
assign main_sdram_bankmachine7_source_source_first = main_sdram_bankmachine7_pipe_valid_source_first;
assign main_sdram_bankmachine7_source_source_last = main_sdram_bankmachine7_pipe_valid_source_last;
assign main_sdram_bankmachine7_source_source_payload_we = main_sdram_bankmachine7_pipe_valid_source_payload_we;
assign main_sdram_bankmachine7_source_source_payload_addr = main_sdram_bankmachine7_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine7_next_state <= 4'd0;
    main_sdram_bankmachine7_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine7_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine7_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine7_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine7_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine7_cmd_valid <= 1'd0;
    main_sdram_bankmachine7_refresh_gnt <= 1'd0;
    main_sdram_bankmachine7_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine7_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine7_row_close <= 1'd0;
    main_sdram_bankmachine7_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine7_row_open <= 1'd0;
    builder_basesoc_bankmachine7_next_state <= builder_basesoc_bankmachine7_state;
    case (builder_basesoc_bankmachine7_state)
        1'd1: begin
            if ((main_sdram_bankmachine7_twtpcon_ready & main_sdram_bankmachine7_trascon_ready)) begin
                main_sdram_bankmachine7_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine7_cmd_ready) begin
                    builder_basesoc_bankmachine7_next_state <= 3'd5;
                end
                main_sdram_bankmachine7_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine7_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine7_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine7_twtpcon_ready & main_sdram_bankmachine7_trascon_ready)) begin
                builder_basesoc_bankmachine7_next_state <= 3'd5;
            end
            main_sdram_bankmachine7_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine7_trccon_ready) begin
                main_sdram_bankmachine7_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine7_row_open <= 1'd1;
                main_sdram_bankmachine7_cmd_valid <= 1'd1;
                main_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine7_cmd_ready) begin
                    builder_basesoc_bankmachine7_next_state <= 3'd7;
                end
                main_sdram_bankmachine7_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine7_twtpcon_ready) begin
                main_sdram_bankmachine7_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine7_row_close <= 1'd1;
            main_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine7_refresh_req)) begin
                builder_basesoc_bankmachine7_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine7_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_bankmachine7_next_state <= 2'd3;
        end
        3'd7: begin
            builder_basesoc_bankmachine7_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_bankmachine7_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine7_refresh_req) begin
                builder_basesoc_bankmachine7_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine7_source_source_valid) begin
                    if (main_sdram_bankmachine7_row_opened) begin
                        if (main_sdram_bankmachine7_row_hit) begin
                            main_sdram_bankmachine7_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine7_source_source_payload_we) begin
                                main_sdram_bankmachine7_req_wdata_ready <= main_sdram_bankmachine7_cmd_ready;
                                main_sdram_bankmachine7_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine7_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine7_req_rdata_valid <= main_sdram_bankmachine7_cmd_ready;
                                main_sdram_bankmachine7_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine7_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine7_cmd_ready & main_sdram_bankmachine7_auto_precharge)) begin
                                builder_basesoc_bankmachine7_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine7_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine7_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_rdcmdphase = (main_v7ddrphy_rdphase_storage - 1'd1);
assign main_sdram_wrcmdphase = (main_v7ddrphy_wrphase_storage - 1'd1);
assign main_sdram_trrdcon_valid = ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & ((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we)));
assign main_sdram_tfawcon_valid = ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & ((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we)));
assign main_sdram_ras_allowed = (main_sdram_trrdcon_ready & main_sdram_tfawcon_ready);
assign main_sdram_tccdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_cmd_payload_is_write | main_sdram_choose_req_cmd_payload_is_read));
assign main_sdram_cas_allowed = main_sdram_tccdcon_ready;
assign main_sdram_twtrcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
assign main_sdram_read_available = ((((((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_read) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_read)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_read)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_read)) | (main_sdram_bankmachine4_cmd_valid & main_sdram_bankmachine4_cmd_payload_is_read)) | (main_sdram_bankmachine5_cmd_valid & main_sdram_bankmachine5_cmd_payload_is_read)) | (main_sdram_bankmachine6_cmd_valid & main_sdram_bankmachine6_cmd_payload_is_read)) | (main_sdram_bankmachine7_cmd_valid & main_sdram_bankmachine7_cmd_payload_is_read));
assign main_sdram_write_available = ((((((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_write) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_write)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_write)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_write)) | (main_sdram_bankmachine4_cmd_valid & main_sdram_bankmachine4_cmd_payload_is_write)) | (main_sdram_bankmachine5_cmd_valid & main_sdram_bankmachine5_cmd_payload_is_write)) | (main_sdram_bankmachine6_cmd_valid & main_sdram_bankmachine6_cmd_payload_is_write)) | (main_sdram_bankmachine7_cmd_valid & main_sdram_bankmachine7_cmd_payload_is_write));
assign main_sdram_max_time0 = (main_sdram_time0 == 1'd0);
assign main_sdram_max_time1 = (main_sdram_time1 == 1'd0);
assign main_sdram_bankmachine0_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine1_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine2_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine3_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine4_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine5_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine6_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine7_refresh_req = main_sdram_cmd_valid;
assign main_sdram_go_to_refresh = (((((((main_sdram_bankmachine0_refresh_gnt & main_sdram_bankmachine1_refresh_gnt) & main_sdram_bankmachine2_refresh_gnt) & main_sdram_bankmachine3_refresh_gnt) & main_sdram_bankmachine4_refresh_gnt) & main_sdram_bankmachine5_refresh_gnt) & main_sdram_bankmachine6_refresh_gnt) & main_sdram_bankmachine7_refresh_gnt);
assign main_sdram_interface_rdata = {main_sdram_dfi_p3_rddata, main_sdram_dfi_p2_rddata, main_sdram_dfi_p1_rddata, main_sdram_dfi_p0_rddata};
assign {main_sdram_dfi_p3_wrdata, main_sdram_dfi_p2_wrdata, main_sdram_dfi_p1_wrdata, main_sdram_dfi_p0_wrdata} = main_sdram_interface_wdata;
assign {main_sdram_dfi_p3_wrdata_mask, main_sdram_dfi_p2_wrdata_mask, main_sdram_dfi_p1_wrdata_mask, main_sdram_dfi_p0_wrdata_mask} = (~main_sdram_interface_wdata_we);
always @(*) begin
    main_sdram_choose_cmd_valids <= 8'd0;
    main_sdram_choose_cmd_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[4] <= (main_sdram_bankmachine4_cmd_valid & (((main_sdram_bankmachine4_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine4_cmd_payload_ras & (~main_sdram_bankmachine4_cmd_payload_cas)) & (~main_sdram_bankmachine4_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine4_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine4_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[5] <= (main_sdram_bankmachine5_cmd_valid & (((main_sdram_bankmachine5_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine5_cmd_payload_ras & (~main_sdram_bankmachine5_cmd_payload_cas)) & (~main_sdram_bankmachine5_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine5_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine5_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[6] <= (main_sdram_bankmachine6_cmd_valid & (((main_sdram_bankmachine6_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine6_cmd_payload_ras & (~main_sdram_bankmachine6_cmd_payload_cas)) & (~main_sdram_bankmachine6_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine6_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine6_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[7] <= (main_sdram_bankmachine7_cmd_valid & (((main_sdram_bankmachine7_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine7_cmd_payload_ras & (~main_sdram_bankmachine7_cmd_payload_cas)) & (~main_sdram_bankmachine7_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine7_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine7_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
end
assign main_sdram_choose_cmd_request = main_sdram_choose_cmd_valids;
assign main_sdram_choose_cmd_cmd_valid = builder_comb_rhs_array_muxed40;
assign main_sdram_choose_cmd_cmd_payload_a = builder_comb_rhs_array_muxed41;
assign main_sdram_choose_cmd_cmd_payload_ba = builder_comb_rhs_array_muxed42;
assign main_sdram_choose_cmd_cmd_payload_is_read = builder_comb_rhs_array_muxed43;
assign main_sdram_choose_cmd_cmd_payload_is_write = builder_comb_rhs_array_muxed44;
assign main_sdram_choose_cmd_cmd_payload_is_cmd = builder_comb_rhs_array_muxed45;
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_cas <= builder_comb_t_array_muxed0;
    end
end
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_ras <= builder_comb_t_array_muxed1;
    end
end
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_we <= builder_comb_t_array_muxed2;
    end
end
assign main_sdram_choose_cmd_ce = (main_sdram_choose_cmd_cmd_ready | (~main_sdram_choose_cmd_cmd_valid));
always @(*) begin
    main_sdram_choose_req_valids <= 8'd0;
    main_sdram_choose_req_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[4] <= (main_sdram_bankmachine4_cmd_valid & (((main_sdram_bankmachine4_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine4_cmd_payload_ras & (~main_sdram_bankmachine4_cmd_payload_cas)) & (~main_sdram_bankmachine4_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine4_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine4_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[5] <= (main_sdram_bankmachine5_cmd_valid & (((main_sdram_bankmachine5_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine5_cmd_payload_ras & (~main_sdram_bankmachine5_cmd_payload_cas)) & (~main_sdram_bankmachine5_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine5_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine5_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[6] <= (main_sdram_bankmachine6_cmd_valid & (((main_sdram_bankmachine6_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine6_cmd_payload_ras & (~main_sdram_bankmachine6_cmd_payload_cas)) & (~main_sdram_bankmachine6_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine6_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine6_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[7] <= (main_sdram_bankmachine7_cmd_valid & (((main_sdram_bankmachine7_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine7_cmd_payload_ras & (~main_sdram_bankmachine7_cmd_payload_cas)) & (~main_sdram_bankmachine7_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine7_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine7_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
end
assign main_sdram_choose_req_request = main_sdram_choose_req_valids;
assign main_sdram_choose_req_cmd_valid = builder_comb_rhs_array_muxed46;
assign main_sdram_choose_req_cmd_payload_a = builder_comb_rhs_array_muxed47;
assign main_sdram_choose_req_cmd_payload_ba = builder_comb_rhs_array_muxed48;
assign main_sdram_choose_req_cmd_payload_is_read = builder_comb_rhs_array_muxed49;
assign main_sdram_choose_req_cmd_payload_is_write = builder_comb_rhs_array_muxed50;
assign main_sdram_choose_req_cmd_payload_is_cmd = builder_comb_rhs_array_muxed51;
always @(*) begin
    main_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_cas <= builder_comb_t_array_muxed3;
    end
end
always @(*) begin
    main_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_ras <= builder_comb_t_array_muxed4;
    end
end
always @(*) begin
    main_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_we <= builder_comb_t_array_muxed5;
    end
end
always @(*) begin
    main_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd0))) begin
        main_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd0))) begin
        main_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd1))) begin
        main_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd1))) begin
        main_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd2))) begin
        main_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd2))) begin
        main_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd3))) begin
        main_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd3))) begin
        main_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine4_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 3'd4))) begin
        main_sdram_bankmachine4_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 3'd4))) begin
        main_sdram_bankmachine4_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine5_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 3'd5))) begin
        main_sdram_bankmachine5_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 3'd5))) begin
        main_sdram_bankmachine5_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine6_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 3'd6))) begin
        main_sdram_bankmachine6_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 3'd6))) begin
        main_sdram_bankmachine6_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine7_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 3'd7))) begin
        main_sdram_bankmachine7_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 3'd7))) begin
        main_sdram_bankmachine7_cmd_ready <= 1'd1;
    end
end
assign main_sdram_choose_req_ce = (main_sdram_choose_req_cmd_ready | (~main_sdram_choose_req_cmd_valid));
assign main_sdram_dfi_p0_reset_n = 1'd1;
assign main_sdram_dfi_p0_cke = {1{main_sdram_steerer0}};
assign main_sdram_dfi_p0_odt = {1{main_sdram_steerer1}};
assign main_sdram_dfi_p1_reset_n = 1'd1;
assign main_sdram_dfi_p1_cke = {1{main_sdram_steerer2}};
assign main_sdram_dfi_p1_odt = {1{main_sdram_steerer3}};
assign main_sdram_dfi_p2_reset_n = 1'd1;
assign main_sdram_dfi_p2_cke = {1{main_sdram_steerer4}};
assign main_sdram_dfi_p2_odt = {1{main_sdram_steerer5}};
assign main_sdram_dfi_p3_reset_n = 1'd1;
assign main_sdram_dfi_p3_cke = {1{main_sdram_steerer6}};
assign main_sdram_dfi_p3_odt = {1{main_sdram_steerer7}};
assign main_sdram_tfawcon_count = ((((main_sdram_tfawcon_window[0] + main_sdram_tfawcon_window[1]) + main_sdram_tfawcon_window[2]) + main_sdram_tfawcon_window[3]) + main_sdram_tfawcon_window[4]);
always @(*) begin
    builder_basesoc_multiplexer_next_state <= 4'd0;
    main_sdram_choose_cmd_cmd_ready <= 1'd0;
    main_sdram_choose_cmd_want_activates <= 1'd0;
    main_sdram_choose_req_cmd_ready <= 1'd0;
    main_sdram_choose_req_want_reads <= 1'd0;
    main_sdram_choose_req_want_writes <= 1'd0;
    main_sdram_cmd_ready <= 1'd0;
    main_sdram_en0 <= 1'd0;
    main_sdram_en1 <= 1'd0;
    main_sdram_steerer_sel0 <= 2'd0;
    main_sdram_steerer_sel1 <= 2'd0;
    main_sdram_steerer_sel2 <= 2'd0;
    main_sdram_steerer_sel3 <= 2'd0;
    builder_basesoc_multiplexer_next_state <= builder_basesoc_multiplexer_state;
    case (builder_basesoc_multiplexer_state)
        1'd1: begin
            main_sdram_en1 <= 1'd1;
            main_sdram_choose_req_want_writes <= 1'd1;
            if (1'd0) begin
                main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
            end else begin
                main_sdram_choose_cmd_want_activates <= main_sdram_ras_allowed;
                main_sdram_choose_cmd_cmd_ready <= ((~((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we))) | main_sdram_ras_allowed);
                main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
            end
            main_sdram_steerer_sel0 <= 1'd0;
            if ((main_v7ddrphy_wrphase_storage == 1'd0)) begin
                main_sdram_steerer_sel0 <= 2'd2;
            end
            if ((main_sdram_wrcmdphase == 1'd0)) begin
                main_sdram_steerer_sel0 <= 1'd1;
            end
            main_sdram_steerer_sel1 <= 1'd0;
            if ((main_v7ddrphy_wrphase_storage == 1'd1)) begin
                main_sdram_steerer_sel1 <= 2'd2;
            end
            if ((main_sdram_wrcmdphase == 1'd1)) begin
                main_sdram_steerer_sel1 <= 1'd1;
            end
            main_sdram_steerer_sel2 <= 1'd0;
            if ((main_v7ddrphy_wrphase_storage == 2'd2)) begin
                main_sdram_steerer_sel2 <= 2'd2;
            end
            if ((main_sdram_wrcmdphase == 2'd2)) begin
                main_sdram_steerer_sel2 <= 1'd1;
            end
            main_sdram_steerer_sel3 <= 1'd0;
            if ((main_v7ddrphy_wrphase_storage == 2'd3)) begin
                main_sdram_steerer_sel3 <= 2'd2;
            end
            if ((main_sdram_wrcmdphase == 2'd3)) begin
                main_sdram_steerer_sel3 <= 1'd1;
            end
            if (main_sdram_read_available) begin
                if (((~main_sdram_write_available) | main_sdram_max_time1)) begin
                    builder_basesoc_multiplexer_next_state <= 2'd3;
                end
            end
            if (main_sdram_go_to_refresh) begin
                builder_basesoc_multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_sdram_steerer_sel0 <= 2'd3;
            main_sdram_cmd_ready <= 1'd1;
            if (main_sdram_cmd_last) begin
                builder_basesoc_multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (main_sdram_twtrcon_ready) begin
                builder_basesoc_multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            builder_basesoc_multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            builder_basesoc_multiplexer_next_state <= 3'd6;
        end
        3'd6: begin
            builder_basesoc_multiplexer_next_state <= 3'd7;
        end
        3'd7: begin
            builder_basesoc_multiplexer_next_state <= 4'd8;
        end
        4'd8: begin
            builder_basesoc_multiplexer_next_state <= 4'd9;
        end
        4'd9: begin
            builder_basesoc_multiplexer_next_state <= 4'd10;
        end
        4'd10: begin
            builder_basesoc_multiplexer_next_state <= 1'd1;
        end
        default: begin
            main_sdram_en0 <= 1'd1;
            main_sdram_choose_req_want_reads <= 1'd1;
            if (1'd0) begin
                main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
            end else begin
                main_sdram_choose_cmd_want_activates <= main_sdram_ras_allowed;
                main_sdram_choose_cmd_cmd_ready <= ((~((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we))) | main_sdram_ras_allowed);
                main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
            end
            main_sdram_steerer_sel0 <= 1'd0;
            if ((main_v7ddrphy_rdphase_storage == 1'd0)) begin
                main_sdram_steerer_sel0 <= 2'd2;
            end
            if ((main_sdram_rdcmdphase == 1'd0)) begin
                main_sdram_steerer_sel0 <= 1'd1;
            end
            main_sdram_steerer_sel1 <= 1'd0;
            if ((main_v7ddrphy_rdphase_storage == 1'd1)) begin
                main_sdram_steerer_sel1 <= 2'd2;
            end
            if ((main_sdram_rdcmdphase == 1'd1)) begin
                main_sdram_steerer_sel1 <= 1'd1;
            end
            main_sdram_steerer_sel2 <= 1'd0;
            if ((main_v7ddrphy_rdphase_storage == 2'd2)) begin
                main_sdram_steerer_sel2 <= 2'd2;
            end
            if ((main_sdram_rdcmdphase == 2'd2)) begin
                main_sdram_steerer_sel2 <= 1'd1;
            end
            main_sdram_steerer_sel3 <= 1'd0;
            if ((main_v7ddrphy_rdphase_storage == 2'd3)) begin
                main_sdram_steerer_sel3 <= 2'd2;
            end
            if ((main_sdram_rdcmdphase == 2'd3)) begin
                main_sdram_steerer_sel3 <= 1'd1;
            end
            if (main_sdram_write_available) begin
                if (((~main_sdram_read_available) | main_sdram_max_time0)) begin
                    builder_basesoc_multiplexer_next_state <= 3'd4;
                end
            end
            if (main_sdram_go_to_refresh) begin
                builder_basesoc_multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
assign builder_basesoc_roundrobin0_request = {(((main_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_basesoc_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin0_ce = ((~main_sdram_interface_bank0_valid) & (~main_sdram_interface_bank0_lock));
assign main_sdram_interface_bank0_addr = builder_comb_rhs_array_muxed52;
assign main_sdram_interface_bank0_we = builder_comb_rhs_array_muxed53;
assign main_sdram_interface_bank0_valid = builder_comb_rhs_array_muxed54;
assign builder_basesoc_roundrobin1_request = {(((main_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_basesoc_locked1 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin1_ce = ((~main_sdram_interface_bank1_valid) & (~main_sdram_interface_bank1_lock));
assign main_sdram_interface_bank1_addr = builder_comb_rhs_array_muxed55;
assign main_sdram_interface_bank1_we = builder_comb_rhs_array_muxed56;
assign main_sdram_interface_bank1_valid = builder_comb_rhs_array_muxed57;
assign builder_basesoc_roundrobin2_request = {(((main_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_basesoc_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin2_ce = ((~main_sdram_interface_bank2_valid) & (~main_sdram_interface_bank2_lock));
assign main_sdram_interface_bank2_addr = builder_comb_rhs_array_muxed58;
assign main_sdram_interface_bank2_we = builder_comb_rhs_array_muxed59;
assign main_sdram_interface_bank2_valid = builder_comb_rhs_array_muxed60;
assign builder_basesoc_roundrobin3_request = {(((main_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_basesoc_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin3_ce = ((~main_sdram_interface_bank3_valid) & (~main_sdram_interface_bank3_lock));
assign main_sdram_interface_bank3_addr = builder_comb_rhs_array_muxed61;
assign main_sdram_interface_bank3_we = builder_comb_rhs_array_muxed62;
assign main_sdram_interface_bank3_valid = builder_comb_rhs_array_muxed63;
assign builder_basesoc_roundrobin4_request = {(((main_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_basesoc_locked4 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin4_ce = ((~main_sdram_interface_bank4_valid) & (~main_sdram_interface_bank4_lock));
assign main_sdram_interface_bank4_addr = builder_comb_rhs_array_muxed64;
assign main_sdram_interface_bank4_we = builder_comb_rhs_array_muxed65;
assign main_sdram_interface_bank4_valid = builder_comb_rhs_array_muxed66;
assign builder_basesoc_roundrobin5_request = {(((main_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_basesoc_locked5 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin5_ce = ((~main_sdram_interface_bank5_valid) & (~main_sdram_interface_bank5_lock));
assign main_sdram_interface_bank5_addr = builder_comb_rhs_array_muxed67;
assign main_sdram_interface_bank5_we = builder_comb_rhs_array_muxed68;
assign main_sdram_interface_bank5_valid = builder_comb_rhs_array_muxed69;
assign builder_basesoc_roundrobin6_request = {(((main_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_basesoc_locked6 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin6_ce = ((~main_sdram_interface_bank6_valid) & (~main_sdram_interface_bank6_lock));
assign main_sdram_interface_bank6_addr = builder_comb_rhs_array_muxed70;
assign main_sdram_interface_bank6_we = builder_comb_rhs_array_muxed71;
assign main_sdram_interface_bank6_valid = builder_comb_rhs_array_muxed72;
assign builder_basesoc_roundrobin7_request = {(((main_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_basesoc_locked7 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin7_ce = ((~main_sdram_interface_bank7_valid) & (~main_sdram_interface_bank7_lock));
assign main_sdram_interface_bank7_addr = builder_comb_rhs_array_muxed73;
assign main_sdram_interface_bank7_we = builder_comb_rhs_array_muxed74;
assign main_sdram_interface_bank7_valid = builder_comb_rhs_array_muxed75;
assign main_port_cmd_ready = ((((((((1'd0 | (((builder_basesoc_roundrobin0_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_basesoc_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0)))))) & main_sdram_interface_bank0_ready)) | (((builder_basesoc_roundrobin1_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_basesoc_locked1 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0)))))) & main_sdram_interface_bank1_ready)) | (((builder_basesoc_roundrobin2_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_basesoc_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0)))))) & main_sdram_interface_bank2_ready)) | (((builder_basesoc_roundrobin3_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_basesoc_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0)))))) & main_sdram_interface_bank3_ready)) | (((builder_basesoc_roundrobin4_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_basesoc_locked4 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0)))))) & main_sdram_interface_bank4_ready)) | (((builder_basesoc_roundrobin5_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_basesoc_locked5 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0)))))) & main_sdram_interface_bank5_ready)) | (((builder_basesoc_roundrobin6_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_basesoc_locked6 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0)))))) & main_sdram_interface_bank6_ready)) | (((builder_basesoc_roundrobin7_grant == 1'd0) & ((main_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_basesoc_locked7 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0)))))) & main_sdram_interface_bank7_ready));
assign main_port_wdata_ready = builder_basesoc_new_master_wdata_ready1;
assign main_port_rdata_valid = builder_basesoc_new_master_rdata_valid8;
always @(*) begin
    main_sdram_interface_wdata <= 512'd0;
    main_sdram_interface_wdata_we <= 64'd0;
    case ({builder_basesoc_new_master_wdata_ready1})
        1'd1: begin
            main_sdram_interface_wdata <= main_port_wdata_payload_data;
            main_sdram_interface_wdata_we <= main_port_wdata_payload_we;
        end
        default: begin
            main_sdram_interface_wdata <= 1'd0;
            main_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign main_port_rdata_payload_data = main_sdram_interface_rdata;
assign builder_basesoc_roundrobin0_grant = 1'd0;
assign builder_basesoc_roundrobin1_grant = 1'd0;
assign builder_basesoc_roundrobin2_grant = 1'd0;
assign builder_basesoc_roundrobin3_grant = 1'd0;
assign builder_basesoc_roundrobin4_grant = 1'd0;
assign builder_basesoc_roundrobin5_grant = 1'd0;
assign builder_basesoc_roundrobin6_grant = 1'd0;
assign builder_basesoc_roundrobin7_grant = 1'd0;
assign main_ce = ((~main_port_cmd_valid) | (main_port_cmd_ready & main_port_cmd_last));
assign main_write_cmd_grant = (main_grant == 1'd0);
always @(*) begin
    main_request <= 2'd0;
    main_request[0] <= main_write_cmd_request;
    main_request[1] <= main_read_cmd_request;
end
assign main_read_cmd_grant = (main_grant == 1'd1);
assign main_write_sink_sink_valid = main_rocket_mem_axi_aw_valid;
assign main_rocket_mem_axi_aw_ready = main_write_sink_sink_ready;
assign main_write_sink_sink_first = main_rocket_mem_axi_aw_first;
assign main_write_sink_sink_last = main_rocket_mem_axi_aw_last;
assign main_write_sink_sink_payload_addr = main_rocket_mem_axi_aw_payload_addr;
assign main_write_sink_sink_payload_burst = main_rocket_mem_axi_aw_payload_burst;
assign main_write_sink_sink_payload_len = main_rocket_mem_axi_aw_payload_len;
assign main_write_sink_sink_payload_size = main_rocket_mem_axi_aw_payload_size;
assign main_write_sink_sink_payload_lock = main_rocket_mem_axi_aw_payload_lock;
assign main_write_sink_sink_payload_prot = main_rocket_mem_axi_aw_payload_prot;
assign main_write_sink_sink_payload_cache = main_rocket_mem_axi_aw_payload_cache;
assign main_write_sink_sink_payload_qos = main_rocket_mem_axi_aw_payload_qos;
assign main_write_sink_sink_payload_region = main_rocket_mem_axi_aw_payload_region;
assign main_write_sink_sink_param_id = main_rocket_mem_axi_aw_param_id;
assign main_write_sink_sink_param_dest = main_rocket_mem_axi_aw_param_dest;
assign main_write_sink_sink_param_user = main_rocket_mem_axi_aw_param_user;
assign main_write_id_buffer_sink_valid = ((main_write_aw_valid & main_write_aw_first) & main_write_aw_ready);
assign main_write_id_buffer_sink_payload_id = main_write_aw_param_id;
always @(*) begin
    main_write_id_buffer_source_ready <= 1'd0;
    main_write_resp_buffer_sink_payload_id <= 4'd0;
    main_write_resp_buffer_sink_payload_resp <= 2'd0;
    main_write_resp_buffer_sink_valid <= 1'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_resp_buffer_sink_valid <= 1'd1;
        main_write_resp_buffer_sink_payload_resp <= 1'd0;
        main_write_resp_buffer_sink_payload_id <= main_write_id_buffer_source_payload_id;
        main_write_id_buffer_source_ready <= 1'd1;
    end
end
assign main_rocket_mem_axi_b_valid = main_write_resp_buffer_source_valid;
assign main_write_resp_buffer_source_ready = main_rocket_mem_axi_b_ready;
assign main_rocket_mem_axi_b_first = main_write_resp_buffer_source_first;
assign main_rocket_mem_axi_b_last = main_write_resp_buffer_source_last;
assign main_rocket_mem_axi_b_payload_resp = main_write_resp_buffer_source_payload_resp;
assign main_rocket_mem_axi_b_param_id = main_write_resp_buffer_source_payload_id;
assign main_write_w_buffer_queue = ((main_port_cmd_valid & main_port_cmd_ready) & main_port_cmd_payload_we);
assign main_write_w_buffer_dequeue = (main_write_w_buffer_source_valid & main_write_w_buffer_source_ready);
assign main_write_can_write = (main_write_w_buffer_level1 > main_write_w_buffer_level2);
assign main_write_cmd_request = (main_write_aw_valid & main_write_can_write);
always @(*) begin
    main_rocket_mem_axi_w_ready <= 1'd0;
    main_write_w_buffer_sink_first <= 1'd0;
    main_write_w_buffer_sink_last <= 1'd0;
    main_write_w_buffer_sink_param_dest <= 1'd0;
    main_write_w_buffer_sink_param_id <= 4'd0;
    main_write_w_buffer_sink_param_user <= 1'd0;
    main_write_w_buffer_sink_payload_data <= 512'd0;
    main_write_w_buffer_sink_payload_strb <= 64'd0;
    main_write_w_buffer_sink_valid <= 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_valid <= main_rocket_mem_axi_w_valid;
        main_rocket_mem_axi_w_ready <= main_write_w_buffer_sink_ready;
        main_write_w_buffer_sink_first <= main_rocket_mem_axi_w_first;
        main_write_w_buffer_sink_last <= main_rocket_mem_axi_w_last;
        main_write_w_buffer_sink_payload_data <= main_rocket_mem_axi_w_payload_data;
        main_write_w_buffer_sink_payload_strb <= main_rocket_mem_axi_w_payload_strb;
        main_write_w_buffer_sink_param_id <= main_rocket_mem_axi_w_param_id;
        main_write_w_buffer_sink_param_dest <= main_rocket_mem_axi_w_param_dest;
        main_write_w_buffer_sink_param_user <= main_rocket_mem_axi_w_param_user;
    end
end
assign main_port_wdata_valid = main_write_w_buffer_source_valid;
assign main_write_w_buffer_source_ready = main_port_wdata_ready;
assign main_port_wdata_first = main_write_w_buffer_source_first;
assign main_port_wdata_last = main_write_w_buffer_source_last;
assign main_port_wdata_payload_data = main_write_w_buffer_source_payload_data;
assign main_port_wdata_payload_we = main_write_w_buffer_source_payload_strb;
assign main_write_pipe_valid_sink_ready = ((~main_write_pipe_valid_source_valid) | main_write_pipe_valid_source_ready);
assign main_write_pipe_valid_sink_valid = main_write_sink_sink_valid;
assign main_write_sink_sink_ready = main_write_pipe_valid_sink_ready;
assign main_write_pipe_valid_sink_first = main_write_sink_sink_first;
assign main_write_pipe_valid_sink_last = main_write_sink_sink_last;
assign main_write_pipe_valid_sink_payload_addr = main_write_sink_sink_payload_addr;
assign main_write_pipe_valid_sink_payload_burst = main_write_sink_sink_payload_burst;
assign main_write_pipe_valid_sink_payload_len = main_write_sink_sink_payload_len;
assign main_write_pipe_valid_sink_payload_size = main_write_sink_sink_payload_size;
assign main_write_pipe_valid_sink_payload_lock = main_write_sink_sink_payload_lock;
assign main_write_pipe_valid_sink_payload_prot = main_write_sink_sink_payload_prot;
assign main_write_pipe_valid_sink_payload_cache = main_write_sink_sink_payload_cache;
assign main_write_pipe_valid_sink_payload_qos = main_write_sink_sink_payload_qos;
assign main_write_pipe_valid_sink_payload_region = main_write_sink_sink_payload_region;
assign main_write_pipe_valid_sink_param_id = main_write_sink_sink_param_id;
assign main_write_pipe_valid_sink_param_dest = main_write_sink_sink_param_dest;
assign main_write_pipe_valid_sink_param_user = main_write_sink_sink_param_user;
assign main_write_source_source_valid = main_write_pipe_valid_source_valid;
assign main_write_pipe_valid_source_ready = main_write_source_source_ready;
assign main_write_source_source_first = main_write_pipe_valid_source_first;
assign main_write_source_source_last = main_write_pipe_valid_source_last;
assign main_write_source_source_payload_addr = main_write_pipe_valid_source_payload_addr;
assign main_write_source_source_payload_burst = main_write_pipe_valid_source_payload_burst;
assign main_write_source_source_payload_len = main_write_pipe_valid_source_payload_len;
assign main_write_source_source_payload_size = main_write_pipe_valid_source_payload_size;
assign main_write_source_source_payload_lock = main_write_pipe_valid_source_payload_lock;
assign main_write_source_source_payload_prot = main_write_pipe_valid_source_payload_prot;
assign main_write_source_source_payload_cache = main_write_pipe_valid_source_payload_cache;
assign main_write_source_source_payload_qos = main_write_pipe_valid_source_payload_qos;
assign main_write_source_source_payload_region = main_write_pipe_valid_source_payload_region;
assign main_write_source_source_param_id = main_write_pipe_valid_source_param_id;
assign main_write_source_source_param_dest = main_write_pipe_valid_source_param_dest;
assign main_write_source_source_param_user = main_write_pipe_valid_source_param_user;
assign main_write_beat_size = (1'd1 <<< main_write_source_source_payload_size);
assign main_write_beat_wrap = (main_write_source_source_payload_len <<< main_write_source_source_payload_size);
assign main_write_aw_valid = (main_write_source_source_valid | (~main_write_aw_first));
assign main_write_aw_first = (main_write_beat_count == 1'd0);
assign main_write_aw_last = (main_write_beat_count == main_write_source_source_payload_len);
assign main_write_aw_payload_addr = ($signed({1'd0, main_write_source_source_payload_addr}) + main_write_beat_offset);
assign main_write_aw_param_id = main_write_source_source_param_id;
always @(*) begin
    main_write_source_source_ready <= 1'd0;
    if (main_write_aw_ready) begin
        if (main_write_aw_last) begin
            main_write_source_source_ready <= 1'd1;
        end
    end
end
assign main_write_w_buffer_syncfifo_din = {main_write_w_buffer_fifo_in_last, main_write_w_buffer_fifo_in_first, main_write_w_buffer_fifo_in_param_user, main_write_w_buffer_fifo_in_param_dest, main_write_w_buffer_fifo_in_param_id, main_write_w_buffer_fifo_in_payload_strb, main_write_w_buffer_fifo_in_payload_data};
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign main_write_w_buffer_sink_ready = main_write_w_buffer_syncfifo_writable;
assign main_write_w_buffer_syncfifo_we = main_write_w_buffer_sink_valid;
assign main_write_w_buffer_fifo_in_first = main_write_w_buffer_sink_first;
assign main_write_w_buffer_fifo_in_last = main_write_w_buffer_sink_last;
assign main_write_w_buffer_fifo_in_payload_data = main_write_w_buffer_sink_payload_data;
assign main_write_w_buffer_fifo_in_payload_strb = main_write_w_buffer_sink_payload_strb;
assign main_write_w_buffer_fifo_in_param_id = main_write_w_buffer_sink_param_id;
assign main_write_w_buffer_fifo_in_param_dest = main_write_w_buffer_sink_param_dest;
assign main_write_w_buffer_fifo_in_param_user = main_write_w_buffer_sink_param_user;
assign main_write_w_buffer_source_valid = main_write_w_buffer_readable;
assign main_write_w_buffer_source_first = main_write_w_buffer_fifo_out_first;
assign main_write_w_buffer_source_last = main_write_w_buffer_fifo_out_last;
assign main_write_w_buffer_source_payload_data = main_write_w_buffer_fifo_out_payload_data;
assign main_write_w_buffer_source_payload_strb = main_write_w_buffer_fifo_out_payload_strb;
assign main_write_w_buffer_source_param_id = main_write_w_buffer_fifo_out_param_id;
assign main_write_w_buffer_source_param_dest = main_write_w_buffer_fifo_out_param_dest;
assign main_write_w_buffer_source_param_user = main_write_w_buffer_fifo_out_param_user;
assign main_write_w_buffer_re = main_write_w_buffer_source_ready;
assign main_write_w_buffer_syncfifo_re = (main_write_w_buffer_syncfifo_readable & ((~main_write_w_buffer_readable) | main_write_w_buffer_re));
assign main_write_w_buffer_level1 = (main_write_w_buffer_level0 + main_write_w_buffer_readable);
always @(*) begin
    main_write_w_buffer_wrport_adr <= 4'd0;
    if (main_write_w_buffer_replace) begin
        main_write_w_buffer_wrport_adr <= (main_write_w_buffer_produce - 1'd1);
    end else begin
        main_write_w_buffer_wrport_adr <= main_write_w_buffer_produce;
    end
end
assign main_write_w_buffer_wrport_dat_w = main_write_w_buffer_syncfifo_din;
assign main_write_w_buffer_wrport_we = (main_write_w_buffer_syncfifo_we & (main_write_w_buffer_syncfifo_writable | main_write_w_buffer_replace));
assign main_write_w_buffer_do_read = (main_write_w_buffer_syncfifo_readable & main_write_w_buffer_syncfifo_re);
assign main_write_w_buffer_rdport_adr = main_write_w_buffer_consume;
assign main_write_w_buffer_syncfifo_dout = main_write_w_buffer_rdport_dat_r;
assign main_write_w_buffer_rdport_re = main_write_w_buffer_do_read;
assign main_write_w_buffer_syncfifo_writable = (main_write_w_buffer_level0 != 5'd16);
assign main_write_w_buffer_syncfifo_readable = (main_write_w_buffer_level0 != 1'd0);
assign main_write_id_buffer_syncfifo_din = {main_write_id_buffer_fifo_in_last, main_write_id_buffer_fifo_in_first, main_write_id_buffer_fifo_in_payload_id};
assign {main_write_id_buffer_fifo_out_last, main_write_id_buffer_fifo_out_first, main_write_id_buffer_fifo_out_payload_id} = main_write_id_buffer_syncfifo_dout;
assign main_write_id_buffer_sink_ready = main_write_id_buffer_syncfifo_writable;
assign main_write_id_buffer_syncfifo_we = main_write_id_buffer_sink_valid;
assign main_write_id_buffer_fifo_in_first = main_write_id_buffer_sink_first;
assign main_write_id_buffer_fifo_in_last = main_write_id_buffer_sink_last;
assign main_write_id_buffer_fifo_in_payload_id = main_write_id_buffer_sink_payload_id;
assign main_write_id_buffer_source_valid = main_write_id_buffer_syncfifo_readable;
assign main_write_id_buffer_source_first = main_write_id_buffer_fifo_out_first;
assign main_write_id_buffer_source_last = main_write_id_buffer_fifo_out_last;
assign main_write_id_buffer_source_payload_id = main_write_id_buffer_fifo_out_payload_id;
assign main_write_id_buffer_syncfifo_re = main_write_id_buffer_source_ready;
always @(*) begin
    main_write_id_buffer_wrport_adr <= 4'd0;
    if (main_write_id_buffer_replace) begin
        main_write_id_buffer_wrport_adr <= (main_write_id_buffer_produce - 1'd1);
    end else begin
        main_write_id_buffer_wrport_adr <= main_write_id_buffer_produce;
    end
end
assign main_write_id_buffer_wrport_dat_w = main_write_id_buffer_syncfifo_din;
assign main_write_id_buffer_wrport_we = (main_write_id_buffer_syncfifo_we & (main_write_id_buffer_syncfifo_writable | main_write_id_buffer_replace));
assign main_write_id_buffer_do_read = (main_write_id_buffer_syncfifo_readable & main_write_id_buffer_syncfifo_re);
assign main_write_id_buffer_rdport_adr = main_write_id_buffer_consume;
assign main_write_id_buffer_syncfifo_dout = main_write_id_buffer_rdport_dat_r;
assign main_write_id_buffer_syncfifo_writable = (main_write_id_buffer_level != 5'd16);
assign main_write_id_buffer_syncfifo_readable = (main_write_id_buffer_level != 1'd0);
assign main_write_resp_buffer_syncfifo_din = {main_write_resp_buffer_fifo_in_last, main_write_resp_buffer_fifo_in_first, main_write_resp_buffer_fifo_in_payload_resp, main_write_resp_buffer_fifo_in_payload_id};
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign main_write_resp_buffer_sink_ready = main_write_resp_buffer_syncfifo_writable;
assign main_write_resp_buffer_syncfifo_we = main_write_resp_buffer_sink_valid;
assign main_write_resp_buffer_fifo_in_first = main_write_resp_buffer_sink_first;
assign main_write_resp_buffer_fifo_in_last = main_write_resp_buffer_sink_last;
assign main_write_resp_buffer_fifo_in_payload_id = main_write_resp_buffer_sink_payload_id;
assign main_write_resp_buffer_fifo_in_payload_resp = main_write_resp_buffer_sink_payload_resp;
assign main_write_resp_buffer_source_valid = main_write_resp_buffer_syncfifo_readable;
assign main_write_resp_buffer_source_first = main_write_resp_buffer_fifo_out_first;
assign main_write_resp_buffer_source_last = main_write_resp_buffer_fifo_out_last;
assign main_write_resp_buffer_source_payload_id = main_write_resp_buffer_fifo_out_payload_id;
assign main_write_resp_buffer_source_payload_resp = main_write_resp_buffer_fifo_out_payload_resp;
assign main_write_resp_buffer_syncfifo_re = main_write_resp_buffer_source_ready;
always @(*) begin
    main_write_resp_buffer_wrport_adr <= 4'd0;
    if (main_write_resp_buffer_replace) begin
        main_write_resp_buffer_wrport_adr <= (main_write_resp_buffer_produce - 1'd1);
    end else begin
        main_write_resp_buffer_wrport_adr <= main_write_resp_buffer_produce;
    end
end
assign main_write_resp_buffer_wrport_dat_w = main_write_resp_buffer_syncfifo_din;
assign main_write_resp_buffer_wrport_we = (main_write_resp_buffer_syncfifo_we & (main_write_resp_buffer_syncfifo_writable | main_write_resp_buffer_replace));
assign main_write_resp_buffer_do_read = (main_write_resp_buffer_syncfifo_readable & main_write_resp_buffer_syncfifo_re);
assign main_write_resp_buffer_rdport_adr = main_write_resp_buffer_consume;
assign main_write_resp_buffer_syncfifo_dout = main_write_resp_buffer_rdport_dat_r;
assign main_write_resp_buffer_syncfifo_writable = (main_write_resp_buffer_level != 5'd16);
assign main_write_resp_buffer_syncfifo_readable = (main_write_resp_buffer_level != 1'd0);
assign main_read_sink_sink_valid = main_rocket_mem_axi_ar_valid;
assign main_rocket_mem_axi_ar_ready = main_read_sink_sink_ready;
assign main_read_sink_sink_first = main_rocket_mem_axi_ar_first;
assign main_read_sink_sink_last = main_rocket_mem_axi_ar_last;
assign main_read_sink_sink_payload_addr = main_rocket_mem_axi_ar_payload_addr;
assign main_read_sink_sink_payload_burst = main_rocket_mem_axi_ar_payload_burst;
assign main_read_sink_sink_payload_len = main_rocket_mem_axi_ar_payload_len;
assign main_read_sink_sink_payload_size = main_rocket_mem_axi_ar_payload_size;
assign main_read_sink_sink_payload_lock = main_rocket_mem_axi_ar_payload_lock;
assign main_read_sink_sink_payload_prot = main_rocket_mem_axi_ar_payload_prot;
assign main_read_sink_sink_payload_cache = main_rocket_mem_axi_ar_payload_cache;
assign main_read_sink_sink_payload_qos = main_rocket_mem_axi_ar_payload_qos;
assign main_read_sink_sink_payload_region = main_rocket_mem_axi_ar_payload_region;
assign main_read_sink_sink_param_id = main_rocket_mem_axi_ar_param_id;
assign main_read_sink_sink_param_dest = main_rocket_mem_axi_ar_param_dest;
assign main_read_sink_sink_param_user = main_rocket_mem_axi_ar_param_user;
assign main_read_r_buffer_queue = ((main_port_cmd_valid & main_port_cmd_ready) & (~main_port_cmd_payload_we));
assign main_read_r_buffer_dequeue = (main_read_r_buffer_source_valid & main_read_r_buffer_source_ready);
assign main_read_can_read = (main_read_r_buffer_level2 != 5'd16);
assign main_read_id_buffer_sink_valid = (main_read_ar_valid & main_read_ar_ready);
assign main_read_id_buffer_sink_last = main_read_ar_last;
assign main_read_id_buffer_sink_payload_id = main_read_ar_param_id;
assign main_rocket_mem_axi_r_last = main_read_id_buffer_source_last;
assign main_rocket_mem_axi_r_param_id = main_read_id_buffer_source_payload_id;
assign main_read_id_buffer_source_ready = (main_rocket_mem_axi_r_valid & main_rocket_mem_axi_r_ready);
assign main_read_cmd_request = (main_read_ar_valid & main_read_can_read);
always @(*) begin
    main_port_cmd_last <= 1'd0;
    main_port_cmd_payload_addr <= 26'd0;
    main_port_cmd_payload_we <= 1'd0;
    main_port_cmd_valid <= 1'd0;
    main_read_ar_ready <= 1'd0;
    main_write_aw_ready <= 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_port_cmd_valid <= 1'd1;
        main_port_cmd_last <= main_write_aw_last;
        main_port_cmd_payload_we <= 1'd1;
        main_port_cmd_payload_addr <= ((main_write_aw_payload_addr - 32'd2147483648) >>> 3'd6);
        if (main_port_cmd_ready) begin
            main_write_aw_ready <= 1'd1;
        end
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_port_cmd_valid <= 1'd1;
        main_port_cmd_last <= main_read_ar_last;
        main_port_cmd_payload_we <= 1'd0;
        main_port_cmd_payload_addr <= ((main_read_ar_payload_addr - 32'd2147483648) >>> 3'd6);
        if (main_port_cmd_ready) begin
            main_read_ar_ready <= 1'd1;
        end
    end
end
assign main_read_r_buffer_sink_valid = main_port_rdata_valid;
assign main_port_rdata_ready = main_read_r_buffer_sink_ready;
assign main_read_r_buffer_sink_first = main_port_rdata_first;
assign main_read_r_buffer_sink_last = main_port_rdata_last;
assign main_read_r_buffer_sink_payload_data = main_port_rdata_payload_data;
assign main_rocket_mem_axi_r_valid = main_read_r_buffer_source_valid;
assign main_read_r_buffer_source_ready = main_rocket_mem_axi_r_ready;
assign main_rocket_mem_axi_r_first = main_read_r_buffer_source_first;
assign main_rocket_mem_axi_r_payload_data = main_read_r_buffer_source_payload_data;
assign main_rocket_mem_axi_r_param_dest = main_read_r_buffer_source_param_dest;
assign main_rocket_mem_axi_r_param_user = main_read_r_buffer_source_param_user;
always @(*) begin
    main_rocket_mem_axi_r_payload_resp <= 2'd0;
    main_rocket_mem_axi_r_payload_resp <= main_read_r_buffer_source_payload_resp;
    main_rocket_mem_axi_r_payload_resp <= 1'd0;
end
assign main_read_pipe_valid_sink_ready = ((~main_read_pipe_valid_source_valid) | main_read_pipe_valid_source_ready);
assign main_read_pipe_valid_sink_valid = main_read_sink_sink_valid;
assign main_read_sink_sink_ready = main_read_pipe_valid_sink_ready;
assign main_read_pipe_valid_sink_first = main_read_sink_sink_first;
assign main_read_pipe_valid_sink_last = main_read_sink_sink_last;
assign main_read_pipe_valid_sink_payload_addr = main_read_sink_sink_payload_addr;
assign main_read_pipe_valid_sink_payload_burst = main_read_sink_sink_payload_burst;
assign main_read_pipe_valid_sink_payload_len = main_read_sink_sink_payload_len;
assign main_read_pipe_valid_sink_payload_size = main_read_sink_sink_payload_size;
assign main_read_pipe_valid_sink_payload_lock = main_read_sink_sink_payload_lock;
assign main_read_pipe_valid_sink_payload_prot = main_read_sink_sink_payload_prot;
assign main_read_pipe_valid_sink_payload_cache = main_read_sink_sink_payload_cache;
assign main_read_pipe_valid_sink_payload_qos = main_read_sink_sink_payload_qos;
assign main_read_pipe_valid_sink_payload_region = main_read_sink_sink_payload_region;
assign main_read_pipe_valid_sink_param_id = main_read_sink_sink_param_id;
assign main_read_pipe_valid_sink_param_dest = main_read_sink_sink_param_dest;
assign main_read_pipe_valid_sink_param_user = main_read_sink_sink_param_user;
assign main_read_source_source_valid = main_read_pipe_valid_source_valid;
assign main_read_pipe_valid_source_ready = main_read_source_source_ready;
assign main_read_source_source_first = main_read_pipe_valid_source_first;
assign main_read_source_source_last = main_read_pipe_valid_source_last;
assign main_read_source_source_payload_addr = main_read_pipe_valid_source_payload_addr;
assign main_read_source_source_payload_burst = main_read_pipe_valid_source_payload_burst;
assign main_read_source_source_payload_len = main_read_pipe_valid_source_payload_len;
assign main_read_source_source_payload_size = main_read_pipe_valid_source_payload_size;
assign main_read_source_source_payload_lock = main_read_pipe_valid_source_payload_lock;
assign main_read_source_source_payload_prot = main_read_pipe_valid_source_payload_prot;
assign main_read_source_source_payload_cache = main_read_pipe_valid_source_payload_cache;
assign main_read_source_source_payload_qos = main_read_pipe_valid_source_payload_qos;
assign main_read_source_source_payload_region = main_read_pipe_valid_source_payload_region;
assign main_read_source_source_param_id = main_read_pipe_valid_source_param_id;
assign main_read_source_source_param_dest = main_read_pipe_valid_source_param_dest;
assign main_read_source_source_param_user = main_read_pipe_valid_source_param_user;
assign main_read_beat_size = (1'd1 <<< main_read_source_source_payload_size);
assign main_read_beat_wrap = (main_read_source_source_payload_len <<< main_read_source_source_payload_size);
assign main_read_ar_valid = (main_read_source_source_valid | (~main_read_ar_first));
assign main_read_ar_first = (main_read_beat_count == 1'd0);
assign main_read_ar_last = (main_read_beat_count == main_read_source_source_payload_len);
assign main_read_ar_payload_addr = ($signed({1'd0, main_read_source_source_payload_addr}) + main_read_beat_offset);
assign main_read_ar_param_id = main_read_source_source_param_id;
always @(*) begin
    main_read_source_source_ready <= 1'd0;
    if (main_read_ar_ready) begin
        if (main_read_ar_last) begin
            main_read_source_source_ready <= 1'd1;
        end
    end
end
assign main_read_r_buffer_syncfifo_din = {main_read_r_buffer_fifo_in_last, main_read_r_buffer_fifo_in_first, main_read_r_buffer_fifo_in_param_user, main_read_r_buffer_fifo_in_param_dest, main_read_r_buffer_fifo_in_param_id, main_read_r_buffer_fifo_in_payload_data, main_read_r_buffer_fifo_in_payload_resp};
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign main_read_r_buffer_sink_ready = main_read_r_buffer_syncfifo_writable;
assign main_read_r_buffer_syncfifo_we = main_read_r_buffer_sink_valid;
assign main_read_r_buffer_fifo_in_first = main_read_r_buffer_sink_first;
assign main_read_r_buffer_fifo_in_last = main_read_r_buffer_sink_last;
assign main_read_r_buffer_fifo_in_payload_resp = main_read_r_buffer_sink_payload_resp;
assign main_read_r_buffer_fifo_in_payload_data = main_read_r_buffer_sink_payload_data;
assign main_read_r_buffer_fifo_in_param_id = main_read_r_buffer_sink_param_id;
assign main_read_r_buffer_fifo_in_param_dest = main_read_r_buffer_sink_param_dest;
assign main_read_r_buffer_fifo_in_param_user = main_read_r_buffer_sink_param_user;
assign main_read_r_buffer_source_valid = main_read_r_buffer_readable;
assign main_read_r_buffer_source_first = main_read_r_buffer_fifo_out_first;
assign main_read_r_buffer_source_last = main_read_r_buffer_fifo_out_last;
assign main_read_r_buffer_source_payload_resp = main_read_r_buffer_fifo_out_payload_resp;
assign main_read_r_buffer_source_payload_data = main_read_r_buffer_fifo_out_payload_data;
assign main_read_r_buffer_source_param_id = main_read_r_buffer_fifo_out_param_id;
assign main_read_r_buffer_source_param_dest = main_read_r_buffer_fifo_out_param_dest;
assign main_read_r_buffer_source_param_user = main_read_r_buffer_fifo_out_param_user;
assign main_read_r_buffer_re = main_read_r_buffer_source_ready;
assign main_read_r_buffer_syncfifo_re = (main_read_r_buffer_syncfifo_readable & ((~main_read_r_buffer_readable) | main_read_r_buffer_re));
assign main_read_r_buffer_level1 = (main_read_r_buffer_level0 + main_read_r_buffer_readable);
always @(*) begin
    main_read_r_buffer_wrport_adr <= 4'd0;
    if (main_read_r_buffer_replace) begin
        main_read_r_buffer_wrport_adr <= (main_read_r_buffer_produce - 1'd1);
    end else begin
        main_read_r_buffer_wrport_adr <= main_read_r_buffer_produce;
    end
end
assign main_read_r_buffer_wrport_dat_w = main_read_r_buffer_syncfifo_din;
assign main_read_r_buffer_wrport_we = (main_read_r_buffer_syncfifo_we & (main_read_r_buffer_syncfifo_writable | main_read_r_buffer_replace));
assign main_read_r_buffer_do_read = (main_read_r_buffer_syncfifo_readable & main_read_r_buffer_syncfifo_re);
assign main_read_r_buffer_rdport_adr = main_read_r_buffer_consume;
assign main_read_r_buffer_syncfifo_dout = main_read_r_buffer_rdport_dat_r;
assign main_read_r_buffer_rdport_re = main_read_r_buffer_do_read;
assign main_read_r_buffer_syncfifo_writable = (main_read_r_buffer_level0 != 5'd16);
assign main_read_r_buffer_syncfifo_readable = (main_read_r_buffer_level0 != 1'd0);
assign main_read_id_buffer_syncfifo_din = {main_read_id_buffer_fifo_in_last, main_read_id_buffer_fifo_in_first, main_read_id_buffer_fifo_in_payload_id};
assign {main_read_id_buffer_fifo_out_last, main_read_id_buffer_fifo_out_first, main_read_id_buffer_fifo_out_payload_id} = main_read_id_buffer_syncfifo_dout;
assign main_read_id_buffer_sink_ready = main_read_id_buffer_syncfifo_writable;
assign main_read_id_buffer_syncfifo_we = main_read_id_buffer_sink_valid;
assign main_read_id_buffer_fifo_in_first = main_read_id_buffer_sink_first;
assign main_read_id_buffer_fifo_in_last = main_read_id_buffer_sink_last;
assign main_read_id_buffer_fifo_in_payload_id = main_read_id_buffer_sink_payload_id;
assign main_read_id_buffer_source_valid = main_read_id_buffer_syncfifo_readable;
assign main_read_id_buffer_source_first = main_read_id_buffer_fifo_out_first;
assign main_read_id_buffer_source_last = main_read_id_buffer_fifo_out_last;
assign main_read_id_buffer_source_payload_id = main_read_id_buffer_fifo_out_payload_id;
assign main_read_id_buffer_syncfifo_re = main_read_id_buffer_source_ready;
always @(*) begin
    main_read_id_buffer_wrport_adr <= 4'd0;
    if (main_read_id_buffer_replace) begin
        main_read_id_buffer_wrport_adr <= (main_read_id_buffer_produce - 1'd1);
    end else begin
        main_read_id_buffer_wrport_adr <= main_read_id_buffer_produce;
    end
end
assign main_read_id_buffer_wrport_dat_w = main_read_id_buffer_syncfifo_din;
assign main_read_id_buffer_wrport_we = (main_read_id_buffer_syncfifo_we & (main_read_id_buffer_syncfifo_writable | main_read_id_buffer_replace));
assign main_read_id_buffer_do_read = (main_read_id_buffer_syncfifo_readable & main_read_id_buffer_syncfifo_re);
assign main_read_id_buffer_rdport_adr = main_read_id_buffer_consume;
assign main_read_id_buffer_syncfifo_dout = main_read_id_buffer_rdport_dat_r;
assign main_read_id_buffer_syncfifo_writable = (main_read_id_buffer_level != 5'd16);
assign main_read_id_buffer_syncfifo_readable = (main_read_id_buffer_level != 1'd0);
assign main_v7_1000basex_reset = main_v7_1000basex_storage;
assign main_v7_1000basex_tx_mmcm_reset1 = main_v7_1000basex_tx_mmcm_reset0;
assign main_v7_1000basex_tx_mmcm_locked0 = main_v7_1000basex_tx_mmcm_locked1;
assign main_v7_1000basex_rx_mmcm_reset1 = main_v7_1000basex_rx_mmcm_reset0;
assign main_v7_1000basex_rx_mmcm_locked0 = main_v7_1000basex_rx_mmcm_locked1;
assign main_v7_1000basex_tx_init_reset = main_v7_1000basex_reset;
assign main_v7_1000basex_pll_reset = main_v7_1000basex_gthtxinit_pllreset;
assign main_v7_1000basex_gthtxinit_plllock0 = main_v7_1000basex_pll_lock;
assign main_v7_1000basex_tx_reset = main_v7_1000basex_gthtxinit_gtXxreset0;
assign main_v7_1000basex_gthtxinit_Xxresetdone0 = main_v7_1000basex_tx_reset_done;
assign main_v7_1000basex_rx_init_reset = ((~main_v7_1000basex_gthtxinit_done) | main_v7_1000basex_reset);
assign main_v7_1000basex_gthrxinit_plllock0 = main_v7_1000basex_pll_lock;
assign main_v7_1000basex_rx_reset = main_v7_1000basex_gthrxinit_gtXxreset0;
assign main_v7_1000basex_gthrxinit_Xxresetdone0 = main_v7_1000basex_rx_reset_done;
assign main_v7_1000basex_i = main_v7_1000basex_pcs_restart;
assign main_v7_1000basex_gthrxinit_restart = main_v7_1000basex_o;
assign main_v7_1000basex_tx_data0 = main_v7_1000basex_tx_data_half;
assign main_v7_1000basex_rx_data_half = main_v7_1000basex_rx_data0;
assign main_v7_1000basex_tx_data1 = main_v7_1000basex_pcs_pcstx_output0;
assign main_v7_1000basex_pcs_pcsrx_input = main_v7_1000basex_rx_data1;
assign main_v7_1000basex_pcs_pcstx_tx_valid = main_v7_1000basex_pcs_sink_valid;
assign main_v7_1000basex_pcs_sink_ready = main_v7_1000basex_pcs_pcstx_tx_ready;
assign main_v7_1000basex_pcs_pcstx_tx_data = main_v7_1000basex_pcs_sink_payload_data;
assign main_v7_1000basex_pcs_source_last = ((~main_v7_1000basex_pcs_pcsrx_rx_en) & main_v7_1000basex_pcs_rx_en_d);
assign main_v7_1000basex_pcs_seen_valid_ci_i = main_v7_1000basex_pcs_pcsrx_seen_valid_ci;
assign main_v7_1000basex_pcs_is_sgmii = main_v7_1000basex_pcs_lp_abi_o[0];
assign main_v7_1000basex_pcs_linkdown = ((main_v7_1000basex_pcs_lp_abi_o[0] & (~main_v7_1000basex_pcs_lp_abi_o[15])) | (main_v7_1000basex_pcs_lp_abi_o == 1'd0));
assign main_v7_1000basex_pcs_pcstx_sgmii_speed = (main_v7_1000basex_pcs_lp_abi_o[0] ? main_v7_1000basex_pcs_lp_abi_o[11:10] : 2'd2);
assign main_v7_1000basex_pcs_pcsrx_sgmii_speed = (main_v7_1000basex_pcs_lp_abi_i[0] ? main_v7_1000basex_pcs_lp_abi_i[11:10] : 2'd2);
assign main_v7_1000basex_pcs_pcstx_config_reg = (main_v7_1000basex_pcs_tx_config_empty ? 1'd0 : (((((main_v7_1000basex_pcs_is_sgmii | ((~main_v7_1000basex_pcs_is_sgmii) <<< 3'd5)) | ((main_v7_1000basex_pcs_lp_abi_o[0] ? main_v7_1000basex_pcs_lp_abi_o[11:10] : 1'd0) <<< 4'd10)) | (main_v7_1000basex_pcs_is_sgmii <<< 4'd12)) | (main_v7_1000basex_pcs_autoneg_ack <<< 4'd14)) | (main_v7_1000basex_pcs_is_sgmii & main_v7_1000basex_pcs_link_up)));
assign main_v7_1000basex_pcs_pcstx_ce1 = main_v7_1000basex_pcs_pcstx_ce0;
assign main_v7_1000basex_pcs_pcstx_d1 = main_v7_1000basex_pcs_pcstx_d0;
assign main_v7_1000basex_pcs_pcstx_k1 = main_v7_1000basex_pcs_pcstx_k0;
assign main_v7_1000basex_pcs_pcstx_disp_inter = (main_v7_1000basex_pcs_pcstx_disp_in ^ main_v7_1000basex_pcs_pcstx_code6b_unbalanced);
always @(*) begin
    main_v7_1000basex_pcs_pcstx_output_6b <= 6'd0;
    if (((~main_v7_1000basex_pcs_pcstx_disp_in) & main_v7_1000basex_pcs_pcstx_code6b_flip)) begin
        main_v7_1000basex_pcs_pcstx_output_6b <= (~main_v7_1000basex_pcs_pcstx_code6b);
    end else begin
        main_v7_1000basex_pcs_pcstx_output_6b <= main_v7_1000basex_pcs_pcstx_code6b;
    end
end
always @(*) begin
    main_v7_1000basex_pcs_pcstx_disp_out <= 1'd0;
    main_v7_1000basex_pcs_pcstx_output_4b <= 4'd0;
    if (((~main_v7_1000basex_pcs_pcstx_disp_inter) & main_v7_1000basex_pcs_pcstx_alt7_rd0)) begin
        main_v7_1000basex_pcs_pcstx_disp_out <= (~main_v7_1000basex_pcs_pcstx_disp_inter);
        main_v7_1000basex_pcs_pcstx_output_4b <= 3'd7;
    end else begin
        if ((main_v7_1000basex_pcs_pcstx_disp_inter & main_v7_1000basex_pcs_pcstx_alt7_rd1)) begin
            main_v7_1000basex_pcs_pcstx_disp_out <= (~main_v7_1000basex_pcs_pcstx_disp_inter);
            main_v7_1000basex_pcs_pcstx_output_4b <= 4'd8;
        end else begin
            main_v7_1000basex_pcs_pcstx_disp_out <= (main_v7_1000basex_pcs_pcstx_disp_inter ^ main_v7_1000basex_pcs_pcstx_code4b_unbalanced);
            if (((~main_v7_1000basex_pcs_pcstx_disp_inter) & main_v7_1000basex_pcs_pcstx_code4b_flip)) begin
                main_v7_1000basex_pcs_pcstx_output_4b <= (~main_v7_1000basex_pcs_pcstx_code4b);
            end else begin
                main_v7_1000basex_pcs_pcstx_output_4b <= main_v7_1000basex_pcs_pcstx_code4b;
            end
        end
    end
end
assign main_v7_1000basex_pcs_pcstx_output_msb_first = {main_v7_1000basex_pcs_pcstx_output_6b, main_v7_1000basex_pcs_pcstx_output_4b};
always @(*) begin
    main_v7_1000basex_pcs_pcstx_output1 <= 10'd0;
    main_v7_1000basex_pcs_pcstx_output1[0] <= main_v7_1000basex_pcs_pcstx_output_msb_first[9];
    main_v7_1000basex_pcs_pcstx_output1[1] <= main_v7_1000basex_pcs_pcstx_output_msb_first[8];
    main_v7_1000basex_pcs_pcstx_output1[2] <= main_v7_1000basex_pcs_pcstx_output_msb_first[7];
    main_v7_1000basex_pcs_pcstx_output1[3] <= main_v7_1000basex_pcs_pcstx_output_msb_first[6];
    main_v7_1000basex_pcs_pcstx_output1[4] <= main_v7_1000basex_pcs_pcstx_output_msb_first[5];
    main_v7_1000basex_pcs_pcstx_output1[5] <= main_v7_1000basex_pcs_pcstx_output_msb_first[4];
    main_v7_1000basex_pcs_pcstx_output1[6] <= main_v7_1000basex_pcs_pcstx_output_msb_first[3];
    main_v7_1000basex_pcs_pcstx_output1[7] <= main_v7_1000basex_pcs_pcstx_output_msb_first[2];
    main_v7_1000basex_pcs_pcstx_output1[8] <= main_v7_1000basex_pcs_pcstx_output_msb_first[1];
    main_v7_1000basex_pcs_pcstx_output1[9] <= main_v7_1000basex_pcs_pcstx_output_msb_first[0];
end
always @(*) begin
    builder_basesoc_pcstx_next_state <= 3'd0;
    main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value <= 1'd0;
    main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value_ce <= 1'd0;
    main_v7_1000basex_pcs_pcstx_d0 <= 8'd0;
    main_v7_1000basex_pcs_pcstx_k0 <= 1'd0;
    main_v7_1000basex_pcs_pcstx_load_config_reg_buffer <= 1'd0;
    main_v7_1000basex_pcs_pcstx_timer_en <= 1'd0;
    main_v7_1000basex_pcs_pcstx_tx_ready <= 1'd0;
    builder_basesoc_pcstx_next_state <= builder_basesoc_pcstx_state;
    case (builder_basesoc_pcstx_state)
        1'd1: begin
            if (main_v7_1000basex_pcs_pcstx_c_type) begin
                main_v7_1000basex_pcs_pcstx_d0 <= 7'd66;
            end else begin
                main_v7_1000basex_pcs_pcstx_d0 <= 8'd181;
            end
            main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value <= (~main_v7_1000basex_pcs_pcstx_c_type);
            main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value_ce <= 1'd1;
            builder_basesoc_pcstx_next_state <= 2'd2;
        end
        2'd2: begin
            main_v7_1000basex_pcs_pcstx_d0 <= main_v7_1000basex_pcs_pcstx_config_reg_buffer[7:0];
            builder_basesoc_pcstx_next_state <= 2'd3;
        end
        2'd3: begin
            main_v7_1000basex_pcs_pcstx_d0 <= main_v7_1000basex_pcs_pcstx_config_reg_buffer[15:8];
            builder_basesoc_pcstx_next_state <= 1'd0;
        end
        3'd4: begin
            if (main_v7_1000basex_pcs_pcstx_disparity) begin
                main_v7_1000basex_pcs_pcstx_d0 <= 8'd197;
            end else begin
                main_v7_1000basex_pcs_pcstx_d0 <= 7'd80;
            end
            builder_basesoc_pcstx_next_state <= 1'd0;
        end
        3'd5: begin
            if (main_v7_1000basex_pcs_pcstx_tx_valid) begin
                main_v7_1000basex_pcs_pcstx_tx_ready <= (main_v7_1000basex_pcs_pcstx_timer == 1'd0);
                main_v7_1000basex_pcs_pcstx_timer_en <= 1'd1;
                main_v7_1000basex_pcs_pcstx_d0 <= main_v7_1000basex_pcs_pcstx_tx_data;
            end else begin
                main_v7_1000basex_pcs_pcstx_tx_ready <= 1'd1;
                main_v7_1000basex_pcs_pcstx_k0 <= 1'd1;
                main_v7_1000basex_pcs_pcstx_d0 <= 8'd253;
                builder_basesoc_pcstx_next_state <= 3'd6;
            end
        end
        3'd6: begin
            main_v7_1000basex_pcs_pcstx_k0 <= 1'd1;
            main_v7_1000basex_pcs_pcstx_d0 <= 8'd247;
            if (main_v7_1000basex_pcs_pcstx_parity) begin
                builder_basesoc_pcstx_next_state <= 1'd0;
            end else begin
                builder_basesoc_pcstx_next_state <= 3'd7;
            end
        end
        3'd7: begin
            main_v7_1000basex_pcs_pcstx_k0 <= 1'd1;
            main_v7_1000basex_pcs_pcstx_d0 <= 8'd247;
            builder_basesoc_pcstx_next_state <= 1'd0;
        end
        default: begin
            if (main_v7_1000basex_pcs_pcstx_config_valid) begin
                main_v7_1000basex_pcs_pcstx_tx_ready <= 1'd1;
                main_v7_1000basex_pcs_pcstx_load_config_reg_buffer <= 1'd1;
                main_v7_1000basex_pcs_pcstx_k0 <= 1'd1;
                main_v7_1000basex_pcs_pcstx_d0 <= 8'd188;
                builder_basesoc_pcstx_next_state <= 1'd1;
            end else begin
                if (main_v7_1000basex_pcs_pcstx_tx_valid) begin
                    main_v7_1000basex_pcs_pcstx_tx_ready <= (main_v7_1000basex_pcs_pcstx_timer == 1'd0);
                    main_v7_1000basex_pcs_pcstx_timer_en <= 1'd1;
                    main_v7_1000basex_pcs_pcstx_k0 <= 1'd1;
                    main_v7_1000basex_pcs_pcstx_d0 <= 8'd251;
                    builder_basesoc_pcstx_next_state <= 3'd5;
                end else begin
                    main_v7_1000basex_pcs_pcstx_tx_ready <= 1'd1;
                    main_v7_1000basex_pcs_pcstx_k0 <= 1'd1;
                    main_v7_1000basex_pcs_pcstx_d0 <= 8'd188;
                    builder_basesoc_pcstx_next_state <= 3'd4;
                end
            end
        end
    endcase
end
assign main_v7_1000basex_pcs_pcsrx_rx_data = (main_v7_1000basex_pcs_pcsrx_first_preamble_byte ? 7'd85 : main_v7_1000basex_pcs_pcsrx_d);
assign main_v7_1000basex_pcs_pcsrx_sample_en = (main_v7_1000basex_pcs_pcsrx_rx_en & (main_v7_1000basex_pcs_pcsrx_timer == 1'd0));
always @(*) begin
    main_v7_1000basex_pcs_pcsrx_input_msb_first <= 10'd0;
    main_v7_1000basex_pcs_pcsrx_input_msb_first[0] <= main_v7_1000basex_pcs_pcsrx_input[9];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[1] <= main_v7_1000basex_pcs_pcsrx_input[8];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[2] <= main_v7_1000basex_pcs_pcsrx_input[7];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[3] <= main_v7_1000basex_pcs_pcsrx_input[6];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[4] <= main_v7_1000basex_pcs_pcsrx_input[5];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[5] <= main_v7_1000basex_pcs_pcsrx_input[4];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[6] <= main_v7_1000basex_pcs_pcsrx_input[3];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[7] <= main_v7_1000basex_pcs_pcsrx_input[2];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[8] <= main_v7_1000basex_pcs_pcsrx_input[1];
    main_v7_1000basex_pcs_pcsrx_input_msb_first[9] <= main_v7_1000basex_pcs_pcsrx_input[0];
end
assign main_v7_1000basex_pcs_pcsrx_adr = main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4];
assign main_v7_1000basex_pcs_pcsrx_re = main_v7_1000basex_pcs_pcsrx_ce;
assign main_v7_1000basex_pcs_pcsrx_code5b = main_v7_1000basex_pcs_pcsrx_dat_r;
assign main_v7_1000basex_pcs_pcsrx_d = {main_v7_1000basex_pcs_pcsrx_code3b, main_v7_1000basex_pcs_pcsrx_code5b};
assign main_v7_1000basex_pcs_pcsrx_invalid = (((main_v7_1000basex_pcs_pcsrx_ones != 3'd4) & (main_v7_1000basex_pcs_pcsrx_ones != 3'd5)) & (main_v7_1000basex_pcs_pcsrx_ones != 3'd6));
always @(*) begin
    builder_basesoc_pcsrx_next_state <= 3'd0;
    main_v7_1000basex_pcs_pcsrx_first_preamble_byte <= 1'd0;
    main_v7_1000basex_pcs_pcsrx_load_config_reg_lsb <= 1'd0;
    main_v7_1000basex_pcs_pcsrx_load_config_reg_msb <= 1'd0;
    main_v7_1000basex_pcs_pcsrx_rx_en <= 1'd0;
    main_v7_1000basex_pcs_pcsrx_seen_valid_ci <= 1'd0;
    main_v7_1000basex_pcs_pcsrx_timer_en <= 1'd0;
    builder_basesoc_pcsrx_next_state <= builder_basesoc_pcsrx_state;
    case (builder_basesoc_pcsrx_state)
        1'd1: begin
            builder_basesoc_pcsrx_next_state <= 1'd0;
            if ((~main_v7_1000basex_pcs_pcsrx_k)) begin
                if (((main_v7_1000basex_pcs_pcsrx_d == 8'd181) | (main_v7_1000basex_pcs_pcsrx_d == 7'd66))) begin
                    main_v7_1000basex_pcs_pcsrx_seen_valid_ci <= 1'd1;
                    builder_basesoc_pcsrx_next_state <= 2'd2;
                end
                if (((main_v7_1000basex_pcs_pcsrx_d == 8'd197) | (main_v7_1000basex_pcs_pcsrx_d == 7'd80))) begin
                    main_v7_1000basex_pcs_pcsrx_seen_valid_ci <= 1'd1;
                    builder_basesoc_pcsrx_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            if (main_v7_1000basex_pcs_pcsrx_k) begin
                if ((main_v7_1000basex_pcs_pcsrx_d == 8'd251)) begin
                    main_v7_1000basex_pcs_pcsrx_rx_en <= 1'd1;
                    main_v7_1000basex_pcs_pcsrx_timer_en <= 1'd1;
                    main_v7_1000basex_pcs_pcsrx_first_preamble_byte <= 1'd1;
                    builder_basesoc_pcsrx_next_state <= 3'd4;
                end else begin
                    builder_basesoc_pcsrx_next_state <= 1'd0;
                end
            end else begin
                main_v7_1000basex_pcs_pcsrx_load_config_reg_lsb <= 1'd1;
                builder_basesoc_pcsrx_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if ((~main_v7_1000basex_pcs_pcsrx_k)) begin
                main_v7_1000basex_pcs_pcsrx_load_config_reg_msb <= 1'd1;
            end
            builder_basesoc_pcsrx_next_state <= 1'd0;
        end
        3'd4: begin
            if (main_v7_1000basex_pcs_pcsrx_k) begin
                builder_basesoc_pcsrx_next_state <= 1'd0;
            end else begin
                main_v7_1000basex_pcs_pcsrx_rx_en <= 1'd1;
                main_v7_1000basex_pcs_pcsrx_timer_en <= 1'd1;
            end
        end
        default: begin
            if (main_v7_1000basex_pcs_pcsrx_k) begin
                if ((main_v7_1000basex_pcs_pcsrx_d == 8'd188)) begin
                    builder_basesoc_pcsrx_next_state <= 1'd1;
                end
                if ((main_v7_1000basex_pcs_pcsrx_d == 8'd251)) begin
                    main_v7_1000basex_pcs_pcsrx_rx_en <= 1'd1;
                    main_v7_1000basex_pcs_pcsrx_timer_en <= 1'd1;
                    main_v7_1000basex_pcs_pcsrx_first_preamble_byte <= 1'd1;
                    builder_basesoc_pcsrx_next_state <= 3'd4;
                end
            end
        end
    endcase
end
assign main_v7_1000basex_pcs_lp_abi_wait = (~main_v7_1000basex_pcs_lp_abi_ping_i);
assign main_v7_1000basex_pcs_lp_abi_ping_i = ((main_v7_1000basex_pcs_lp_abi_starter | main_v7_1000basex_pcs_lp_abi_pong_o) | main_v7_1000basex_pcs_lp_abi_done);
assign main_v7_1000basex_pcs_lp_abi_pong_i = main_v7_1000basex_pcs_lp_abi_ping_o1;
assign main_v7_1000basex_pcs_lp_abi_ping_o0 = (main_v7_1000basex_pcs_lp_abi_ping_toggle_o ^ main_v7_1000basex_pcs_lp_abi_ping_toggle_o_r);
assign main_v7_1000basex_pcs_lp_abi_pong_o = (main_v7_1000basex_pcs_lp_abi_pong_toggle_o ^ main_v7_1000basex_pcs_lp_abi_pong_toggle_o_r);
assign main_v7_1000basex_pcs_lp_abi_done = (main_v7_1000basex_pcs_lp_abi_count == 1'd0);
assign main_v7_1000basex_pcs_seen_valid_ci_o = (main_v7_1000basex_pcs_seen_valid_ci_toggle_o ^ main_v7_1000basex_pcs_seen_valid_ci_toggle_o_r);
assign main_v7_1000basex_pcs_rx_config_reg_abi_o = (main_v7_1000basex_pcs_rx_config_reg_abi_toggle_o ^ main_v7_1000basex_pcs_rx_config_reg_abi_toggle_o_r);
assign main_v7_1000basex_pcs_rx_config_reg_ack_o = (main_v7_1000basex_pcs_rx_config_reg_ack_toggle_o ^ main_v7_1000basex_pcs_rx_config_reg_ack_toggle_o_r);
assign main_v7_1000basex_pcs_waittimer0_done = (main_v7_1000basex_pcs_waittimer0_count == 1'd0);
assign main_v7_1000basex_pcs_waittimer1_done = (main_v7_1000basex_pcs_waittimer1_count == 1'd0);
always @(*) begin
    builder_basesoc_fsm_next_state <= 3'd0;
    main_v7_1000basex_pcs_autoneg_ack <= 1'd0;
    main_v7_1000basex_pcs_link_up <= 1'd0;
    main_v7_1000basex_pcs_pcstx_config_valid <= 1'd0;
    main_v7_1000basex_pcs_restart <= 1'd0;
    main_v7_1000basex_pcs_tx_config_empty <= 1'd0;
    main_v7_1000basex_pcs_waittimer0_wait <= 1'd0;
    main_v7_1000basex_pcs_waittimer1_wait <= 1'd0;
    builder_basesoc_fsm_next_state <= builder_basesoc_fsm_state;
    case (builder_basesoc_fsm_state)
        1'd1: begin
            main_v7_1000basex_pcs_pcstx_config_valid <= 1'd1;
            if (main_v7_1000basex_pcs_rx_config_reg_abi_o) begin
                builder_basesoc_fsm_next_state <= 2'd2;
            end
            if ((main_v7_1000basex_pcs_checker_tick & (~main_v7_1000basex_pcs_checker_ok))) begin
                main_v7_1000basex_pcs_restart <= 1'd1;
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_v7_1000basex_pcs_pcstx_config_valid <= 1'd1;
            main_v7_1000basex_pcs_autoneg_ack <= 1'd1;
            if (main_v7_1000basex_pcs_rx_config_reg_ack_o) begin
                builder_basesoc_fsm_next_state <= 2'd3;
            end
            if ((main_v7_1000basex_pcs_checker_tick & (~main_v7_1000basex_pcs_checker_ok))) begin
                main_v7_1000basex_pcs_restart <= 1'd1;
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        2'd3: begin
            main_v7_1000basex_pcs_pcstx_config_valid <= 1'd1;
            main_v7_1000basex_pcs_autoneg_ack <= 1'd1;
            main_v7_1000basex_pcs_waittimer0_wait <= (~main_v7_1000basex_pcs_is_sgmii);
            main_v7_1000basex_pcs_waittimer1_wait <= main_v7_1000basex_pcs_is_sgmii;
            if (((main_v7_1000basex_pcs_is_sgmii & main_v7_1000basex_pcs_waittimer1_done) | ((~main_v7_1000basex_pcs_is_sgmii) & main_v7_1000basex_pcs_waittimer0_done))) begin
                builder_basesoc_fsm_next_state <= 3'd4;
            end
            if ((main_v7_1000basex_pcs_checker_tick & (~main_v7_1000basex_pcs_checker_ok))) begin
                main_v7_1000basex_pcs_restart <= 1'd1;
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        3'd4: begin
            main_v7_1000basex_pcs_link_up <= 1'd1;
            if (((main_v7_1000basex_pcs_checker_tick & (~main_v7_1000basex_pcs_checker_ok)) | main_v7_1000basex_pcs_linkdown)) begin
                main_v7_1000basex_pcs_restart <= 1'd1;
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        default: begin
            main_v7_1000basex_pcs_pcstx_config_valid <= 1'd1;
            main_v7_1000basex_pcs_tx_config_empty <= 1'd1;
            main_v7_1000basex_pcs_waittimer0_wait <= 1'd1;
            if (main_v7_1000basex_pcs_waittimer0_done) begin
                builder_basesoc_fsm_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_v7_1000basex_register_spdm_source_valid = main_v7_1000basex_register_spdm_source_source_valid;
assign main_v7_1000basex_register_spdm_source_source_ready = main_v7_1000basex_register_spdm_source_ready;
assign main_v7_1000basex_register_spdm_source_first = main_v7_1000basex_register_spdm_source_source_first;
assign main_v7_1000basex_register_spdm_source_last = main_v7_1000basex_register_spdm_source_source_last;
assign main_v7_1000basex_register_spdm_source_payload_data = main_v7_1000basex_register_spdm_source_source_payload_data;
assign main_v7_1000basex_register_spdm_source_source_valid = main_v7_1000basex_register_spdm_converter_source_valid;
assign main_v7_1000basex_register_spdm_converter_source_ready = main_v7_1000basex_register_spdm_source_source_ready;
assign main_v7_1000basex_register_spdm_source_source_first = main_v7_1000basex_register_spdm_converter_source_first;
assign main_v7_1000basex_register_spdm_source_source_last = main_v7_1000basex_register_spdm_converter_source_last;
assign main_v7_1000basex_register_spdm_source_source_payload_data = main_v7_1000basex_register_spdm_converter_source_payload_data;
assign main_v7_1000basex_register_spdm_converter_sink_ready = ((~main_v7_1000basex_register_spdm_converter_strobe_all) | main_v7_1000basex_register_spdm_converter_source_ready);
assign main_v7_1000basex_register_spdm_converter_source_valid = main_v7_1000basex_register_spdm_converter_strobe_all;
assign main_v7_1000basex_register_spdm_converter_load_part = (main_v7_1000basex_register_spdm_converter_sink_valid & main_v7_1000basex_register_spdm_converter_sink_ready);
assign main_v7_1000basex_s7mmcm0_clkin = main_v7_1000basex_txoutclk_rebuffer;
assign eth_tx_half_clk = main_v7_1000basex_s7mmcm0_clkout_buf0;
assign eth_tx_clk = main_v7_1000basex_s7mmcm0_clkout_buf1;
assign main_v7_1000basex_s7mmcm1_clkin = main_v7_1000basex_rxoutclk_rebuffer;
assign eth_rx_half_clk = main_v7_1000basex_s7mmcm1_clkout_buf0;
assign eth_rx_clk = main_v7_1000basex_s7mmcm1_clkout_buf1;
assign main_v7_1000basex_gthtxinit_Xxphaligndone_rising = (main_v7_1000basex_gthtxinit_Xxphaligndone1 & (~main_v7_1000basex_gthtxinit_Xxphaligndone_r));
assign main_v7_1000basex_gthtxinit_watchdog_wait = ((~main_v7_1000basex_gthtxinit_reset) & (~main_v7_1000basex_gthtxinit_done));
assign main_v7_1000basex_gthtxinit_reset = (main_v7_1000basex_gthtxinit_restart | main_v7_1000basex_gthtxinit_watchdog_done);
always @(*) begin
    builder_basesoc_gthtxinit_next_state <= 4'd0;
    main_v7_1000basex_gthtxinit_Xxdlysreset1 <= 1'd0;
    main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd0;
    main_v7_1000basex_gthtxinit_cdr_lock_timer_wait <= 1'd0;
    main_v7_1000basex_gthtxinit_done <= 1'd0;
    main_v7_1000basex_gthtxinit_drp_start <= 1'd0;
    main_v7_1000basex_gthtxinit_gtXxpd1 <= 1'd0;
    main_v7_1000basex_gthtxinit_gtXxreset1 <= 1'd0;
    main_v7_1000basex_gthtxinit_pllreset <= 1'd0;
    builder_basesoc_gthtxinit_next_state <= builder_basesoc_gthtxinit_state;
    case (builder_basesoc_gthtxinit_state)
        1'd1: begin
            main_v7_1000basex_gthtxinit_gtXxreset1 <= 1'd1;
            main_v7_1000basex_gthtxinit_pllreset <= 1'd1;
            main_v7_1000basex_gthtxinit_drp_start <= 1'd1;
            if (main_v7_1000basex_gthtxinit_drp_done) begin
                builder_basesoc_gthtxinit_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_v7_1000basex_gthtxinit_gtXxreset1 <= 1'd1;
            if (main_v7_1000basex_gthtxinit_plllock1) begin
                builder_basesoc_gthtxinit_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthtxinit_Xxresetdone1) begin
                builder_basesoc_gthtxinit_next_state <= 3'd4;
            end
        end
        3'd4: begin
            main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd1;
            main_v7_1000basex_gthtxinit_cdr_lock_timer_wait <= 1'd1;
            if (main_v7_1000basex_gthtxinit_cdr_lock_timer_done) begin
                if (1'd1) begin
                    builder_basesoc_gthtxinit_next_state <= 4'd9;
                end else begin
                    builder_basesoc_gthtxinit_next_state <= 3'd5;
                end
            end
        end
        3'd5: begin
            main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd1;
            main_v7_1000basex_gthtxinit_Xxdlysreset1 <= 1'd1;
            builder_basesoc_gthtxinit_next_state <= 3'd6;
        end
        3'd6: begin
            main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthtxinit_Xxdlysresetdone1) begin
                builder_basesoc_gthtxinit_next_state <= 3'd7;
            end
        end
        3'd7: begin
            main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthtxinit_Xxphaligndone_rising) begin
                builder_basesoc_gthtxinit_next_state <= 4'd8;
            end
        end
        4'd8: begin
            main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthtxinit_Xxphaligndone_rising) begin
                builder_basesoc_gthtxinit_next_state <= 4'd9;
            end
        end
        4'd9: begin
            main_v7_1000basex_gthtxinit_Xxuserrdy1 <= 1'd1;
            main_v7_1000basex_gthtxinit_done <= 1'd1;
            if (main_v7_1000basex_gthtxinit_restart) begin
                builder_basesoc_gthtxinit_next_state <= 1'd0;
            end
        end
        default: begin
            main_v7_1000basex_gthtxinit_gtXxreset1 <= 1'd1;
            main_v7_1000basex_gthtxinit_gtXxpd1 <= 1'd1;
            main_v7_1000basex_gthtxinit_pllreset <= 1'd1;
            builder_basesoc_gthtxinit_next_state <= 1'd1;
        end
    endcase
end
assign main_v7_1000basex_gthtxinit_cdr_lock_timer_done = (main_v7_1000basex_gthtxinit_cdr_lock_timer_count == 1'd0);
assign main_v7_1000basex_gthtxinit_watchdog_done = (main_v7_1000basex_gthtxinit_watchdog_count == 1'd0);
assign main_v7_1000basex_gthrxinit_Xxphaligndone_rising = (main_v7_1000basex_gthrxinit_Xxphaligndone1 & (~main_v7_1000basex_gthrxinit_Xxphaligndone_r));
assign main_v7_1000basex_gthrxinit_watchdog_wait = ((~main_v7_1000basex_gthrxinit_reset) & (~main_v7_1000basex_gthrxinit_done));
assign main_v7_1000basex_gthrxinit_reset = (main_v7_1000basex_gthrxinit_restart | main_v7_1000basex_gthrxinit_watchdog_done);
always @(*) begin
    builder_basesoc_gthrxinit_next_state <= 4'd0;
    main_v7_1000basex_gthrxinit_Xxdlysreset1 <= 1'd0;
    main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd0;
    main_v7_1000basex_gthrxinit_cdr_lock_timer_wait <= 1'd0;
    main_v7_1000basex_gthrxinit_done <= 1'd0;
    main_v7_1000basex_gthrxinit_drp_start <= 1'd0;
    main_v7_1000basex_gthrxinit_gtXxpd1 <= 1'd0;
    main_v7_1000basex_gthrxinit_gtXxreset1 <= 1'd0;
    main_v7_1000basex_gthrxinit_pllreset <= 1'd0;
    builder_basesoc_gthrxinit_next_state <= builder_basesoc_gthrxinit_state;
    case (builder_basesoc_gthrxinit_state)
        1'd1: begin
            main_v7_1000basex_gthrxinit_gtXxreset1 <= 1'd1;
            main_v7_1000basex_gthrxinit_pllreset <= 1'd1;
            main_v7_1000basex_gthrxinit_drp_start <= 1'd1;
            if (main_v7_1000basex_gthrxinit_drp_done) begin
                builder_basesoc_gthrxinit_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_v7_1000basex_gthrxinit_gtXxreset1 <= 1'd1;
            if (main_v7_1000basex_gthrxinit_plllock1) begin
                builder_basesoc_gthrxinit_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthrxinit_Xxresetdone1) begin
                builder_basesoc_gthrxinit_next_state <= 3'd4;
            end
        end
        3'd4: begin
            main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd1;
            main_v7_1000basex_gthrxinit_cdr_lock_timer_wait <= 1'd1;
            if (main_v7_1000basex_gthrxinit_cdr_lock_timer_done) begin
                if (1'd1) begin
                    builder_basesoc_gthrxinit_next_state <= 4'd9;
                end else begin
                    builder_basesoc_gthrxinit_next_state <= 3'd5;
                end
            end
        end
        3'd5: begin
            main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd1;
            main_v7_1000basex_gthrxinit_Xxdlysreset1 <= 1'd1;
            builder_basesoc_gthrxinit_next_state <= 3'd6;
        end
        3'd6: begin
            main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthrxinit_Xxdlysresetdone1) begin
                builder_basesoc_gthrxinit_next_state <= 3'd7;
            end
        end
        3'd7: begin
            main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthrxinit_Xxphaligndone_rising) begin
                builder_basesoc_gthrxinit_next_state <= 4'd8;
            end
        end
        4'd8: begin
            main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd1;
            if (main_v7_1000basex_gthrxinit_Xxphaligndone_rising) begin
                builder_basesoc_gthrxinit_next_state <= 4'd9;
            end
        end
        4'd9: begin
            main_v7_1000basex_gthrxinit_Xxuserrdy1 <= 1'd1;
            main_v7_1000basex_gthrxinit_done <= 1'd1;
            if (main_v7_1000basex_gthrxinit_restart) begin
                builder_basesoc_gthrxinit_next_state <= 1'd0;
            end
        end
        default: begin
            main_v7_1000basex_gthrxinit_gtXxreset1 <= 1'd1;
            main_v7_1000basex_gthrxinit_gtXxpd1 <= 1'd1;
            main_v7_1000basex_gthrxinit_pllreset <= 1'd1;
            builder_basesoc_gthrxinit_next_state <= 1'd1;
        end
    endcase
end
assign main_v7_1000basex_gthrxinit_cdr_lock_timer_done = (main_v7_1000basex_gthrxinit_cdr_lock_timer_count == 1'd0);
assign main_v7_1000basex_gthrxinit_watchdog_done = (main_v7_1000basex_gthrxinit_watchdog_count == 1'd0);
assign main_v7_1000basex_o = (main_v7_1000basex_toggle_o ^ main_v7_1000basex_toggle_o_r);
assign main_ethmac_sink_valid = main_ethmac_source_source_valid;
assign main_ethmac_source_source_ready = main_ethmac_sink_ready;
assign main_ethmac_sink_first = main_ethmac_source_source_first;
assign main_ethmac_sink_last = main_ethmac_source_source_last;
assign main_ethmac_sink_payload_data = main_ethmac_source_source_payload_data;
assign main_ethmac_sink_payload_last_be = main_ethmac_source_source_payload_last_be;
assign main_ethmac_sink_payload_error = main_ethmac_source_source_payload_error;
assign main_ethmac_sink_sink_valid = main_ethmac_source_valid;
assign main_ethmac_source_ready = main_ethmac_sink_sink_ready;
assign main_ethmac_sink_sink_first = main_ethmac_source_first;
assign main_ethmac_sink_sink_last = main_ethmac_source_last;
assign main_ethmac_sink_sink_payload_data = main_ethmac_source_payload_data;
assign main_ethmac_sink_sink_payload_last_be = main_ethmac_source_payload_last_be;
assign main_ethmac_sink_sink_payload_error = main_ethmac_source_payload_error;
assign main_ethmac_tx_cdc_cdc_sink_valid = main_ethmac_tx_cdc_sink_sink_valid;
assign main_ethmac_tx_cdc_sink_sink_ready = main_ethmac_tx_cdc_cdc_sink_ready;
assign main_ethmac_tx_cdc_cdc_sink_first = main_ethmac_tx_cdc_sink_sink_first;
assign main_ethmac_tx_cdc_cdc_sink_last = main_ethmac_tx_cdc_sink_sink_last;
assign main_ethmac_tx_cdc_cdc_sink_payload_data = main_ethmac_tx_cdc_sink_sink_payload_data;
assign main_ethmac_tx_cdc_cdc_sink_payload_last_be = main_ethmac_tx_cdc_sink_sink_payload_last_be;
assign main_ethmac_tx_cdc_cdc_sink_payload_error = main_ethmac_tx_cdc_sink_sink_payload_error;
assign main_ethmac_tx_cdc_source_source_valid = main_ethmac_tx_cdc_cdc_source_valid;
assign main_ethmac_tx_cdc_cdc_source_ready = main_ethmac_tx_cdc_source_source_ready;
assign main_ethmac_tx_cdc_source_source_first = main_ethmac_tx_cdc_cdc_source_first;
assign main_ethmac_tx_cdc_source_source_last = main_ethmac_tx_cdc_cdc_source_last;
assign main_ethmac_tx_cdc_source_source_payload_data = main_ethmac_tx_cdc_cdc_source_payload_data;
assign main_ethmac_tx_cdc_source_source_payload_last_be = main_ethmac_tx_cdc_cdc_source_payload_last_be;
assign main_ethmac_tx_cdc_source_source_payload_error = main_ethmac_tx_cdc_cdc_source_payload_error;
assign main_ethmac_tx_cdc_cdc_asyncfifo_din = {main_ethmac_tx_cdc_cdc_fifo_in_last, main_ethmac_tx_cdc_cdc_fifo_in_first, main_ethmac_tx_cdc_cdc_fifo_in_payload_error, main_ethmac_tx_cdc_cdc_fifo_in_payload_last_be, main_ethmac_tx_cdc_cdc_fifo_in_payload_data};
assign {main_ethmac_tx_cdc_cdc_fifo_out_last, main_ethmac_tx_cdc_cdc_fifo_out_first, main_ethmac_tx_cdc_cdc_fifo_out_payload_error, main_ethmac_tx_cdc_cdc_fifo_out_payload_last_be, main_ethmac_tx_cdc_cdc_fifo_out_payload_data} = main_ethmac_tx_cdc_cdc_asyncfifo_dout;
assign main_ethmac_tx_cdc_cdc_sink_ready = main_ethmac_tx_cdc_cdc_asyncfifo_writable;
assign main_ethmac_tx_cdc_cdc_asyncfifo_we = main_ethmac_tx_cdc_cdc_sink_valid;
assign main_ethmac_tx_cdc_cdc_fifo_in_first = main_ethmac_tx_cdc_cdc_sink_first;
assign main_ethmac_tx_cdc_cdc_fifo_in_last = main_ethmac_tx_cdc_cdc_sink_last;
assign main_ethmac_tx_cdc_cdc_fifo_in_payload_data = main_ethmac_tx_cdc_cdc_sink_payload_data;
assign main_ethmac_tx_cdc_cdc_fifo_in_payload_last_be = main_ethmac_tx_cdc_cdc_sink_payload_last_be;
assign main_ethmac_tx_cdc_cdc_fifo_in_payload_error = main_ethmac_tx_cdc_cdc_sink_payload_error;
assign main_ethmac_tx_cdc_cdc_source_valid = main_ethmac_tx_cdc_cdc_asyncfifo_readable;
assign main_ethmac_tx_cdc_cdc_source_first = main_ethmac_tx_cdc_cdc_fifo_out_first;
assign main_ethmac_tx_cdc_cdc_source_last = main_ethmac_tx_cdc_cdc_fifo_out_last;
assign main_ethmac_tx_cdc_cdc_source_payload_data = main_ethmac_tx_cdc_cdc_fifo_out_payload_data;
assign main_ethmac_tx_cdc_cdc_source_payload_last_be = main_ethmac_tx_cdc_cdc_fifo_out_payload_last_be;
assign main_ethmac_tx_cdc_cdc_source_payload_error = main_ethmac_tx_cdc_cdc_fifo_out_payload_error;
assign main_ethmac_tx_cdc_cdc_asyncfifo_re = main_ethmac_tx_cdc_cdc_source_ready;
assign main_ethmac_tx_cdc_cdc_graycounter0_ce = (main_ethmac_tx_cdc_cdc_asyncfifo_writable & main_ethmac_tx_cdc_cdc_asyncfifo_we);
assign main_ethmac_tx_cdc_cdc_graycounter1_ce = (main_ethmac_tx_cdc_cdc_asyncfifo_readable & main_ethmac_tx_cdc_cdc_asyncfifo_re);
assign main_ethmac_tx_cdc_cdc_asyncfifo_writable = (((main_ethmac_tx_cdc_cdc_graycounter0_q[5] == main_ethmac_tx_cdc_cdc_consume_wdomain[5]) | (main_ethmac_tx_cdc_cdc_graycounter0_q[4] == main_ethmac_tx_cdc_cdc_consume_wdomain[4])) | (main_ethmac_tx_cdc_cdc_graycounter0_q[3:0] != main_ethmac_tx_cdc_cdc_consume_wdomain[3:0]));
assign main_ethmac_tx_cdc_cdc_asyncfifo_readable = (main_ethmac_tx_cdc_cdc_graycounter1_q != main_ethmac_tx_cdc_cdc_produce_rdomain);
assign main_ethmac_tx_cdc_cdc_wrport_adr = main_ethmac_tx_cdc_cdc_graycounter0_q_binary[4:0];
assign main_ethmac_tx_cdc_cdc_wrport_dat_w = main_ethmac_tx_cdc_cdc_asyncfifo_din;
assign main_ethmac_tx_cdc_cdc_wrport_we = main_ethmac_tx_cdc_cdc_graycounter0_ce;
assign main_ethmac_tx_cdc_cdc_rdport_adr = main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary[4:0];
assign main_ethmac_tx_cdc_cdc_asyncfifo_dout = main_ethmac_tx_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_ethmac_tx_cdc_cdc_graycounter0_q_next_binary <= 6'd0;
    if (main_ethmac_tx_cdc_cdc_graycounter0_ce) begin
        main_ethmac_tx_cdc_cdc_graycounter0_q_next_binary <= (main_ethmac_tx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_ethmac_tx_cdc_cdc_graycounter0_q_next_binary <= main_ethmac_tx_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_ethmac_tx_cdc_cdc_graycounter0_q_next = (main_ethmac_tx_cdc_cdc_graycounter0_q_next_binary ^ main_ethmac_tx_cdc_cdc_graycounter0_q_next_binary[5:1]);
always @(*) begin
    main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary <= 6'd0;
    if (main_ethmac_tx_cdc_cdc_graycounter1_ce) begin
        main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary <= (main_ethmac_tx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary <= main_ethmac_tx_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_ethmac_tx_cdc_cdc_graycounter1_q_next = (main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary ^ main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary[5:1]);
assign main_ethmac_tx_converter_converter_sink_valid = main_ethmac_tx_converter_sink_valid;
assign main_ethmac_tx_converter_converter_sink_first = main_ethmac_tx_converter_sink_first;
assign main_ethmac_tx_converter_converter_sink_last = main_ethmac_tx_converter_sink_last;
assign main_ethmac_tx_converter_sink_ready = main_ethmac_tx_converter_converter_sink_ready;
always @(*) begin
    main_ethmac_tx_converter_converter_sink_payload_data <= 40'd0;
    main_ethmac_tx_converter_converter_sink_payload_data[7:0] <= main_ethmac_tx_converter_sink_payload_data[7:0];
    main_ethmac_tx_converter_converter_sink_payload_data[8] <= main_ethmac_tx_converter_sink_payload_last_be[0];
    main_ethmac_tx_converter_converter_sink_payload_data[9] <= main_ethmac_tx_converter_sink_payload_error[0];
    main_ethmac_tx_converter_converter_sink_payload_data[17:10] <= main_ethmac_tx_converter_sink_payload_data[15:8];
    main_ethmac_tx_converter_converter_sink_payload_data[18] <= main_ethmac_tx_converter_sink_payload_last_be[1];
    main_ethmac_tx_converter_converter_sink_payload_data[19] <= main_ethmac_tx_converter_sink_payload_error[1];
    main_ethmac_tx_converter_converter_sink_payload_data[27:20] <= main_ethmac_tx_converter_sink_payload_data[23:16];
    main_ethmac_tx_converter_converter_sink_payload_data[28] <= main_ethmac_tx_converter_sink_payload_last_be[2];
    main_ethmac_tx_converter_converter_sink_payload_data[29] <= main_ethmac_tx_converter_sink_payload_error[2];
    main_ethmac_tx_converter_converter_sink_payload_data[37:30] <= main_ethmac_tx_converter_sink_payload_data[31:24];
    main_ethmac_tx_converter_converter_sink_payload_data[38] <= main_ethmac_tx_converter_sink_payload_last_be[3];
    main_ethmac_tx_converter_converter_sink_payload_data[39] <= main_ethmac_tx_converter_sink_payload_error[3];
end
assign main_ethmac_tx_converter_source_valid = main_ethmac_tx_converter_source_source_valid;
assign main_ethmac_tx_converter_source_first = main_ethmac_tx_converter_source_source_first;
assign main_ethmac_tx_converter_source_last = main_ethmac_tx_converter_source_source_last;
assign main_ethmac_tx_converter_source_source_ready = main_ethmac_tx_converter_source_ready;
assign {main_ethmac_tx_converter_source_payload_error, main_ethmac_tx_converter_source_payload_last_be, main_ethmac_tx_converter_source_payload_data} = main_ethmac_tx_converter_source_source_payload_data;
assign main_ethmac_tx_converter_source_source_valid = main_ethmac_tx_converter_converter_source_valid;
assign main_ethmac_tx_converter_converter_source_ready = main_ethmac_tx_converter_source_source_ready;
assign main_ethmac_tx_converter_source_source_first = main_ethmac_tx_converter_converter_source_first;
assign main_ethmac_tx_converter_source_source_last = main_ethmac_tx_converter_converter_source_last;
assign main_ethmac_tx_converter_source_source_payload_data = main_ethmac_tx_converter_converter_source_payload_data;
assign main_ethmac_tx_converter_converter_first = (main_ethmac_tx_converter_converter_mux == 1'd0);
assign main_ethmac_tx_converter_converter_last = (main_ethmac_tx_converter_converter_mux == 2'd3);
assign main_ethmac_tx_converter_converter_source_valid = main_ethmac_tx_converter_converter_sink_valid;
assign main_ethmac_tx_converter_converter_source_first = (main_ethmac_tx_converter_converter_sink_first & main_ethmac_tx_converter_converter_first);
assign main_ethmac_tx_converter_converter_source_last = (main_ethmac_tx_converter_converter_sink_last & main_ethmac_tx_converter_converter_last);
assign main_ethmac_tx_converter_converter_sink_ready = (main_ethmac_tx_converter_converter_last & main_ethmac_tx_converter_converter_source_ready);
always @(*) begin
    main_ethmac_tx_converter_converter_source_payload_data <= 10'd0;
    case (main_ethmac_tx_converter_converter_mux)
        1'd0: begin
            main_ethmac_tx_converter_converter_source_payload_data <= main_ethmac_tx_converter_converter_sink_payload_data[9:0];
        end
        1'd1: begin
            main_ethmac_tx_converter_converter_source_payload_data <= main_ethmac_tx_converter_converter_sink_payload_data[19:10];
        end
        2'd2: begin
            main_ethmac_tx_converter_converter_source_payload_data <= main_ethmac_tx_converter_converter_sink_payload_data[29:20];
        end
        default: begin
            main_ethmac_tx_converter_converter_source_payload_data <= main_ethmac_tx_converter_converter_sink_payload_data[39:30];
        end
    endcase
end
assign main_ethmac_tx_converter_converter_source_payload_valid_token_count = main_ethmac_tx_converter_converter_last;
always @(*) begin
    builder_basesoc_txdatapath_liteethmactxlastbe_next_state <= 1'd0;
    main_ethmac_tx_last_be_sink_ready <= 1'd0;
    main_ethmac_tx_last_be_source_first <= 1'd0;
    main_ethmac_tx_last_be_source_last <= 1'd0;
    main_ethmac_tx_last_be_source_payload_data <= 8'd0;
    main_ethmac_tx_last_be_source_payload_error <= 1'd0;
    main_ethmac_tx_last_be_source_payload_last_be <= 1'd0;
    main_ethmac_tx_last_be_source_valid <= 1'd0;
    builder_basesoc_txdatapath_liteethmactxlastbe_next_state <= builder_basesoc_txdatapath_liteethmactxlastbe_state;
    case (builder_basesoc_txdatapath_liteethmactxlastbe_state)
        1'd1: begin
            main_ethmac_tx_last_be_sink_ready <= 1'd1;
            if ((main_ethmac_tx_last_be_sink_valid & main_ethmac_tx_last_be_sink_last)) begin
                builder_basesoc_txdatapath_liteethmactxlastbe_next_state <= 1'd0;
            end
        end
        default: begin
            main_ethmac_tx_last_be_source_valid <= main_ethmac_tx_last_be_sink_valid;
            main_ethmac_tx_last_be_sink_ready <= main_ethmac_tx_last_be_source_ready;
            main_ethmac_tx_last_be_source_first <= main_ethmac_tx_last_be_sink_first;
            main_ethmac_tx_last_be_source_last <= main_ethmac_tx_last_be_sink_last;
            main_ethmac_tx_last_be_source_payload_data <= main_ethmac_tx_last_be_sink_payload_data;
            main_ethmac_tx_last_be_source_payload_last_be <= main_ethmac_tx_last_be_sink_payload_last_be;
            main_ethmac_tx_last_be_source_payload_error <= main_ethmac_tx_last_be_sink_payload_error;
            main_ethmac_tx_last_be_source_last <= (main_ethmac_tx_last_be_sink_payload_last_be != 1'd0);
            if ((main_ethmac_tx_last_be_sink_valid & main_ethmac_tx_last_be_sink_ready)) begin
                if ((main_ethmac_tx_last_be_source_last & (~main_ethmac_tx_last_be_sink_last))) begin
                    builder_basesoc_txdatapath_liteethmactxlastbe_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_ethmac_tx_padding_counter_done = (main_ethmac_tx_padding_counter >= 6'd59);
always @(*) begin
    builder_basesoc_txdatapath_liteethmacpaddinginserter_next_state <= 1'd0;
    main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= 16'd0;
    main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd0;
    main_ethmac_tx_padding_sink_ready <= 1'd0;
    main_ethmac_tx_padding_source_first <= 1'd0;
    main_ethmac_tx_padding_source_last <= 1'd0;
    main_ethmac_tx_padding_source_payload_data <= 8'd0;
    main_ethmac_tx_padding_source_payload_error <= 1'd0;
    main_ethmac_tx_padding_source_payload_last_be <= 1'd0;
    main_ethmac_tx_padding_source_valid <= 1'd0;
    builder_basesoc_txdatapath_liteethmacpaddinginserter_next_state <= builder_basesoc_txdatapath_liteethmacpaddinginserter_state;
    case (builder_basesoc_txdatapath_liteethmacpaddinginserter_state)
        1'd1: begin
            main_ethmac_tx_padding_source_valid <= 1'd1;
            if (main_ethmac_tx_padding_counter_done) begin
                main_ethmac_tx_padding_source_payload_last_be <= 1'd1;
                main_ethmac_tx_padding_source_last <= 1'd1;
            end
            main_ethmac_tx_padding_source_payload_data <= 1'd0;
            if ((main_ethmac_tx_padding_source_valid & main_ethmac_tx_padding_source_ready)) begin
                main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= (main_ethmac_tx_padding_counter + 1'd1);
                main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                if (main_ethmac_tx_padding_counter_done) begin
                    main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= 1'd0;
                    main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                    builder_basesoc_txdatapath_liteethmacpaddinginserter_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_ethmac_tx_padding_source_valid <= main_ethmac_tx_padding_sink_valid;
            main_ethmac_tx_padding_sink_ready <= main_ethmac_tx_padding_source_ready;
            main_ethmac_tx_padding_source_first <= main_ethmac_tx_padding_sink_first;
            main_ethmac_tx_padding_source_last <= main_ethmac_tx_padding_sink_last;
            main_ethmac_tx_padding_source_payload_data <= main_ethmac_tx_padding_sink_payload_data;
            main_ethmac_tx_padding_source_payload_last_be <= main_ethmac_tx_padding_sink_payload_last_be;
            main_ethmac_tx_padding_source_payload_error <= main_ethmac_tx_padding_sink_payload_error;
            if ((main_ethmac_tx_padding_source_valid & main_ethmac_tx_padding_source_ready)) begin
                main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= (main_ethmac_tx_padding_counter + 1'd1);
                main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                if (main_ethmac_tx_padding_sink_last) begin
                    if ((~main_ethmac_tx_padding_counter_done)) begin
                        main_ethmac_tx_padding_source_last <= 1'd0;
                        main_ethmac_tx_padding_source_payload_last_be <= 1'd0;
                        builder_basesoc_txdatapath_liteethmacpaddinginserter_next_state <= 1'd1;
                    end else begin
                        if (((main_ethmac_tx_padding_counter == 6'd59) & (main_ethmac_tx_padding_sink_payload_last_be < 1'd1))) begin
                            main_ethmac_tx_padding_source_payload_last_be <= 1'd1;
                        end else begin
                            main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value <= 1'd0;
                            main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce <= 1'd1;
                        end
                    end
                end
            end
        end
    endcase
end
assign main_ethmac_tx_crc_data0 = main_ethmac_tx_crc_sink_payload_data;
assign main_ethmac_tx_crc_be = main_ethmac_tx_crc_sink_payload_last_be;
assign main_ethmac_tx_crc_cnt_done = (main_ethmac_tx_crc_cnt == 1'd0);
assign main_ethmac_tx_crc_sink_valid = main_ethmac_tx_crc_source_source_valid;
assign main_ethmac_tx_crc_source_source_ready = main_ethmac_tx_crc_sink_ready;
assign main_ethmac_tx_crc_sink_first = main_ethmac_tx_crc_source_source_first;
assign main_ethmac_tx_crc_sink_last = main_ethmac_tx_crc_source_source_last;
assign main_ethmac_tx_crc_sink_payload_data = main_ethmac_tx_crc_source_source_payload_data;
assign main_ethmac_tx_crc_sink_payload_last_be = main_ethmac_tx_crc_source_source_payload_last_be;
assign main_ethmac_tx_crc_sink_payload_error = main_ethmac_tx_crc_source_source_payload_error;
assign main_ethmac_tx_crc_data1 = main_ethmac_tx_crc_data0;
assign main_ethmac_tx_crc_crc_prev = main_ethmac_tx_crc_reg;
always @(*) begin
    main_ethmac_tx_crc_error <= 1'd0;
    main_ethmac_tx_crc_value <= 32'd0;
    if (main_ethmac_tx_crc_be) begin
        main_ethmac_tx_crc_value <= ({main_ethmac_tx_crc_crc_next[0], main_ethmac_tx_crc_crc_next[1], main_ethmac_tx_crc_crc_next[2], main_ethmac_tx_crc_crc_next[3], main_ethmac_tx_crc_crc_next[4], main_ethmac_tx_crc_crc_next[5], main_ethmac_tx_crc_crc_next[6], main_ethmac_tx_crc_crc_next[7], main_ethmac_tx_crc_crc_next[8], main_ethmac_tx_crc_crc_next[9], main_ethmac_tx_crc_crc_next[10], main_ethmac_tx_crc_crc_next[11], main_ethmac_tx_crc_crc_next[12], main_ethmac_tx_crc_crc_next[13], main_ethmac_tx_crc_crc_next[14], main_ethmac_tx_crc_crc_next[15], main_ethmac_tx_crc_crc_next[16], main_ethmac_tx_crc_crc_next[17], main_ethmac_tx_crc_crc_next[18], main_ethmac_tx_crc_crc_next[19], main_ethmac_tx_crc_crc_next[20], main_ethmac_tx_crc_crc_next[21], main_ethmac_tx_crc_crc_next[22], main_ethmac_tx_crc_crc_next[23], main_ethmac_tx_crc_crc_next[24], main_ethmac_tx_crc_crc_next[25], main_ethmac_tx_crc_crc_next[26], main_ethmac_tx_crc_crc_next[27], main_ethmac_tx_crc_crc_next[28], main_ethmac_tx_crc_crc_next[29], main_ethmac_tx_crc_crc_next[30], main_ethmac_tx_crc_crc_next[31]} ^ 32'd4294967295);
        main_ethmac_tx_crc_error <= (main_ethmac_tx_crc_crc_next != 32'd3338984827);
    end
end
always @(*) begin
    main_ethmac_tx_crc_crc_next <= 32'd0;
    main_ethmac_tx_crc_crc_next[0] <= (((main_ethmac_tx_crc_crc_prev[24] ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[1] <= (((((((main_ethmac_tx_crc_crc_prev[25] ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[2] <= (((((((((main_ethmac_tx_crc_crc_prev[26] ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[3] <= (((((((main_ethmac_tx_crc_crc_prev[27] ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]);
    main_ethmac_tx_crc_crc_next[4] <= (((((((((main_ethmac_tx_crc_crc_prev[28] ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[5] <= (((((((((((((main_ethmac_tx_crc_crc_prev[29] ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[6] <= (((((((((((main_ethmac_tx_crc_crc_prev[30] ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]);
    main_ethmac_tx_crc_crc_next[7] <= (((((((((main_ethmac_tx_crc_crc_prev[31] ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[8] <= ((((((((main_ethmac_tx_crc_crc_prev[0] ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_data1[6]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[9] <= ((((((((main_ethmac_tx_crc_crc_prev[1] ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_data1[6]);
    main_ethmac_tx_crc_crc_next[10] <= ((((((((main_ethmac_tx_crc_crc_prev[2] ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[11] <= ((((((((main_ethmac_tx_crc_crc_prev[3] ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_data1[6]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[12] <= ((((((((((((main_ethmac_tx_crc_crc_prev[4] ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_data1[6]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[13] <= ((((((((((((main_ethmac_tx_crc_crc_prev[5] ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]);
    main_ethmac_tx_crc_crc_next[14] <= ((((((((((main_ethmac_tx_crc_crc_prev[6] ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]);
    main_ethmac_tx_crc_crc_next[15] <= ((((((((main_ethmac_tx_crc_crc_prev[7] ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]);
    main_ethmac_tx_crc_crc_next[16] <= ((((((main_ethmac_tx_crc_crc_prev[8] ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[17] <= ((((((main_ethmac_tx_crc_crc_prev[9] ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_data1[6]);
    main_ethmac_tx_crc_crc_next[18] <= ((((((main_ethmac_tx_crc_crc_prev[10] ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]);
    main_ethmac_tx_crc_crc_next[19] <= ((((main_ethmac_tx_crc_crc_prev[11] ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]);
    main_ethmac_tx_crc_crc_next[20] <= ((main_ethmac_tx_crc_crc_prev[12] ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]);
    main_ethmac_tx_crc_crc_next[21] <= ((main_ethmac_tx_crc_crc_prev[13] ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]);
    main_ethmac_tx_crc_crc_next[22] <= ((main_ethmac_tx_crc_crc_prev[14] ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[23] <= ((((((main_ethmac_tx_crc_crc_prev[15] ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_data1[6]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[24] <= ((((((main_ethmac_tx_crc_crc_prev[16] ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]);
    main_ethmac_tx_crc_crc_next[25] <= ((((main_ethmac_tx_crc_crc_prev[17] ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]);
    main_ethmac_tx_crc_crc_next[26] <= ((((((((main_ethmac_tx_crc_crc_prev[18] ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]) ^ main_ethmac_tx_crc_crc_prev[24]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_data1[7]);
    main_ethmac_tx_crc_crc_next[27] <= ((((((((main_ethmac_tx_crc_crc_prev[19] ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]) ^ main_ethmac_tx_crc_crc_prev[25]) ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_data1[6]);
    main_ethmac_tx_crc_crc_next[28] <= ((((((main_ethmac_tx_crc_crc_prev[20] ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]) ^ main_ethmac_tx_crc_crc_prev[26]) ^ main_ethmac_tx_crc_data1[5]);
    main_ethmac_tx_crc_crc_next[29] <= ((((((main_ethmac_tx_crc_crc_prev[21] ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_crc_prev[30]) ^ main_ethmac_tx_crc_data1[1]) ^ main_ethmac_tx_crc_crc_prev[27]) ^ main_ethmac_tx_crc_data1[4]);
    main_ethmac_tx_crc_crc_next[30] <= ((((main_ethmac_tx_crc_crc_prev[22] ^ main_ethmac_tx_crc_crc_prev[31]) ^ main_ethmac_tx_crc_data1[0]) ^ main_ethmac_tx_crc_crc_prev[28]) ^ main_ethmac_tx_crc_data1[3]);
    main_ethmac_tx_crc_crc_next[31] <= ((main_ethmac_tx_crc_crc_prev[23] ^ main_ethmac_tx_crc_crc_prev[29]) ^ main_ethmac_tx_crc_data1[2]);
end
always @(*) begin
    builder_basesoc_txdatapath_bufferizeendpoints_next_state <= 2'd0;
    main_ethmac_tx_crc_ce <= 1'd0;
    main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0 <= 32'd0;
    main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0 <= 1'd0;
    main_ethmac_tx_crc_is_ongoing0 <= 1'd0;
    main_ethmac_tx_crc_is_ongoing1 <= 1'd0;
    main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 <= 1'd0;
    main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 <= 1'd0;
    main_ethmac_tx_crc_reset <= 1'd0;
    main_ethmac_tx_crc_sink_ready <= 1'd0;
    main_ethmac_tx_crc_source_first <= 1'd0;
    main_ethmac_tx_crc_source_last <= 1'd0;
    main_ethmac_tx_crc_source_payload_data <= 8'd0;
    main_ethmac_tx_crc_source_payload_error <= 1'd0;
    main_ethmac_tx_crc_source_payload_last_be <= 1'd0;
    main_ethmac_tx_crc_source_valid <= 1'd0;
    builder_basesoc_txdatapath_bufferizeendpoints_next_state <= builder_basesoc_txdatapath_bufferizeendpoints_state;
    case (builder_basesoc_txdatapath_bufferizeendpoints_state)
        1'd1: begin
            main_ethmac_tx_crc_ce <= (main_ethmac_tx_crc_sink_valid & main_ethmac_tx_crc_source_ready);
            main_ethmac_tx_crc_source_valid <= main_ethmac_tx_crc_sink_valid;
            main_ethmac_tx_crc_sink_ready <= main_ethmac_tx_crc_source_ready;
            main_ethmac_tx_crc_source_first <= main_ethmac_tx_crc_sink_first;
            main_ethmac_tx_crc_source_last <= main_ethmac_tx_crc_sink_last;
            main_ethmac_tx_crc_source_payload_data <= main_ethmac_tx_crc_sink_payload_data;
            main_ethmac_tx_crc_source_payload_last_be <= main_ethmac_tx_crc_sink_payload_last_be;
            main_ethmac_tx_crc_source_payload_error <= main_ethmac_tx_crc_sink_payload_error;
            main_ethmac_tx_crc_source_last <= 1'd0;
            main_ethmac_tx_crc_source_payload_last_be <= 1'd0;
            if (main_ethmac_tx_crc_sink_last) begin
                if (main_ethmac_tx_crc_sink_payload_last_be) begin
                    main_ethmac_tx_crc_source_payload_data <= builder_cases_slice_proxy[7:0];
                end
                if ((1'd0 & (main_ethmac_tx_crc_sink_payload_last_be <= 4'd15))) begin
                    main_ethmac_tx_crc_source_last <= 1'd1;
                    main_ethmac_tx_crc_source_payload_last_be <= (main_ethmac_tx_crc_sink_payload_last_be <<< -3'd3);
                end
            end
            if (((main_ethmac_tx_crc_sink_valid & main_ethmac_tx_crc_sink_last) & main_ethmac_tx_crc_source_ready)) begin
                if ((1'd0 & (main_ethmac_tx_crc_sink_payload_last_be <= 4'd15))) begin
                    builder_basesoc_txdatapath_bufferizeendpoints_next_state <= 1'd0;
                end else begin
                    main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0 <= main_ethmac_tx_crc_value;
                    main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
                    if (1'd0) begin
                        main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 <= (main_ethmac_tx_crc_sink_payload_last_be >>> 3'd4);
                        main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
                    end else begin
                        main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1 <= main_ethmac_tx_crc_sink_payload_last_be;
                        main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
                    end
                    builder_basesoc_txdatapath_bufferizeendpoints_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            main_ethmac_tx_crc_source_valid <= 1'd1;
            case (main_ethmac_tx_crc_cnt)
                1'd0: begin
                    main_ethmac_tx_crc_source_payload_data <= main_ethmac_tx_crc_crc_packet[31:24];
                end
                1'd1: begin
                    main_ethmac_tx_crc_source_payload_data <= main_ethmac_tx_crc_crc_packet[23:16];
                end
                2'd2: begin
                    main_ethmac_tx_crc_source_payload_data <= main_ethmac_tx_crc_crc_packet[15:8];
                end
                default: begin
                    main_ethmac_tx_crc_source_payload_data <= main_ethmac_tx_crc_crc_packet[7:0];
                end
            endcase
            if (main_ethmac_tx_crc_cnt_done) begin
                main_ethmac_tx_crc_source_last <= 1'd1;
                if (main_ethmac_tx_crc_source_ready) begin
                    builder_basesoc_txdatapath_bufferizeendpoints_next_state <= 1'd0;
                end
            end
            main_ethmac_tx_crc_is_ongoing1 <= 1'd1;
        end
        default: begin
            main_ethmac_tx_crc_reset <= 1'd1;
            main_ethmac_tx_crc_sink_ready <= 1'd1;
            if (main_ethmac_tx_crc_sink_valid) begin
                main_ethmac_tx_crc_sink_ready <= 1'd0;
                builder_basesoc_txdatapath_bufferizeendpoints_next_state <= 1'd1;
            end
            main_ethmac_tx_crc_is_ongoing0 <= 1'd1;
        end
    endcase
end
assign main_ethmac_tx_crc_pipe_valid_sink_ready = ((~main_ethmac_tx_crc_pipe_valid_source_valid) | main_ethmac_tx_crc_pipe_valid_source_ready);
assign main_ethmac_tx_crc_pipe_valid_sink_valid = main_ethmac_tx_crc_sink_sink_valid;
assign main_ethmac_tx_crc_sink_sink_ready = main_ethmac_tx_crc_pipe_valid_sink_ready;
assign main_ethmac_tx_crc_pipe_valid_sink_first = main_ethmac_tx_crc_sink_sink_first;
assign main_ethmac_tx_crc_pipe_valid_sink_last = main_ethmac_tx_crc_sink_sink_last;
assign main_ethmac_tx_crc_pipe_valid_sink_payload_data = main_ethmac_tx_crc_sink_sink_payload_data;
assign main_ethmac_tx_crc_pipe_valid_sink_payload_last_be = main_ethmac_tx_crc_sink_sink_payload_last_be;
assign main_ethmac_tx_crc_pipe_valid_sink_payload_error = main_ethmac_tx_crc_sink_sink_payload_error;
assign main_ethmac_tx_crc_source_source_valid = main_ethmac_tx_crc_pipe_valid_source_valid;
assign main_ethmac_tx_crc_pipe_valid_source_ready = main_ethmac_tx_crc_source_source_ready;
assign main_ethmac_tx_crc_source_source_first = main_ethmac_tx_crc_pipe_valid_source_first;
assign main_ethmac_tx_crc_source_source_last = main_ethmac_tx_crc_pipe_valid_source_last;
assign main_ethmac_tx_crc_source_source_payload_data = main_ethmac_tx_crc_pipe_valid_source_payload_data;
assign main_ethmac_tx_crc_source_source_payload_last_be = main_ethmac_tx_crc_pipe_valid_source_payload_last_be;
assign main_ethmac_tx_crc_source_source_payload_error = main_ethmac_tx_crc_pipe_valid_source_payload_error;
assign main_ethmac_tx_preamble_source_payload_last_be = main_ethmac_tx_preamble_sink_payload_last_be;
always @(*) begin
    builder_basesoc_txdatapath_liteethmacpreambleinserter_next_state <= 2'd0;
    main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value <= 3'd0;
    main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce <= 1'd0;
    main_ethmac_tx_preamble_sink_ready <= 1'd0;
    main_ethmac_tx_preamble_source_first <= 1'd0;
    main_ethmac_tx_preamble_source_last <= 1'd0;
    main_ethmac_tx_preamble_source_payload_data <= 8'd0;
    main_ethmac_tx_preamble_source_payload_error <= 1'd0;
    main_ethmac_tx_preamble_source_valid <= 1'd0;
    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_sink_payload_data;
    builder_basesoc_txdatapath_liteethmacpreambleinserter_next_state <= builder_basesoc_txdatapath_liteethmacpreambleinserter_state;
    case (builder_basesoc_txdatapath_liteethmacpreambleinserter_state)
        1'd1: begin
            main_ethmac_tx_preamble_source_valid <= 1'd1;
            case (main_ethmac_tx_preamble_count)
                1'd0: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[7:0];
                end
                1'd1: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[15:8];
                end
                2'd2: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[23:16];
                end
                2'd3: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[31:24];
                end
                3'd4: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[39:32];
                end
                3'd5: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[47:40];
                end
                3'd6: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[55:48];
                end
                default: begin
                    main_ethmac_tx_preamble_source_payload_data <= main_ethmac_tx_preamble_preamble[63:56];
                end
            endcase
            if (main_ethmac_tx_preamble_source_ready) begin
                if ((main_ethmac_tx_preamble_count == 3'd7)) begin
                    builder_basesoc_txdatapath_liteethmacpreambleinserter_next_state <= 2'd2;
                end else begin
                    main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value <= (main_ethmac_tx_preamble_count + 1'd1);
                    main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_ethmac_tx_preamble_source_valid <= main_ethmac_tx_preamble_sink_valid;
            main_ethmac_tx_preamble_sink_ready <= main_ethmac_tx_preamble_source_ready;
            main_ethmac_tx_preamble_source_first <= main_ethmac_tx_preamble_sink_first;
            main_ethmac_tx_preamble_source_last <= main_ethmac_tx_preamble_sink_last;
            main_ethmac_tx_preamble_source_payload_error <= main_ethmac_tx_preamble_sink_payload_error;
            if (((main_ethmac_tx_preamble_sink_valid & main_ethmac_tx_preamble_sink_last) & main_ethmac_tx_preamble_source_ready)) begin
                builder_basesoc_txdatapath_liteethmacpreambleinserter_next_state <= 1'd0;
            end
        end
        default: begin
            main_ethmac_tx_preamble_sink_ready <= 1'd1;
            main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value <= 1'd0;
            main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce <= 1'd1;
            if (main_ethmac_tx_preamble_sink_valid) begin
                main_ethmac_tx_preamble_sink_ready <= 1'd0;
                builder_basesoc_txdatapath_liteethmacpreambleinserter_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_txdatapath_liteethmacgap_next_state <= 1'd0;
    main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value <= 4'd0;
    main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce <= 1'd0;
    main_ethmac_tx_gap_sink_ready <= 1'd0;
    main_ethmac_tx_gap_source_first <= 1'd0;
    main_ethmac_tx_gap_source_last <= 1'd0;
    main_ethmac_tx_gap_source_payload_data <= 8'd0;
    main_ethmac_tx_gap_source_payload_error <= 1'd0;
    main_ethmac_tx_gap_source_payload_last_be <= 1'd0;
    main_ethmac_tx_gap_source_valid <= 1'd0;
    builder_basesoc_txdatapath_liteethmacgap_next_state <= builder_basesoc_txdatapath_liteethmacgap_state;
    case (builder_basesoc_txdatapath_liteethmacgap_state)
        1'd1: begin
            main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value <= (main_ethmac_tx_gap_counter + 1'd1);
            main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce <= 1'd1;
            if ((main_ethmac_tx_gap_counter == 4'd11)) begin
                builder_basesoc_txdatapath_liteethmacgap_next_state <= 1'd0;
            end
        end
        default: begin
            main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value <= 1'd0;
            main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce <= 1'd1;
            main_ethmac_tx_gap_source_valid <= main_ethmac_tx_gap_sink_valid;
            main_ethmac_tx_gap_sink_ready <= main_ethmac_tx_gap_source_ready;
            main_ethmac_tx_gap_source_first <= main_ethmac_tx_gap_sink_first;
            main_ethmac_tx_gap_source_last <= main_ethmac_tx_gap_sink_last;
            main_ethmac_tx_gap_source_payload_data <= main_ethmac_tx_gap_sink_payload_data;
            main_ethmac_tx_gap_source_payload_last_be <= main_ethmac_tx_gap_sink_payload_last_be;
            main_ethmac_tx_gap_source_payload_error <= main_ethmac_tx_gap_sink_payload_error;
            if (((main_ethmac_tx_gap_sink_valid & main_ethmac_tx_gap_sink_last) & main_ethmac_tx_gap_sink_ready)) begin
                builder_basesoc_txdatapath_liteethmacgap_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_ethmac_tx_cdc_sink_sink_valid = main_ethmac_sink_valid;
assign main_ethmac_sink_ready = main_ethmac_tx_cdc_sink_sink_ready;
assign main_ethmac_tx_cdc_sink_sink_first = main_ethmac_sink_first;
assign main_ethmac_tx_cdc_sink_sink_last = main_ethmac_sink_last;
assign main_ethmac_tx_cdc_sink_sink_payload_data = main_ethmac_sink_payload_data;
assign main_ethmac_tx_cdc_sink_sink_payload_last_be = main_ethmac_sink_payload_last_be;
assign main_ethmac_tx_cdc_sink_sink_payload_error = main_ethmac_sink_payload_error;
assign main_ethmac_tx_converter_sink_valid = main_ethmac_tx_cdc_source_source_valid;
assign main_ethmac_tx_cdc_source_source_ready = main_ethmac_tx_converter_sink_ready;
assign main_ethmac_tx_converter_sink_first = main_ethmac_tx_cdc_source_source_first;
assign main_ethmac_tx_converter_sink_last = main_ethmac_tx_cdc_source_source_last;
assign main_ethmac_tx_converter_sink_payload_data = main_ethmac_tx_cdc_source_source_payload_data;
assign main_ethmac_tx_converter_sink_payload_last_be = main_ethmac_tx_cdc_source_source_payload_last_be;
assign main_ethmac_tx_converter_sink_payload_error = main_ethmac_tx_cdc_source_source_payload_error;
assign main_ethmac_tx_last_be_sink_valid = main_ethmac_tx_converter_source_valid;
assign main_ethmac_tx_converter_source_ready = main_ethmac_tx_last_be_sink_ready;
assign main_ethmac_tx_last_be_sink_first = main_ethmac_tx_converter_source_first;
assign main_ethmac_tx_last_be_sink_last = main_ethmac_tx_converter_source_last;
assign main_ethmac_tx_last_be_sink_payload_data = main_ethmac_tx_converter_source_payload_data;
assign main_ethmac_tx_last_be_sink_payload_last_be = main_ethmac_tx_converter_source_payload_last_be;
assign main_ethmac_tx_last_be_sink_payload_error = main_ethmac_tx_converter_source_payload_error;
assign main_ethmac_tx_padding_sink_valid = main_ethmac_tx_last_be_source_valid;
assign main_ethmac_tx_last_be_source_ready = main_ethmac_tx_padding_sink_ready;
assign main_ethmac_tx_padding_sink_first = main_ethmac_tx_last_be_source_first;
assign main_ethmac_tx_padding_sink_last = main_ethmac_tx_last_be_source_last;
assign main_ethmac_tx_padding_sink_payload_data = main_ethmac_tx_last_be_source_payload_data;
assign main_ethmac_tx_padding_sink_payload_last_be = main_ethmac_tx_last_be_source_payload_last_be;
assign main_ethmac_tx_padding_sink_payload_error = main_ethmac_tx_last_be_source_payload_error;
assign main_ethmac_tx_crc_sink_sink_valid = main_ethmac_tx_padding_source_valid;
assign main_ethmac_tx_padding_source_ready = main_ethmac_tx_crc_sink_sink_ready;
assign main_ethmac_tx_crc_sink_sink_first = main_ethmac_tx_padding_source_first;
assign main_ethmac_tx_crc_sink_sink_last = main_ethmac_tx_padding_source_last;
assign main_ethmac_tx_crc_sink_sink_payload_data = main_ethmac_tx_padding_source_payload_data;
assign main_ethmac_tx_crc_sink_sink_payload_last_be = main_ethmac_tx_padding_source_payload_last_be;
assign main_ethmac_tx_crc_sink_sink_payload_error = main_ethmac_tx_padding_source_payload_error;
assign main_ethmac_tx_preamble_sink_valid = main_ethmac_tx_crc_source_valid;
assign main_ethmac_tx_crc_source_ready = main_ethmac_tx_preamble_sink_ready;
assign main_ethmac_tx_preamble_sink_first = main_ethmac_tx_crc_source_first;
assign main_ethmac_tx_preamble_sink_last = main_ethmac_tx_crc_source_last;
assign main_ethmac_tx_preamble_sink_payload_data = main_ethmac_tx_crc_source_payload_data;
assign main_ethmac_tx_preamble_sink_payload_last_be = main_ethmac_tx_crc_source_payload_last_be;
assign main_ethmac_tx_preamble_sink_payload_error = main_ethmac_tx_crc_source_payload_error;
assign main_ethmac_tx_gap_sink_valid = main_ethmac_tx_preamble_source_valid;
assign main_ethmac_tx_preamble_source_ready = main_ethmac_tx_gap_sink_ready;
assign main_ethmac_tx_gap_sink_first = main_ethmac_tx_preamble_source_first;
assign main_ethmac_tx_gap_sink_last = main_ethmac_tx_preamble_source_last;
assign main_ethmac_tx_gap_sink_payload_data = main_ethmac_tx_preamble_source_payload_data;
assign main_ethmac_tx_gap_sink_payload_last_be = main_ethmac_tx_preamble_source_payload_last_be;
assign main_ethmac_tx_gap_sink_payload_error = main_ethmac_tx_preamble_source_payload_error;
assign main_v7_1000basex_pcs_sink_valid = main_ethmac_tx_gap_source_valid;
assign main_ethmac_tx_gap_source_ready = main_v7_1000basex_pcs_sink_ready;
assign main_v7_1000basex_pcs_sink_first = main_ethmac_tx_gap_source_first;
assign main_v7_1000basex_pcs_sink_last = main_ethmac_tx_gap_source_last;
assign main_v7_1000basex_pcs_sink_payload_data = main_ethmac_tx_gap_source_payload_data;
assign main_v7_1000basex_pcs_sink_payload_last_be = main_ethmac_tx_gap_source_payload_last_be;
assign main_v7_1000basex_pcs_sink_payload_error = main_ethmac_tx_gap_source_payload_error;
assign main_ethmac_pulsesynchronizer0_i = main_ethmac_rx_preamble_error;
assign main_ethmac_pulsesynchronizer1_i = main_ethmac_liteethmaccrc32checker_error;
assign main_ethmac_rx_preamble_source_payload_data = main_ethmac_rx_preamble_sink_payload_data;
assign main_ethmac_rx_preamble_source_payload_last_be = main_ethmac_rx_preamble_sink_payload_last_be;
always @(*) begin
    builder_basesoc_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd0;
    main_ethmac_rx_preamble_error <= 1'd0;
    main_ethmac_rx_preamble_sink_ready <= 1'd0;
    main_ethmac_rx_preamble_source_first <= 1'd0;
    main_ethmac_rx_preamble_source_last <= 1'd0;
    main_ethmac_rx_preamble_source_payload_error <= 1'd0;
    main_ethmac_rx_preamble_source_valid <= 1'd0;
    builder_basesoc_rxdatapath_liteethmacpreamblechecker_next_state <= builder_basesoc_rxdatapath_liteethmacpreamblechecker_state;
    case (builder_basesoc_rxdatapath_liteethmacpreamblechecker_state)
        1'd1: begin
            main_ethmac_rx_preamble_source_valid <= main_ethmac_rx_preamble_sink_valid;
            main_ethmac_rx_preamble_sink_ready <= main_ethmac_rx_preamble_source_ready;
            main_ethmac_rx_preamble_source_first <= main_ethmac_rx_preamble_sink_first;
            main_ethmac_rx_preamble_source_last <= main_ethmac_rx_preamble_sink_last;
            main_ethmac_rx_preamble_source_payload_error <= main_ethmac_rx_preamble_sink_payload_error;
            if (((main_ethmac_rx_preamble_source_valid & main_ethmac_rx_preamble_source_last) & main_ethmac_rx_preamble_source_ready)) begin
                builder_basesoc_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd0;
            end
        end
        default: begin
            main_ethmac_rx_preamble_sink_ready <= 1'd1;
            if (((main_ethmac_rx_preamble_sink_valid & (~main_ethmac_rx_preamble_sink_last)) & (main_ethmac_rx_preamble_sink_payload_data == main_ethmac_rx_preamble_preamble[63:56]))) begin
                builder_basesoc_rxdatapath_liteethmacpreamblechecker_next_state <= 1'd1;
            end
            if ((main_ethmac_rx_preamble_sink_valid & main_ethmac_rx_preamble_sink_last)) begin
                main_ethmac_rx_preamble_error <= 1'd1;
            end
        end
    endcase
end
assign main_ethmac_pulsesynchronizer0_o = (main_ethmac_pulsesynchronizer0_toggle_o ^ main_ethmac_pulsesynchronizer0_toggle_o_r);
assign main_ethmac_liteethmaccrc32checker_fifo_full = (main_ethmac_liteethmaccrc32checker_syncfifo_level == 3'd4);
assign main_ethmac_liteethmaccrc32checker_fifo_in = (main_ethmac_liteethmaccrc32checker_sink_sink_valid & ((~main_ethmac_liteethmaccrc32checker_fifo_full) | main_ethmac_liteethmaccrc32checker_fifo_out));
assign main_ethmac_liteethmaccrc32checker_fifo_out = (main_ethmac_liteethmaccrc32checker_source_source_valid & main_ethmac_liteethmaccrc32checker_source_source_ready);
assign main_ethmac_liteethmaccrc32checker_syncfifo_sink_first = main_ethmac_liteethmaccrc32checker_sink_sink_first;
assign main_ethmac_liteethmaccrc32checker_syncfifo_sink_last = main_ethmac_liteethmaccrc32checker_sink_sink_last;
assign main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_data = main_ethmac_liteethmaccrc32checker_sink_sink_payload_data;
assign main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_last_be = main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be;
assign main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_error = main_ethmac_liteethmaccrc32checker_sink_sink_payload_error;
always @(*) begin
    main_ethmac_liteethmaccrc32checker_syncfifo_sink_valid <= 1'd0;
    main_ethmac_liteethmaccrc32checker_syncfifo_sink_valid <= main_ethmac_liteethmaccrc32checker_sink_sink_valid;
    main_ethmac_liteethmaccrc32checker_syncfifo_sink_valid <= main_ethmac_liteethmaccrc32checker_fifo_in;
end
always @(*) begin
    main_ethmac_liteethmaccrc32checker_sink_sink_ready <= 1'd0;
    main_ethmac_liteethmaccrc32checker_sink_sink_ready <= main_ethmac_liteethmaccrc32checker_syncfifo_sink_ready;
    main_ethmac_liteethmaccrc32checker_sink_sink_ready <= main_ethmac_liteethmaccrc32checker_fifo_in;
end
assign main_ethmac_liteethmaccrc32checker_crc_data0 = main_ethmac_liteethmaccrc32checker_sink_sink_payload_data;
assign main_ethmac_liteethmaccrc32checker_crc_be = main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be;
assign main_ethmac_liteethmaccrc32checker_source_source_first = main_ethmac_liteethmaccrc32checker_syncfifo_source_first;
assign main_ethmac_liteethmaccrc32checker_source_source_payload_data = main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_data;
assign main_ethmac_liteethmaccrc32checker_sink_sink_valid = main_ethmac_bufferizeendpoints_source_source_valid;
assign main_ethmac_bufferizeendpoints_source_source_ready = main_ethmac_liteethmaccrc32checker_sink_sink_ready;
assign main_ethmac_liteethmaccrc32checker_sink_sink_first = main_ethmac_bufferizeendpoints_source_source_first;
assign main_ethmac_liteethmaccrc32checker_sink_sink_last = main_ethmac_bufferizeendpoints_source_source_last;
assign main_ethmac_liteethmaccrc32checker_sink_sink_payload_data = main_ethmac_bufferizeendpoints_source_source_payload_data;
assign main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be = main_ethmac_bufferizeendpoints_source_source_payload_last_be;
assign main_ethmac_liteethmaccrc32checker_sink_sink_payload_error = main_ethmac_bufferizeendpoints_source_source_payload_error;
assign main_ethmac_liteethmaccrc32checker_crc_data1 = main_ethmac_liteethmaccrc32checker_crc_data0;
assign main_ethmac_liteethmaccrc32checker_crc_crc_prev = main_ethmac_liteethmaccrc32checker_crc_reg;
always @(*) begin
    main_ethmac_liteethmaccrc32checker_crc_error0 <= 1'd0;
    main_ethmac_liteethmaccrc32checker_crc_value <= 32'd0;
    if (main_ethmac_liteethmaccrc32checker_crc_be) begin
        main_ethmac_liteethmaccrc32checker_crc_value <= ({main_ethmac_liteethmaccrc32checker_crc_crc_next[0], main_ethmac_liteethmaccrc32checker_crc_crc_next[1], main_ethmac_liteethmaccrc32checker_crc_crc_next[2], main_ethmac_liteethmaccrc32checker_crc_crc_next[3], main_ethmac_liteethmaccrc32checker_crc_crc_next[4], main_ethmac_liteethmaccrc32checker_crc_crc_next[5], main_ethmac_liteethmaccrc32checker_crc_crc_next[6], main_ethmac_liteethmaccrc32checker_crc_crc_next[7], main_ethmac_liteethmaccrc32checker_crc_crc_next[8], main_ethmac_liteethmaccrc32checker_crc_crc_next[9], main_ethmac_liteethmaccrc32checker_crc_crc_next[10], main_ethmac_liteethmaccrc32checker_crc_crc_next[11], main_ethmac_liteethmaccrc32checker_crc_crc_next[12], main_ethmac_liteethmaccrc32checker_crc_crc_next[13], main_ethmac_liteethmaccrc32checker_crc_crc_next[14], main_ethmac_liteethmaccrc32checker_crc_crc_next[15], main_ethmac_liteethmaccrc32checker_crc_crc_next[16], main_ethmac_liteethmaccrc32checker_crc_crc_next[17], main_ethmac_liteethmaccrc32checker_crc_crc_next[18], main_ethmac_liteethmaccrc32checker_crc_crc_next[19], main_ethmac_liteethmaccrc32checker_crc_crc_next[20], main_ethmac_liteethmaccrc32checker_crc_crc_next[21], main_ethmac_liteethmaccrc32checker_crc_crc_next[22], main_ethmac_liteethmaccrc32checker_crc_crc_next[23], main_ethmac_liteethmaccrc32checker_crc_crc_next[24], main_ethmac_liteethmaccrc32checker_crc_crc_next[25], main_ethmac_liteethmaccrc32checker_crc_crc_next[26], main_ethmac_liteethmaccrc32checker_crc_crc_next[27], main_ethmac_liteethmaccrc32checker_crc_crc_next[28], main_ethmac_liteethmaccrc32checker_crc_crc_next[29], main_ethmac_liteethmaccrc32checker_crc_crc_next[30], main_ethmac_liteethmaccrc32checker_crc_crc_next[31]} ^ 32'd4294967295);
        main_ethmac_liteethmaccrc32checker_crc_error0 <= (main_ethmac_liteethmaccrc32checker_crc_crc_next != 32'd3338984827);
    end
end
always @(*) begin
    main_ethmac_liteethmaccrc32checker_crc_crc_next <= 32'd0;
    main_ethmac_liteethmaccrc32checker_crc_crc_next[0] <= (((main_ethmac_liteethmaccrc32checker_crc_crc_prev[24] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[1] <= (((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[25] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[2] <= (((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[26] ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[3] <= (((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[27] ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[4] <= (((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[28] ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[5] <= (((((((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[29] ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[6] <= (((((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[30] ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[7] <= (((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[31] ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[8] <= ((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[0] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[9] <= ((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[1] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[10] <= ((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[2] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[11] <= ((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[3] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[12] <= ((((((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[4] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[13] <= ((((((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[5] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[14] <= ((((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[6] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[15] <= ((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[7] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[16] <= ((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[8] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[17] <= ((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[9] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[18] <= ((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[10] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[19] <= ((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[11] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[20] <= ((main_ethmac_liteethmaccrc32checker_crc_crc_prev[12] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[21] <= ((main_ethmac_liteethmaccrc32checker_crc_crc_prev[13] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[22] <= ((main_ethmac_liteethmaccrc32checker_crc_crc_prev[14] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[23] <= ((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[15] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[24] <= ((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[16] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[25] <= ((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[17] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[26] <= ((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[18] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[24]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[7]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[27] <= ((((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[19] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[25]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[6]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[28] <= ((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[20] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[26]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[5]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[29] <= ((((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[21] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[30]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[1]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[27]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[4]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[30] <= ((((main_ethmac_liteethmaccrc32checker_crc_crc_prev[22] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[31]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[0]) ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[28]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[3]);
    main_ethmac_liteethmaccrc32checker_crc_crc_next[31] <= ((main_ethmac_liteethmaccrc32checker_crc_crc_prev[23] ^ main_ethmac_liteethmaccrc32checker_crc_crc_prev[29]) ^ main_ethmac_liteethmaccrc32checker_crc_data1[2]);
end
assign main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_din = {main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_last, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_first, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_error, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_data};
assign {main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_last, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_first, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_error, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be, main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_data} = main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_dout;
assign main_ethmac_liteethmaccrc32checker_syncfifo_sink_ready = main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_writable;
assign main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_we = main_ethmac_liteethmaccrc32checker_syncfifo_sink_valid;
assign main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_first = main_ethmac_liteethmaccrc32checker_syncfifo_sink_first;
assign main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_last = main_ethmac_liteethmaccrc32checker_syncfifo_sink_last;
assign main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_data = main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_data;
assign main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_last_be = main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_last_be;
assign main_ethmac_liteethmaccrc32checker_syncfifo_fifo_in_payload_error = main_ethmac_liteethmaccrc32checker_syncfifo_sink_payload_error;
assign main_ethmac_liteethmaccrc32checker_syncfifo_source_valid = main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_readable;
assign main_ethmac_liteethmaccrc32checker_syncfifo_source_first = main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_first;
assign main_ethmac_liteethmaccrc32checker_syncfifo_source_last = main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_last;
assign main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_data = main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_data;
assign main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_last_be = main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_last_be;
assign main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_error = main_ethmac_liteethmaccrc32checker_syncfifo_fifo_out_payload_error;
assign main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_re = main_ethmac_liteethmaccrc32checker_syncfifo_source_ready;
always @(*) begin
    main_ethmac_liteethmaccrc32checker_syncfifo_wrport_adr <= 3'd0;
    if (main_ethmac_liteethmaccrc32checker_syncfifo_replace) begin
        main_ethmac_liteethmaccrc32checker_syncfifo_wrport_adr <= (main_ethmac_liteethmaccrc32checker_syncfifo_produce - 1'd1);
    end else begin
        main_ethmac_liteethmaccrc32checker_syncfifo_wrport_adr <= main_ethmac_liteethmaccrc32checker_syncfifo_produce;
    end
end
assign main_ethmac_liteethmaccrc32checker_syncfifo_wrport_dat_w = main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_din;
assign main_ethmac_liteethmaccrc32checker_syncfifo_wrport_we = (main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_we & (main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_writable | main_ethmac_liteethmaccrc32checker_syncfifo_replace));
assign main_ethmac_liteethmaccrc32checker_syncfifo_do_read = (main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_readable & main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_re);
assign main_ethmac_liteethmaccrc32checker_syncfifo_rdport_adr = main_ethmac_liteethmaccrc32checker_syncfifo_consume;
assign main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_dout = main_ethmac_liteethmaccrc32checker_syncfifo_rdport_dat_r;
assign main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_writable = (main_ethmac_liteethmaccrc32checker_syncfifo_level != 3'd5);
assign main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_readable = (main_ethmac_liteethmaccrc32checker_syncfifo_level != 1'd0);
always @(*) begin
    builder_basesoc_rxdatapath_bufferizeendpoints_next_state <= 2'd0;
    main_ethmac_liteethmaccrc32checker_crc_ce <= 1'd0;
    main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1 <= 1'd0;
    main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1 <= 1'd0;
    main_ethmac_liteethmaccrc32checker_crc_reset <= 1'd0;
    main_ethmac_liteethmaccrc32checker_error <= 1'd0;
    main_ethmac_liteethmaccrc32checker_fifo_reset <= 1'd0;
    main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0 <= 1'd0;
    main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0 <= 1'd0;
    main_ethmac_liteethmaccrc32checker_source_source_last <= 1'd0;
    main_ethmac_liteethmaccrc32checker_source_source_payload_error <= 1'd0;
    main_ethmac_liteethmaccrc32checker_source_source_payload_last_be <= 1'd0;
    main_ethmac_liteethmaccrc32checker_source_source_valid <= 1'd0;
    main_ethmac_liteethmaccrc32checker_syncfifo_source_ready <= 1'd0;
    main_ethmac_liteethmaccrc32checker_source_source_payload_error <= main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_error;
    builder_basesoc_rxdatapath_bufferizeendpoints_next_state <= builder_basesoc_rxdatapath_bufferizeendpoints_state;
    case (builder_basesoc_rxdatapath_bufferizeendpoints_state)
        1'd1: begin
            if ((main_ethmac_liteethmaccrc32checker_sink_sink_valid & main_ethmac_liteethmaccrc32checker_sink_sink_ready)) begin
                main_ethmac_liteethmaccrc32checker_crc_ce <= 1'd1;
                builder_basesoc_rxdatapath_bufferizeendpoints_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_ethmac_liteethmaccrc32checker_syncfifo_source_ready <= main_ethmac_liteethmaccrc32checker_fifo_out;
            main_ethmac_liteethmaccrc32checker_source_source_valid <= (main_ethmac_liteethmaccrc32checker_sink_sink_valid & main_ethmac_liteethmaccrc32checker_fifo_full);
            if (1'd1) begin
                main_ethmac_liteethmaccrc32checker_source_source_last <= main_ethmac_liteethmaccrc32checker_sink_sink_last;
                main_ethmac_liteethmaccrc32checker_source_source_payload_last_be <= main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be;
            end else begin
                if ((main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be & 4'd15)) begin
                    main_ethmac_liteethmaccrc32checker_source_source_last <= main_ethmac_liteethmaccrc32checker_sink_sink_last;
                    main_ethmac_liteethmaccrc32checker_source_source_payload_last_be <= (main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be <<< -3'd3);
                end else begin
                    main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0 <= (main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be >>> 3'd4);
                    main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                    main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1 <= main_ethmac_liteethmaccrc32checker_crc_error0;
                    main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                end
            end
            main_ethmac_liteethmaccrc32checker_source_source_payload_error <= (main_ethmac_liteethmaccrc32checker_sink_sink_payload_error | {1{(main_ethmac_liteethmaccrc32checker_crc_error0 & main_ethmac_liteethmaccrc32checker_sink_sink_last)}});
            main_ethmac_liteethmaccrc32checker_error <= ((main_ethmac_liteethmaccrc32checker_sink_sink_valid & main_ethmac_liteethmaccrc32checker_sink_sink_last) & main_ethmac_liteethmaccrc32checker_crc_error0);
            if ((main_ethmac_liteethmaccrc32checker_sink_sink_valid & main_ethmac_liteethmaccrc32checker_sink_sink_ready)) begin
                main_ethmac_liteethmaccrc32checker_crc_ce <= 1'd1;
                if ((main_ethmac_liteethmaccrc32checker_sink_sink_last & (main_ethmac_liteethmaccrc32checker_sink_sink_payload_last_be > 4'd15))) begin
                    builder_basesoc_rxdatapath_bufferizeendpoints_next_state <= 2'd3;
                end else begin
                    if (main_ethmac_liteethmaccrc32checker_sink_sink_last) begin
                        builder_basesoc_rxdatapath_bufferizeendpoints_next_state <= 1'd0;
                    end
                end
            end
        end
        2'd3: begin
            main_ethmac_liteethmaccrc32checker_source_source_valid <= main_ethmac_liteethmaccrc32checker_syncfifo_source_valid;
            main_ethmac_liteethmaccrc32checker_syncfifo_source_ready <= main_ethmac_liteethmaccrc32checker_source_source_ready;
            main_ethmac_liteethmaccrc32checker_source_source_last <= main_ethmac_liteethmaccrc32checker_syncfifo_source_last;
            main_ethmac_liteethmaccrc32checker_source_source_payload_error <= (main_ethmac_liteethmaccrc32checker_syncfifo_source_payload_error | {1{main_ethmac_liteethmaccrc32checker_crc_error1}});
            main_ethmac_liteethmaccrc32checker_source_source_payload_last_be <= main_ethmac_liteethmaccrc32checker_last_be;
            if ((main_ethmac_liteethmaccrc32checker_source_source_valid & main_ethmac_liteethmaccrc32checker_source_source_ready)) begin
                builder_basesoc_rxdatapath_bufferizeendpoints_next_state <= 1'd0;
            end
        end
        default: begin
            main_ethmac_liteethmaccrc32checker_crc_reset <= 1'd1;
            main_ethmac_liteethmaccrc32checker_fifo_reset <= 1'd1;
            builder_basesoc_rxdatapath_bufferizeendpoints_next_state <= 1'd1;
        end
    endcase
end
assign main_ethmac_bufferizeendpoints_pipe_valid_sink_ready = ((~main_ethmac_bufferizeendpoints_pipe_valid_source_valid) | main_ethmac_bufferizeendpoints_pipe_valid_source_ready);
assign main_ethmac_bufferizeendpoints_pipe_valid_sink_valid = main_ethmac_bufferizeendpoints_sink_sink_valid;
assign main_ethmac_bufferizeendpoints_sink_sink_ready = main_ethmac_bufferizeendpoints_pipe_valid_sink_ready;
assign main_ethmac_bufferizeendpoints_pipe_valid_sink_first = main_ethmac_bufferizeendpoints_sink_sink_first;
assign main_ethmac_bufferizeendpoints_pipe_valid_sink_last = main_ethmac_bufferizeendpoints_sink_sink_last;
assign main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_data = main_ethmac_bufferizeendpoints_sink_sink_payload_data;
assign main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_last_be = main_ethmac_bufferizeendpoints_sink_sink_payload_last_be;
assign main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_error = main_ethmac_bufferizeendpoints_sink_sink_payload_error;
assign main_ethmac_bufferizeendpoints_source_source_valid = main_ethmac_bufferizeendpoints_pipe_valid_source_valid;
assign main_ethmac_bufferizeendpoints_pipe_valid_source_ready = main_ethmac_bufferizeendpoints_source_source_ready;
assign main_ethmac_bufferizeendpoints_source_source_first = main_ethmac_bufferizeendpoints_pipe_valid_source_first;
assign main_ethmac_bufferizeendpoints_source_source_last = main_ethmac_bufferizeendpoints_pipe_valid_source_last;
assign main_ethmac_bufferizeendpoints_source_source_payload_data = main_ethmac_bufferizeendpoints_pipe_valid_source_payload_data;
assign main_ethmac_bufferizeendpoints_source_source_payload_last_be = main_ethmac_bufferizeendpoints_pipe_valid_source_payload_last_be;
assign main_ethmac_bufferizeendpoints_source_source_payload_error = main_ethmac_bufferizeendpoints_pipe_valid_source_payload_error;
assign main_ethmac_pulsesynchronizer1_o = (main_ethmac_pulsesynchronizer1_toggle_o ^ main_ethmac_pulsesynchronizer1_toggle_o_r);
assign main_ethmac_rx_padding_source_valid = main_ethmac_rx_padding_sink_valid;
assign main_ethmac_rx_padding_sink_ready = main_ethmac_rx_padding_source_ready;
assign main_ethmac_rx_padding_source_first = main_ethmac_rx_padding_sink_first;
assign main_ethmac_rx_padding_source_last = main_ethmac_rx_padding_sink_last;
assign main_ethmac_rx_padding_source_payload_data = main_ethmac_rx_padding_sink_payload_data;
assign main_ethmac_rx_padding_source_payload_last_be = main_ethmac_rx_padding_sink_payload_last_be;
assign main_ethmac_rx_padding_source_payload_error = main_ethmac_rx_padding_sink_payload_error;
assign main_ethmac_rx_last_be_source_valid = main_ethmac_rx_last_be_sink_valid;
assign main_ethmac_rx_last_be_sink_ready = main_ethmac_rx_last_be_source_ready;
assign main_ethmac_rx_last_be_source_first = main_ethmac_rx_last_be_sink_first;
assign main_ethmac_rx_last_be_source_last = main_ethmac_rx_last_be_sink_last;
assign main_ethmac_rx_last_be_source_payload_data = main_ethmac_rx_last_be_sink_payload_data;
assign main_ethmac_rx_last_be_source_payload_error = main_ethmac_rx_last_be_sink_payload_error;
always @(*) begin
    main_ethmac_rx_last_be_source_payload_last_be <= 1'd0;
    main_ethmac_rx_last_be_source_payload_last_be <= main_ethmac_rx_last_be_sink_payload_last_be;
    if (1'd1) begin
        main_ethmac_rx_last_be_source_payload_last_be <= main_ethmac_rx_last_be_sink_last;
    end
end
assign main_ethmac_rx_converter_converter_sink_valid = main_ethmac_rx_converter_sink_valid;
assign main_ethmac_rx_converter_converter_sink_first = main_ethmac_rx_converter_sink_first;
assign main_ethmac_rx_converter_converter_sink_last = main_ethmac_rx_converter_sink_last;
assign main_ethmac_rx_converter_sink_ready = main_ethmac_rx_converter_converter_sink_ready;
assign main_ethmac_rx_converter_converter_sink_payload_data = {main_ethmac_rx_converter_sink_payload_error, main_ethmac_rx_converter_sink_payload_last_be, main_ethmac_rx_converter_sink_payload_data};
assign main_ethmac_rx_converter_source_valid = main_ethmac_rx_converter_source_source_valid;
assign main_ethmac_rx_converter_source_first = main_ethmac_rx_converter_source_source_first;
assign main_ethmac_rx_converter_source_last = main_ethmac_rx_converter_source_source_last;
assign main_ethmac_rx_converter_source_source_ready = main_ethmac_rx_converter_source_ready;
always @(*) begin
    main_ethmac_rx_converter_source_payload_data <= 32'd0;
    main_ethmac_rx_converter_source_payload_data[7:0] <= main_ethmac_rx_converter_source_source_payload_data[7:0];
    main_ethmac_rx_converter_source_payload_data[15:8] <= main_ethmac_rx_converter_source_source_payload_data[17:10];
    main_ethmac_rx_converter_source_payload_data[23:16] <= main_ethmac_rx_converter_source_source_payload_data[27:20];
    main_ethmac_rx_converter_source_payload_data[31:24] <= main_ethmac_rx_converter_source_source_payload_data[37:30];
end
always @(*) begin
    main_ethmac_rx_converter_source_payload_last_be <= 4'd0;
    main_ethmac_rx_converter_source_payload_last_be[0] <= main_ethmac_rx_converter_source_source_payload_data[8];
    main_ethmac_rx_converter_source_payload_last_be[1] <= main_ethmac_rx_converter_source_source_payload_data[18];
    main_ethmac_rx_converter_source_payload_last_be[2] <= main_ethmac_rx_converter_source_source_payload_data[28];
    main_ethmac_rx_converter_source_payload_last_be[3] <= main_ethmac_rx_converter_source_source_payload_data[38];
end
always @(*) begin
    main_ethmac_rx_converter_source_payload_error <= 4'd0;
    main_ethmac_rx_converter_source_payload_error[0] <= main_ethmac_rx_converter_source_source_payload_data[9];
    main_ethmac_rx_converter_source_payload_error[1] <= main_ethmac_rx_converter_source_source_payload_data[19];
    main_ethmac_rx_converter_source_payload_error[2] <= main_ethmac_rx_converter_source_source_payload_data[29];
    main_ethmac_rx_converter_source_payload_error[3] <= main_ethmac_rx_converter_source_source_payload_data[39];
end
assign main_ethmac_rx_converter_source_source_valid = main_ethmac_rx_converter_converter_source_valid;
assign main_ethmac_rx_converter_converter_source_ready = main_ethmac_rx_converter_source_source_ready;
assign main_ethmac_rx_converter_source_source_first = main_ethmac_rx_converter_converter_source_first;
assign main_ethmac_rx_converter_source_source_last = main_ethmac_rx_converter_converter_source_last;
assign main_ethmac_rx_converter_source_source_payload_data = main_ethmac_rx_converter_converter_source_payload_data;
assign main_ethmac_rx_converter_converter_sink_ready = ((~main_ethmac_rx_converter_converter_strobe_all) | main_ethmac_rx_converter_converter_source_ready);
assign main_ethmac_rx_converter_converter_source_valid = main_ethmac_rx_converter_converter_strobe_all;
assign main_ethmac_rx_converter_converter_load_part = (main_ethmac_rx_converter_converter_sink_valid & main_ethmac_rx_converter_converter_sink_ready);
assign main_ethmac_rx_cdc_cdc_sink_valid = main_ethmac_rx_cdc_sink_sink_valid;
assign main_ethmac_rx_cdc_sink_sink_ready = main_ethmac_rx_cdc_cdc_sink_ready;
assign main_ethmac_rx_cdc_cdc_sink_first = main_ethmac_rx_cdc_sink_sink_first;
assign main_ethmac_rx_cdc_cdc_sink_last = main_ethmac_rx_cdc_sink_sink_last;
assign main_ethmac_rx_cdc_cdc_sink_payload_data = main_ethmac_rx_cdc_sink_sink_payload_data;
assign main_ethmac_rx_cdc_cdc_sink_payload_last_be = main_ethmac_rx_cdc_sink_sink_payload_last_be;
assign main_ethmac_rx_cdc_cdc_sink_payload_error = main_ethmac_rx_cdc_sink_sink_payload_error;
assign main_ethmac_rx_cdc_source_source_valid = main_ethmac_rx_cdc_cdc_source_valid;
assign main_ethmac_rx_cdc_cdc_source_ready = main_ethmac_rx_cdc_source_source_ready;
assign main_ethmac_rx_cdc_source_source_first = main_ethmac_rx_cdc_cdc_source_first;
assign main_ethmac_rx_cdc_source_source_last = main_ethmac_rx_cdc_cdc_source_last;
assign main_ethmac_rx_cdc_source_source_payload_data = main_ethmac_rx_cdc_cdc_source_payload_data;
assign main_ethmac_rx_cdc_source_source_payload_last_be = main_ethmac_rx_cdc_cdc_source_payload_last_be;
assign main_ethmac_rx_cdc_source_source_payload_error = main_ethmac_rx_cdc_cdc_source_payload_error;
assign main_ethmac_rx_cdc_cdc_asyncfifo_din = {main_ethmac_rx_cdc_cdc_fifo_in_last, main_ethmac_rx_cdc_cdc_fifo_in_first, main_ethmac_rx_cdc_cdc_fifo_in_payload_error, main_ethmac_rx_cdc_cdc_fifo_in_payload_last_be, main_ethmac_rx_cdc_cdc_fifo_in_payload_data};
assign {main_ethmac_rx_cdc_cdc_fifo_out_last, main_ethmac_rx_cdc_cdc_fifo_out_first, main_ethmac_rx_cdc_cdc_fifo_out_payload_error, main_ethmac_rx_cdc_cdc_fifo_out_payload_last_be, main_ethmac_rx_cdc_cdc_fifo_out_payload_data} = main_ethmac_rx_cdc_cdc_asyncfifo_dout;
assign main_ethmac_rx_cdc_cdc_sink_ready = main_ethmac_rx_cdc_cdc_asyncfifo_writable;
assign main_ethmac_rx_cdc_cdc_asyncfifo_we = main_ethmac_rx_cdc_cdc_sink_valid;
assign main_ethmac_rx_cdc_cdc_fifo_in_first = main_ethmac_rx_cdc_cdc_sink_first;
assign main_ethmac_rx_cdc_cdc_fifo_in_last = main_ethmac_rx_cdc_cdc_sink_last;
assign main_ethmac_rx_cdc_cdc_fifo_in_payload_data = main_ethmac_rx_cdc_cdc_sink_payload_data;
assign main_ethmac_rx_cdc_cdc_fifo_in_payload_last_be = main_ethmac_rx_cdc_cdc_sink_payload_last_be;
assign main_ethmac_rx_cdc_cdc_fifo_in_payload_error = main_ethmac_rx_cdc_cdc_sink_payload_error;
assign main_ethmac_rx_cdc_cdc_source_valid = main_ethmac_rx_cdc_cdc_asyncfifo_readable;
assign main_ethmac_rx_cdc_cdc_source_first = main_ethmac_rx_cdc_cdc_fifo_out_first;
assign main_ethmac_rx_cdc_cdc_source_last = main_ethmac_rx_cdc_cdc_fifo_out_last;
assign main_ethmac_rx_cdc_cdc_source_payload_data = main_ethmac_rx_cdc_cdc_fifo_out_payload_data;
assign main_ethmac_rx_cdc_cdc_source_payload_last_be = main_ethmac_rx_cdc_cdc_fifo_out_payload_last_be;
assign main_ethmac_rx_cdc_cdc_source_payload_error = main_ethmac_rx_cdc_cdc_fifo_out_payload_error;
assign main_ethmac_rx_cdc_cdc_asyncfifo_re = main_ethmac_rx_cdc_cdc_source_ready;
assign main_ethmac_rx_cdc_cdc_graycounter0_ce = (main_ethmac_rx_cdc_cdc_asyncfifo_writable & main_ethmac_rx_cdc_cdc_asyncfifo_we);
assign main_ethmac_rx_cdc_cdc_graycounter1_ce = (main_ethmac_rx_cdc_cdc_asyncfifo_readable & main_ethmac_rx_cdc_cdc_asyncfifo_re);
assign main_ethmac_rx_cdc_cdc_asyncfifo_writable = (((main_ethmac_rx_cdc_cdc_graycounter0_q[5] == main_ethmac_rx_cdc_cdc_consume_wdomain[5]) | (main_ethmac_rx_cdc_cdc_graycounter0_q[4] == main_ethmac_rx_cdc_cdc_consume_wdomain[4])) | (main_ethmac_rx_cdc_cdc_graycounter0_q[3:0] != main_ethmac_rx_cdc_cdc_consume_wdomain[3:0]));
assign main_ethmac_rx_cdc_cdc_asyncfifo_readable = (main_ethmac_rx_cdc_cdc_graycounter1_q != main_ethmac_rx_cdc_cdc_produce_rdomain);
assign main_ethmac_rx_cdc_cdc_wrport_adr = main_ethmac_rx_cdc_cdc_graycounter0_q_binary[4:0];
assign main_ethmac_rx_cdc_cdc_wrport_dat_w = main_ethmac_rx_cdc_cdc_asyncfifo_din;
assign main_ethmac_rx_cdc_cdc_wrport_we = main_ethmac_rx_cdc_cdc_graycounter0_ce;
assign main_ethmac_rx_cdc_cdc_rdport_adr = main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary[4:0];
assign main_ethmac_rx_cdc_cdc_asyncfifo_dout = main_ethmac_rx_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_ethmac_rx_cdc_cdc_graycounter0_q_next_binary <= 6'd0;
    if (main_ethmac_rx_cdc_cdc_graycounter0_ce) begin
        main_ethmac_rx_cdc_cdc_graycounter0_q_next_binary <= (main_ethmac_rx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_ethmac_rx_cdc_cdc_graycounter0_q_next_binary <= main_ethmac_rx_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_ethmac_rx_cdc_cdc_graycounter0_q_next = (main_ethmac_rx_cdc_cdc_graycounter0_q_next_binary ^ main_ethmac_rx_cdc_cdc_graycounter0_q_next_binary[5:1]);
always @(*) begin
    main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary <= 6'd0;
    if (main_ethmac_rx_cdc_cdc_graycounter1_ce) begin
        main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary <= (main_ethmac_rx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary <= main_ethmac_rx_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_ethmac_rx_cdc_cdc_graycounter1_q_next = (main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary ^ main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary[5:1]);
assign main_ethmac_rx_preamble_sink_valid = main_v7_1000basex_pcs_source_valid;
assign main_v7_1000basex_pcs_source_ready = main_ethmac_rx_preamble_sink_ready;
assign main_ethmac_rx_preamble_sink_first = main_v7_1000basex_pcs_source_first;
assign main_ethmac_rx_preamble_sink_last = main_v7_1000basex_pcs_source_last;
assign main_ethmac_rx_preamble_sink_payload_data = main_v7_1000basex_pcs_source_payload_data;
assign main_ethmac_rx_preamble_sink_payload_last_be = main_v7_1000basex_pcs_source_payload_last_be;
assign main_ethmac_rx_preamble_sink_payload_error = main_v7_1000basex_pcs_source_payload_error;
assign main_ethmac_bufferizeendpoints_sink_sink_valid = main_ethmac_rx_preamble_source_valid;
assign main_ethmac_rx_preamble_source_ready = main_ethmac_bufferizeendpoints_sink_sink_ready;
assign main_ethmac_bufferizeendpoints_sink_sink_first = main_ethmac_rx_preamble_source_first;
assign main_ethmac_bufferizeendpoints_sink_sink_last = main_ethmac_rx_preamble_source_last;
assign main_ethmac_bufferizeendpoints_sink_sink_payload_data = main_ethmac_rx_preamble_source_payload_data;
assign main_ethmac_bufferizeendpoints_sink_sink_payload_last_be = main_ethmac_rx_preamble_source_payload_last_be;
assign main_ethmac_bufferizeendpoints_sink_sink_payload_error = main_ethmac_rx_preamble_source_payload_error;
assign main_ethmac_rx_padding_sink_valid = main_ethmac_liteethmaccrc32checker_source_source_valid;
assign main_ethmac_liteethmaccrc32checker_source_source_ready = main_ethmac_rx_padding_sink_ready;
assign main_ethmac_rx_padding_sink_first = main_ethmac_liteethmaccrc32checker_source_source_first;
assign main_ethmac_rx_padding_sink_last = main_ethmac_liteethmaccrc32checker_source_source_last;
assign main_ethmac_rx_padding_sink_payload_data = main_ethmac_liteethmaccrc32checker_source_source_payload_data;
assign main_ethmac_rx_padding_sink_payload_last_be = main_ethmac_liteethmaccrc32checker_source_source_payload_last_be;
assign main_ethmac_rx_padding_sink_payload_error = main_ethmac_liteethmaccrc32checker_source_source_payload_error;
assign main_ethmac_rx_last_be_sink_valid = main_ethmac_rx_padding_source_valid;
assign main_ethmac_rx_padding_source_ready = main_ethmac_rx_last_be_sink_ready;
assign main_ethmac_rx_last_be_sink_first = main_ethmac_rx_padding_source_first;
assign main_ethmac_rx_last_be_sink_last = main_ethmac_rx_padding_source_last;
assign main_ethmac_rx_last_be_sink_payload_data = main_ethmac_rx_padding_source_payload_data;
assign main_ethmac_rx_last_be_sink_payload_last_be = main_ethmac_rx_padding_source_payload_last_be;
assign main_ethmac_rx_last_be_sink_payload_error = main_ethmac_rx_padding_source_payload_error;
assign main_ethmac_rx_converter_sink_valid = main_ethmac_rx_last_be_source_valid;
assign main_ethmac_rx_last_be_source_ready = main_ethmac_rx_converter_sink_ready;
assign main_ethmac_rx_converter_sink_first = main_ethmac_rx_last_be_source_first;
assign main_ethmac_rx_converter_sink_last = main_ethmac_rx_last_be_source_last;
assign main_ethmac_rx_converter_sink_payload_data = main_ethmac_rx_last_be_source_payload_data;
assign main_ethmac_rx_converter_sink_payload_last_be = main_ethmac_rx_last_be_source_payload_last_be;
assign main_ethmac_rx_converter_sink_payload_error = main_ethmac_rx_last_be_source_payload_error;
assign main_ethmac_rx_cdc_sink_sink_valid = main_ethmac_rx_converter_source_valid;
assign main_ethmac_rx_converter_source_ready = main_ethmac_rx_cdc_sink_sink_ready;
assign main_ethmac_rx_cdc_sink_sink_first = main_ethmac_rx_converter_source_first;
assign main_ethmac_rx_cdc_sink_sink_last = main_ethmac_rx_converter_source_last;
assign main_ethmac_rx_cdc_sink_sink_payload_data = main_ethmac_rx_converter_source_payload_data;
assign main_ethmac_rx_cdc_sink_sink_payload_last_be = main_ethmac_rx_converter_source_payload_last_be;
assign main_ethmac_rx_cdc_sink_sink_payload_error = main_ethmac_rx_converter_source_payload_error;
assign main_ethmac_source_valid = main_ethmac_rx_cdc_source_source_valid;
assign main_ethmac_rx_cdc_source_source_ready = main_ethmac_source_ready;
assign main_ethmac_source_first = main_ethmac_rx_cdc_source_source_first;
assign main_ethmac_source_last = main_ethmac_rx_cdc_source_source_last;
assign main_ethmac_source_payload_data = main_ethmac_rx_cdc_source_source_payload_data;
assign main_ethmac_source_payload_last_be = main_ethmac_rx_cdc_source_source_payload_last_be;
assign main_ethmac_source_payload_error = main_ethmac_rx_cdc_source_source_payload_error;
assign main_ethmac_sram0_sink_valid = main_ethmac_sink_sink_valid;
assign main_ethmac_sink_sink_ready = main_ethmac_sram1_sink_ready;
assign main_ethmac_sram2_sink_first = main_ethmac_sink_sink_first;
assign main_ethmac_sram3_sink_last = main_ethmac_sink_sink_last;
assign main_ethmac_sram4_sink_payload_data = main_ethmac_sink_sink_payload_data;
assign main_ethmac_sram5_sink_payload_last_be = main_ethmac_sink_sink_payload_last_be;
assign main_ethmac_sram6_sink_payload_error = main_ethmac_sink_sink_payload_error;
assign main_ethmac_source_source_valid = main_ethmac_sram83_source_valid;
assign main_ethmac_sram84_source_ready = main_ethmac_source_source_ready;
assign main_ethmac_source_source_first = main_ethmac_sram85_source_first;
assign main_ethmac_source_source_last = main_ethmac_sram86_source_last;
assign main_ethmac_source_source_payload_data = main_ethmac_sram87_source_payload_data;
assign main_ethmac_source_source_payload_last_be = main_ethmac_sram88_source_payload_last_be;
assign main_ethmac_source_source_payload_error = main_ethmac_sram89_source_payload_error;
always @(*) begin
    main_ethmac_length_inc <= 4'd0;
    case (main_ethmac_sram5_sink_payload_last_be)
        1'd1: begin
            main_ethmac_length_inc <= 1'd1;
        end
        2'd2: begin
            main_ethmac_length_inc <= 2'd2;
        end
        3'd4: begin
            main_ethmac_length_inc <= 2'd3;
        end
        4'd8: begin
            main_ethmac_length_inc <= 3'd4;
        end
        5'd16: begin
            main_ethmac_length_inc <= 3'd5;
        end
        6'd32: begin
            main_ethmac_length_inc <= 3'd6;
        end
        7'd64: begin
            main_ethmac_length_inc <= 3'd7;
        end
        default: begin
            main_ethmac_length_inc <= 3'd4;
        end
    endcase
end
assign main_ethmac_sram44_source_ready = main_ethmac_sram20_clear;
assign main_ethmac_sram19_trigger = main_ethmac_sram43_source_valid;
assign main_ethmac_sram7_status = main_ethmac_sram47_source_payload_slot;
assign main_ethmac_sram10_status = main_ethmac_sram48_source_payload_length;
assign main_ethmac_wr_data = main_ethmac_sram4_sink_payload_data;
always @(*) begin
    main_ethmac_sram75_adr <= 9'd0;
    main_ethmac_sram77_we <= 1'd0;
    main_ethmac_sram78_dat_w <= 32'd0;
    main_ethmac_sram79_adr <= 9'd0;
    main_ethmac_sram81_we <= 1'd0;
    main_ethmac_sram82_dat_w <= 32'd0;
    case (main_ethmac_slot)
        1'd0: begin
            main_ethmac_sram75_adr <= main_ethmac_sram35_length[10:2];
            main_ethmac_sram78_dat_w <= main_ethmac_wr_data;
            if ((main_ethmac_sram0_sink_valid & main_ethmac_write)) begin
                main_ethmac_sram77_we <= 1'd1;
            end
        end
        1'd1: begin
            main_ethmac_sram79_adr <= main_ethmac_sram35_length[10:2];
            main_ethmac_sram82_dat_w <= main_ethmac_wr_data;
            if ((main_ethmac_sram0_sink_valid & main_ethmac_write)) begin
                main_ethmac_sram81_we <= 1'd1;
            end
        end
    endcase
end
assign main_ethmac_sram21_available = main_ethmac_sram17_status;
assign main_ethmac_sram25_available = main_ethmac_sram18_pending;
always @(*) begin
    main_ethmac_sram20_clear <= 1'd0;
    if ((main_ethmac_sram28_re & main_ethmac_sram29_r)) begin
        main_ethmac_sram20_clear <= 1'd1;
    end
end
assign main_ethmac_sram16_irq = (main_ethmac_sram26_status & main_ethmac_sram31_storage);
assign main_ethmac_sram17_status = main_ethmac_sram19_trigger;
assign main_ethmac_sram18_pending = main_ethmac_sram19_trigger;
assign main_ethmac_sram53_din = {main_ethmac_sram69_fifo_in_last, main_ethmac_sram68_fifo_in_first, main_ethmac_sram67_fifo_in_payload_length, main_ethmac_sram66_fifo_in_payload_slot};
assign {main_ethmac_sram73_fifo_out_last, main_ethmac_sram72_fifo_out_first, main_ethmac_sram71_fifo_out_payload_length, main_ethmac_sram70_fifo_out_payload_slot} = main_ethmac_sram54_dout;
assign main_ethmac_sram38_sink_ready = main_ethmac_sram50_writable;
assign main_ethmac_sram49_we = main_ethmac_sram37_sink_valid;
assign main_ethmac_sram68_fifo_in_first = main_ethmac_sram39_sink_first;
assign main_ethmac_sram69_fifo_in_last = main_ethmac_sram40_sink_last;
assign main_ethmac_sram66_fifo_in_payload_slot = main_ethmac_sram41_sink_payload_slot;
assign main_ethmac_sram67_fifo_in_payload_length = main_ethmac_sram42_sink_payload_length;
assign main_ethmac_sram43_source_valid = main_ethmac_sram52_readable;
assign main_ethmac_sram45_source_first = main_ethmac_sram72_fifo_out_first;
assign main_ethmac_sram46_source_last = main_ethmac_sram73_fifo_out_last;
assign main_ethmac_sram47_source_payload_slot = main_ethmac_sram70_fifo_out_payload_slot;
assign main_ethmac_sram48_source_payload_length = main_ethmac_sram71_fifo_out_payload_length;
assign main_ethmac_sram51_re = main_ethmac_sram44_source_ready;
always @(*) begin
    main_ethmac_sram59_adr <= 1'd0;
    if (main_ethmac_sram56_replace) begin
        main_ethmac_sram59_adr <= (main_ethmac_sram57_produce - 1'd1);
    end else begin
        main_ethmac_sram59_adr <= main_ethmac_sram57_produce;
    end
end
assign main_ethmac_sram62_dat_w = main_ethmac_sram53_din;
assign main_ethmac_sram61_we = (main_ethmac_sram49_we & (main_ethmac_sram50_writable | main_ethmac_sram56_replace));
assign main_ethmac_sram63_do_read = (main_ethmac_sram52_readable & main_ethmac_sram51_re);
assign main_ethmac_sram64_adr = main_ethmac_sram58_consume;
assign main_ethmac_sram54_dout = main_ethmac_sram65_dat_r;
assign main_ethmac_sram50_writable = (main_ethmac_sram55_level != 2'd2);
assign main_ethmac_sram52_readable = (main_ethmac_sram55_level != 1'd0);
always @(*) begin
    builder_basesoc_liteethmacsramwriter_next_state <= 3'd0;
    main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value <= 1'd0;
    main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce <= 1'd0;
    main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value <= 32'd0;
    main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce <= 1'd0;
    main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 11'd0;
    main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd0;
    main_ethmac_sram37_sink_valid <= 1'd0;
    main_ethmac_sram41_sink_payload_slot <= 1'd0;
    main_ethmac_sram42_sink_payload_length <= 11'd0;
    main_ethmac_write <= 1'd0;
    builder_basesoc_liteethmacsramwriter_next_state <= builder_basesoc_liteethmacsramwriter_state;
    case (builder_basesoc_liteethmacsramwriter_state)
        1'd1: begin
            if ((main_ethmac_sram0_sink_valid & main_ethmac_sram3_sink_last)) begin
                if (((main_ethmac_sram6_sink_payload_error & main_ethmac_sram5_sink_payload_last_be) != 1'd0)) begin
                    builder_basesoc_liteethmacsramwriter_next_state <= 2'd3;
                end else begin
                    builder_basesoc_liteethmacsramwriter_next_state <= 3'd4;
                end
            end
        end
        2'd2: begin
            if ((main_ethmac_sram0_sink_valid & main_ethmac_sram3_sink_last)) begin
                if ((main_ethmac_sram5_sink_payload_last_be != 1'd0)) begin
                    builder_basesoc_liteethmacsramwriter_next_state <= 2'd3;
                end else begin
                    main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 1'd0;
                    main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
                    builder_basesoc_liteethmacsramwriter_next_state <= 1'd0;
                end
            end
        end
        2'd3: begin
            main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 1'd0;
            main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
            builder_basesoc_liteethmacsramwriter_next_state <= 1'd0;
        end
        3'd4: begin
            main_ethmac_sram37_sink_valid <= 1'd1;
            main_ethmac_sram41_sink_payload_slot <= main_ethmac_slot;
            main_ethmac_sram42_sink_payload_length <= main_ethmac_sram35_length;
            main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= 1'd0;
            main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
            main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value <= (main_ethmac_slot + 1'd1);
            main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce <= 1'd1;
            builder_basesoc_liteethmacsramwriter_next_state <= 1'd0;
        end
        default: begin
            if (main_ethmac_sram0_sink_valid) begin
                if (main_ethmac_sram38_sink_ready) begin
                    main_ethmac_write <= 1'd1;
                    main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value <= (main_ethmac_sram35_length + main_ethmac_length_inc);
                    main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce <= 1'd1;
                    if ((main_ethmac_sram35_length >= 11'd1530)) begin
                        builder_basesoc_liteethmacsramwriter_next_state <= 1'd1;
                    end
                    if (main_ethmac_sram3_sink_last) begin
                        if (((main_ethmac_sram6_sink_payload_error & main_ethmac_sram5_sink_payload_last_be) != 1'd0)) begin
                            builder_basesoc_liteethmacsramwriter_next_state <= 2'd3;
                        end else begin
                            builder_basesoc_liteethmacsramwriter_next_state <= 3'd4;
                        end
                    end
                end else begin
                    main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value <= (main_ethmac_sram13_status + 1'd1);
                    main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce <= 1'd1;
                    builder_basesoc_liteethmacsramwriter_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_ethmac_sram123_sink_valid = main_ethmac_start_re;
assign main_ethmac_sram127_sink_payload_slot = main_ethmac_sram100_storage;
assign main_ethmac_sram128_sink_payload_length = main_ethmac_sram102_storage;
assign main_ethmac_sram94_status = main_ethmac_sram124_sink_ready;
assign main_ethmac_sram97_status = main_ethmac_sram141_level;
always @(*) begin
    main_ethmac_sram88_source_payload_last_be <= 4'd0;
    if (main_ethmac_sram86_source_last) begin
        case (main_ethmac_sram134_source_payload_length[1:0])
            1'd1: begin
                main_ethmac_sram88_source_payload_last_be <= 1'd1;
            end
            2'd2: begin
                main_ethmac_sram88_source_payload_last_be <= 2'd2;
            end
            2'd3: begin
                main_ethmac_sram88_source_payload_last_be <= 3'd4;
            end
            3'd4: begin
                main_ethmac_sram88_source_payload_last_be <= 4'd8;
            end
            3'd5: begin
                main_ethmac_sram88_source_payload_last_be <= 5'd16;
            end
            3'd6: begin
                main_ethmac_sram88_source_payload_last_be <= 6'd32;
            end
            3'd7: begin
                main_ethmac_sram88_source_payload_last_be <= 7'd64;
            end
            default: begin
                main_ethmac_sram88_source_payload_last_be <= 4'd8;
            end
        endcase
    end
end
assign main_ethmac_sram163_re = main_ethmac_read;
assign main_ethmac_sram161_adr = main_ethmac_sram122_length[10:2];
assign main_ethmac_sram166_re = main_ethmac_read;
assign main_ethmac_sram164_adr = main_ethmac_sram122_length[10:2];
always @(*) begin
    main_ethmac_rd_data <= 32'd0;
    case (main_ethmac_sram133_source_payload_slot)
        1'd0: begin
            main_ethmac_rd_data <= main_ethmac_sram162_dat_r;
        end
        1'd1: begin
            main_ethmac_rd_data <= main_ethmac_sram165_dat_r;
        end
    endcase
end
assign main_ethmac_sram87_source_payload_data = main_ethmac_rd_data;
assign main_ethmac_sram109_event0 = main_ethmac_sram105_status;
assign main_ethmac_sram113_event0 = main_ethmac_sram106_pending;
always @(*) begin
    main_ethmac_sram108_clear <= 1'd0;
    if ((main_ethmac_sram116_re & main_ethmac_sram117_r)) begin
        main_ethmac_sram108_clear <= 1'd1;
    end
end
assign main_ethmac_sram104_irq = (main_ethmac_sram114_status & main_ethmac_sram119_storage);
assign main_ethmac_sram105_status = 1'd0;
assign main_ethmac_sram139_din = {main_ethmac_sram155_fifo_in_last, main_ethmac_sram154_fifo_in_first, main_ethmac_sram153_fifo_in_payload_length, main_ethmac_sram152_fifo_in_payload_slot};
assign {main_ethmac_sram159_fifo_out_last, main_ethmac_sram158_fifo_out_first, main_ethmac_sram157_fifo_out_payload_length, main_ethmac_sram156_fifo_out_payload_slot} = main_ethmac_sram140_dout;
assign main_ethmac_sram124_sink_ready = main_ethmac_sram136_writable;
assign main_ethmac_sram135_we = main_ethmac_sram123_sink_valid;
assign main_ethmac_sram154_fifo_in_first = main_ethmac_sram125_sink_first;
assign main_ethmac_sram155_fifo_in_last = main_ethmac_sram126_sink_last;
assign main_ethmac_sram152_fifo_in_payload_slot = main_ethmac_sram127_sink_payload_slot;
assign main_ethmac_sram153_fifo_in_payload_length = main_ethmac_sram128_sink_payload_length;
assign main_ethmac_sram129_source_valid = main_ethmac_sram138_readable;
assign main_ethmac_sram131_source_first = main_ethmac_sram158_fifo_out_first;
assign main_ethmac_sram132_source_last = main_ethmac_sram159_fifo_out_last;
assign main_ethmac_sram133_source_payload_slot = main_ethmac_sram156_fifo_out_payload_slot;
assign main_ethmac_sram134_source_payload_length = main_ethmac_sram157_fifo_out_payload_length;
assign main_ethmac_sram137_re = main_ethmac_sram130_source_ready;
always @(*) begin
    main_ethmac_sram145_adr <= 1'd0;
    if (main_ethmac_sram142_replace) begin
        main_ethmac_sram145_adr <= (main_ethmac_sram143_produce - 1'd1);
    end else begin
        main_ethmac_sram145_adr <= main_ethmac_sram143_produce;
    end
end
assign main_ethmac_sram148_dat_w = main_ethmac_sram139_din;
assign main_ethmac_sram147_we = (main_ethmac_sram135_we & (main_ethmac_sram136_writable | main_ethmac_sram142_replace));
assign main_ethmac_sram149_do_read = (main_ethmac_sram138_readable & main_ethmac_sram137_re);
assign main_ethmac_sram150_adr = main_ethmac_sram144_consume;
assign main_ethmac_sram140_dout = main_ethmac_sram151_dat_r;
assign main_ethmac_sram136_writable = (main_ethmac_sram141_level != 2'd2);
assign main_ethmac_sram138_readable = (main_ethmac_sram141_level != 1'd0);
always @(*) begin
    builder_basesoc_liteethmacsramreader_next_state <= 2'd0;
    main_ethmac_read <= 1'd0;
    main_ethmac_sram107_trigger <= 1'd0;
    main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value <= 11'd0;
    main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd0;
    main_ethmac_sram130_source_ready <= 1'd0;
    main_ethmac_sram83_source_valid <= 1'd0;
    main_ethmac_sram86_source_last <= 1'd0;
    builder_basesoc_liteethmacsramreader_next_state <= builder_basesoc_liteethmacsramreader_state;
    case (builder_basesoc_liteethmacsramreader_state)
        1'd1: begin
            main_ethmac_sram83_source_valid <= 1'd1;
            main_ethmac_sram86_source_last <= (main_ethmac_sram122_length >= main_ethmac_sram134_source_payload_length);
            if (main_ethmac_sram84_source_ready) begin
                main_ethmac_read <= 1'd1;
                main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value <= (main_ethmac_sram122_length + 3'd4);
                main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd1;
                if (main_ethmac_sram86_source_last) begin
                    builder_basesoc_liteethmacsramreader_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value <= 1'd0;
            main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd1;
            main_ethmac_sram107_trigger <= 1'd1;
            main_ethmac_sram130_source_ready <= 1'd1;
            builder_basesoc_liteethmacsramreader_next_state <= 1'd0;
        end
        default: begin
            if (main_ethmac_sram129_source_valid) begin
                main_ethmac_read <= 1'd1;
                main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value <= 3'd4;
                main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce <= 1'd1;
                builder_basesoc_liteethmacsramreader_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_ethmac_sram167_irq = (main_ethmac_sram16_irq | main_ethmac_sram104_irq);
assign main_ethmac_sram0_adr = main_ethmac_interface0_adr[8:0];
assign main_ethmac_interface0_dat_r = main_ethmac_sram0_dat_r;
assign main_ethmac_sram1_adr = main_ethmac_interface1_adr[8:0];
assign main_ethmac_interface1_dat_r = main_ethmac_sram1_dat_r;
always @(*) begin
    main_ethmac_sram2_we <= 4'd0;
    main_ethmac_sram2_we[0] <= (((main_ethmac_interface2_cyc & main_ethmac_interface2_stb) & main_ethmac_interface2_we) & main_ethmac_interface2_sel[0]);
    main_ethmac_sram2_we[1] <= (((main_ethmac_interface2_cyc & main_ethmac_interface2_stb) & main_ethmac_interface2_we) & main_ethmac_interface2_sel[1]);
    main_ethmac_sram2_we[2] <= (((main_ethmac_interface2_cyc & main_ethmac_interface2_stb) & main_ethmac_interface2_we) & main_ethmac_interface2_sel[2]);
    main_ethmac_sram2_we[3] <= (((main_ethmac_interface2_cyc & main_ethmac_interface2_stb) & main_ethmac_interface2_we) & main_ethmac_interface2_sel[3]);
end
assign main_ethmac_sram2_adr = main_ethmac_interface2_adr[8:0];
assign main_ethmac_interface2_dat_r = main_ethmac_sram2_dat_r;
assign main_ethmac_sram2_dat_w = main_ethmac_interface2_dat_w;
always @(*) begin
    main_ethmac_sram3_we <= 4'd0;
    main_ethmac_sram3_we[0] <= (((main_ethmac_interface3_cyc & main_ethmac_interface3_stb) & main_ethmac_interface3_we) & main_ethmac_interface3_sel[0]);
    main_ethmac_sram3_we[1] <= (((main_ethmac_interface3_cyc & main_ethmac_interface3_stb) & main_ethmac_interface3_we) & main_ethmac_interface3_sel[1]);
    main_ethmac_sram3_we[2] <= (((main_ethmac_interface3_cyc & main_ethmac_interface3_stb) & main_ethmac_interface3_we) & main_ethmac_interface3_sel[2]);
    main_ethmac_sram3_we[3] <= (((main_ethmac_interface3_cyc & main_ethmac_interface3_stb) & main_ethmac_interface3_we) & main_ethmac_interface3_sel[3]);
end
assign main_ethmac_sram3_adr = main_ethmac_interface3_adr[8:0];
assign main_ethmac_interface3_dat_r = main_ethmac_sram3_dat_r;
assign main_ethmac_sram3_dat_w = main_ethmac_interface3_dat_w;
always @(*) begin
    main_ethmac_slave_sel <= 4'd0;
    main_ethmac_slave_sel[0] <= (main_ethmac_bus_adr[10:9] == 1'd0);
    main_ethmac_slave_sel[1] <= (main_ethmac_bus_adr[10:9] == 1'd1);
    main_ethmac_slave_sel[2] <= (main_ethmac_bus_adr[10:9] == 2'd2);
    main_ethmac_slave_sel[3] <= (main_ethmac_bus_adr[10:9] == 2'd3);
end
assign main_ethmac_interface0_adr = main_ethmac_bus_adr;
assign main_ethmac_interface0_dat_w = main_ethmac_bus_dat_w;
assign main_ethmac_interface0_sel = main_ethmac_bus_sel;
assign main_ethmac_interface0_stb = main_ethmac_bus_stb;
assign main_ethmac_interface0_we = main_ethmac_bus_we;
assign main_ethmac_interface0_cti = main_ethmac_bus_cti;
assign main_ethmac_interface0_bte = main_ethmac_bus_bte;
assign main_ethmac_interface1_adr = main_ethmac_bus_adr;
assign main_ethmac_interface1_dat_w = main_ethmac_bus_dat_w;
assign main_ethmac_interface1_sel = main_ethmac_bus_sel;
assign main_ethmac_interface1_stb = main_ethmac_bus_stb;
assign main_ethmac_interface1_we = main_ethmac_bus_we;
assign main_ethmac_interface1_cti = main_ethmac_bus_cti;
assign main_ethmac_interface1_bte = main_ethmac_bus_bte;
assign main_ethmac_interface2_adr = main_ethmac_bus_adr;
assign main_ethmac_interface2_dat_w = main_ethmac_bus_dat_w;
assign main_ethmac_interface2_sel = main_ethmac_bus_sel;
assign main_ethmac_interface2_stb = main_ethmac_bus_stb;
assign main_ethmac_interface2_we = main_ethmac_bus_we;
assign main_ethmac_interface2_cti = main_ethmac_bus_cti;
assign main_ethmac_interface2_bte = main_ethmac_bus_bte;
assign main_ethmac_interface3_adr = main_ethmac_bus_adr;
assign main_ethmac_interface3_dat_w = main_ethmac_bus_dat_w;
assign main_ethmac_interface3_sel = main_ethmac_bus_sel;
assign main_ethmac_interface3_stb = main_ethmac_bus_stb;
assign main_ethmac_interface3_we = main_ethmac_bus_we;
assign main_ethmac_interface3_cti = main_ethmac_bus_cti;
assign main_ethmac_interface3_bte = main_ethmac_bus_bte;
assign main_ethmac_interface0_cyc = (main_ethmac_bus_cyc & main_ethmac_slave_sel[0]);
assign main_ethmac_interface1_cyc = (main_ethmac_bus_cyc & main_ethmac_slave_sel[1]);
assign main_ethmac_interface2_cyc = (main_ethmac_bus_cyc & main_ethmac_slave_sel[2]);
assign main_ethmac_interface3_cyc = (main_ethmac_bus_cyc & main_ethmac_slave_sel[3]);
assign main_ethmac_bus_ack = (((main_ethmac_interface0_ack | main_ethmac_interface1_ack) | main_ethmac_interface2_ack) | main_ethmac_interface3_ack);
assign main_ethmac_bus_err = (((main_ethmac_interface0_err | main_ethmac_interface1_err) | main_ethmac_interface2_err) | main_ethmac_interface3_err);
assign main_ethmac_bus_dat_r = (((({32{main_ethmac_slave_sel_r[0]}} & main_ethmac_interface0_dat_r) | ({32{main_ethmac_slave_sel_r[1]}} & main_ethmac_interface1_dat_r)) | ({32{main_ethmac_slave_sel_r[2]}} & main_ethmac_interface2_dat_r)) | ({32{main_ethmac_slave_sel_r[3]}} & main_ethmac_interface3_dat_r));
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 2'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {user_led1, user_led0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
assign builder_basesoc_dat_w = builder_basesoc_axiliteinterface_w_payload_data;
assign builder_basesoc_we = ((builder_basesoc_axiliteinterface_w_valid & builder_basesoc_axiliteinterface_w_ready) & (builder_basesoc_axiliteinterface_w_payload_strb != 1'd0));
always @(*) begin
    builder_basesoc_adr <= 14'd0;
    builder_basesoc_axilite2csr_next_state <= 2'd0;
    builder_basesoc_axiliteinterface_ar_ready <= 1'd0;
    builder_basesoc_axiliteinterface_aw_ready <= 1'd0;
    builder_basesoc_axiliteinterface_b_payload_resp <= 2'd0;
    builder_basesoc_axiliteinterface_b_valid <= 1'd0;
    builder_basesoc_axiliteinterface_r_payload_data <= 32'd0;
    builder_basesoc_axiliteinterface_r_payload_resp <= 2'd0;
    builder_basesoc_axiliteinterface_r_valid <= 1'd0;
    builder_basesoc_axiliteinterface_w_ready <= 1'd0;
    builder_basesoc_do_read <= 1'd0;
    builder_basesoc_do_write <= 1'd0;
    builder_basesoc_last_was_read_axilite2csr_next_value1 <= 1'd0;
    builder_basesoc_last_was_read_axilite2csr_next_value_ce1 <= 1'd0;
    builder_basesoc_port_dat_r_latched_axilite2csr_next_value0 <= 32'd0;
    builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce0 <= 1'd0;
    builder_basesoc_axilite2csr_next_state <= builder_basesoc_axilite2csr_state;
    case (builder_basesoc_axilite2csr_state)
        1'd1: begin
            builder_basesoc_port_dat_r_latched_axilite2csr_next_value0 <= builder_basesoc_dat_r;
            builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce0 <= 1'd1;
            builder_basesoc_axilite2csr_next_state <= 2'd2;
        end
        2'd2: begin
            builder_basesoc_last_was_read_axilite2csr_next_value1 <= 1'd1;
            builder_basesoc_last_was_read_axilite2csr_next_value_ce1 <= 1'd1;
            builder_basesoc_axiliteinterface_r_payload_data <= builder_basesoc_port_dat_r_latched;
            builder_basesoc_axiliteinterface_r_payload_resp <= 1'd0;
            builder_basesoc_axiliteinterface_r_valid <= 1'd1;
            if (builder_basesoc_axiliteinterface_r_ready) begin
                builder_basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        2'd3: begin
            builder_basesoc_last_was_read_axilite2csr_next_value1 <= 1'd0;
            builder_basesoc_last_was_read_axilite2csr_next_value_ce1 <= 1'd1;
            builder_basesoc_axiliteinterface_b_valid <= 1'd1;
            builder_basesoc_axiliteinterface_b_payload_resp <= 1'd0;
            if (builder_basesoc_axiliteinterface_b_ready) begin
                builder_basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        default: begin
            if ((builder_basesoc_axiliteinterface_aw_valid & builder_basesoc_axiliteinterface_ar_valid)) begin
                builder_basesoc_do_write <= builder_basesoc_last_was_read;
                builder_basesoc_do_read <= (~builder_basesoc_last_was_read);
            end else begin
                builder_basesoc_do_write <= builder_basesoc_axiliteinterface_aw_valid;
                builder_basesoc_do_read <= builder_basesoc_axiliteinterface_ar_valid;
            end
            builder_basesoc_axiliteinterface_aw_ready <= (builder_basesoc_last_was_read | (~builder_basesoc_axiliteinterface_ar_valid));
            builder_basesoc_axiliteinterface_ar_ready <= ((~builder_basesoc_last_was_read) | (~builder_basesoc_axiliteinterface_aw_valid));
            if (builder_basesoc_do_write) begin
                builder_basesoc_adr <= builder_basesoc_axiliteinterface_aw_payload_addr[31:2];
                if (builder_basesoc_axiliteinterface_w_valid) begin
                    builder_basesoc_axiliteinterface_w_ready <= 1'd1;
                    builder_basesoc_axilite2csr_next_state <= 2'd3;
                end
            end else begin
                if (builder_basesoc_do_read) begin
                    builder_basesoc_adr <= builder_basesoc_axiliteinterface_ar_payload_addr[31:2];
                    builder_basesoc_axilite2csr_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    main_soc_rst <= 1'd0;
    if (main_reset_re) begin
        main_soc_rst <= main_reset_storage[0];
    end
end
assign main_cpu_rst = main_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_bus_errors_status[31:0];
assign main_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign builder_csr_bankarray_csrbank1_rst0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_rst0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_rst0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_rst0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_rst0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_dly_sel0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_dly_sel0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_dly_sel0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_dly_sel0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_dly_sel0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_half_sys8x_taps0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[4:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_half_sys8x_taps0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_half_sys8x_taps0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_half_sys8x_taps0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_half_sys8x_taps0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_wlevel_en0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_wlevel_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_wlevel_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank1_wlevel_en0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_wlevel_en0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_wlevel_strobe_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_wlevel_strobe_re <= 1'd0;
    main_v7ddrphy_wlevel_strobe_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        main_v7ddrphy_wlevel_strobe_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_wlevel_strobe_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_cdly_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_cdly_rst_re <= 1'd0;
    main_v7ddrphy_cdly_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        main_v7ddrphy_cdly_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_cdly_rst_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_cdly_inc_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_cdly_inc_re <= 1'd0;
    main_v7ddrphy_cdly_inc_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        main_v7ddrphy_cdly_inc_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_cdly_inc_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_rdly_dq_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_rdly_dq_rst_re <= 1'd0;
    main_v7ddrphy_rdly_dq_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        main_v7ddrphy_rdly_dq_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_rdly_dq_rst_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_rdly_dq_inc_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_rdly_dq_inc_re <= 1'd0;
    main_v7ddrphy_rdly_dq_inc_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
        main_v7ddrphy_rdly_dq_inc_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_rdly_dq_inc_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_rdly_dq_bitslip_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_rdly_dq_bitslip_rst_re <= 1'd0;
    main_v7ddrphy_rdly_dq_bitslip_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
        main_v7ddrphy_rdly_dq_bitslip_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_rdly_dq_bitslip_rst_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_rdly_dq_bitslip_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_rdly_dq_bitslip_re <= 1'd0;
    main_v7ddrphy_rdly_dq_bitslip_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
        main_v7ddrphy_rdly_dq_bitslip_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_rdly_dq_bitslip_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_wdly_dq_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_wdly_dq_rst_re <= 1'd0;
    main_v7ddrphy_wdly_dq_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd11))) begin
        main_v7ddrphy_wdly_dq_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_wdly_dq_rst_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_wdly_dq_inc_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_wdly_dq_inc_re <= 1'd0;
    main_v7ddrphy_wdly_dq_inc_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd12))) begin
        main_v7ddrphy_wdly_dq_inc_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_wdly_dq_inc_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_wdly_dqs_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_wdly_dqs_rst_re <= 1'd0;
    main_v7ddrphy_wdly_dqs_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd13))) begin
        main_v7ddrphy_wdly_dqs_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_wdly_dqs_rst_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_wdly_dqs_inc_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_wdly_dqs_inc_re <= 1'd0;
    main_v7ddrphy_wdly_dqs_inc_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd14))) begin
        main_v7ddrphy_wdly_dqs_inc_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_wdly_dqs_inc_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_wdly_dq_bitslip_rst_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_wdly_dq_bitslip_rst_re <= 1'd0;
    main_v7ddrphy_wdly_dq_bitslip_rst_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd15))) begin
        main_v7ddrphy_wdly_dq_bitslip_rst_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_wdly_dq_bitslip_rst_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign main_v7ddrphy_wdly_dq_bitslip_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    main_v7ddrphy_wdly_dq_bitslip_re <= 1'd0;
    main_v7ddrphy_wdly_dq_bitslip_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 5'd16))) begin
        main_v7ddrphy_wdly_dq_bitslip_re <= builder_csr_bankarray_interface1_bank_bus_we;
        main_v7ddrphy_wdly_dq_bitslip_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_rdphase0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_rdphase0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_rdphase0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 5'd17))) begin
        builder_csr_bankarray_csrbank1_rdphase0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_rdphase0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_wrphase0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_wrphase0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_wrphase0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 5'd18))) begin
        builder_csr_bankarray_csrbank1_wrphase0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_wrphase0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_rst0_w = main_v7ddrphy_rst_storage;
assign builder_csr_bankarray_csrbank1_dly_sel0_w = main_v7ddrphy_dly_sel_storage[7:0];
assign builder_csr_bankarray_csrbank1_half_sys8x_taps0_w = main_v7ddrphy_half_sys8x_taps_storage[4:0];
assign builder_csr_bankarray_csrbank1_wlevel_en0_w = main_v7ddrphy_wlevel_en_storage;
assign builder_csr_bankarray_csrbank1_rdphase0_w = main_v7ddrphy_rdphase_storage[1:0];
assign builder_csr_bankarray_csrbank1_wrphase0_w = main_v7ddrphy_wrphase_storage[1:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank2_sram_writer_slot_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_writer_slot_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_writer_slot_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_sram_writer_slot_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_writer_slot_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_writer_length_r = builder_csr_bankarray_interface2_bank_bus_dat_w[10:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_writer_length_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_writer_length_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_sram_writer_length_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_writer_length_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_writer_errors_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_writer_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_writer_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank2_sram_writer_errors_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_writer_errors_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_writer_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_writer_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_writer_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank2_sram_writer_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_writer_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_writer_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_writer_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_writer_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank2_sram_writer_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_writer_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign main_ethmac_start_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_ethmac_start_re <= 1'd0;
    main_ethmac_start_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        main_ethmac_start_re <= builder_csr_bankarray_interface2_bank_bus_we;
        main_ethmac_start_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_reader_ready_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_reader_ready_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_reader_ready_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank2_sram_reader_ready_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_reader_ready_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_reader_level_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_reader_level_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_reader_level_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank2_sram_reader_level_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_reader_level_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_reader_slot0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_reader_slot0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_reader_slot0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank2_sram_reader_slot0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_reader_slot0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_reader_length0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[10:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_reader_length0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_reader_length0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csr_bankarray_csrbank2_sram_reader_length0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_reader_length0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_reader_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_reader_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_reader_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank2_sram_reader_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_reader_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_reader_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_reader_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_reader_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank2_sram_reader_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_reader_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_preamble_crc_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_preamble_crc_re <= 1'd0;
    builder_csr_bankarray_csrbank2_preamble_crc_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd14))) begin
        builder_csr_bankarray_csrbank2_preamble_crc_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_preamble_crc_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 5'd16))) begin
        builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_sram_writer_slot_w = main_ethmac_sram7_status;
assign main_ethmac_sram8_we = builder_csr_bankarray_csrbank2_sram_writer_slot_we;
assign builder_csr_bankarray_csrbank2_sram_writer_length_w = main_ethmac_sram10_status[10:0];
assign main_ethmac_sram11_we = builder_csr_bankarray_csrbank2_sram_writer_length_we;
assign builder_csr_bankarray_csrbank2_sram_writer_errors_w = main_ethmac_sram13_status[31:0];
assign main_ethmac_sram14_we = builder_csr_bankarray_csrbank2_sram_writer_errors_we;
always @(*) begin
    main_ethmac_sram22_status <= 1'd0;
    main_ethmac_sram22_status <= main_ethmac_sram21_available;
end
assign builder_csr_bankarray_csrbank2_sram_writer_ev_status_w = main_ethmac_sram22_status;
assign main_ethmac_sram23_we = builder_csr_bankarray_csrbank2_sram_writer_ev_status_we;
always @(*) begin
    main_ethmac_sram26_status <= 1'd0;
    main_ethmac_sram26_status <= main_ethmac_sram25_available;
end
assign builder_csr_bankarray_csrbank2_sram_writer_ev_pending_w = main_ethmac_sram26_status;
assign main_ethmac_sram27_we = builder_csr_bankarray_csrbank2_sram_writer_ev_pending_we;
assign main_ethmac_sram30_available = main_ethmac_sram31_storage;
assign builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_w = main_ethmac_sram31_storage;
assign builder_csr_bankarray_csrbank2_sram_reader_ready_w = main_ethmac_sram94_status;
assign main_ethmac_sram95_we = builder_csr_bankarray_csrbank2_sram_reader_ready_we;
assign builder_csr_bankarray_csrbank2_sram_reader_level_w = main_ethmac_sram97_status[1:0];
assign main_ethmac_sram98_we = builder_csr_bankarray_csrbank2_sram_reader_level_we;
assign builder_csr_bankarray_csrbank2_sram_reader_slot0_w = main_ethmac_sram100_storage;
assign builder_csr_bankarray_csrbank2_sram_reader_length0_w = main_ethmac_sram102_storage[10:0];
always @(*) begin
    main_ethmac_sram110_status <= 1'd0;
    main_ethmac_sram110_status <= main_ethmac_sram109_event0;
end
assign builder_csr_bankarray_csrbank2_sram_reader_ev_status_w = main_ethmac_sram110_status;
assign main_ethmac_sram111_we = builder_csr_bankarray_csrbank2_sram_reader_ev_status_we;
always @(*) begin
    main_ethmac_sram114_status <= 1'd0;
    main_ethmac_sram114_status <= main_ethmac_sram113_event0;
end
assign builder_csr_bankarray_csrbank2_sram_reader_ev_pending_w = main_ethmac_sram114_status;
assign main_ethmac_sram115_we = builder_csr_bankarray_csrbank2_sram_reader_ev_pending_we;
assign main_ethmac_sram118_event0 = main_ethmac_sram119_storage;
assign builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_w = main_ethmac_sram119_storage;
assign builder_csr_bankarray_csrbank2_preamble_crc_w = main_ethmac_status;
assign main_ethmac_we = builder_csr_bankarray_csrbank2_preamble_crc_we;
assign builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_w = main_ethmac_preamble_errors_status[31:0];
assign main_ethmac_preamble_errors_we = builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_we;
assign builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_w = main_ethmac_crc_errors_status[31:0];
assign main_ethmac_crc_errors_we = builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_we;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_re <= 1'd0;
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_reset0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_reset0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_reset0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_w = main_v7_1000basex_register_spdm_register_SPDM_storage[31:0];
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_w = main_v7_1000basex_register_spdm_register_SPDM_2_storage[31:0];
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_w = main_v7_1000basex_register_spdm_register_SPDM_3_storage[31:0];
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_w = main_v7_1000basex_register_spdm_register_SPDM_4_storage[31:0];
assign builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_w = main_v7_1000basex_register_spdm_register_SPDM_5_storage[7:0];
assign builder_csr_bankarray_csrbank3_reset0_w = main_v7_1000basex_storage;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 3'd4);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank4_out0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_out0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_out0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_out0_w = main_storage[1:0];
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign builder_csr_bankarray_csrbank5_dfii_control0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank5_dfii_control0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_control0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_command0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_command0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_command0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign main_sdram_phaseinjector0_command_issue_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    main_sdram_phaseinjector0_command_issue_re <= 1'd0;
    main_sdram_phaseinjector0_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        main_sdram_phaseinjector0_command_issue_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_sdram_phaseinjector0_command_issue_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_address0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_address0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_address0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_command0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_command0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_command0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign main_sdram_phaseinjector1_command_issue_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    main_sdram_phaseinjector1_command_issue_re <= 1'd0;
    main_sdram_phaseinjector1_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd14))) begin
        main_sdram_phaseinjector1_command_issue_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_sdram_phaseinjector1_command_issue_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_address0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_address0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_address0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd16))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd17))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd18))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd19))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd20))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd21))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd22))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd23))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd24))) begin
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_command0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd25))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_command0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_command0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign main_sdram_phaseinjector2_command_issue_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    main_sdram_phaseinjector2_command_issue_re <= 1'd0;
    main_sdram_phaseinjector2_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd26))) begin
        main_sdram_phaseinjector2_command_issue_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_sdram_phaseinjector2_command_issue_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_address0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd27))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_address0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_address0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd28))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd29))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd30))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 5'd31))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd32))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd33))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd34))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd35))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd36))) begin
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_command0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd37))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_command0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_command0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign main_sdram_phaseinjector3_command_issue_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    main_sdram_phaseinjector3_command_issue_re <= 1'd0;
    main_sdram_phaseinjector3_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd38))) begin
        main_sdram_phaseinjector3_command_issue_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_sdram_phaseinjector3_command_issue_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_address0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd39))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_address0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_address0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd40))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd41))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd42))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd43))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd44))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd45))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd46))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd47))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 6'd48))) begin
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign main_sdram_sel = main_sdram_storage[0];
assign main_sdram_cke = main_sdram_storage[1];
assign main_sdram_odt = main_sdram_storage[2];
assign main_sdram_reset_n = main_sdram_storage[3];
assign builder_csr_bankarray_csrbank5_dfii_control0_w = main_sdram_storage[3:0];
assign main_sdram_phaseinjector0_csrfield_cs = main_sdram_phaseinjector0_command_storage[0];
assign main_sdram_phaseinjector0_csrfield_we = main_sdram_phaseinjector0_command_storage[1];
assign main_sdram_phaseinjector0_csrfield_cas = main_sdram_phaseinjector0_command_storage[2];
assign main_sdram_phaseinjector0_csrfield_ras = main_sdram_phaseinjector0_command_storage[3];
assign main_sdram_phaseinjector0_csrfield_wren = main_sdram_phaseinjector0_command_storage[4];
assign main_sdram_phaseinjector0_csrfield_rden = main_sdram_phaseinjector0_command_storage[5];
assign main_sdram_phaseinjector0_csrfield_cs_top = main_sdram_phaseinjector0_command_storage[6];
assign main_sdram_phaseinjector0_csrfield_cs_bottom = main_sdram_phaseinjector0_command_storage[7];
assign builder_csr_bankarray_csrbank5_dfii_pi0_command0_w = main_sdram_phaseinjector0_command_storage[7:0];
assign builder_csr_bankarray_csrbank5_dfii_pi0_address0_w = main_sdram_phaseinjector0_address_storage[15:0];
assign builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_w = main_sdram_phaseinjector0_baddress_storage[2:0];
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_w = main_sdram_phaseinjector0_wrdata_storage[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_w = main_sdram_phaseinjector0_wrdata_storage[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_w = main_sdram_phaseinjector0_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_w = main_sdram_phaseinjector0_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_w = main_sdram_phaseinjector0_rddata_status[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_w = main_sdram_phaseinjector0_rddata_status[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_w = main_sdram_phaseinjector0_rddata_status[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_w = main_sdram_phaseinjector0_rddata_status[31:0];
assign main_sdram_phaseinjector0_rddata_we = builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_we;
assign main_sdram_phaseinjector1_csrfield_cs = main_sdram_phaseinjector1_command_storage[0];
assign main_sdram_phaseinjector1_csrfield_we = main_sdram_phaseinjector1_command_storage[1];
assign main_sdram_phaseinjector1_csrfield_cas = main_sdram_phaseinjector1_command_storage[2];
assign main_sdram_phaseinjector1_csrfield_ras = main_sdram_phaseinjector1_command_storage[3];
assign main_sdram_phaseinjector1_csrfield_wren = main_sdram_phaseinjector1_command_storage[4];
assign main_sdram_phaseinjector1_csrfield_rden = main_sdram_phaseinjector1_command_storage[5];
assign main_sdram_phaseinjector1_csrfield_cs_top = main_sdram_phaseinjector1_command_storage[6];
assign main_sdram_phaseinjector1_csrfield_cs_bottom = main_sdram_phaseinjector1_command_storage[7];
assign builder_csr_bankarray_csrbank5_dfii_pi1_command0_w = main_sdram_phaseinjector1_command_storage[7:0];
assign builder_csr_bankarray_csrbank5_dfii_pi1_address0_w = main_sdram_phaseinjector1_address_storage[15:0];
assign builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_w = main_sdram_phaseinjector1_baddress_storage[2:0];
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_w = main_sdram_phaseinjector1_wrdata_storage[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_w = main_sdram_phaseinjector1_wrdata_storage[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_w = main_sdram_phaseinjector1_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_w = main_sdram_phaseinjector1_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_w = main_sdram_phaseinjector1_rddata_status[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_w = main_sdram_phaseinjector1_rddata_status[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_w = main_sdram_phaseinjector1_rddata_status[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_w = main_sdram_phaseinjector1_rddata_status[31:0];
assign main_sdram_phaseinjector1_rddata_we = builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_we;
assign main_sdram_phaseinjector2_csrfield_cs = main_sdram_phaseinjector2_command_storage[0];
assign main_sdram_phaseinjector2_csrfield_we = main_sdram_phaseinjector2_command_storage[1];
assign main_sdram_phaseinjector2_csrfield_cas = main_sdram_phaseinjector2_command_storage[2];
assign main_sdram_phaseinjector2_csrfield_ras = main_sdram_phaseinjector2_command_storage[3];
assign main_sdram_phaseinjector2_csrfield_wren = main_sdram_phaseinjector2_command_storage[4];
assign main_sdram_phaseinjector2_csrfield_rden = main_sdram_phaseinjector2_command_storage[5];
assign main_sdram_phaseinjector2_csrfield_cs_top = main_sdram_phaseinjector2_command_storage[6];
assign main_sdram_phaseinjector2_csrfield_cs_bottom = main_sdram_phaseinjector2_command_storage[7];
assign builder_csr_bankarray_csrbank5_dfii_pi2_command0_w = main_sdram_phaseinjector2_command_storage[7:0];
assign builder_csr_bankarray_csrbank5_dfii_pi2_address0_w = main_sdram_phaseinjector2_address_storage[15:0];
assign builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_w = main_sdram_phaseinjector2_baddress_storage[2:0];
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_w = main_sdram_phaseinjector2_wrdata_storage[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_w = main_sdram_phaseinjector2_wrdata_storage[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_w = main_sdram_phaseinjector2_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_w = main_sdram_phaseinjector2_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_w = main_sdram_phaseinjector2_rddata_status[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_w = main_sdram_phaseinjector2_rddata_status[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_w = main_sdram_phaseinjector2_rddata_status[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_w = main_sdram_phaseinjector2_rddata_status[31:0];
assign main_sdram_phaseinjector2_rddata_we = builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_we;
assign main_sdram_phaseinjector3_csrfield_cs = main_sdram_phaseinjector3_command_storage[0];
assign main_sdram_phaseinjector3_csrfield_we = main_sdram_phaseinjector3_command_storage[1];
assign main_sdram_phaseinjector3_csrfield_cas = main_sdram_phaseinjector3_command_storage[2];
assign main_sdram_phaseinjector3_csrfield_ras = main_sdram_phaseinjector3_command_storage[3];
assign main_sdram_phaseinjector3_csrfield_wren = main_sdram_phaseinjector3_command_storage[4];
assign main_sdram_phaseinjector3_csrfield_rden = main_sdram_phaseinjector3_command_storage[5];
assign main_sdram_phaseinjector3_csrfield_cs_top = main_sdram_phaseinjector3_command_storage[6];
assign main_sdram_phaseinjector3_csrfield_cs_bottom = main_sdram_phaseinjector3_command_storage[7];
assign builder_csr_bankarray_csrbank5_dfii_pi3_command0_w = main_sdram_phaseinjector3_command_storage[7:0];
assign builder_csr_bankarray_csrbank5_dfii_pi3_address0_w = main_sdram_phaseinjector3_address_storage[15:0];
assign builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_w = main_sdram_phaseinjector3_baddress_storage[2:0];
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_w = main_sdram_phaseinjector3_wrdata_storage[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_w = main_sdram_phaseinjector3_wrdata_storage[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_w = main_sdram_phaseinjector3_wrdata_storage[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_w = main_sdram_phaseinjector3_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_w = main_sdram_phaseinjector3_rddata_status[127:96];
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_w = main_sdram_phaseinjector3_rddata_status[95:64];
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_w = main_sdram_phaseinjector3_rddata_status[63:32];
assign builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_w = main_sdram_phaseinjector3_rddata_status[31:0];
assign main_sdram_phaseinjector3_rddata_we = builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_we;
assign builder_csr_bankarray_csrbank6_sel = (builder_csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign builder_csr_bankarray_csrbank6_load0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank6_load0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_load0_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_reload0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank6_reload0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_reload0_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_en0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank6_en0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_en0_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_update_value0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank6_update_value0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_update_value0_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_value_r = builder_csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_value_re <= 1'd0;
    builder_csr_bankarray_csrbank6_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank6_value_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_value_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_ev_status_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank6_ev_status_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_status_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_ev_pending_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank6_ev_pending_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_pending_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_ev_enable0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank6_ev_enable0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_enable0_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank6_load0_w = main_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank6_reload0_w = main_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank6_en0_w = main_timer_en_storage;
assign builder_csr_bankarray_csrbank6_update_value0_w = main_timer_update_value_storage;
assign builder_csr_bankarray_csrbank6_value_w = main_timer_value_status[31:0];
assign main_timer_value_we = builder_csr_bankarray_csrbank6_value_we;
always @(*) begin
    main_timer_status_status <= 1'd0;
    main_timer_status_status <= main_timer_zero0;
end
assign builder_csr_bankarray_csrbank6_ev_status_w = main_timer_status_status;
assign main_timer_status_we = builder_csr_bankarray_csrbank6_ev_status_we;
always @(*) begin
    main_timer_pending_status <= 1'd0;
    main_timer_pending_status <= main_timer_zero1;
end
assign builder_csr_bankarray_csrbank6_ev_pending_w = main_timer_pending_status;
assign main_timer_pending_we = builder_csr_bankarray_csrbank6_ev_pending_we;
assign main_timer_zero2 = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank6_ev_enable0_w = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank7_sel = (builder_csr_bankarray_interface7_bank_bus_adr[13:9] == 4'd8);
assign main_uart_rxtx_r = builder_csr_bankarray_interface7_bank_bus_dat_w[7:0];
always @(*) begin
    main_uart_rxtx_re <= 1'd0;
    main_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
        main_uart_rxtx_re <= builder_csr_bankarray_interface7_bank_bus_we;
        main_uart_rxtx_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_txfull_r = builder_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank7_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank7_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank7_txfull_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_txfull_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_rxempty_r = builder_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank7_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank7_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank7_rxempty_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_rxempty_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_ev_status_r = builder_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank7_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank7_ev_status_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_ev_status_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_ev_pending_r = builder_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank7_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank7_ev_pending_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_ev_pending_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_ev_enable0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank7_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank7_ev_enable0_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_ev_enable0_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_txempty_r = builder_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank7_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank7_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank7_txempty_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_txempty_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_rxfull_r = builder_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank7_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank7_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank7_rxfull_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_rxfull_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank7_txfull_w = main_uart_txfull_status;
assign main_uart_txfull_we = builder_csr_bankarray_csrbank7_txfull_we;
assign builder_csr_bankarray_csrbank7_rxempty_w = main_uart_rxempty_status;
assign main_uart_rxempty_we = builder_csr_bankarray_csrbank7_rxempty_we;
always @(*) begin
    main_uart_status_status <= 2'd0;
    main_uart_status_status[0] <= main_uart_tx0;
    main_uart_status_status[1] <= main_uart_rx0;
end
assign builder_csr_bankarray_csrbank7_ev_status_w = main_uart_status_status[1:0];
assign main_uart_status_we = builder_csr_bankarray_csrbank7_ev_status_we;
always @(*) begin
    main_uart_pending_status <= 2'd0;
    main_uart_pending_status[0] <= main_uart_tx1;
    main_uart_pending_status[1] <= main_uart_rx1;
end
assign builder_csr_bankarray_csrbank7_ev_pending_w = main_uart_pending_status[1:0];
assign main_uart_pending_we = builder_csr_bankarray_csrbank7_ev_pending_we;
assign main_uart_tx2 = main_uart_enable_storage[0];
assign main_uart_rx2 = main_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank7_ev_enable0_w = main_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank7_txempty_w = main_uart_txempty_status;
assign main_uart_txempty_we = builder_csr_bankarray_csrbank7_txempty_we;
assign builder_csr_bankarray_csrbank7_rxfull_w = main_uart_rxfull_status;
assign main_uart_rxfull_we = builder_csr_bankarray_csrbank7_rxfull_we;
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface6_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface7_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface6_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface7_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface6_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface7_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_interface6_bank_bus_dat_r) | builder_csr_bankarray_interface7_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
assign builder_rhs_slice_proxy0 = builder_aw_payload_addr[31:2];
assign builder_rhs_slice_proxy1 = builder_ar_payload_addr[31:2];
assign builder_rhs_slice_proxy2 = builder_aw_payload_addr[31:2];
assign builder_rhs_slice_proxy3 = builder_ar_payload_addr[31:2];
assign builder_rhs_slice_proxy4 = builder_aw_payload_addr[31:2];
assign builder_rhs_slice_proxy5 = builder_ar_payload_addr[31:2];
assign builder_rhs_slice_proxy6 = builder_aw_payload_addr[31:2];
assign builder_rhs_slice_proxy7 = builder_ar_payload_addr[31:2];
assign builder_cases_slice_proxy = {main_ethmac_tx_crc_value, main_ethmac_tx_crc_sink_payload_data[7:0]};
always @(*) begin
    builder_comb_rhs_array_muxed0 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed0 <= main_socbushandler_adapted_interface_aw_valid;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed1 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed1 <= main_socbushandler_adapted_interface_aw_first;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed2 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed2 <= main_socbushandler_adapted_interface_aw_last;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed3 <= 32'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed3 <= main_socbushandler_adapted_interface_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed4 <= 2'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed4 <= main_socbushandler_adapted_interface_aw_payload_burst;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed5 <= 8'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed5 <= main_socbushandler_adapted_interface_aw_payload_len;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed6 <= 3'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed6 <= main_socbushandler_adapted_interface_aw_payload_size;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed7 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed7 <= main_socbushandler_adapted_interface_aw_payload_lock;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed8 <= 3'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed8 <= main_socbushandler_adapted_interface_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed9 <= 4'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed9 <= main_socbushandler_adapted_interface_aw_payload_cache;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed10 <= 4'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed10 <= main_socbushandler_adapted_interface_aw_payload_qos;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed11 <= 4'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed11 <= main_socbushandler_adapted_interface_aw_payload_region;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed12 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed12 <= main_socbushandler_adapted_interface_aw_param_id;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed13 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed13 <= main_socbushandler_adapted_interface_aw_param_dest;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed14 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed14 <= main_socbushandler_adapted_interface_aw_param_user;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed15 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed15 <= main_socbushandler_adapted_interface_w_valid;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed16 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed16 <= main_socbushandler_adapted_interface_w_first;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed17 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed17 <= main_socbushandler_adapted_interface_w_last;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed18 <= 32'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed18 <= main_socbushandler_adapted_interface_w_payload_data;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed19 <= 4'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed19 <= main_socbushandler_adapted_interface_w_payload_strb;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed20 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed20 <= main_socbushandler_adapted_interface_w_param_id;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed21 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed21 <= main_socbushandler_adapted_interface_w_param_dest;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed22 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed22 <= main_socbushandler_adapted_interface_w_param_user;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed23 <= 1'd0;
    case (builder_rr_write_grant)
        default: begin
            builder_comb_rhs_array_muxed23 <= main_socbushandler_adapted_interface_b_ready;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed24 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed24 <= main_socbushandler_adapted_interface_ar_valid;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed25 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed25 <= main_socbushandler_adapted_interface_ar_first;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed26 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed26 <= main_socbushandler_adapted_interface_ar_last;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed27 <= 32'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed27 <= main_socbushandler_adapted_interface_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed28 <= 2'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed28 <= main_socbushandler_adapted_interface_ar_payload_burst;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed29 <= 8'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed29 <= main_socbushandler_adapted_interface_ar_payload_len;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed30 <= 3'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed30 <= main_socbushandler_adapted_interface_ar_payload_size;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed31 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed31 <= main_socbushandler_adapted_interface_ar_payload_lock;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed32 <= 3'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed32 <= main_socbushandler_adapted_interface_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed33 <= 4'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed33 <= main_socbushandler_adapted_interface_ar_payload_cache;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed34 <= 4'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed34 <= main_socbushandler_adapted_interface_ar_payload_qos;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed35 <= 4'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed35 <= main_socbushandler_adapted_interface_ar_payload_region;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed36 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed36 <= main_socbushandler_adapted_interface_ar_param_id;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed37 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed37 <= main_socbushandler_adapted_interface_ar_param_dest;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed38 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed38 <= main_socbushandler_adapted_interface_ar_param_user;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed39 <= 1'd0;
    case (builder_rr_read_grant)
        default: begin
            builder_comb_rhs_array_muxed39 <= main_socbushandler_adapted_interface_r_ready;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed40 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[0];
        end
        1'd1: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[1];
        end
        2'd2: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[2];
        end
        2'd3: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[3];
        end
        3'd4: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[4];
        end
        3'd5: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[5];
        end
        3'd6: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[6];
        end
        default: begin
            builder_comb_rhs_array_muxed40 <= main_sdram_choose_cmd_valids[7];
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed41 <= 16'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_comb_rhs_array_muxed41 <= main_sdram_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed42 <= 3'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_comb_rhs_array_muxed42 <= main_sdram_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed43 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_comb_rhs_array_muxed43 <= main_sdram_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed44 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_comb_rhs_array_muxed44 <= main_sdram_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed45 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_comb_rhs_array_muxed45 <= main_sdram_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_comb_t_array_muxed0 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_comb_t_array_muxed0 <= main_sdram_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_comb_t_array_muxed1 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_comb_t_array_muxed1 <= main_sdram_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_comb_t_array_muxed2 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_comb_t_array_muxed2 <= main_sdram_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed46 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[0];
        end
        1'd1: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[1];
        end
        2'd2: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[2];
        end
        2'd3: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[3];
        end
        3'd4: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[4];
        end
        3'd5: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[5];
        end
        3'd6: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[6];
        end
        default: begin
            builder_comb_rhs_array_muxed46 <= main_sdram_choose_req_valids[7];
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed47 <= 16'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_comb_rhs_array_muxed47 <= main_sdram_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed48 <= 3'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_comb_rhs_array_muxed48 <= main_sdram_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed49 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_comb_rhs_array_muxed49 <= main_sdram_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed50 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_comb_rhs_array_muxed50 <= main_sdram_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed51 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_comb_rhs_array_muxed51 <= main_sdram_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_comb_t_array_muxed3 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_comb_t_array_muxed3 <= main_sdram_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_comb_t_array_muxed4 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_comb_t_array_muxed4 <= main_sdram_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_comb_t_array_muxed5 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_comb_t_array_muxed5 <= main_sdram_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed52 <= 23'd0;
    case (builder_basesoc_roundrobin0_grant)
        default: begin
            builder_comb_rhs_array_muxed52 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed53 <= 1'd0;
    case (builder_basesoc_roundrobin0_grant)
        default: begin
            builder_comb_rhs_array_muxed53 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed54 <= 1'd0;
    case (builder_basesoc_roundrobin0_grant)
        default: begin
            builder_comb_rhs_array_muxed54 <= (((main_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_basesoc_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed55 <= 23'd0;
    case (builder_basesoc_roundrobin1_grant)
        default: begin
            builder_comb_rhs_array_muxed55 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed56 <= 1'd0;
    case (builder_basesoc_roundrobin1_grant)
        default: begin
            builder_comb_rhs_array_muxed56 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed57 <= 1'd0;
    case (builder_basesoc_roundrobin1_grant)
        default: begin
            builder_comb_rhs_array_muxed57 <= (((main_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_basesoc_locked1 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed58 <= 23'd0;
    case (builder_basesoc_roundrobin2_grant)
        default: begin
            builder_comb_rhs_array_muxed58 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed59 <= 1'd0;
    case (builder_basesoc_roundrobin2_grant)
        default: begin
            builder_comb_rhs_array_muxed59 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed60 <= 1'd0;
    case (builder_basesoc_roundrobin2_grant)
        default: begin
            builder_comb_rhs_array_muxed60 <= (((main_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_basesoc_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed61 <= 23'd0;
    case (builder_basesoc_roundrobin3_grant)
        default: begin
            builder_comb_rhs_array_muxed61 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed62 <= 1'd0;
    case (builder_basesoc_roundrobin3_grant)
        default: begin
            builder_comb_rhs_array_muxed62 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed63 <= 1'd0;
    case (builder_basesoc_roundrobin3_grant)
        default: begin
            builder_comb_rhs_array_muxed63 <= (((main_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_basesoc_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed64 <= 23'd0;
    case (builder_basesoc_roundrobin4_grant)
        default: begin
            builder_comb_rhs_array_muxed64 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed65 <= 1'd0;
    case (builder_basesoc_roundrobin4_grant)
        default: begin
            builder_comb_rhs_array_muxed65 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed66 <= 1'd0;
    case (builder_basesoc_roundrobin4_grant)
        default: begin
            builder_comb_rhs_array_muxed66 <= (((main_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_basesoc_locked4 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed67 <= 23'd0;
    case (builder_basesoc_roundrobin5_grant)
        default: begin
            builder_comb_rhs_array_muxed67 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed68 <= 1'd0;
    case (builder_basesoc_roundrobin5_grant)
        default: begin
            builder_comb_rhs_array_muxed68 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed69 <= 1'd0;
    case (builder_basesoc_roundrobin5_grant)
        default: begin
            builder_comb_rhs_array_muxed69 <= (((main_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_basesoc_locked5 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed70 <= 23'd0;
    case (builder_basesoc_roundrobin6_grant)
        default: begin
            builder_comb_rhs_array_muxed70 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed71 <= 1'd0;
    case (builder_basesoc_roundrobin6_grant)
        default: begin
            builder_comb_rhs_array_muxed71 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed72 <= 1'd0;
    case (builder_basesoc_roundrobin6_grant)
        default: begin
            builder_comb_rhs_array_muxed72 <= (((main_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_basesoc_locked6 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank7_lock & (builder_basesoc_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed73 <= 23'd0;
    case (builder_basesoc_roundrobin7_grant)
        default: begin
            builder_comb_rhs_array_muxed73 <= {main_port_cmd_payload_addr[25:10], main_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed74 <= 1'd0;
    case (builder_basesoc_roundrobin7_grant)
        default: begin
            builder_comb_rhs_array_muxed74 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_array_muxed75 <= 1'd0;
    case (builder_basesoc_roundrobin7_grant)
        default: begin
            builder_comb_rhs_array_muxed75 <= (((main_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_basesoc_locked7 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))) | (main_sdram_interface_bank4_lock & (builder_basesoc_roundrobin4_grant == 1'd0))) | (main_sdram_interface_bank5_lock & (builder_basesoc_roundrobin5_grant == 1'd0))) | (main_sdram_interface_bank6_lock & (builder_basesoc_roundrobin6_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_sync_t_array_muxed0 <= 3'd0;
    case (main_v7_1000basex_pcs_pcsrx_input_msb_first[3:0])
        1'd0: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        1'd1: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        2'd2: begin
            builder_sync_t_array_muxed0 <= 3'd4;
        end
        2'd3: begin
            builder_sync_t_array_muxed0 <= 2'd3;
        end
        3'd4: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        3'd5: begin
            builder_sync_t_array_muxed0 <= 2'd2;
        end
        3'd6: begin
            builder_sync_t_array_muxed0 <= 3'd6;
        end
        3'd7: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        4'd8: begin
            builder_sync_t_array_muxed0 <= 3'd7;
        end
        4'd9: begin
            builder_sync_t_array_muxed0 <= 1'd1;
        end
        4'd10: begin
            builder_sync_t_array_muxed0 <= 3'd5;
        end
        4'd11: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        4'd12: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        4'd13: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        4'd14: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
        default: begin
            builder_sync_t_array_muxed0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    builder_sync_t_array_muxed1 <= 3'd0;
    case (main_v7_1000basex_pcs_pcsrx_input_msb_first[3:0])
        1'd0: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        1'd1: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        2'd2: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        2'd3: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        3'd4: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        3'd5: begin
            builder_sync_t_array_muxed1 <= 3'd5;
        end
        3'd6: begin
            builder_sync_t_array_muxed1 <= 1'd1;
        end
        3'd7: begin
            builder_sync_t_array_muxed1 <= 3'd7;
        end
        4'd8: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        4'd9: begin
            builder_sync_t_array_muxed1 <= 3'd6;
        end
        4'd10: begin
            builder_sync_t_array_muxed1 <= 2'd2;
        end
        4'd11: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        4'd12: begin
            builder_sync_t_array_muxed1 <= 2'd3;
        end
        4'd13: begin
            builder_sync_t_array_muxed1 <= 3'd4;
        end
        4'd14: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
        default: begin
            builder_sync_t_array_muxed1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    builder_sync_f_array_muxed <= 3'd0;
    case (main_v7_1000basex_pcs_pcsrx_input_msb_first[3:0])
        1'd0: begin
            builder_sync_f_array_muxed <= 1'd0;
        end
        1'd1: begin
            builder_sync_f_array_muxed <= 3'd7;
        end
        2'd2: begin
            builder_sync_f_array_muxed <= 3'd4;
        end
        2'd3: begin
            builder_sync_f_array_muxed <= 2'd3;
        end
        3'd4: begin
            builder_sync_f_array_muxed <= 1'd0;
        end
        3'd5: begin
            builder_sync_f_array_muxed <= 2'd2;
        end
        3'd6: begin
            builder_sync_f_array_muxed <= 3'd6;
        end
        3'd7: begin
            builder_sync_f_array_muxed <= 3'd7;
        end
        4'd8: begin
            builder_sync_f_array_muxed <= 3'd7;
        end
        4'd9: begin
            builder_sync_f_array_muxed <= 1'd1;
        end
        4'd10: begin
            builder_sync_f_array_muxed <= 3'd5;
        end
        4'd11: begin
            builder_sync_f_array_muxed <= 1'd0;
        end
        4'd12: begin
            builder_sync_f_array_muxed <= 2'd3;
        end
        4'd13: begin
            builder_sync_f_array_muxed <= 3'd4;
        end
        4'd14: begin
            builder_sync_f_array_muxed <= 3'd7;
        end
        default: begin
            builder_sync_f_array_muxed <= 1'd0;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_array_muxed0 <= 6'd0;
    case (main_v7_1000basex_pcs_pcstx_d1[4:0])
        1'd0: begin
            builder_sync_rhs_array_muxed0 <= 5'd24;
        end
        1'd1: begin
            builder_sync_rhs_array_muxed0 <= 6'd34;
        end
        2'd2: begin
            builder_sync_rhs_array_muxed0 <= 5'd18;
        end
        2'd3: begin
            builder_sync_rhs_array_muxed0 <= 6'd49;
        end
        3'd4: begin
            builder_sync_rhs_array_muxed0 <= 4'd10;
        end
        3'd5: begin
            builder_sync_rhs_array_muxed0 <= 6'd41;
        end
        3'd6: begin
            builder_sync_rhs_array_muxed0 <= 5'd25;
        end
        3'd7: begin
            builder_sync_rhs_array_muxed0 <= 3'd7;
        end
        4'd8: begin
            builder_sync_rhs_array_muxed0 <= 3'd6;
        end
        4'd9: begin
            builder_sync_rhs_array_muxed0 <= 6'd37;
        end
        4'd10: begin
            builder_sync_rhs_array_muxed0 <= 5'd21;
        end
        4'd11: begin
            builder_sync_rhs_array_muxed0 <= 6'd52;
        end
        4'd12: begin
            builder_sync_rhs_array_muxed0 <= 4'd13;
        end
        4'd13: begin
            builder_sync_rhs_array_muxed0 <= 6'd44;
        end
        4'd14: begin
            builder_sync_rhs_array_muxed0 <= 5'd28;
        end
        4'd15: begin
            builder_sync_rhs_array_muxed0 <= 6'd40;
        end
        5'd16: begin
            builder_sync_rhs_array_muxed0 <= 6'd36;
        end
        5'd17: begin
            builder_sync_rhs_array_muxed0 <= 6'd35;
        end
        5'd18: begin
            builder_sync_rhs_array_muxed0 <= 5'd19;
        end
        5'd19: begin
            builder_sync_rhs_array_muxed0 <= 6'd50;
        end
        5'd20: begin
            builder_sync_rhs_array_muxed0 <= 4'd11;
        end
        5'd21: begin
            builder_sync_rhs_array_muxed0 <= 6'd42;
        end
        5'd22: begin
            builder_sync_rhs_array_muxed0 <= 5'd26;
        end
        5'd23: begin
            builder_sync_rhs_array_muxed0 <= 3'd5;
        end
        5'd24: begin
            builder_sync_rhs_array_muxed0 <= 4'd12;
        end
        5'd25: begin
            builder_sync_rhs_array_muxed0 <= 6'd38;
        end
        5'd26: begin
            builder_sync_rhs_array_muxed0 <= 5'd22;
        end
        5'd27: begin
            builder_sync_rhs_array_muxed0 <= 4'd9;
        end
        5'd28: begin
            builder_sync_rhs_array_muxed0 <= 4'd14;
        end
        5'd29: begin
            builder_sync_rhs_array_muxed0 <= 5'd17;
        end
        5'd30: begin
            builder_sync_rhs_array_muxed0 <= 6'd33;
        end
        default: begin
            builder_sync_rhs_array_muxed0 <= 5'd20;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_array_muxed1 <= 1'd0;
    case (main_v7_1000basex_pcs_pcstx_d1[4:0])
        1'd0: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        1'd1: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        2'd2: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        2'd3: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        3'd4: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        3'd5: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        3'd6: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        3'd7: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        4'd8: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        4'd9: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        4'd10: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        4'd11: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        4'd12: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        4'd13: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        4'd14: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        4'd15: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        5'd16: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        5'd17: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd18: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd19: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd20: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd21: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd22: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd23: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        5'd24: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        5'd25: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd26: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd27: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        5'd28: begin
            builder_sync_rhs_array_muxed1 <= 1'd0;
        end
        5'd29: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        5'd30: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
        default: begin
            builder_sync_rhs_array_muxed1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_array_muxed2 <= 1'd0;
    case (main_v7_1000basex_pcs_pcstx_d1[4:0])
        1'd0: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        1'd1: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        2'd2: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        2'd3: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        3'd4: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        3'd5: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        3'd6: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        3'd7: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        4'd8: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        4'd9: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        4'd10: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        4'd11: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        4'd12: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        4'd13: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        4'd14: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        4'd15: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        5'd16: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        5'd17: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd18: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd19: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd20: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd21: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd22: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd23: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        5'd24: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        5'd25: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd26: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd27: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        5'd28: begin
            builder_sync_rhs_array_muxed2 <= 1'd0;
        end
        5'd29: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        5'd30: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
        default: begin
            builder_sync_rhs_array_muxed2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_array_muxed3 <= 4'd0;
    case (main_v7_1000basex_pcs_pcstx_d1[7:5])
        1'd0: begin
            builder_sync_rhs_array_muxed3 <= 3'd4;
        end
        1'd1: begin
            builder_sync_rhs_array_muxed3 <= 4'd9;
        end
        2'd2: begin
            builder_sync_rhs_array_muxed3 <= 3'd5;
        end
        2'd3: begin
            builder_sync_rhs_array_muxed3 <= 2'd3;
        end
        3'd4: begin
            builder_sync_rhs_array_muxed3 <= 2'd2;
        end
        3'd5: begin
            builder_sync_rhs_array_muxed3 <= 4'd10;
        end
        3'd6: begin
            builder_sync_rhs_array_muxed3 <= 3'd6;
        end
        default: begin
            builder_sync_rhs_array_muxed3 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_array_muxed4 <= 1'd0;
    case (main_v7_1000basex_pcs_pcstx_d1[7:5])
        1'd0: begin
            builder_sync_rhs_array_muxed4 <= 1'd1;
        end
        1'd1: begin
            builder_sync_rhs_array_muxed4 <= 1'd0;
        end
        2'd2: begin
            builder_sync_rhs_array_muxed4 <= 1'd0;
        end
        2'd3: begin
            builder_sync_rhs_array_muxed4 <= 1'd0;
        end
        3'd4: begin
            builder_sync_rhs_array_muxed4 <= 1'd1;
        end
        3'd5: begin
            builder_sync_rhs_array_muxed4 <= 1'd0;
        end
        3'd6: begin
            builder_sync_rhs_array_muxed4 <= 1'd0;
        end
        default: begin
            builder_sync_rhs_array_muxed4 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_array_muxed5 <= 1'd0;
    case (main_v7_1000basex_pcs_pcstx_d1[7:5])
        1'd0: begin
            builder_sync_rhs_array_muxed5 <= 1'd1;
        end
        1'd1: begin
            builder_sync_rhs_array_muxed5 <= 1'd0;
        end
        2'd2: begin
            builder_sync_rhs_array_muxed5 <= 1'd0;
        end
        2'd3: begin
            builder_sync_rhs_array_muxed5 <= 1'd1;
        end
        3'd4: begin
            builder_sync_rhs_array_muxed5 <= 1'd1;
        end
        3'd5: begin
            builder_sync_rhs_array_muxed5 <= 1'd0;
        end
        3'd6: begin
            builder_sync_rhs_array_muxed5 <= 1'd0;
        end
        default: begin
            builder_sync_rhs_array_muxed5 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed0 <= 3'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_array_muxed0 <= main_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_sync_array_muxed0 <= main_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_sync_array_muxed0 <= main_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_sync_array_muxed0 <= main_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed1 <= 16'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_array_muxed1 <= main_sdram_nop_a;
        end
        1'd1: begin
            builder_sync_array_muxed1 <= main_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_sync_array_muxed1 <= main_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_sync_array_muxed1 <= main_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed2 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_array_muxed2 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed2 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_sync_array_muxed2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_sync_array_muxed2 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed3 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_array_muxed3 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed3 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_sync_array_muxed3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_sync_array_muxed3 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed4 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_array_muxed4 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed4 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_sync_array_muxed4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_sync_array_muxed4 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed5 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_array_muxed5 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed5 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_sync_array_muxed5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_sync_array_muxed5 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed6 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_array_muxed6 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed6 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_sync_array_muxed6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_sync_array_muxed6 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed7 <= 3'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_array_muxed7 <= main_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_sync_array_muxed7 <= main_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_sync_array_muxed7 <= main_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_sync_array_muxed7 <= main_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed8 <= 16'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_array_muxed8 <= main_sdram_nop_a;
        end
        1'd1: begin
            builder_sync_array_muxed8 <= main_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_sync_array_muxed8 <= main_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_sync_array_muxed8 <= main_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed9 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_array_muxed9 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed9 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_sync_array_muxed9 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_sync_array_muxed9 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed10 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_array_muxed10 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed10 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_sync_array_muxed10 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_sync_array_muxed10 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed11 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_array_muxed11 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed11 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_sync_array_muxed11 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_sync_array_muxed11 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed12 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_array_muxed12 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed12 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_sync_array_muxed12 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_sync_array_muxed12 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed13 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_array_muxed13 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed13 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_sync_array_muxed13 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_sync_array_muxed13 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed14 <= 3'd0;
    case (main_sdram_steerer_sel2)
        1'd0: begin
            builder_sync_array_muxed14 <= main_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_sync_array_muxed14 <= main_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_sync_array_muxed14 <= main_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_sync_array_muxed14 <= main_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed15 <= 16'd0;
    case (main_sdram_steerer_sel2)
        1'd0: begin
            builder_sync_array_muxed15 <= main_sdram_nop_a;
        end
        1'd1: begin
            builder_sync_array_muxed15 <= main_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_sync_array_muxed15 <= main_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_sync_array_muxed15 <= main_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed16 <= 1'd0;
    case (main_sdram_steerer_sel2)
        1'd0: begin
            builder_sync_array_muxed16 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed16 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_sync_array_muxed16 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_sync_array_muxed16 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed17 <= 1'd0;
    case (main_sdram_steerer_sel2)
        1'd0: begin
            builder_sync_array_muxed17 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed17 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_sync_array_muxed17 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_sync_array_muxed17 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed18 <= 1'd0;
    case (main_sdram_steerer_sel2)
        1'd0: begin
            builder_sync_array_muxed18 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed18 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_sync_array_muxed18 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_sync_array_muxed18 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed19 <= 1'd0;
    case (main_sdram_steerer_sel2)
        1'd0: begin
            builder_sync_array_muxed19 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed19 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_sync_array_muxed19 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_sync_array_muxed19 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed20 <= 1'd0;
    case (main_sdram_steerer_sel2)
        1'd0: begin
            builder_sync_array_muxed20 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed20 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_sync_array_muxed20 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_sync_array_muxed20 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed21 <= 3'd0;
    case (main_sdram_steerer_sel3)
        1'd0: begin
            builder_sync_array_muxed21 <= main_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_sync_array_muxed21 <= main_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_sync_array_muxed21 <= main_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_sync_array_muxed21 <= main_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed22 <= 16'd0;
    case (main_sdram_steerer_sel3)
        1'd0: begin
            builder_sync_array_muxed22 <= main_sdram_nop_a;
        end
        1'd1: begin
            builder_sync_array_muxed22 <= main_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_sync_array_muxed22 <= main_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_sync_array_muxed22 <= main_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed23 <= 1'd0;
    case (main_sdram_steerer_sel3)
        1'd0: begin
            builder_sync_array_muxed23 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed23 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_sync_array_muxed23 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_sync_array_muxed23 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed24 <= 1'd0;
    case (main_sdram_steerer_sel3)
        1'd0: begin
            builder_sync_array_muxed24 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed24 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_sync_array_muxed24 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_sync_array_muxed24 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed25 <= 1'd0;
    case (main_sdram_steerer_sel3)
        1'd0: begin
            builder_sync_array_muxed25 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed25 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_sync_array_muxed25 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_sync_array_muxed25 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed26 <= 1'd0;
    case (main_sdram_steerer_sel3)
        1'd0: begin
            builder_sync_array_muxed26 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed26 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_sync_array_muxed26 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_sync_array_muxed26 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_sync_array_muxed27 <= 1'd0;
    case (main_sdram_steerer_sel3)
        1'd0: begin
            builder_sync_array_muxed27 <= 1'd0;
        end
        1'd1: begin
            builder_sync_array_muxed27 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_sync_array_muxed27 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_sync_array_muxed27 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
        end
    endcase
end
assign builder_xilinxasyncresetsynchronizerimpl0 = (~main_crg_locked);
assign builder_xilinxasyncresetsynchronizerimpl1 = (~main_crg_locked);
assign builder_xilinxasyncresetsynchronizerimpl2 = (~main_crg_locked);
assign builder_xilinxasyncresetsynchronizerimpl3 = (~main_crg_locked);
assign main_rx_rx = builder_xilinxmultiregimpl0_regs1;
assign main_v7_1000basex_pcs_lp_abi_ping_toggle_o = builder_xilinxmultiregimpl1_regs1;
assign main_v7_1000basex_pcs_lp_abi_pong_toggle_o = builder_xilinxmultiregimpl2_regs1;
assign main_v7_1000basex_pcs_lp_abi_obuffer = builder_xilinxmultiregimpl3_regs1;
assign main_v7_1000basex_pcs_seen_valid_ci_toggle_o = builder_xilinxmultiregimpl4_regs1;
assign main_v7_1000basex_pcs_rx_config_reg_abi_toggle_o = builder_xilinxmultiregimpl5_regs1;
assign main_v7_1000basex_pcs_rx_config_reg_ack_toggle_o = builder_xilinxmultiregimpl6_regs1;
assign builder_xilinxasyncresetsynchronizerimpl4 = (~main_v7_1000basex_tx_mmcm_locked1);
assign builder_xilinxasyncresetsynchronizerimpl5 = (~main_v7_1000basex_rx_mmcm_locked1);
assign main_v7_1000basex_gthtxinit_plllock1 = builder_xilinxmultiregimpl7_regs1;
assign main_v7_1000basex_gthtxinit_Xxresetdone1 = builder_xilinxmultiregimpl8_regs1;
assign main_v7_1000basex_gthtxinit_Xxdlysresetdone1 = builder_xilinxmultiregimpl9_regs1;
assign main_v7_1000basex_gthtxinit_Xxphaligndone1 = builder_xilinxmultiregimpl10_regs1;
assign main_v7_1000basex_gthrxinit_plllock1 = builder_xilinxmultiregimpl11_regs1;
assign main_v7_1000basex_gthrxinit_Xxresetdone1 = builder_xilinxmultiregimpl12_regs1;
assign main_v7_1000basex_gthrxinit_Xxdlysresetdone1 = builder_xilinxmultiregimpl13_regs1;
assign main_v7_1000basex_gthrxinit_Xxphaligndone1 = builder_xilinxmultiregimpl14_regs1;
assign main_v7_1000basex_toggle_o = builder_xilinxmultiregimpl15_regs1;
assign main_ethmac_tx_cdc_cdc_produce_rdomain = builder_xilinxmultiregimpl16_regs1;
assign main_ethmac_tx_cdc_cdc_consume_wdomain = builder_xilinxmultiregimpl17_regs1;
assign main_ethmac_pulsesynchronizer0_toggle_o = builder_xilinxmultiregimpl18_regs1;
assign main_ethmac_pulsesynchronizer1_toggle_o = builder_xilinxmultiregimpl19_regs1;
assign main_ethmac_rx_cdc_cdc_produce_rdomain = builder_xilinxmultiregimpl20_regs1;
assign main_ethmac_rx_cdc_cdc_consume_wdomain = builder_xilinxmultiregimpl21_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge eth_rx_clk) begin
    main_v7_1000basex_pcs_rx_en_d <= main_v7_1000basex_pcs_pcsrx_rx_en;
    main_v7_1000basex_pcs_source_valid <= main_v7_1000basex_pcs_pcsrx_sample_en;
    main_v7_1000basex_pcs_source_payload_data <= main_v7_1000basex_pcs_pcsrx_rx_data;
    if (main_v7_1000basex_pcs_pcsrx_seen_config_reg) begin
        main_v7_1000basex_pcs_c_counter <= 3'd4;
    end else begin
        if ((main_v7_1000basex_pcs_c_counter != 1'd0)) begin
            main_v7_1000basex_pcs_c_counter <= (main_v7_1000basex_pcs_c_counter - 1'd1);
        end
    end
    main_v7_1000basex_pcs_rx_config_reg_abi_i <= 1'd0;
    main_v7_1000basex_pcs_rx_config_reg_ack_i <= 1'd0;
    if (main_v7_1000basex_pcs_pcsrx_seen_config_reg) begin
        main_v7_1000basex_pcs_prev_config_reg <= main_v7_1000basex_pcs_pcsrx_config_reg;
        if (((main_v7_1000basex_pcs_c_counter == 1'd1) & ((main_v7_1000basex_pcs_prev_config_reg & 16'd49151) == (main_v7_1000basex_pcs_pcsrx_config_reg & 16'd49151)))) begin
            if ((main_v7_1000basex_pcs_prev_config_reg[14] & main_v7_1000basex_pcs_pcsrx_config_reg[14])) begin
                main_v7_1000basex_pcs_rx_config_reg_ack_i <= 1'd1;
            end else begin
                main_v7_1000basex_pcs_rx_config_reg_abi_i <= 1'd1;
            end
        end
        main_v7_1000basex_pcs_lp_abi_i <= main_v7_1000basex_pcs_pcsrx_config_reg;
    end
    main_v7_1000basex_pcs_pcsrx_seen_config_reg <= 1'd0;
    if (main_v7_1000basex_pcs_pcsrx_load_config_reg_lsb) begin
        main_v7_1000basex_pcs_pcsrx_config_reg_lsb <= main_v7_1000basex_pcs_pcsrx_d;
    end
    if (main_v7_1000basex_pcs_pcsrx_load_config_reg_msb) begin
        main_v7_1000basex_pcs_pcsrx_config_reg <= {main_v7_1000basex_pcs_pcsrx_d, main_v7_1000basex_pcs_pcsrx_config_reg_lsb};
        main_v7_1000basex_pcs_pcsrx_seen_config_reg <= 1'd1;
    end
    if (((~main_v7_1000basex_pcs_pcsrx_timer_en) | (main_v7_1000basex_pcs_pcsrx_timer == 1'd0))) begin
        if ((main_v7_1000basex_pcs_pcsrx_sgmii_speed == 1'd0)) begin
            main_v7_1000basex_pcs_pcsrx_timer <= 7'd99;
        end else begin
            if ((main_v7_1000basex_pcs_pcsrx_sgmii_speed == 1'd1)) begin
                main_v7_1000basex_pcs_pcsrx_timer <= 4'd9;
            end else begin
                if ((main_v7_1000basex_pcs_pcsrx_sgmii_speed == 2'd2)) begin
                    main_v7_1000basex_pcs_pcsrx_timer <= 1'd0;
                end
            end
        end
    end else begin
        if (main_v7_1000basex_pcs_pcsrx_timer_en) begin
            main_v7_1000basex_pcs_pcsrx_timer <= (main_v7_1000basex_pcs_pcsrx_timer - 1'd1);
        end
    end
    if (main_v7_1000basex_pcs_pcsrx_ce) begin
        main_v7_1000basex_pcs_pcsrx_k <= 1'd0;
        if ((main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] == 4'd15)) begin
            main_v7_1000basex_pcs_pcsrx_k <= 1'd1;
            main_v7_1000basex_pcs_pcsrx_code3b <= builder_sync_t_array_muxed0;
        end else begin
            if ((main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] == 6'd48)) begin
                main_v7_1000basex_pcs_pcsrx_k <= 1'd1;
                main_v7_1000basex_pcs_pcsrx_code3b <= builder_sync_t_array_muxed1;
            end else begin
                if (((main_v7_1000basex_pcs_pcsrx_input_msb_first[3:0] == 3'd7) | (main_v7_1000basex_pcs_pcsrx_input_msb_first[3:0] == 4'd8))) begin
                    if (((((((main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] != 6'd35) & (main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] != 5'd19)) & (main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] != 4'd11)) & (main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] != 6'd52)) & (main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] != 6'd44)) & (main_v7_1000basex_pcs_pcsrx_input_msb_first[9:4] != 5'd28))) begin
                        main_v7_1000basex_pcs_pcsrx_k <= 1'd1;
                    end
                end
                main_v7_1000basex_pcs_pcsrx_code3b <= builder_sync_f_array_muxed;
            end
        end
    end
    if (main_v7_1000basex_pcs_pcsrx_ce) begin
        main_v7_1000basex_pcs_pcsrx_ones <= (((((((((main_v7_1000basex_pcs_pcsrx_input[0] + main_v7_1000basex_pcs_pcsrx_input[1]) + main_v7_1000basex_pcs_pcsrx_input[2]) + main_v7_1000basex_pcs_pcsrx_input[3]) + main_v7_1000basex_pcs_pcsrx_input[4]) + main_v7_1000basex_pcs_pcsrx_input[5]) + main_v7_1000basex_pcs_pcsrx_input[6]) + main_v7_1000basex_pcs_pcsrx_input[7]) + main_v7_1000basex_pcs_pcsrx_input[8]) + main_v7_1000basex_pcs_pcsrx_input[9]);
    end
    builder_basesoc_pcsrx_state <= builder_basesoc_pcsrx_next_state;
    main_v7_1000basex_pcs_lp_abi_starter <= 1'd0;
    if (main_v7_1000basex_pcs_lp_abi_pong_o) begin
        main_v7_1000basex_pcs_lp_abi_ibuffer <= main_v7_1000basex_pcs_lp_abi_i;
    end
    if (main_v7_1000basex_pcs_lp_abi_ping_i) begin
        main_v7_1000basex_pcs_lp_abi_ping_toggle_i <= (~main_v7_1000basex_pcs_lp_abi_ping_toggle_i);
    end
    main_v7_1000basex_pcs_lp_abi_pong_toggle_o_r <= main_v7_1000basex_pcs_lp_abi_pong_toggle_o;
    if (main_v7_1000basex_pcs_lp_abi_wait) begin
        if ((~main_v7_1000basex_pcs_lp_abi_done)) begin
            main_v7_1000basex_pcs_lp_abi_count <= (main_v7_1000basex_pcs_lp_abi_count - 1'd1);
        end
    end else begin
        main_v7_1000basex_pcs_lp_abi_count <= 8'd128;
    end
    if (main_v7_1000basex_pcs_seen_valid_ci_i) begin
        main_v7_1000basex_pcs_seen_valid_ci_toggle_i <= (~main_v7_1000basex_pcs_seen_valid_ci_toggle_i);
    end
    if (main_v7_1000basex_pcs_rx_config_reg_abi_i) begin
        main_v7_1000basex_pcs_rx_config_reg_abi_toggle_i <= (~main_v7_1000basex_pcs_rx_config_reg_abi_toggle_i);
    end
    if (main_v7_1000basex_pcs_rx_config_reg_ack_i) begin
        main_v7_1000basex_pcs_rx_config_reg_ack_toggle_i <= (~main_v7_1000basex_pcs_rx_config_reg_ack_toggle_i);
    end
    if ((main_v7_1000basex_phase_half == main_v7_1000basex_phase_half_rereg)) begin
        main_v7_1000basex_rx_data1 <= main_v7_1000basex_rx_data_half[19:10];
    end else begin
        main_v7_1000basex_rx_data1 <= main_v7_1000basex_rx_data_half[9:0];
    end
    main_v7_1000basex_phase_half <= (~main_v7_1000basex_phase_half);
    builder_basesoc_rxdatapath_liteethmacpreamblechecker_state <= builder_basesoc_rxdatapath_liteethmacpreamblechecker_next_state;
    if (main_ethmac_pulsesynchronizer0_i) begin
        main_ethmac_pulsesynchronizer0_toggle_i <= (~main_ethmac_pulsesynchronizer0_toggle_i);
    end
    if (main_ethmac_liteethmaccrc32checker_crc_ce) begin
        main_ethmac_liteethmaccrc32checker_crc_reg <= main_ethmac_liteethmaccrc32checker_crc_crc_next;
    end
    if (main_ethmac_liteethmaccrc32checker_crc_reset) begin
        main_ethmac_liteethmaccrc32checker_crc_reg <= 32'd4294967295;
    end
    if (((main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_we & main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_writable) & (~main_ethmac_liteethmaccrc32checker_syncfifo_replace))) begin
        if ((main_ethmac_liteethmaccrc32checker_syncfifo_produce == 3'd4)) begin
            main_ethmac_liteethmaccrc32checker_syncfifo_produce <= 1'd0;
        end else begin
            main_ethmac_liteethmaccrc32checker_syncfifo_produce <= (main_ethmac_liteethmaccrc32checker_syncfifo_produce + 1'd1);
        end
    end
    if (main_ethmac_liteethmaccrc32checker_syncfifo_do_read) begin
        if ((main_ethmac_liteethmaccrc32checker_syncfifo_consume == 3'd4)) begin
            main_ethmac_liteethmaccrc32checker_syncfifo_consume <= 1'd0;
        end else begin
            main_ethmac_liteethmaccrc32checker_syncfifo_consume <= (main_ethmac_liteethmaccrc32checker_syncfifo_consume + 1'd1);
        end
    end
    if (((main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_we & main_ethmac_liteethmaccrc32checker_syncfifo_syncfifo_writable) & (~main_ethmac_liteethmaccrc32checker_syncfifo_replace))) begin
        if ((~main_ethmac_liteethmaccrc32checker_syncfifo_do_read)) begin
            main_ethmac_liteethmaccrc32checker_syncfifo_level <= (main_ethmac_liteethmaccrc32checker_syncfifo_level + 1'd1);
        end
    end else begin
        if (main_ethmac_liteethmaccrc32checker_syncfifo_do_read) begin
            main_ethmac_liteethmaccrc32checker_syncfifo_level <= (main_ethmac_liteethmaccrc32checker_syncfifo_level - 1'd1);
        end
    end
    if (main_ethmac_liteethmaccrc32checker_fifo_reset) begin
        main_ethmac_liteethmaccrc32checker_syncfifo_level <= 3'd0;
        main_ethmac_liteethmaccrc32checker_syncfifo_produce <= 3'd0;
        main_ethmac_liteethmaccrc32checker_syncfifo_consume <= 3'd0;
    end
    builder_basesoc_rxdatapath_bufferizeendpoints_state <= builder_basesoc_rxdatapath_bufferizeendpoints_next_state;
    if (main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value_ce0) begin
        main_ethmac_liteethmaccrc32checker_last_be <= main_ethmac_liteethmaccrc32checker_last_be_clockdomainsrenamer_next_value0;
    end
    if (main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value_ce1) begin
        main_ethmac_liteethmaccrc32checker_crc_error1 <= main_ethmac_liteethmaccrc32checker_crc_error1_clockdomainsrenamer_next_value1;
    end
    if (((~main_ethmac_bufferizeendpoints_pipe_valid_source_valid) | main_ethmac_bufferizeendpoints_pipe_valid_source_ready)) begin
        main_ethmac_bufferizeendpoints_pipe_valid_source_valid <= main_ethmac_bufferizeendpoints_pipe_valid_sink_valid;
        main_ethmac_bufferizeendpoints_pipe_valid_source_first <= main_ethmac_bufferizeendpoints_pipe_valid_sink_first;
        main_ethmac_bufferizeendpoints_pipe_valid_source_last <= main_ethmac_bufferizeendpoints_pipe_valid_sink_last;
        main_ethmac_bufferizeendpoints_pipe_valid_source_payload_data <= main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_data;
        main_ethmac_bufferizeendpoints_pipe_valid_source_payload_last_be <= main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_last_be;
        main_ethmac_bufferizeendpoints_pipe_valid_source_payload_error <= main_ethmac_bufferizeendpoints_pipe_valid_sink_payload_error;
    end
    if (main_ethmac_pulsesynchronizer1_i) begin
        main_ethmac_pulsesynchronizer1_toggle_i <= (~main_ethmac_pulsesynchronizer1_toggle_i);
    end
    if (main_ethmac_rx_converter_converter_source_ready) begin
        main_ethmac_rx_converter_converter_strobe_all <= 1'd0;
    end
    if (main_ethmac_rx_converter_converter_load_part) begin
        if (((main_ethmac_rx_converter_converter_demux == 2'd3) | main_ethmac_rx_converter_converter_sink_last)) begin
            main_ethmac_rx_converter_converter_demux <= 1'd0;
            main_ethmac_rx_converter_converter_strobe_all <= 1'd1;
        end else begin
            main_ethmac_rx_converter_converter_demux <= (main_ethmac_rx_converter_converter_demux + 1'd1);
        end
    end
    if ((main_ethmac_rx_converter_converter_source_valid & main_ethmac_rx_converter_converter_source_ready)) begin
        if ((main_ethmac_rx_converter_converter_sink_valid & main_ethmac_rx_converter_converter_sink_ready)) begin
            main_ethmac_rx_converter_converter_source_first <= main_ethmac_rx_converter_converter_sink_first;
            main_ethmac_rx_converter_converter_source_last <= main_ethmac_rx_converter_converter_sink_last;
        end else begin
            main_ethmac_rx_converter_converter_source_first <= 1'd0;
            main_ethmac_rx_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_ethmac_rx_converter_converter_sink_valid & main_ethmac_rx_converter_converter_sink_ready)) begin
            main_ethmac_rx_converter_converter_source_first <= (main_ethmac_rx_converter_converter_sink_first | main_ethmac_rx_converter_converter_source_first);
            main_ethmac_rx_converter_converter_source_last <= (main_ethmac_rx_converter_converter_sink_last | main_ethmac_rx_converter_converter_source_last);
        end
    end
    if (main_ethmac_rx_converter_converter_load_part) begin
        case (main_ethmac_rx_converter_converter_demux)
            1'd0: begin
                main_ethmac_rx_converter_converter_source_payload_data[9:0] <= main_ethmac_rx_converter_converter_sink_payload_data;
            end
            1'd1: begin
                main_ethmac_rx_converter_converter_source_payload_data[19:10] <= main_ethmac_rx_converter_converter_sink_payload_data;
            end
            2'd2: begin
                main_ethmac_rx_converter_converter_source_payload_data[29:20] <= main_ethmac_rx_converter_converter_sink_payload_data;
            end
            2'd3: begin
                main_ethmac_rx_converter_converter_source_payload_data[39:30] <= main_ethmac_rx_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (main_ethmac_rx_converter_converter_load_part) begin
        main_ethmac_rx_converter_converter_source_payload_valid_token_count <= (main_ethmac_rx_converter_converter_demux + 1'd1);
    end
    main_ethmac_rx_cdc_cdc_graycounter0_q_binary <= main_ethmac_rx_cdc_cdc_graycounter0_q_next_binary;
    main_ethmac_rx_cdc_cdc_graycounter0_q <= main_ethmac_rx_cdc_cdc_graycounter0_q_next;
    if (eth_rx_rst) begin
        main_v7_1000basex_pcs_pcsrx_seen_config_reg <= 1'd0;
        main_v7_1000basex_pcs_pcsrx_config_reg <= 16'd0;
        main_v7_1000basex_pcs_pcsrx_k <= 1'd0;
        main_v7_1000basex_pcs_pcsrx_config_reg_lsb <= 8'd0;
        main_v7_1000basex_pcs_pcsrx_timer <= 10'd0;
        main_v7_1000basex_pcs_source_valid <= 1'd0;
        main_v7_1000basex_pcs_source_payload_data <= 8'd0;
        main_v7_1000basex_pcs_lp_abi_i <= 16'd0;
        main_v7_1000basex_pcs_lp_abi_starter <= 1'd1;
        main_v7_1000basex_pcs_lp_abi_count <= 8'd128;
        main_v7_1000basex_pcs_rx_en_d <= 1'd0;
        main_v7_1000basex_pcs_rx_config_reg_abi_i <= 1'd0;
        main_v7_1000basex_pcs_rx_config_reg_ack_i <= 1'd0;
        main_v7_1000basex_pcs_c_counter <= 3'd0;
        main_v7_1000basex_pcs_prev_config_reg <= 16'd0;
        main_v7_1000basex_rx_data1 <= 10'd0;
        main_v7_1000basex_phase_half <= 1'd0;
        main_ethmac_liteethmaccrc32checker_crc_reg <= 32'd4294967295;
        main_ethmac_liteethmaccrc32checker_syncfifo_level <= 3'd0;
        main_ethmac_liteethmaccrc32checker_syncfifo_produce <= 3'd0;
        main_ethmac_liteethmaccrc32checker_syncfifo_consume <= 3'd0;
        main_ethmac_liteethmaccrc32checker_last_be <= 1'd0;
        main_ethmac_liteethmaccrc32checker_crc_error1 <= 1'd0;
        main_ethmac_bufferizeendpoints_pipe_valid_source_valid <= 1'd0;
        main_ethmac_bufferizeendpoints_pipe_valid_source_payload_data <= 8'd0;
        main_ethmac_bufferizeendpoints_pipe_valid_source_payload_last_be <= 1'd0;
        main_ethmac_bufferizeendpoints_pipe_valid_source_payload_error <= 1'd0;
        main_ethmac_rx_converter_converter_source_payload_data <= 40'd0;
        main_ethmac_rx_converter_converter_source_payload_valid_token_count <= 3'd0;
        main_ethmac_rx_converter_converter_demux <= 2'd0;
        main_ethmac_rx_converter_converter_strobe_all <= 1'd0;
        main_ethmac_rx_cdc_cdc_graycounter0_q <= 6'd0;
        main_ethmac_rx_cdc_cdc_graycounter0_q_binary <= 6'd0;
        builder_basesoc_pcsrx_state <= 3'd0;
        builder_basesoc_rxdatapath_liteethmacpreamblechecker_state <= 1'd0;
        builder_basesoc_rxdatapath_bufferizeendpoints_state <= 2'd0;
    end
    builder_xilinxmultiregimpl2_regs0 <= main_v7_1000basex_pcs_lp_abi_pong_toggle_i;
    builder_xilinxmultiregimpl2_regs1 <= builder_xilinxmultiregimpl2_regs0;
    builder_xilinxmultiregimpl21_regs0 <= main_ethmac_rx_cdc_cdc_graycounter1_q;
    builder_xilinxmultiregimpl21_regs1 <= builder_xilinxmultiregimpl21_regs0;
end

always @(posedge eth_rx_half_clk) begin
    main_v7_1000basex_phase_half_rereg <= main_v7_1000basex_phase_half;
end

always @(posedge eth_tx_clk) begin
    main_v7_1000basex_pcs_checker_tick <= 1'd0;
    if ((main_v7_1000basex_pcs_checker_counter == 1'd0)) begin
        main_v7_1000basex_pcs_checker_tick <= 1'd1;
        main_v7_1000basex_pcs_checker_counter <= 20'd750000;
    end else begin
        main_v7_1000basex_pcs_checker_counter <= (main_v7_1000basex_pcs_checker_counter - 1'd1);
    end
    if (main_v7_1000basex_pcs_seen_valid_ci_o) begin
        main_v7_1000basex_pcs_checker_ok <= 1'd1;
    end
    if (main_v7_1000basex_pcs_checker_tick) begin
        main_v7_1000basex_pcs_checker_ok <= 1'd0;
    end
    main_v7_1000basex_pcs_pcstx_parity <= (~main_v7_1000basex_pcs_pcstx_parity);
    if (main_v7_1000basex_pcs_pcstx_load_config_reg_buffer) begin
        main_v7_1000basex_pcs_pcstx_config_reg_buffer <= main_v7_1000basex_pcs_pcstx_config_reg;
    end
    if (((~main_v7_1000basex_pcs_pcstx_timer_en) | (main_v7_1000basex_pcs_pcstx_timer == 1'd0))) begin
        if ((main_v7_1000basex_pcs_pcstx_sgmii_speed == 1'd0)) begin
            main_v7_1000basex_pcs_pcstx_timer <= 7'd99;
        end else begin
            if ((main_v7_1000basex_pcs_pcstx_sgmii_speed == 1'd1)) begin
                main_v7_1000basex_pcs_pcstx_timer <= 4'd9;
            end else begin
                if ((main_v7_1000basex_pcs_pcstx_sgmii_speed == 2'd2)) begin
                    main_v7_1000basex_pcs_pcstx_timer <= 1'd0;
                end
            end
        end
    end else begin
        if (main_v7_1000basex_pcs_pcstx_timer_en) begin
            main_v7_1000basex_pcs_pcstx_timer <= (main_v7_1000basex_pcs_pcstx_timer - 1'd1);
        end
    end
    if (main_v7_1000basex_pcs_pcstx_ce0) begin
        main_v7_1000basex_pcs_pcstx_disp_in <= main_v7_1000basex_pcs_pcstx_disp_out;
    end
    if (main_v7_1000basex_pcs_pcstx_ce0) begin
        main_v7_1000basex_pcs_pcstx_output0 <= main_v7_1000basex_pcs_pcstx_output1;
        main_v7_1000basex_pcs_pcstx_disparity <= main_v7_1000basex_pcs_pcstx_disp_out;
    end
    if (main_v7_1000basex_pcs_pcstx_ce1) begin
        if ((main_v7_1000basex_pcs_pcstx_k1 & (main_v7_1000basex_pcs_pcstx_d1[4:0] == 5'd28))) begin
            main_v7_1000basex_pcs_pcstx_code6b <= 6'd48;
            main_v7_1000basex_pcs_pcstx_code6b_unbalanced <= 1'd1;
            main_v7_1000basex_pcs_pcstx_code6b_flip <= 1'd1;
        end else begin
            main_v7_1000basex_pcs_pcstx_code6b <= builder_sync_rhs_array_muxed0;
            main_v7_1000basex_pcs_pcstx_code6b_unbalanced <= builder_sync_rhs_array_muxed1;
            main_v7_1000basex_pcs_pcstx_code6b_flip <= builder_sync_rhs_array_muxed2;
        end
        main_v7_1000basex_pcs_pcstx_code4b <= builder_sync_rhs_array_muxed3;
        main_v7_1000basex_pcs_pcstx_code4b_unbalanced <= builder_sync_rhs_array_muxed4;
        if (main_v7_1000basex_pcs_pcstx_k1) begin
            main_v7_1000basex_pcs_pcstx_code4b_flip <= 1'd1;
        end else begin
            main_v7_1000basex_pcs_pcstx_code4b_flip <= builder_sync_rhs_array_muxed5;
        end
        main_v7_1000basex_pcs_pcstx_alt7_rd0 <= 1'd0;
        main_v7_1000basex_pcs_pcstx_alt7_rd1 <= 1'd0;
        if ((main_v7_1000basex_pcs_pcstx_d1[7:5] == 3'd7)) begin
            if ((((main_v7_1000basex_pcs_pcstx_d1[4:0] == 5'd17) | (main_v7_1000basex_pcs_pcstx_d1[4:0] == 5'd18)) | (main_v7_1000basex_pcs_pcstx_d1[4:0] == 5'd20))) begin
                main_v7_1000basex_pcs_pcstx_alt7_rd0 <= 1'd1;
            end
            if ((((main_v7_1000basex_pcs_pcstx_d1[4:0] == 4'd11) | (main_v7_1000basex_pcs_pcstx_d1[4:0] == 4'd13)) | (main_v7_1000basex_pcs_pcstx_d1[4:0] == 4'd14))) begin
                main_v7_1000basex_pcs_pcstx_alt7_rd1 <= 1'd1;
            end
            if (main_v7_1000basex_pcs_pcstx_k1) begin
                main_v7_1000basex_pcs_pcstx_alt7_rd0 <= 1'd1;
                main_v7_1000basex_pcs_pcstx_alt7_rd1 <= 1'd1;
            end
        end
    end
    builder_basesoc_pcstx_state <= builder_basesoc_pcstx_next_state;
    if (main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value_ce) begin
        main_v7_1000basex_pcs_pcstx_c_type <= main_v7_1000basex_pcs_pcstx_c_type_v7_1000basex_next_value;
    end
    main_v7_1000basex_pcs_lp_abi_ping_o1 <= main_v7_1000basex_pcs_lp_abi_ping_o0;
    if (main_v7_1000basex_pcs_lp_abi_ping_o1) begin
        main_v7_1000basex_pcs_lp_abi_o <= main_v7_1000basex_pcs_lp_abi_obuffer;
    end
    main_v7_1000basex_pcs_lp_abi_ping_toggle_o_r <= main_v7_1000basex_pcs_lp_abi_ping_toggle_o;
    if (main_v7_1000basex_pcs_lp_abi_pong_i) begin
        main_v7_1000basex_pcs_lp_abi_pong_toggle_i <= (~main_v7_1000basex_pcs_lp_abi_pong_toggle_i);
    end
    main_v7_1000basex_pcs_seen_valid_ci_toggle_o_r <= main_v7_1000basex_pcs_seen_valid_ci_toggle_o;
    main_v7_1000basex_pcs_rx_config_reg_abi_toggle_o_r <= main_v7_1000basex_pcs_rx_config_reg_abi_toggle_o;
    main_v7_1000basex_pcs_rx_config_reg_ack_toggle_o_r <= main_v7_1000basex_pcs_rx_config_reg_ack_toggle_o;
    if (main_v7_1000basex_pcs_waittimer0_wait) begin
        if ((~main_v7_1000basex_pcs_waittimer0_done)) begin
            main_v7_1000basex_pcs_waittimer0_count <= (main_v7_1000basex_pcs_waittimer0_count - 1'd1);
        end
    end else begin
        main_v7_1000basex_pcs_waittimer0_count <= 21'd1250000;
    end
    if (main_v7_1000basex_pcs_waittimer1_wait) begin
        if ((~main_v7_1000basex_pcs_waittimer1_done)) begin
            main_v7_1000basex_pcs_waittimer1_count <= (main_v7_1000basex_pcs_waittimer1_count - 1'd1);
        end
    end else begin
        main_v7_1000basex_pcs_waittimer1_count <= 18'd200000;
    end
    builder_basesoc_fsm_state <= builder_basesoc_fsm_next_state;
    if (main_v7_1000basex_i) begin
        main_v7_1000basex_toggle_i <= (~main_v7_1000basex_toggle_i);
    end
    main_v7_1000basex_buf <= {main_v7_1000basex_tx_data1, main_v7_1000basex_buf[19:10]};
    main_ethmac_tx_cdc_cdc_graycounter1_q_binary <= main_ethmac_tx_cdc_cdc_graycounter1_q_next_binary;
    main_ethmac_tx_cdc_cdc_graycounter1_q <= main_ethmac_tx_cdc_cdc_graycounter1_q_next;
    if ((main_ethmac_tx_converter_converter_source_valid & main_ethmac_tx_converter_converter_source_ready)) begin
        if (main_ethmac_tx_converter_converter_last) begin
            main_ethmac_tx_converter_converter_mux <= 1'd0;
        end else begin
            main_ethmac_tx_converter_converter_mux <= (main_ethmac_tx_converter_converter_mux + 1'd1);
        end
    end
    builder_basesoc_txdatapath_liteethmactxlastbe_state <= builder_basesoc_txdatapath_liteethmactxlastbe_next_state;
    builder_basesoc_txdatapath_liteethmacpaddinginserter_state <= builder_basesoc_txdatapath_liteethmacpaddinginserter_next_state;
    if (main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value_ce) begin
        main_ethmac_tx_padding_counter <= main_ethmac_tx_padding_counter_clockdomainsrenamer_clockdomainsrenamer0_next_value;
    end
    if (main_ethmac_tx_crc_is_ongoing0) begin
        main_ethmac_tx_crc_cnt <= 2'd3;
    end else begin
        if ((main_ethmac_tx_crc_is_ongoing1 & (~main_ethmac_tx_crc_cnt_done))) begin
            main_ethmac_tx_crc_cnt <= (main_ethmac_tx_crc_cnt - main_ethmac_tx_crc_source_ready);
        end
    end
    if (main_ethmac_tx_crc_ce) begin
        main_ethmac_tx_crc_reg <= main_ethmac_tx_crc_crc_next;
    end
    if (main_ethmac_tx_crc_reset) begin
        main_ethmac_tx_crc_reg <= 32'd4294967295;
    end
    builder_basesoc_txdatapath_bufferizeendpoints_state <= builder_basesoc_txdatapath_bufferizeendpoints_next_state;
    if (main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce0) begin
        main_ethmac_tx_crc_crc_packet <= main_ethmac_tx_crc_crc_packet_clockdomainsrenamer_clockdomainsrenamer1_next_value0;
    end
    if (main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value_ce1) begin
        main_ethmac_tx_crc_last_be <= main_ethmac_tx_crc_last_be_clockdomainsrenamer_clockdomainsrenamer1_next_value1;
    end
    if (((~main_ethmac_tx_crc_pipe_valid_source_valid) | main_ethmac_tx_crc_pipe_valid_source_ready)) begin
        main_ethmac_tx_crc_pipe_valid_source_valid <= main_ethmac_tx_crc_pipe_valid_sink_valid;
        main_ethmac_tx_crc_pipe_valid_source_first <= main_ethmac_tx_crc_pipe_valid_sink_first;
        main_ethmac_tx_crc_pipe_valid_source_last <= main_ethmac_tx_crc_pipe_valid_sink_last;
        main_ethmac_tx_crc_pipe_valid_source_payload_data <= main_ethmac_tx_crc_pipe_valid_sink_payload_data;
        main_ethmac_tx_crc_pipe_valid_source_payload_last_be <= main_ethmac_tx_crc_pipe_valid_sink_payload_last_be;
        main_ethmac_tx_crc_pipe_valid_source_payload_error <= main_ethmac_tx_crc_pipe_valid_sink_payload_error;
    end
    builder_basesoc_txdatapath_liteethmacpreambleinserter_state <= builder_basesoc_txdatapath_liteethmacpreambleinserter_next_state;
    if (main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value_ce) begin
        main_ethmac_tx_preamble_count <= main_ethmac_tx_preamble_count_clockdomainsrenamer_clockdomainsrenamer2_next_value;
    end
    builder_basesoc_txdatapath_liteethmacgap_state <= builder_basesoc_txdatapath_liteethmacgap_next_state;
    if (main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value_ce) begin
        main_ethmac_tx_gap_counter <= main_ethmac_tx_gap_counter_clockdomainsrenamer_clockdomainsrenamer3_next_value;
    end
    if (eth_tx_rst) begin
        main_v7_1000basex_pcs_pcstx_disparity <= 1'd0;
        main_v7_1000basex_pcs_pcstx_disp_in <= 1'd0;
        main_v7_1000basex_pcs_pcstx_code6b_flip <= 1'd0;
        main_v7_1000basex_pcs_pcstx_code4b_flip <= 1'd0;
        main_v7_1000basex_pcs_pcstx_parity <= 1'd0;
        main_v7_1000basex_pcs_pcstx_c_type <= 1'd0;
        main_v7_1000basex_pcs_pcstx_config_reg_buffer <= 16'd0;
        main_v7_1000basex_pcs_pcstx_timer <= 10'd0;
        main_v7_1000basex_pcs_lp_abi_ping_o1 <= 1'd0;
        main_v7_1000basex_pcs_checker_counter <= 20'd0;
        main_v7_1000basex_pcs_checker_tick <= 1'd0;
        main_v7_1000basex_pcs_checker_ok <= 1'd0;
        main_v7_1000basex_pcs_waittimer0_count <= 21'd1250000;
        main_v7_1000basex_pcs_waittimer1_count <= 18'd200000;
        main_v7_1000basex_buf <= 20'd0;
        main_ethmac_tx_cdc_cdc_graycounter1_q <= 6'd0;
        main_ethmac_tx_cdc_cdc_graycounter1_q_binary <= 6'd0;
        main_ethmac_tx_converter_converter_mux <= 2'd0;
        main_ethmac_tx_padding_counter <= 16'd0;
        main_ethmac_tx_crc_reg <= 32'd4294967295;
        main_ethmac_tx_crc_cnt <= 2'd3;
        main_ethmac_tx_crc_pipe_valid_source_valid <= 1'd0;
        main_ethmac_tx_crc_pipe_valid_source_payload_data <= 8'd0;
        main_ethmac_tx_crc_pipe_valid_source_payload_last_be <= 1'd0;
        main_ethmac_tx_crc_pipe_valid_source_payload_error <= 1'd0;
        builder_basesoc_pcstx_state <= 3'd0;
        builder_basesoc_fsm_state <= 3'd0;
        builder_basesoc_txdatapath_liteethmactxlastbe_state <= 1'd0;
        builder_basesoc_txdatapath_liteethmacpaddinginserter_state <= 1'd0;
        builder_basesoc_txdatapath_bufferizeendpoints_state <= 2'd0;
        builder_basesoc_txdatapath_liteethmacpreambleinserter_state <= 2'd0;
        builder_basesoc_txdatapath_liteethmacgap_state <= 1'd0;
    end
    builder_xilinxmultiregimpl1_regs0 <= main_v7_1000basex_pcs_lp_abi_ping_toggle_i;
    builder_xilinxmultiregimpl1_regs1 <= builder_xilinxmultiregimpl1_regs0;
    builder_xilinxmultiregimpl3_regs0 <= main_v7_1000basex_pcs_lp_abi_ibuffer;
    builder_xilinxmultiregimpl3_regs1 <= builder_xilinxmultiregimpl3_regs0;
    builder_xilinxmultiregimpl4_regs0 <= main_v7_1000basex_pcs_seen_valid_ci_toggle_i;
    builder_xilinxmultiregimpl4_regs1 <= builder_xilinxmultiregimpl4_regs0;
    builder_xilinxmultiregimpl5_regs0 <= main_v7_1000basex_pcs_rx_config_reg_abi_toggle_i;
    builder_xilinxmultiregimpl5_regs1 <= builder_xilinxmultiregimpl5_regs0;
    builder_xilinxmultiregimpl6_regs0 <= main_v7_1000basex_pcs_rx_config_reg_ack_toggle_i;
    builder_xilinxmultiregimpl6_regs1 <= builder_xilinxmultiregimpl6_regs0;
    builder_xilinxmultiregimpl16_regs0 <= main_ethmac_tx_cdc_cdc_graycounter0_q;
    builder_xilinxmultiregimpl16_regs1 <= builder_xilinxmultiregimpl16_regs0;
end

always @(posedge eth_tx_half_clk) begin
    main_v7_1000basex_tx_data_half <= main_v7_1000basex_buf;
end

always @(posedge idelay_clk) begin
    if ((main_crg_reset_counter != 1'd0)) begin
        main_crg_reset_counter <= (main_crg_reset_counter - 1'd1);
    end else begin
        main_crg_ic_reset <= 1'd0;
    end
    if (idelay_rst) begin
        main_crg_reset_counter <= 4'd15;
        main_crg_ic_reset <= 1'd1;
    end
end

always @(posedge sys_clk) begin
    if ((((main_socbushandler_adapted_interface_interface0_adapted_interface_stb & main_socbushandler_adapted_interface_interface0_adapted_interface_cyc) & main_socbushandler_adapted_interface_interface0_adapted_interface_ack) | main_socbushandler_skip)) begin
        main_socbushandler_count <= (main_socbushandler_count + 1'd1);
    end
    if ((main_rocket_mmio_wb_ack | (~main_rocket_mmio_wb_cyc))) begin
        main_socbushandler_count <= 1'd0;
    end
    if ((main_socbushandler_adapted_interface_interface0_adapted_interface_ack | main_socbushandler_skip)) begin
        main_socbushandler_dat_r <= main_rocket_mmio_wb_dat_r;
    end
    builder_wishbone2axi_state <= builder_wishbone2axi_next_state;
    if (main_socbushandler_bridge_cmd_done_wishbone2axi_next_value_ce0) begin
        main_socbushandler_bridge_cmd_done <= main_socbushandler_bridge_cmd_done_wishbone2axi_next_value0;
    end
    if (main_socbushandler_bridge_data_done_wishbone2axi_next_value_ce1) begin
        main_socbushandler_bridge_data_done <= main_socbushandler_bridge_data_done_wishbone2axi_next_value1;
    end
    if (((~main_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_socbushandler_pipe_valid_source_ready)) begin
        main_basesoc_socbushandler_pipe_valid_source_valid <= main_basesoc_socbushandler_pipe_valid_sink_valid;
        main_basesoc_socbushandler_pipe_valid_source_first <= main_basesoc_socbushandler_pipe_valid_sink_first;
        main_basesoc_socbushandler_pipe_valid_source_last <= main_basesoc_socbushandler_pipe_valid_sink_last;
        main_basesoc_socbushandler_pipe_valid_source_payload_addr <= main_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        main_basesoc_socbushandler_pipe_valid_source_payload_burst <= main_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        main_basesoc_socbushandler_pipe_valid_source_payload_len <= main_basesoc_socbushandler_pipe_valid_sink_payload_len;
        main_basesoc_socbushandler_pipe_valid_source_payload_size <= main_basesoc_socbushandler_pipe_valid_sink_payload_size;
        main_basesoc_socbushandler_pipe_valid_source_payload_lock <= main_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        main_basesoc_socbushandler_pipe_valid_source_payload_prot <= main_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        main_basesoc_socbushandler_pipe_valid_source_payload_cache <= main_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        main_basesoc_socbushandler_pipe_valid_source_payload_qos <= main_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        main_basesoc_socbushandler_pipe_valid_source_payload_region <= main_basesoc_socbushandler_pipe_valid_sink_payload_region;
        main_basesoc_socbushandler_pipe_valid_source_param_id <= main_basesoc_socbushandler_pipe_valid_sink_param_id;
        main_basesoc_socbushandler_pipe_valid_source_param_dest <= main_basesoc_socbushandler_pipe_valid_sink_param_dest;
        main_basesoc_socbushandler_pipe_valid_source_param_user <= main_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_ready)) begin
        if (main_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_socbushandler_beat_count <= 1'd0;
            main_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            main_basesoc_socbushandler_beat_count <= (main_basesoc_socbushandler_beat_count + 1'd1);
            if ((((main_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((main_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_basesoc_socbushandler_beat_offset <= (main_basesoc_socbushandler_beat_offset + $signed({1'd0, main_basesoc_socbushandler_beat_size}));
            end
        end
        if (((main_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_basesoc_socbushandler_ax_beat_payload_addr & main_basesoc_socbushandler_beat_wrap) == main_basesoc_socbushandler_beat_wrap)) begin
                main_basesoc_socbushandler_beat_offset <= (main_basesoc_socbushandler_beat_offset - $signed({1'd0, main_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite0_state <= builder_axi2axilite0_next_state;
    if (main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0) begin
        main_basesoc_socbushandler_cmd_done <= main_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0;
    end
    if (main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1) begin
        main_basesoc_socbushandler_last_ar_aw_n <= main_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1;
    end
    if (((~main_socbushandler_pipe_valid_source_valid) | main_socbushandler_pipe_valid_source_ready)) begin
        main_socbushandler_pipe_valid_source_valid <= main_socbushandler_pipe_valid_sink_valid;
        main_socbushandler_pipe_valid_source_first <= main_socbushandler_pipe_valid_sink_first;
        main_socbushandler_pipe_valid_source_last <= main_socbushandler_pipe_valid_sink_last;
        main_socbushandler_pipe_valid_source_payload_addr <= main_socbushandler_pipe_valid_sink_payload_addr;
        main_socbushandler_pipe_valid_source_payload_burst <= main_socbushandler_pipe_valid_sink_payload_burst;
        main_socbushandler_pipe_valid_source_payload_len <= main_socbushandler_pipe_valid_sink_payload_len;
        main_socbushandler_pipe_valid_source_payload_size <= main_socbushandler_pipe_valid_sink_payload_size;
        main_socbushandler_pipe_valid_source_payload_lock <= main_socbushandler_pipe_valid_sink_payload_lock;
        main_socbushandler_pipe_valid_source_payload_prot <= main_socbushandler_pipe_valid_sink_payload_prot;
        main_socbushandler_pipe_valid_source_payload_cache <= main_socbushandler_pipe_valid_sink_payload_cache;
        main_socbushandler_pipe_valid_source_payload_qos <= main_socbushandler_pipe_valid_sink_payload_qos;
        main_socbushandler_pipe_valid_source_payload_region <= main_socbushandler_pipe_valid_sink_payload_region;
        main_socbushandler_pipe_valid_source_param_id <= main_socbushandler_pipe_valid_sink_param_id;
        main_socbushandler_pipe_valid_source_param_dest <= main_socbushandler_pipe_valid_sink_param_dest;
        main_socbushandler_pipe_valid_source_param_user <= main_socbushandler_pipe_valid_sink_param_user;
    end
    if ((main_socbushandler_ax_beat_valid & main_socbushandler_ax_beat_ready)) begin
        if (main_socbushandler_ax_beat_last) begin
            main_socbushandler_beat_count <= 1'd0;
            main_socbushandler_beat_offset <= 1'd0;
        end else begin
            main_socbushandler_beat_count <= (main_socbushandler_beat_count + 1'd1);
            if ((((main_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((main_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_socbushandler_beat_offset <= (main_socbushandler_beat_offset + $signed({1'd0, main_socbushandler_beat_size}));
            end
        end
        if (((main_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_socbushandler_ax_beat_payload_addr & main_socbushandler_beat_wrap) == main_socbushandler_beat_wrap)) begin
                main_socbushandler_beat_offset <= (main_socbushandler_beat_offset - $signed({1'd0, main_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite1_state <= builder_axi2axilite1_next_state;
    if (main_socbushandler_cmd_done_axi2axilite1_next_value_ce0) begin
        main_socbushandler_cmd_done <= main_socbushandler_cmd_done_axi2axilite1_next_value0;
    end
    if (main_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1) begin
        main_socbushandler_last_ar_aw_n <= main_socbushandler_last_ar_aw_n_axi2axilite1_next_value1;
    end
    if (((~main_bridge_axi2axi_lite_pipe_valid_source_valid) | main_bridge_axi2axi_lite_pipe_valid_source_ready)) begin
        main_bridge_axi2axi_lite_pipe_valid_source_valid <= main_bridge_axi2axi_lite_pipe_valid_sink_valid;
        main_bridge_axi2axi_lite_pipe_valid_source_first <= main_bridge_axi2axi_lite_pipe_valid_sink_first;
        main_bridge_axi2axi_lite_pipe_valid_source_last <= main_bridge_axi2axi_lite_pipe_valid_sink_last;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_addr <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_addr;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_burst <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_burst;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_len <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_len;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_size <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_size;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_lock <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_lock;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_prot <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_prot;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_cache <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_cache;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_qos <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_qos;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_region <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_region;
        main_bridge_axi2axi_lite_pipe_valid_source_param_id <= main_bridge_axi2axi_lite_pipe_valid_sink_param_id;
        main_bridge_axi2axi_lite_pipe_valid_source_param_dest <= main_bridge_axi2axi_lite_pipe_valid_sink_param_dest;
        main_bridge_axi2axi_lite_pipe_valid_source_param_user <= main_bridge_axi2axi_lite_pipe_valid_sink_param_user;
    end
    if ((main_bridge_axi2axi_lite_ax_beat_valid & main_bridge_axi2axi_lite_ax_beat_ready)) begin
        if (main_bridge_axi2axi_lite_ax_beat_last) begin
            main_bridge_axi2axi_lite_beat_count <= 1'd0;
            main_bridge_axi2axi_lite_beat_offset <= 1'd0;
        end else begin
            main_bridge_axi2axi_lite_beat_count <= (main_bridge_axi2axi_lite_beat_count + 1'd1);
            if ((((main_bridge_axi2axi_lite_source_source_payload_burst == 1'd1) & 1'd1) | ((main_bridge_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_bridge_axi2axi_lite_beat_offset <= (main_bridge_axi2axi_lite_beat_offset + $signed({1'd0, main_bridge_axi2axi_lite_beat_size}));
            end
        end
        if (((main_bridge_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_bridge_axi2axi_lite_ax_beat_payload_addr & main_bridge_axi2axi_lite_beat_wrap) == main_bridge_axi2axi_lite_beat_wrap)) begin
                main_bridge_axi2axi_lite_beat_offset <= (main_bridge_axi2axi_lite_beat_offset - $signed({1'd0, main_bridge_axi2axi_lite_beat_wrap}));
            end
        end
    end
    builder_axi2axilite_state <= builder_axi2axilite_next_state;
    if (main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0) begin
        main_bridge_axi2axi_lite_cmd_done <= main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0;
    end
    if (main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1) begin
        main_bridge_axi2axi_lite_last_ar_aw_n <= main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1;
    end
    builder_axilite2wishbone_state <= builder_axilite2wishbone_next_state;
    if (main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0) begin
        main_bridge_axi_lite2wishbone_last_ar_aw_n <= main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0;
    end
    if (main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1) begin
        main_bridge_axi_lite2wishbone_data <= main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1;
    end
    if (((~builder_basesoc_socbushandler_pipe_valid_source_valid) | builder_basesoc_socbushandler_pipe_valid_source_ready)) begin
        builder_basesoc_socbushandler_pipe_valid_source_valid <= builder_basesoc_socbushandler_pipe_valid_sink_valid;
        builder_basesoc_socbushandler_pipe_valid_source_first <= builder_basesoc_socbushandler_pipe_valid_sink_first;
        builder_basesoc_socbushandler_pipe_valid_source_last <= builder_basesoc_socbushandler_pipe_valid_sink_last;
        builder_basesoc_socbushandler_pipe_valid_source_payload_addr <= builder_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        builder_basesoc_socbushandler_pipe_valid_source_payload_burst <= builder_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        builder_basesoc_socbushandler_pipe_valid_source_payload_len <= builder_basesoc_socbushandler_pipe_valid_sink_payload_len;
        builder_basesoc_socbushandler_pipe_valid_source_payload_size <= builder_basesoc_socbushandler_pipe_valid_sink_payload_size;
        builder_basesoc_socbushandler_pipe_valid_source_payload_lock <= builder_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        builder_basesoc_socbushandler_pipe_valid_source_payload_prot <= builder_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        builder_basesoc_socbushandler_pipe_valid_source_payload_cache <= builder_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        builder_basesoc_socbushandler_pipe_valid_source_payload_qos <= builder_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        builder_basesoc_socbushandler_pipe_valid_source_payload_region <= builder_basesoc_socbushandler_pipe_valid_sink_payload_region;
        builder_basesoc_socbushandler_pipe_valid_source_param_id <= builder_basesoc_socbushandler_pipe_valid_sink_param_id;
        builder_basesoc_socbushandler_pipe_valid_source_param_dest <= builder_basesoc_socbushandler_pipe_valid_sink_param_dest;
        builder_basesoc_socbushandler_pipe_valid_source_param_user <= builder_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_ready)) begin
        if (builder_basesoc_socbushandler_ax_beat_last) begin
            builder_basesoc_socbushandler_beat_count <= 1'd0;
            builder_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            builder_basesoc_socbushandler_beat_count <= (builder_basesoc_socbushandler_beat_count + 1'd1);
            if ((((builder_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((builder_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                builder_basesoc_socbushandler_beat_offset <= (builder_basesoc_socbushandler_beat_offset + $signed({1'd0, builder_basesoc_socbushandler_beat_size}));
            end
        end
        if (((builder_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((builder_basesoc_socbushandler_ax_beat_payload_addr & builder_basesoc_socbushandler_beat_wrap) == builder_basesoc_socbushandler_beat_wrap)) begin
                builder_basesoc_socbushandler_beat_offset <= (builder_basesoc_socbushandler_beat_offset - $signed({1'd0, builder_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite2_state <= builder_axi2axilite2_next_state;
    if (builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0) begin
        builder_basesoc_socbushandler_cmd_done <= builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0;
    end
    if (builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1) begin
        builder_basesoc_socbushandler_last_ar_aw_n <= builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1;
    end
    if (((builder_aw_valid & builder_aw_ready) & (builder_b_valid & builder_b_ready))) begin
        builder_wr_lock_counter <= builder_wr_lock_counter;
    end else begin
        if (((builder_aw_valid & builder_aw_ready) & (~builder_wr_lock_full))) begin
            builder_wr_lock_counter <= (builder_wr_lock_counter + 1'd1);
        end else begin
            if (((builder_b_valid & builder_b_ready) & (~builder_wr_lock_empty))) begin
                builder_wr_lock_counter <= (builder_wr_lock_counter - 1'd1);
            end
        end
    end
    if (((builder_ar_valid & builder_ar_ready) & ((builder_r_valid & builder_r_ready) & builder_r_last))) begin
        builder_rd_lock_counter <= builder_rd_lock_counter;
    end else begin
        if (((builder_ar_valid & builder_ar_ready) & (~builder_rd_lock_full))) begin
            builder_rd_lock_counter <= (builder_rd_lock_counter + 1'd1);
        end else begin
            if ((((builder_r_valid & builder_r_ready) & builder_r_last) & (~builder_rd_lock_empty))) begin
                builder_rd_lock_counter <= (builder_rd_lock_counter - 1'd1);
            end
        end
    end
    if (builder_axirequestcounter0_empty) begin
        builder_slave_sel_reg0 <= builder_slave_sel_dec0;
    end
    if (builder_axirequestcounter1_empty) begin
        builder_slave_sel_reg1 <= builder_slave_sel_dec1;
    end
    if (((builder_aw_valid & builder_aw_ready) & (builder_b_valid & builder_b_ready))) begin
        builder_axirequestcounter0_counter <= builder_axirequestcounter0_counter;
    end else begin
        if (((builder_aw_valid & builder_aw_ready) & (~builder_axirequestcounter0_full))) begin
            builder_axirequestcounter0_counter <= (builder_axirequestcounter0_counter + 1'd1);
        end else begin
            if (((builder_b_valid & builder_b_ready) & (~builder_axirequestcounter0_empty))) begin
                builder_axirequestcounter0_counter <= (builder_axirequestcounter0_counter - 1'd1);
            end
        end
    end
    if (((builder_ar_valid & builder_ar_ready) & ((builder_r_valid & builder_r_ready) & builder_r_last))) begin
        builder_axirequestcounter1_counter <= builder_axirequestcounter1_counter;
    end else begin
        if (((builder_ar_valid & builder_ar_ready) & (~builder_axirequestcounter1_full))) begin
            builder_axirequestcounter1_counter <= (builder_axirequestcounter1_counter + 1'd1);
        end else begin
            if ((((builder_r_valid & builder_r_ready) & builder_r_last) & (~builder_axirequestcounter1_empty))) begin
                builder_axirequestcounter1_counter <= (builder_axirequestcounter1_counter - 1'd1);
            end
        end
    end
    if (builder_wr_timer_wait) begin
        if ((~builder_wr_timer_done)) begin
            builder_wr_timer_count <= (builder_wr_timer_count - 1'd1);
        end
    end else begin
        builder_wr_timer_count <= 20'd1000000;
    end
    if (builder_rd_timer_wait) begin
        if ((~builder_rd_timer_done)) begin
            builder_rd_timer_count <= (builder_rd_timer_count - 1'd1);
        end
    end else begin
        builder_rd_timer_count <= 20'd1000000;
    end
    builder_fsm0_state <= builder_fsm0_next_state;
    builder_fsm1_state <= builder_fsm1_next_state;
    if ((main_bus_errors != 32'd4294967295)) begin
        if (main_bus_error) begin
            main_bus_errors <= (main_bus_errors + 1'd1);
        end
    end
    if (((~main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_valid) | main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_ready)) begin
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_valid <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_valid;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_first <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_first;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_last <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_last;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_addr <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_addr;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_burst <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_burst;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_len <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_len;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_size <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_size;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_lock <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_lock;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_prot <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_prot;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_cache <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_cache;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_qos <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_qos;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_region <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_payload_region;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_id <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_id;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_dest <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_dest;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_param_user <= main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_sink_param_user;
    end
    if ((main_rocket_mmio_a2w_axi2axi_lite_ax_beat_valid & main_rocket_mmio_a2w_axi2axi_lite_ax_beat_ready)) begin
        if (main_rocket_mmio_a2w_axi2axi_lite_ax_beat_last) begin
            main_rocket_mmio_a2w_axi2axi_lite_beat_count <= 1'd0;
            main_rocket_mmio_a2w_axi2axi_lite_beat_offset <= 1'd0;
        end else begin
            main_rocket_mmio_a2w_axi2axi_lite_beat_count <= (main_rocket_mmio_a2w_axi2axi_lite_beat_count + 1'd1);
            if ((((main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_burst == 1'd1) & 1'd1) | ((main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_rocket_mmio_a2w_axi2axi_lite_beat_offset <= (main_rocket_mmio_a2w_axi2axi_lite_beat_offset + $signed({1'd0, main_rocket_mmio_a2w_axi2axi_lite_beat_size}));
            end
        end
        if (((main_rocket_mmio_a2w_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_rocket_mmio_a2w_axi2axi_lite_ax_beat_payload_addr & main_rocket_mmio_a2w_axi2axi_lite_beat_wrap) == main_rocket_mmio_a2w_axi2axi_lite_beat_wrap)) begin
                main_rocket_mmio_a2w_axi2axi_lite_beat_offset <= (main_rocket_mmio_a2w_axi2axi_lite_beat_offset - $signed({1'd0, main_rocket_mmio_a2w_axi2axi_lite_beat_wrap}));
            end
        end
    end
    builder_basesoc_rocket_axi2axilite_state <= builder_basesoc_rocket_axi2axilite_next_state;
    if (main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value_ce0) begin
        main_rocket_mmio_a2w_axi2axi_lite_cmd_done <= main_rocket_mmio_a2w_axi2axi_lite_cmd_done_rocket_axi2axilite_next_value0;
    end
    if (main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value_ce1) begin
        main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n <= main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n_rocket_axi2axilite_next_value1;
    end
    builder_basesoc_rocket_axilite2wishbone_state <= builder_basesoc_rocket_axilite2wishbone_next_state;
    if (main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value_ce0) begin
        main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n <= main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n_rocket_axilite2wishbone_next_value0;
    end
    if (main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value_ce1) begin
        main_rocket_mmio_a2w_axi_lite2wishbone_data <= main_rocket_mmio_a2w_axi_lite2wishbone_data_rocket_axilite2wishbone_next_value1;
    end
    builder_basesoc_rocket_state <= builder_basesoc_rocket_next_state;
    if (main_rocket_l2fb_a2w_cmd_done_rocket_next_value_ce0) begin
        main_rocket_l2fb_a2w_cmd_done <= main_rocket_l2fb_a2w_cmd_done_rocket_next_value0;
    end
    if (main_rocket_l2fb_a2w_data_done_rocket_next_value_ce1) begin
        main_rocket_l2fb_a2w_data_done <= main_rocket_l2fb_a2w_data_done_rocket_next_value1;
    end
    builder_basesoc_axilitesram0_state <= builder_basesoc_axilitesram0_next_state;
    if (main_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0) begin
        main_basesoc_port_dat_r_latched <= main_basesoc_port_dat_r_latched_axilitesram0_next_value0;
    end
    if (main_basesoc_last_was_read_axilitesram0_next_value_ce1) begin
        main_basesoc_last_was_read <= main_basesoc_last_was_read_axilitesram0_next_value1;
    end
    builder_basesoc_axilitesram1_state <= builder_basesoc_axilitesram1_next_state;
    if (main_ram_port_dat_r_latched_axilitesram1_next_value_ce0) begin
        main_ram_port_dat_r_latched <= main_ram_port_dat_r_latched_axilitesram1_next_value0;
    end
    if (main_ram_last_was_read_axilitesram1_next_value_ce1) begin
        main_ram_last_was_read <= main_ram_last_was_read_axilitesram1_next_value1;
    end
    {main_tx_tick, main_tx_phase} <= 22'd3958241;
    if (main_tx_enable) begin
        {main_tx_tick, main_tx_phase} <= (main_tx_phase + 22'd3958241);
    end
    builder_basesoc_rs232phytx_state <= builder_basesoc_rs232phytx_next_state;
    if (main_tx_count_rs232phytx_next_value_ce0) begin
        main_tx_count <= main_tx_count_rs232phytx_next_value0;
    end
    if (main_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_serial_tx_rs232phytx_next_value1;
    end
    if (main_tx_data_rs232phytx_next_value_ce2) begin
        main_tx_data <= main_tx_data_rs232phytx_next_value2;
    end
    main_rx_rx_d <= main_rx_rx;
    {main_rx_tick, main_rx_phase} <= 32'd2147483648;
    if (main_rx_enable) begin
        {main_rx_tick, main_rx_phase} <= (main_rx_phase + 22'd3958241);
    end
    builder_basesoc_rs232phyrx_state <= builder_basesoc_rs232phyrx_next_state;
    if (main_rx_count_rs232phyrx_next_value_ce0) begin
        main_rx_count <= main_rx_count_rs232phyrx_next_value0;
    end
    if (main_rx_data_rs232phyrx_next_value_ce1) begin
        main_rx_data <= main_rx_data_rs232phyrx_next_value1;
    end
    if (main_uart_tx_clear) begin
        main_uart_tx_pending <= 1'd0;
    end
    main_uart_tx_trigger_d <= main_uart_tx_trigger;
    if ((main_uart_tx_trigger & (~main_uart_tx_trigger_d))) begin
        main_uart_tx_pending <= 1'd1;
    end
    if (main_uart_rx_clear) begin
        main_uart_rx_pending <= 1'd0;
    end
    main_uart_rx_trigger_d <= main_uart_rx_trigger;
    if ((main_uart_rx_trigger & (~main_uart_rx_trigger_d))) begin
        main_uart_rx_pending <= 1'd1;
    end
    if (main_uart_tx_fifo_syncfifo_re) begin
        main_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_uart_tx_fifo_re) begin
            main_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
        main_uart_tx_fifo_produce <= (main_uart_tx_fifo_produce + 1'd1);
    end
    if (main_uart_tx_fifo_do_read) begin
        main_uart_tx_fifo_consume <= (main_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
        if ((~main_uart_tx_fifo_do_read)) begin
            main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uart_tx_fifo_do_read) begin
            main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_uart_rx_fifo_syncfifo_re) begin
        main_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_uart_rx_fifo_re) begin
            main_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
        main_uart_rx_fifo_produce <= (main_uart_rx_fifo_produce + 1'd1);
    end
    if (main_uart_rx_fifo_do_read) begin
        main_uart_rx_fifo_consume <= (main_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
        if ((~main_uart_rx_fifo_do_read)) begin
            main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uart_rx_fifo_do_read) begin
            main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_timer_en_storage) begin
        if ((main_timer_value == 1'd0)) begin
            main_timer_value <= main_timer_reload_storage;
        end else begin
            main_timer_value <= (main_timer_value - 1'd1);
        end
    end else begin
        main_timer_value <= main_timer_load_storage;
    end
    if (main_timer_update_value_re) begin
        main_timer_value_status <= main_timer_value;
    end
    if (main_timer_zero_clear) begin
        main_timer_zero_pending <= 1'd0;
    end
    main_timer_zero_trigger_d <= main_timer_zero_trigger;
    if ((main_timer_zero_trigger & (~main_timer_zero_trigger_d))) begin
        main_timer_zero_pending <= 1'd1;
    end
    main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= main_v7ddrphy_dqs_oe_delay_tappeddelayline;
    main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0;
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip0_value0 <= (main_v7ddrphy_bitslip0_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip0_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip0_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip0_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip1_value0 <= (main_v7ddrphy_bitslip1_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip1_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip1_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip1_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip2_value0 <= (main_v7ddrphy_bitslip2_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip2_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip2_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip2_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip3_value0 <= (main_v7ddrphy_bitslip3_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip3_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip3_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip3_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip4_value0 <= (main_v7ddrphy_bitslip4_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip4_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip4_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip4_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip5_value0 <= (main_v7ddrphy_bitslip5_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip5_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip5_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip5_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip6_value0 <= (main_v7ddrphy_bitslip6_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip6_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip6_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip6_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip7_value0 <= (main_v7ddrphy_bitslip7_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip7_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip7_r0 <= {main_v7ddrphy_dqspattern_o, main_v7ddrphy_bitslip7_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip0_value1 <= (main_v7ddrphy_bitslip0_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip0_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip0_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[8], main_v7ddrphy_dfi_p3_wrdata_mask[0], main_v7ddrphy_dfi_p2_wrdata_mask[8], main_v7ddrphy_dfi_p2_wrdata_mask[0], main_v7ddrphy_dfi_p1_wrdata_mask[8], main_v7ddrphy_dfi_p1_wrdata_mask[0], main_v7ddrphy_dfi_p0_wrdata_mask[8], main_v7ddrphy_dfi_p0_wrdata_mask[0]}, main_v7ddrphy_bitslip0_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip1_value1 <= (main_v7ddrphy_bitslip1_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip1_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip1_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[9], main_v7ddrphy_dfi_p3_wrdata_mask[1], main_v7ddrphy_dfi_p2_wrdata_mask[9], main_v7ddrphy_dfi_p2_wrdata_mask[1], main_v7ddrphy_dfi_p1_wrdata_mask[9], main_v7ddrphy_dfi_p1_wrdata_mask[1], main_v7ddrphy_dfi_p0_wrdata_mask[9], main_v7ddrphy_dfi_p0_wrdata_mask[1]}, main_v7ddrphy_bitslip1_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip2_value1 <= (main_v7ddrphy_bitslip2_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip2_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip2_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[10], main_v7ddrphy_dfi_p3_wrdata_mask[2], main_v7ddrphy_dfi_p2_wrdata_mask[10], main_v7ddrphy_dfi_p2_wrdata_mask[2], main_v7ddrphy_dfi_p1_wrdata_mask[10], main_v7ddrphy_dfi_p1_wrdata_mask[2], main_v7ddrphy_dfi_p0_wrdata_mask[10], main_v7ddrphy_dfi_p0_wrdata_mask[2]}, main_v7ddrphy_bitslip2_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip3_value1 <= (main_v7ddrphy_bitslip3_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip3_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip3_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[11], main_v7ddrphy_dfi_p3_wrdata_mask[3], main_v7ddrphy_dfi_p2_wrdata_mask[11], main_v7ddrphy_dfi_p2_wrdata_mask[3], main_v7ddrphy_dfi_p1_wrdata_mask[11], main_v7ddrphy_dfi_p1_wrdata_mask[3], main_v7ddrphy_dfi_p0_wrdata_mask[11], main_v7ddrphy_dfi_p0_wrdata_mask[3]}, main_v7ddrphy_bitslip3_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip4_value1 <= (main_v7ddrphy_bitslip4_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip4_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip4_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[12], main_v7ddrphy_dfi_p3_wrdata_mask[4], main_v7ddrphy_dfi_p2_wrdata_mask[12], main_v7ddrphy_dfi_p2_wrdata_mask[4], main_v7ddrphy_dfi_p1_wrdata_mask[12], main_v7ddrphy_dfi_p1_wrdata_mask[4], main_v7ddrphy_dfi_p0_wrdata_mask[12], main_v7ddrphy_dfi_p0_wrdata_mask[4]}, main_v7ddrphy_bitslip4_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip5_value1 <= (main_v7ddrphy_bitslip5_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip5_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip5_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[13], main_v7ddrphy_dfi_p3_wrdata_mask[5], main_v7ddrphy_dfi_p2_wrdata_mask[13], main_v7ddrphy_dfi_p2_wrdata_mask[5], main_v7ddrphy_dfi_p1_wrdata_mask[13], main_v7ddrphy_dfi_p1_wrdata_mask[5], main_v7ddrphy_dfi_p0_wrdata_mask[13], main_v7ddrphy_dfi_p0_wrdata_mask[5]}, main_v7ddrphy_bitslip5_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip6_value1 <= (main_v7ddrphy_bitslip6_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip6_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip6_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[14], main_v7ddrphy_dfi_p3_wrdata_mask[6], main_v7ddrphy_dfi_p2_wrdata_mask[14], main_v7ddrphy_dfi_p2_wrdata_mask[6], main_v7ddrphy_dfi_p1_wrdata_mask[14], main_v7ddrphy_dfi_p1_wrdata_mask[6], main_v7ddrphy_dfi_p0_wrdata_mask[14], main_v7ddrphy_dfi_p0_wrdata_mask[6]}, main_v7ddrphy_bitslip6_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip7_value1 <= (main_v7ddrphy_bitslip7_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip7_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip7_r1 <= {{main_v7ddrphy_dfi_p3_wrdata_mask[15], main_v7ddrphy_dfi_p3_wrdata_mask[7], main_v7ddrphy_dfi_p2_wrdata_mask[15], main_v7ddrphy_dfi_p2_wrdata_mask[7], main_v7ddrphy_dfi_p1_wrdata_mask[15], main_v7ddrphy_dfi_p1_wrdata_mask[7], main_v7ddrphy_dfi_p0_wrdata_mask[15], main_v7ddrphy_dfi_p0_wrdata_mask[7]}, main_v7ddrphy_bitslip7_r1[15:8]};
    main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= main_v7ddrphy_dq_oe_delay_tappeddelayline;
    main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0;
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip0_value2 <= (main_v7ddrphy_bitslip0_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip0_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip0_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[64], main_v7ddrphy_dfi_p3_wrdata[0], main_v7ddrphy_dfi_p2_wrdata[64], main_v7ddrphy_dfi_p2_wrdata[0], main_v7ddrphy_dfi_p1_wrdata[64], main_v7ddrphy_dfi_p1_wrdata[0], main_v7ddrphy_dfi_p0_wrdata[64], main_v7ddrphy_dfi_p0_wrdata[0]}, main_v7ddrphy_bitslip0_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip0_value3 <= (main_v7ddrphy_bitslip0_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip0_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip0_r3 <= {main_v7ddrphy_bitslip03, main_v7ddrphy_bitslip0_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip1_value2 <= (main_v7ddrphy_bitslip1_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip1_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip1_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[65], main_v7ddrphy_dfi_p3_wrdata[1], main_v7ddrphy_dfi_p2_wrdata[65], main_v7ddrphy_dfi_p2_wrdata[1], main_v7ddrphy_dfi_p1_wrdata[65], main_v7ddrphy_dfi_p1_wrdata[1], main_v7ddrphy_dfi_p0_wrdata[65], main_v7ddrphy_dfi_p0_wrdata[1]}, main_v7ddrphy_bitslip1_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip1_value3 <= (main_v7ddrphy_bitslip1_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip1_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip1_r3 <= {main_v7ddrphy_bitslip13, main_v7ddrphy_bitslip1_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip2_value2 <= (main_v7ddrphy_bitslip2_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip2_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip2_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[66], main_v7ddrphy_dfi_p3_wrdata[2], main_v7ddrphy_dfi_p2_wrdata[66], main_v7ddrphy_dfi_p2_wrdata[2], main_v7ddrphy_dfi_p1_wrdata[66], main_v7ddrphy_dfi_p1_wrdata[2], main_v7ddrphy_dfi_p0_wrdata[66], main_v7ddrphy_dfi_p0_wrdata[2]}, main_v7ddrphy_bitslip2_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip2_value3 <= (main_v7ddrphy_bitslip2_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip2_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip2_r3 <= {main_v7ddrphy_bitslip23, main_v7ddrphy_bitslip2_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip3_value2 <= (main_v7ddrphy_bitslip3_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip3_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip3_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[67], main_v7ddrphy_dfi_p3_wrdata[3], main_v7ddrphy_dfi_p2_wrdata[67], main_v7ddrphy_dfi_p2_wrdata[3], main_v7ddrphy_dfi_p1_wrdata[67], main_v7ddrphy_dfi_p1_wrdata[3], main_v7ddrphy_dfi_p0_wrdata[67], main_v7ddrphy_dfi_p0_wrdata[3]}, main_v7ddrphy_bitslip3_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip3_value3 <= (main_v7ddrphy_bitslip3_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip3_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip3_r3 <= {main_v7ddrphy_bitslip33, main_v7ddrphy_bitslip3_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip4_value2 <= (main_v7ddrphy_bitslip4_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip4_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip4_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[68], main_v7ddrphy_dfi_p3_wrdata[4], main_v7ddrphy_dfi_p2_wrdata[68], main_v7ddrphy_dfi_p2_wrdata[4], main_v7ddrphy_dfi_p1_wrdata[68], main_v7ddrphy_dfi_p1_wrdata[4], main_v7ddrphy_dfi_p0_wrdata[68], main_v7ddrphy_dfi_p0_wrdata[4]}, main_v7ddrphy_bitslip4_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip4_value3 <= (main_v7ddrphy_bitslip4_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip4_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip4_r3 <= {main_v7ddrphy_bitslip43, main_v7ddrphy_bitslip4_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip5_value2 <= (main_v7ddrphy_bitslip5_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip5_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip5_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[69], main_v7ddrphy_dfi_p3_wrdata[5], main_v7ddrphy_dfi_p2_wrdata[69], main_v7ddrphy_dfi_p2_wrdata[5], main_v7ddrphy_dfi_p1_wrdata[69], main_v7ddrphy_dfi_p1_wrdata[5], main_v7ddrphy_dfi_p0_wrdata[69], main_v7ddrphy_dfi_p0_wrdata[5]}, main_v7ddrphy_bitslip5_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip5_value3 <= (main_v7ddrphy_bitslip5_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip5_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip5_r3 <= {main_v7ddrphy_bitslip53, main_v7ddrphy_bitslip5_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip6_value2 <= (main_v7ddrphy_bitslip6_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip6_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip6_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[70], main_v7ddrphy_dfi_p3_wrdata[6], main_v7ddrphy_dfi_p2_wrdata[70], main_v7ddrphy_dfi_p2_wrdata[6], main_v7ddrphy_dfi_p1_wrdata[70], main_v7ddrphy_dfi_p1_wrdata[6], main_v7ddrphy_dfi_p0_wrdata[70], main_v7ddrphy_dfi_p0_wrdata[6]}, main_v7ddrphy_bitslip6_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip6_value3 <= (main_v7ddrphy_bitslip6_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip6_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip6_r3 <= {main_v7ddrphy_bitslip63, main_v7ddrphy_bitslip6_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip7_value2 <= (main_v7ddrphy_bitslip7_value2 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip7_value2 <= 3'd7;
    end
    main_v7ddrphy_bitslip7_r2 <= {{main_v7ddrphy_dfi_p3_wrdata[71], main_v7ddrphy_dfi_p3_wrdata[7], main_v7ddrphy_dfi_p2_wrdata[71], main_v7ddrphy_dfi_p2_wrdata[7], main_v7ddrphy_dfi_p1_wrdata[71], main_v7ddrphy_dfi_p1_wrdata[7], main_v7ddrphy_dfi_p0_wrdata[71], main_v7ddrphy_dfi_p0_wrdata[7]}, main_v7ddrphy_bitslip7_r2[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip7_value3 <= (main_v7ddrphy_bitslip7_value3 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip7_value3 <= 3'd7;
    end
    main_v7ddrphy_bitslip7_r3 <= {main_v7ddrphy_bitslip73, main_v7ddrphy_bitslip7_r3[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip8_value0 <= (main_v7ddrphy_bitslip8_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip8_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip8_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[72], main_v7ddrphy_dfi_p3_wrdata[8], main_v7ddrphy_dfi_p2_wrdata[72], main_v7ddrphy_dfi_p2_wrdata[8], main_v7ddrphy_dfi_p1_wrdata[72], main_v7ddrphy_dfi_p1_wrdata[8], main_v7ddrphy_dfi_p0_wrdata[72], main_v7ddrphy_dfi_p0_wrdata[8]}, main_v7ddrphy_bitslip8_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip8_value1 <= (main_v7ddrphy_bitslip8_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip8_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip8_r1 <= {main_v7ddrphy_bitslip81, main_v7ddrphy_bitslip8_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip9_value0 <= (main_v7ddrphy_bitslip9_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip9_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip9_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[73], main_v7ddrphy_dfi_p3_wrdata[9], main_v7ddrphy_dfi_p2_wrdata[73], main_v7ddrphy_dfi_p2_wrdata[9], main_v7ddrphy_dfi_p1_wrdata[73], main_v7ddrphy_dfi_p1_wrdata[9], main_v7ddrphy_dfi_p0_wrdata[73], main_v7ddrphy_dfi_p0_wrdata[9]}, main_v7ddrphy_bitslip9_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip9_value1 <= (main_v7ddrphy_bitslip9_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip9_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip9_r1 <= {main_v7ddrphy_bitslip91, main_v7ddrphy_bitslip9_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip10_value0 <= (main_v7ddrphy_bitslip10_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip10_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip10_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[74], main_v7ddrphy_dfi_p3_wrdata[10], main_v7ddrphy_dfi_p2_wrdata[74], main_v7ddrphy_dfi_p2_wrdata[10], main_v7ddrphy_dfi_p1_wrdata[74], main_v7ddrphy_dfi_p1_wrdata[10], main_v7ddrphy_dfi_p0_wrdata[74], main_v7ddrphy_dfi_p0_wrdata[10]}, main_v7ddrphy_bitslip10_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip10_value1 <= (main_v7ddrphy_bitslip10_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip10_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip10_r1 <= {main_v7ddrphy_bitslip101, main_v7ddrphy_bitslip10_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip11_value0 <= (main_v7ddrphy_bitslip11_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip11_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip11_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[75], main_v7ddrphy_dfi_p3_wrdata[11], main_v7ddrphy_dfi_p2_wrdata[75], main_v7ddrphy_dfi_p2_wrdata[11], main_v7ddrphy_dfi_p1_wrdata[75], main_v7ddrphy_dfi_p1_wrdata[11], main_v7ddrphy_dfi_p0_wrdata[75], main_v7ddrphy_dfi_p0_wrdata[11]}, main_v7ddrphy_bitslip11_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip11_value1 <= (main_v7ddrphy_bitslip11_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip11_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip11_r1 <= {main_v7ddrphy_bitslip111, main_v7ddrphy_bitslip11_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip12_value0 <= (main_v7ddrphy_bitslip12_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip12_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip12_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[76], main_v7ddrphy_dfi_p3_wrdata[12], main_v7ddrphy_dfi_p2_wrdata[76], main_v7ddrphy_dfi_p2_wrdata[12], main_v7ddrphy_dfi_p1_wrdata[76], main_v7ddrphy_dfi_p1_wrdata[12], main_v7ddrphy_dfi_p0_wrdata[76], main_v7ddrphy_dfi_p0_wrdata[12]}, main_v7ddrphy_bitslip12_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip12_value1 <= (main_v7ddrphy_bitslip12_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip12_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip12_r1 <= {main_v7ddrphy_bitslip121, main_v7ddrphy_bitslip12_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip13_value0 <= (main_v7ddrphy_bitslip13_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip13_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip13_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[77], main_v7ddrphy_dfi_p3_wrdata[13], main_v7ddrphy_dfi_p2_wrdata[77], main_v7ddrphy_dfi_p2_wrdata[13], main_v7ddrphy_dfi_p1_wrdata[77], main_v7ddrphy_dfi_p1_wrdata[13], main_v7ddrphy_dfi_p0_wrdata[77], main_v7ddrphy_dfi_p0_wrdata[13]}, main_v7ddrphy_bitslip13_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip13_value1 <= (main_v7ddrphy_bitslip13_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip13_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip13_r1 <= {main_v7ddrphy_bitslip131, main_v7ddrphy_bitslip13_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip14_value0 <= (main_v7ddrphy_bitslip14_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip14_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip14_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[78], main_v7ddrphy_dfi_p3_wrdata[14], main_v7ddrphy_dfi_p2_wrdata[78], main_v7ddrphy_dfi_p2_wrdata[14], main_v7ddrphy_dfi_p1_wrdata[78], main_v7ddrphy_dfi_p1_wrdata[14], main_v7ddrphy_dfi_p0_wrdata[78], main_v7ddrphy_dfi_p0_wrdata[14]}, main_v7ddrphy_bitslip14_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip14_value1 <= (main_v7ddrphy_bitslip14_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip14_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip14_r1 <= {main_v7ddrphy_bitslip141, main_v7ddrphy_bitslip14_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip15_value0 <= (main_v7ddrphy_bitslip15_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip15_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip15_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[79], main_v7ddrphy_dfi_p3_wrdata[15], main_v7ddrphy_dfi_p2_wrdata[79], main_v7ddrphy_dfi_p2_wrdata[15], main_v7ddrphy_dfi_p1_wrdata[79], main_v7ddrphy_dfi_p1_wrdata[15], main_v7ddrphy_dfi_p0_wrdata[79], main_v7ddrphy_dfi_p0_wrdata[15]}, main_v7ddrphy_bitslip15_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip15_value1 <= (main_v7ddrphy_bitslip15_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip15_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip15_r1 <= {main_v7ddrphy_bitslip151, main_v7ddrphy_bitslip15_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip16_value0 <= (main_v7ddrphy_bitslip16_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip16_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip16_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[80], main_v7ddrphy_dfi_p3_wrdata[16], main_v7ddrphy_dfi_p2_wrdata[80], main_v7ddrphy_dfi_p2_wrdata[16], main_v7ddrphy_dfi_p1_wrdata[80], main_v7ddrphy_dfi_p1_wrdata[16], main_v7ddrphy_dfi_p0_wrdata[80], main_v7ddrphy_dfi_p0_wrdata[16]}, main_v7ddrphy_bitslip16_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip16_value1 <= (main_v7ddrphy_bitslip16_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip16_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip16_r1 <= {main_v7ddrphy_bitslip161, main_v7ddrphy_bitslip16_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip17_value0 <= (main_v7ddrphy_bitslip17_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip17_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip17_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[81], main_v7ddrphy_dfi_p3_wrdata[17], main_v7ddrphy_dfi_p2_wrdata[81], main_v7ddrphy_dfi_p2_wrdata[17], main_v7ddrphy_dfi_p1_wrdata[81], main_v7ddrphy_dfi_p1_wrdata[17], main_v7ddrphy_dfi_p0_wrdata[81], main_v7ddrphy_dfi_p0_wrdata[17]}, main_v7ddrphy_bitslip17_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip17_value1 <= (main_v7ddrphy_bitslip17_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip17_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip17_r1 <= {main_v7ddrphy_bitslip171, main_v7ddrphy_bitslip17_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip18_value0 <= (main_v7ddrphy_bitslip18_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip18_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip18_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[82], main_v7ddrphy_dfi_p3_wrdata[18], main_v7ddrphy_dfi_p2_wrdata[82], main_v7ddrphy_dfi_p2_wrdata[18], main_v7ddrphy_dfi_p1_wrdata[82], main_v7ddrphy_dfi_p1_wrdata[18], main_v7ddrphy_dfi_p0_wrdata[82], main_v7ddrphy_dfi_p0_wrdata[18]}, main_v7ddrphy_bitslip18_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip18_value1 <= (main_v7ddrphy_bitslip18_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip18_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip18_r1 <= {main_v7ddrphy_bitslip181, main_v7ddrphy_bitslip18_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip19_value0 <= (main_v7ddrphy_bitslip19_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip19_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip19_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[83], main_v7ddrphy_dfi_p3_wrdata[19], main_v7ddrphy_dfi_p2_wrdata[83], main_v7ddrphy_dfi_p2_wrdata[19], main_v7ddrphy_dfi_p1_wrdata[83], main_v7ddrphy_dfi_p1_wrdata[19], main_v7ddrphy_dfi_p0_wrdata[83], main_v7ddrphy_dfi_p0_wrdata[19]}, main_v7ddrphy_bitslip19_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip19_value1 <= (main_v7ddrphy_bitslip19_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip19_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip19_r1 <= {main_v7ddrphy_bitslip191, main_v7ddrphy_bitslip19_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip20_value0 <= (main_v7ddrphy_bitslip20_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip20_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip20_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[84], main_v7ddrphy_dfi_p3_wrdata[20], main_v7ddrphy_dfi_p2_wrdata[84], main_v7ddrphy_dfi_p2_wrdata[20], main_v7ddrphy_dfi_p1_wrdata[84], main_v7ddrphy_dfi_p1_wrdata[20], main_v7ddrphy_dfi_p0_wrdata[84], main_v7ddrphy_dfi_p0_wrdata[20]}, main_v7ddrphy_bitslip20_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip20_value1 <= (main_v7ddrphy_bitslip20_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip20_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip20_r1 <= {main_v7ddrphy_bitslip201, main_v7ddrphy_bitslip20_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip21_value0 <= (main_v7ddrphy_bitslip21_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip21_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip21_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[85], main_v7ddrphy_dfi_p3_wrdata[21], main_v7ddrphy_dfi_p2_wrdata[85], main_v7ddrphy_dfi_p2_wrdata[21], main_v7ddrphy_dfi_p1_wrdata[85], main_v7ddrphy_dfi_p1_wrdata[21], main_v7ddrphy_dfi_p0_wrdata[85], main_v7ddrphy_dfi_p0_wrdata[21]}, main_v7ddrphy_bitslip21_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip21_value1 <= (main_v7ddrphy_bitslip21_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip21_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip21_r1 <= {main_v7ddrphy_bitslip211, main_v7ddrphy_bitslip21_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip22_value0 <= (main_v7ddrphy_bitslip22_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip22_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip22_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[86], main_v7ddrphy_dfi_p3_wrdata[22], main_v7ddrphy_dfi_p2_wrdata[86], main_v7ddrphy_dfi_p2_wrdata[22], main_v7ddrphy_dfi_p1_wrdata[86], main_v7ddrphy_dfi_p1_wrdata[22], main_v7ddrphy_dfi_p0_wrdata[86], main_v7ddrphy_dfi_p0_wrdata[22]}, main_v7ddrphy_bitslip22_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip22_value1 <= (main_v7ddrphy_bitslip22_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip22_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip22_r1 <= {main_v7ddrphy_bitslip221, main_v7ddrphy_bitslip22_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip23_value0 <= (main_v7ddrphy_bitslip23_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip23_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip23_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[87], main_v7ddrphy_dfi_p3_wrdata[23], main_v7ddrphy_dfi_p2_wrdata[87], main_v7ddrphy_dfi_p2_wrdata[23], main_v7ddrphy_dfi_p1_wrdata[87], main_v7ddrphy_dfi_p1_wrdata[23], main_v7ddrphy_dfi_p0_wrdata[87], main_v7ddrphy_dfi_p0_wrdata[23]}, main_v7ddrphy_bitslip23_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip23_value1 <= (main_v7ddrphy_bitslip23_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip23_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip23_r1 <= {main_v7ddrphy_bitslip231, main_v7ddrphy_bitslip23_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip24_value0 <= (main_v7ddrphy_bitslip24_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip24_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip24_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[88], main_v7ddrphy_dfi_p3_wrdata[24], main_v7ddrphy_dfi_p2_wrdata[88], main_v7ddrphy_dfi_p2_wrdata[24], main_v7ddrphy_dfi_p1_wrdata[88], main_v7ddrphy_dfi_p1_wrdata[24], main_v7ddrphy_dfi_p0_wrdata[88], main_v7ddrphy_dfi_p0_wrdata[24]}, main_v7ddrphy_bitslip24_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip24_value1 <= (main_v7ddrphy_bitslip24_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip24_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip24_r1 <= {main_v7ddrphy_bitslip241, main_v7ddrphy_bitslip24_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip25_value0 <= (main_v7ddrphy_bitslip25_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip25_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip25_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[89], main_v7ddrphy_dfi_p3_wrdata[25], main_v7ddrphy_dfi_p2_wrdata[89], main_v7ddrphy_dfi_p2_wrdata[25], main_v7ddrphy_dfi_p1_wrdata[89], main_v7ddrphy_dfi_p1_wrdata[25], main_v7ddrphy_dfi_p0_wrdata[89], main_v7ddrphy_dfi_p0_wrdata[25]}, main_v7ddrphy_bitslip25_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip25_value1 <= (main_v7ddrphy_bitslip25_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip25_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip25_r1 <= {main_v7ddrphy_bitslip251, main_v7ddrphy_bitslip25_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip26_value0 <= (main_v7ddrphy_bitslip26_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip26_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip26_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[90], main_v7ddrphy_dfi_p3_wrdata[26], main_v7ddrphy_dfi_p2_wrdata[90], main_v7ddrphy_dfi_p2_wrdata[26], main_v7ddrphy_dfi_p1_wrdata[90], main_v7ddrphy_dfi_p1_wrdata[26], main_v7ddrphy_dfi_p0_wrdata[90], main_v7ddrphy_dfi_p0_wrdata[26]}, main_v7ddrphy_bitslip26_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip26_value1 <= (main_v7ddrphy_bitslip26_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip26_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip26_r1 <= {main_v7ddrphy_bitslip261, main_v7ddrphy_bitslip26_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip27_value0 <= (main_v7ddrphy_bitslip27_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip27_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip27_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[91], main_v7ddrphy_dfi_p3_wrdata[27], main_v7ddrphy_dfi_p2_wrdata[91], main_v7ddrphy_dfi_p2_wrdata[27], main_v7ddrphy_dfi_p1_wrdata[91], main_v7ddrphy_dfi_p1_wrdata[27], main_v7ddrphy_dfi_p0_wrdata[91], main_v7ddrphy_dfi_p0_wrdata[27]}, main_v7ddrphy_bitslip27_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip27_value1 <= (main_v7ddrphy_bitslip27_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip27_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip27_r1 <= {main_v7ddrphy_bitslip271, main_v7ddrphy_bitslip27_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip28_value0 <= (main_v7ddrphy_bitslip28_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip28_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip28_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[92], main_v7ddrphy_dfi_p3_wrdata[28], main_v7ddrphy_dfi_p2_wrdata[92], main_v7ddrphy_dfi_p2_wrdata[28], main_v7ddrphy_dfi_p1_wrdata[92], main_v7ddrphy_dfi_p1_wrdata[28], main_v7ddrphy_dfi_p0_wrdata[92], main_v7ddrphy_dfi_p0_wrdata[28]}, main_v7ddrphy_bitslip28_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip28_value1 <= (main_v7ddrphy_bitslip28_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip28_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip28_r1 <= {main_v7ddrphy_bitslip281, main_v7ddrphy_bitslip28_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip29_value0 <= (main_v7ddrphy_bitslip29_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip29_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip29_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[93], main_v7ddrphy_dfi_p3_wrdata[29], main_v7ddrphy_dfi_p2_wrdata[93], main_v7ddrphy_dfi_p2_wrdata[29], main_v7ddrphy_dfi_p1_wrdata[93], main_v7ddrphy_dfi_p1_wrdata[29], main_v7ddrphy_dfi_p0_wrdata[93], main_v7ddrphy_dfi_p0_wrdata[29]}, main_v7ddrphy_bitslip29_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip29_value1 <= (main_v7ddrphy_bitslip29_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip29_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip29_r1 <= {main_v7ddrphy_bitslip291, main_v7ddrphy_bitslip29_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip30_value0 <= (main_v7ddrphy_bitslip30_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip30_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip30_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[94], main_v7ddrphy_dfi_p3_wrdata[30], main_v7ddrphy_dfi_p2_wrdata[94], main_v7ddrphy_dfi_p2_wrdata[30], main_v7ddrphy_dfi_p1_wrdata[94], main_v7ddrphy_dfi_p1_wrdata[30], main_v7ddrphy_dfi_p0_wrdata[94], main_v7ddrphy_dfi_p0_wrdata[30]}, main_v7ddrphy_bitslip30_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip30_value1 <= (main_v7ddrphy_bitslip30_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip30_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip30_r1 <= {main_v7ddrphy_bitslip301, main_v7ddrphy_bitslip30_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip31_value0 <= (main_v7ddrphy_bitslip31_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip31_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip31_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[95], main_v7ddrphy_dfi_p3_wrdata[31], main_v7ddrphy_dfi_p2_wrdata[95], main_v7ddrphy_dfi_p2_wrdata[31], main_v7ddrphy_dfi_p1_wrdata[95], main_v7ddrphy_dfi_p1_wrdata[31], main_v7ddrphy_dfi_p0_wrdata[95], main_v7ddrphy_dfi_p0_wrdata[31]}, main_v7ddrphy_bitslip31_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip31_value1 <= (main_v7ddrphy_bitslip31_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip31_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip31_r1 <= {main_v7ddrphy_bitslip311, main_v7ddrphy_bitslip31_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip32_value0 <= (main_v7ddrphy_bitslip32_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip32_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip32_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[96], main_v7ddrphy_dfi_p3_wrdata[32], main_v7ddrphy_dfi_p2_wrdata[96], main_v7ddrphy_dfi_p2_wrdata[32], main_v7ddrphy_dfi_p1_wrdata[96], main_v7ddrphy_dfi_p1_wrdata[32], main_v7ddrphy_dfi_p0_wrdata[96], main_v7ddrphy_dfi_p0_wrdata[32]}, main_v7ddrphy_bitslip32_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip32_value1 <= (main_v7ddrphy_bitslip32_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip32_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip32_r1 <= {main_v7ddrphy_bitslip321, main_v7ddrphy_bitslip32_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip33_value0 <= (main_v7ddrphy_bitslip33_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip33_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip33_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[97], main_v7ddrphy_dfi_p3_wrdata[33], main_v7ddrphy_dfi_p2_wrdata[97], main_v7ddrphy_dfi_p2_wrdata[33], main_v7ddrphy_dfi_p1_wrdata[97], main_v7ddrphy_dfi_p1_wrdata[33], main_v7ddrphy_dfi_p0_wrdata[97], main_v7ddrphy_dfi_p0_wrdata[33]}, main_v7ddrphy_bitslip33_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip33_value1 <= (main_v7ddrphy_bitslip33_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip33_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip33_r1 <= {main_v7ddrphy_bitslip331, main_v7ddrphy_bitslip33_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip34_value0 <= (main_v7ddrphy_bitslip34_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip34_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip34_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[98], main_v7ddrphy_dfi_p3_wrdata[34], main_v7ddrphy_dfi_p2_wrdata[98], main_v7ddrphy_dfi_p2_wrdata[34], main_v7ddrphy_dfi_p1_wrdata[98], main_v7ddrphy_dfi_p1_wrdata[34], main_v7ddrphy_dfi_p0_wrdata[98], main_v7ddrphy_dfi_p0_wrdata[34]}, main_v7ddrphy_bitslip34_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip34_value1 <= (main_v7ddrphy_bitslip34_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip34_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip34_r1 <= {main_v7ddrphy_bitslip341, main_v7ddrphy_bitslip34_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip35_value0 <= (main_v7ddrphy_bitslip35_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip35_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip35_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[99], main_v7ddrphy_dfi_p3_wrdata[35], main_v7ddrphy_dfi_p2_wrdata[99], main_v7ddrphy_dfi_p2_wrdata[35], main_v7ddrphy_dfi_p1_wrdata[99], main_v7ddrphy_dfi_p1_wrdata[35], main_v7ddrphy_dfi_p0_wrdata[99], main_v7ddrphy_dfi_p0_wrdata[35]}, main_v7ddrphy_bitslip35_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip35_value1 <= (main_v7ddrphy_bitslip35_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip35_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip35_r1 <= {main_v7ddrphy_bitslip351, main_v7ddrphy_bitslip35_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip36_value0 <= (main_v7ddrphy_bitslip36_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip36_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip36_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[100], main_v7ddrphy_dfi_p3_wrdata[36], main_v7ddrphy_dfi_p2_wrdata[100], main_v7ddrphy_dfi_p2_wrdata[36], main_v7ddrphy_dfi_p1_wrdata[100], main_v7ddrphy_dfi_p1_wrdata[36], main_v7ddrphy_dfi_p0_wrdata[100], main_v7ddrphy_dfi_p0_wrdata[36]}, main_v7ddrphy_bitslip36_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip36_value1 <= (main_v7ddrphy_bitslip36_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip36_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip36_r1 <= {main_v7ddrphy_bitslip361, main_v7ddrphy_bitslip36_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip37_value0 <= (main_v7ddrphy_bitslip37_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip37_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip37_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[101], main_v7ddrphy_dfi_p3_wrdata[37], main_v7ddrphy_dfi_p2_wrdata[101], main_v7ddrphy_dfi_p2_wrdata[37], main_v7ddrphy_dfi_p1_wrdata[101], main_v7ddrphy_dfi_p1_wrdata[37], main_v7ddrphy_dfi_p0_wrdata[101], main_v7ddrphy_dfi_p0_wrdata[37]}, main_v7ddrphy_bitslip37_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip37_value1 <= (main_v7ddrphy_bitslip37_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip37_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip37_r1 <= {main_v7ddrphy_bitslip371, main_v7ddrphy_bitslip37_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip38_value0 <= (main_v7ddrphy_bitslip38_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip38_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip38_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[102], main_v7ddrphy_dfi_p3_wrdata[38], main_v7ddrphy_dfi_p2_wrdata[102], main_v7ddrphy_dfi_p2_wrdata[38], main_v7ddrphy_dfi_p1_wrdata[102], main_v7ddrphy_dfi_p1_wrdata[38], main_v7ddrphy_dfi_p0_wrdata[102], main_v7ddrphy_dfi_p0_wrdata[38]}, main_v7ddrphy_bitslip38_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip38_value1 <= (main_v7ddrphy_bitslip38_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip38_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip38_r1 <= {main_v7ddrphy_bitslip381, main_v7ddrphy_bitslip38_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip39_value0 <= (main_v7ddrphy_bitslip39_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip39_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip39_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[103], main_v7ddrphy_dfi_p3_wrdata[39], main_v7ddrphy_dfi_p2_wrdata[103], main_v7ddrphy_dfi_p2_wrdata[39], main_v7ddrphy_dfi_p1_wrdata[103], main_v7ddrphy_dfi_p1_wrdata[39], main_v7ddrphy_dfi_p0_wrdata[103], main_v7ddrphy_dfi_p0_wrdata[39]}, main_v7ddrphy_bitslip39_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip39_value1 <= (main_v7ddrphy_bitslip39_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip39_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip39_r1 <= {main_v7ddrphy_bitslip391, main_v7ddrphy_bitslip39_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip40_value0 <= (main_v7ddrphy_bitslip40_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip40_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip40_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[104], main_v7ddrphy_dfi_p3_wrdata[40], main_v7ddrphy_dfi_p2_wrdata[104], main_v7ddrphy_dfi_p2_wrdata[40], main_v7ddrphy_dfi_p1_wrdata[104], main_v7ddrphy_dfi_p1_wrdata[40], main_v7ddrphy_dfi_p0_wrdata[104], main_v7ddrphy_dfi_p0_wrdata[40]}, main_v7ddrphy_bitslip40_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip40_value1 <= (main_v7ddrphy_bitslip40_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip40_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip40_r1 <= {main_v7ddrphy_bitslip401, main_v7ddrphy_bitslip40_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip41_value0 <= (main_v7ddrphy_bitslip41_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip41_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip41_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[105], main_v7ddrphy_dfi_p3_wrdata[41], main_v7ddrphy_dfi_p2_wrdata[105], main_v7ddrphy_dfi_p2_wrdata[41], main_v7ddrphy_dfi_p1_wrdata[105], main_v7ddrphy_dfi_p1_wrdata[41], main_v7ddrphy_dfi_p0_wrdata[105], main_v7ddrphy_dfi_p0_wrdata[41]}, main_v7ddrphy_bitslip41_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip41_value1 <= (main_v7ddrphy_bitslip41_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip41_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip41_r1 <= {main_v7ddrphy_bitslip411, main_v7ddrphy_bitslip41_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip42_value0 <= (main_v7ddrphy_bitslip42_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip42_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip42_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[106], main_v7ddrphy_dfi_p3_wrdata[42], main_v7ddrphy_dfi_p2_wrdata[106], main_v7ddrphy_dfi_p2_wrdata[42], main_v7ddrphy_dfi_p1_wrdata[106], main_v7ddrphy_dfi_p1_wrdata[42], main_v7ddrphy_dfi_p0_wrdata[106], main_v7ddrphy_dfi_p0_wrdata[42]}, main_v7ddrphy_bitslip42_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip42_value1 <= (main_v7ddrphy_bitslip42_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip42_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip42_r1 <= {main_v7ddrphy_bitslip421, main_v7ddrphy_bitslip42_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip43_value0 <= (main_v7ddrphy_bitslip43_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip43_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip43_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[107], main_v7ddrphy_dfi_p3_wrdata[43], main_v7ddrphy_dfi_p2_wrdata[107], main_v7ddrphy_dfi_p2_wrdata[43], main_v7ddrphy_dfi_p1_wrdata[107], main_v7ddrphy_dfi_p1_wrdata[43], main_v7ddrphy_dfi_p0_wrdata[107], main_v7ddrphy_dfi_p0_wrdata[43]}, main_v7ddrphy_bitslip43_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip43_value1 <= (main_v7ddrphy_bitslip43_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip43_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip43_r1 <= {main_v7ddrphy_bitslip431, main_v7ddrphy_bitslip43_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip44_value0 <= (main_v7ddrphy_bitslip44_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip44_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip44_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[108], main_v7ddrphy_dfi_p3_wrdata[44], main_v7ddrphy_dfi_p2_wrdata[108], main_v7ddrphy_dfi_p2_wrdata[44], main_v7ddrphy_dfi_p1_wrdata[108], main_v7ddrphy_dfi_p1_wrdata[44], main_v7ddrphy_dfi_p0_wrdata[108], main_v7ddrphy_dfi_p0_wrdata[44]}, main_v7ddrphy_bitslip44_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip44_value1 <= (main_v7ddrphy_bitslip44_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip44_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip44_r1 <= {main_v7ddrphy_bitslip441, main_v7ddrphy_bitslip44_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip45_value0 <= (main_v7ddrphy_bitslip45_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip45_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip45_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[109], main_v7ddrphy_dfi_p3_wrdata[45], main_v7ddrphy_dfi_p2_wrdata[109], main_v7ddrphy_dfi_p2_wrdata[45], main_v7ddrphy_dfi_p1_wrdata[109], main_v7ddrphy_dfi_p1_wrdata[45], main_v7ddrphy_dfi_p0_wrdata[109], main_v7ddrphy_dfi_p0_wrdata[45]}, main_v7ddrphy_bitslip45_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip45_value1 <= (main_v7ddrphy_bitslip45_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip45_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip45_r1 <= {main_v7ddrphy_bitslip451, main_v7ddrphy_bitslip45_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip46_value0 <= (main_v7ddrphy_bitslip46_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip46_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip46_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[110], main_v7ddrphy_dfi_p3_wrdata[46], main_v7ddrphy_dfi_p2_wrdata[110], main_v7ddrphy_dfi_p2_wrdata[46], main_v7ddrphy_dfi_p1_wrdata[110], main_v7ddrphy_dfi_p1_wrdata[46], main_v7ddrphy_dfi_p0_wrdata[110], main_v7ddrphy_dfi_p0_wrdata[46]}, main_v7ddrphy_bitslip46_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip46_value1 <= (main_v7ddrphy_bitslip46_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip46_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip46_r1 <= {main_v7ddrphy_bitslip461, main_v7ddrphy_bitslip46_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip47_value0 <= (main_v7ddrphy_bitslip47_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip47_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip47_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[111], main_v7ddrphy_dfi_p3_wrdata[47], main_v7ddrphy_dfi_p2_wrdata[111], main_v7ddrphy_dfi_p2_wrdata[47], main_v7ddrphy_dfi_p1_wrdata[111], main_v7ddrphy_dfi_p1_wrdata[47], main_v7ddrphy_dfi_p0_wrdata[111], main_v7ddrphy_dfi_p0_wrdata[47]}, main_v7ddrphy_bitslip47_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip47_value1 <= (main_v7ddrphy_bitslip47_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip47_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip47_r1 <= {main_v7ddrphy_bitslip471, main_v7ddrphy_bitslip47_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip48_value0 <= (main_v7ddrphy_bitslip48_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip48_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip48_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[112], main_v7ddrphy_dfi_p3_wrdata[48], main_v7ddrphy_dfi_p2_wrdata[112], main_v7ddrphy_dfi_p2_wrdata[48], main_v7ddrphy_dfi_p1_wrdata[112], main_v7ddrphy_dfi_p1_wrdata[48], main_v7ddrphy_dfi_p0_wrdata[112], main_v7ddrphy_dfi_p0_wrdata[48]}, main_v7ddrphy_bitslip48_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip48_value1 <= (main_v7ddrphy_bitslip48_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip48_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip48_r1 <= {main_v7ddrphy_bitslip481, main_v7ddrphy_bitslip48_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip49_value0 <= (main_v7ddrphy_bitslip49_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip49_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip49_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[113], main_v7ddrphy_dfi_p3_wrdata[49], main_v7ddrphy_dfi_p2_wrdata[113], main_v7ddrphy_dfi_p2_wrdata[49], main_v7ddrphy_dfi_p1_wrdata[113], main_v7ddrphy_dfi_p1_wrdata[49], main_v7ddrphy_dfi_p0_wrdata[113], main_v7ddrphy_dfi_p0_wrdata[49]}, main_v7ddrphy_bitslip49_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip49_value1 <= (main_v7ddrphy_bitslip49_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip49_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip49_r1 <= {main_v7ddrphy_bitslip491, main_v7ddrphy_bitslip49_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip50_value0 <= (main_v7ddrphy_bitslip50_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip50_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip50_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[114], main_v7ddrphy_dfi_p3_wrdata[50], main_v7ddrphy_dfi_p2_wrdata[114], main_v7ddrphy_dfi_p2_wrdata[50], main_v7ddrphy_dfi_p1_wrdata[114], main_v7ddrphy_dfi_p1_wrdata[50], main_v7ddrphy_dfi_p0_wrdata[114], main_v7ddrphy_dfi_p0_wrdata[50]}, main_v7ddrphy_bitslip50_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip50_value1 <= (main_v7ddrphy_bitslip50_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip50_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip50_r1 <= {main_v7ddrphy_bitslip501, main_v7ddrphy_bitslip50_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip51_value0 <= (main_v7ddrphy_bitslip51_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip51_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip51_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[115], main_v7ddrphy_dfi_p3_wrdata[51], main_v7ddrphy_dfi_p2_wrdata[115], main_v7ddrphy_dfi_p2_wrdata[51], main_v7ddrphy_dfi_p1_wrdata[115], main_v7ddrphy_dfi_p1_wrdata[51], main_v7ddrphy_dfi_p0_wrdata[115], main_v7ddrphy_dfi_p0_wrdata[51]}, main_v7ddrphy_bitslip51_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip51_value1 <= (main_v7ddrphy_bitslip51_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip51_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip51_r1 <= {main_v7ddrphy_bitslip511, main_v7ddrphy_bitslip51_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip52_value0 <= (main_v7ddrphy_bitslip52_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip52_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip52_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[116], main_v7ddrphy_dfi_p3_wrdata[52], main_v7ddrphy_dfi_p2_wrdata[116], main_v7ddrphy_dfi_p2_wrdata[52], main_v7ddrphy_dfi_p1_wrdata[116], main_v7ddrphy_dfi_p1_wrdata[52], main_v7ddrphy_dfi_p0_wrdata[116], main_v7ddrphy_dfi_p0_wrdata[52]}, main_v7ddrphy_bitslip52_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip52_value1 <= (main_v7ddrphy_bitslip52_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip52_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip52_r1 <= {main_v7ddrphy_bitslip521, main_v7ddrphy_bitslip52_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip53_value0 <= (main_v7ddrphy_bitslip53_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip53_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip53_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[117], main_v7ddrphy_dfi_p3_wrdata[53], main_v7ddrphy_dfi_p2_wrdata[117], main_v7ddrphy_dfi_p2_wrdata[53], main_v7ddrphy_dfi_p1_wrdata[117], main_v7ddrphy_dfi_p1_wrdata[53], main_v7ddrphy_dfi_p0_wrdata[117], main_v7ddrphy_dfi_p0_wrdata[53]}, main_v7ddrphy_bitslip53_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip53_value1 <= (main_v7ddrphy_bitslip53_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip53_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip53_r1 <= {main_v7ddrphy_bitslip531, main_v7ddrphy_bitslip53_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip54_value0 <= (main_v7ddrphy_bitslip54_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip54_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip54_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[118], main_v7ddrphy_dfi_p3_wrdata[54], main_v7ddrphy_dfi_p2_wrdata[118], main_v7ddrphy_dfi_p2_wrdata[54], main_v7ddrphy_dfi_p1_wrdata[118], main_v7ddrphy_dfi_p1_wrdata[54], main_v7ddrphy_dfi_p0_wrdata[118], main_v7ddrphy_dfi_p0_wrdata[54]}, main_v7ddrphy_bitslip54_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip54_value1 <= (main_v7ddrphy_bitslip54_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip54_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip54_r1 <= {main_v7ddrphy_bitslip541, main_v7ddrphy_bitslip54_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip55_value0 <= (main_v7ddrphy_bitslip55_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip55_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip55_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[119], main_v7ddrphy_dfi_p3_wrdata[55], main_v7ddrphy_dfi_p2_wrdata[119], main_v7ddrphy_dfi_p2_wrdata[55], main_v7ddrphy_dfi_p1_wrdata[119], main_v7ddrphy_dfi_p1_wrdata[55], main_v7ddrphy_dfi_p0_wrdata[119], main_v7ddrphy_dfi_p0_wrdata[55]}, main_v7ddrphy_bitslip55_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip55_value1 <= (main_v7ddrphy_bitslip55_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip55_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip55_r1 <= {main_v7ddrphy_bitslip551, main_v7ddrphy_bitslip55_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip56_value0 <= (main_v7ddrphy_bitslip56_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip56_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip56_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[120], main_v7ddrphy_dfi_p3_wrdata[56], main_v7ddrphy_dfi_p2_wrdata[120], main_v7ddrphy_dfi_p2_wrdata[56], main_v7ddrphy_dfi_p1_wrdata[120], main_v7ddrphy_dfi_p1_wrdata[56], main_v7ddrphy_dfi_p0_wrdata[120], main_v7ddrphy_dfi_p0_wrdata[56]}, main_v7ddrphy_bitslip56_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip56_value1 <= (main_v7ddrphy_bitslip56_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip56_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip56_r1 <= {main_v7ddrphy_bitslip561, main_v7ddrphy_bitslip56_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip57_value0 <= (main_v7ddrphy_bitslip57_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip57_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip57_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[121], main_v7ddrphy_dfi_p3_wrdata[57], main_v7ddrphy_dfi_p2_wrdata[121], main_v7ddrphy_dfi_p2_wrdata[57], main_v7ddrphy_dfi_p1_wrdata[121], main_v7ddrphy_dfi_p1_wrdata[57], main_v7ddrphy_dfi_p0_wrdata[121], main_v7ddrphy_dfi_p0_wrdata[57]}, main_v7ddrphy_bitslip57_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip57_value1 <= (main_v7ddrphy_bitslip57_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip57_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip57_r1 <= {main_v7ddrphy_bitslip571, main_v7ddrphy_bitslip57_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip58_value0 <= (main_v7ddrphy_bitslip58_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip58_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip58_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[122], main_v7ddrphy_dfi_p3_wrdata[58], main_v7ddrphy_dfi_p2_wrdata[122], main_v7ddrphy_dfi_p2_wrdata[58], main_v7ddrphy_dfi_p1_wrdata[122], main_v7ddrphy_dfi_p1_wrdata[58], main_v7ddrphy_dfi_p0_wrdata[122], main_v7ddrphy_dfi_p0_wrdata[58]}, main_v7ddrphy_bitslip58_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip58_value1 <= (main_v7ddrphy_bitslip58_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip58_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip58_r1 <= {main_v7ddrphy_bitslip581, main_v7ddrphy_bitslip58_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip59_value0 <= (main_v7ddrphy_bitslip59_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip59_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip59_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[123], main_v7ddrphy_dfi_p3_wrdata[59], main_v7ddrphy_dfi_p2_wrdata[123], main_v7ddrphy_dfi_p2_wrdata[59], main_v7ddrphy_dfi_p1_wrdata[123], main_v7ddrphy_dfi_p1_wrdata[59], main_v7ddrphy_dfi_p0_wrdata[123], main_v7ddrphy_dfi_p0_wrdata[59]}, main_v7ddrphy_bitslip59_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip59_value1 <= (main_v7ddrphy_bitslip59_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip59_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip59_r1 <= {main_v7ddrphy_bitslip591, main_v7ddrphy_bitslip59_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip60_value0 <= (main_v7ddrphy_bitslip60_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip60_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip60_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[124], main_v7ddrphy_dfi_p3_wrdata[60], main_v7ddrphy_dfi_p2_wrdata[124], main_v7ddrphy_dfi_p2_wrdata[60], main_v7ddrphy_dfi_p1_wrdata[124], main_v7ddrphy_dfi_p1_wrdata[60], main_v7ddrphy_dfi_p0_wrdata[124], main_v7ddrphy_dfi_p0_wrdata[60]}, main_v7ddrphy_bitslip60_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip60_value1 <= (main_v7ddrphy_bitslip60_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip60_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip60_r1 <= {main_v7ddrphy_bitslip601, main_v7ddrphy_bitslip60_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip61_value0 <= (main_v7ddrphy_bitslip61_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip61_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip61_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[125], main_v7ddrphy_dfi_p3_wrdata[61], main_v7ddrphy_dfi_p2_wrdata[125], main_v7ddrphy_dfi_p2_wrdata[61], main_v7ddrphy_dfi_p1_wrdata[125], main_v7ddrphy_dfi_p1_wrdata[61], main_v7ddrphy_dfi_p0_wrdata[125], main_v7ddrphy_dfi_p0_wrdata[61]}, main_v7ddrphy_bitslip61_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip61_value1 <= (main_v7ddrphy_bitslip61_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip61_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip61_r1 <= {main_v7ddrphy_bitslip611, main_v7ddrphy_bitslip61_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip62_value0 <= (main_v7ddrphy_bitslip62_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip62_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip62_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[126], main_v7ddrphy_dfi_p3_wrdata[62], main_v7ddrphy_dfi_p2_wrdata[126], main_v7ddrphy_dfi_p2_wrdata[62], main_v7ddrphy_dfi_p1_wrdata[126], main_v7ddrphy_dfi_p1_wrdata[62], main_v7ddrphy_dfi_p0_wrdata[126], main_v7ddrphy_dfi_p0_wrdata[62]}, main_v7ddrphy_bitslip62_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip62_value1 <= (main_v7ddrphy_bitslip62_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip62_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip62_r1 <= {main_v7ddrphy_bitslip621, main_v7ddrphy_bitslip62_r1[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip63_value0 <= (main_v7ddrphy_bitslip63_value0 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip63_value0 <= 3'd7;
    end
    main_v7ddrphy_bitslip63_r0 <= {{main_v7ddrphy_dfi_p3_wrdata[127], main_v7ddrphy_dfi_p3_wrdata[63], main_v7ddrphy_dfi_p2_wrdata[127], main_v7ddrphy_dfi_p2_wrdata[63], main_v7ddrphy_dfi_p1_wrdata[127], main_v7ddrphy_dfi_p1_wrdata[63], main_v7ddrphy_dfi_p0_wrdata[127], main_v7ddrphy_dfi_p0_wrdata[63]}, main_v7ddrphy_bitslip63_r0[15:8]};
    if ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_re)) begin
        main_v7ddrphy_bitslip63_value1 <= (main_v7ddrphy_bitslip63_value1 + 1'd1);
    end
    if (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_bitslip_rst_re) | main_v7ddrphy_rst_storage)) begin
        main_v7ddrphy_bitslip63_value1 <= 3'd7;
    end
    main_v7ddrphy_bitslip63_r1 <= {main_v7ddrphy_bitslip631, main_v7ddrphy_bitslip63_r1[15:8]};
    main_v7ddrphy_rddata_en_tappeddelayline0 <= (((main_v7ddrphy_dfi_p0_rddata_en | main_v7ddrphy_dfi_p1_rddata_en) | main_v7ddrphy_dfi_p2_rddata_en) | main_v7ddrphy_dfi_p3_rddata_en);
    main_v7ddrphy_rddata_en_tappeddelayline1 <= main_v7ddrphy_rddata_en_tappeddelayline0;
    main_v7ddrphy_rddata_en_tappeddelayline2 <= main_v7ddrphy_rddata_en_tappeddelayline1;
    main_v7ddrphy_rddata_en_tappeddelayline3 <= main_v7ddrphy_rddata_en_tappeddelayline2;
    main_v7ddrphy_rddata_en_tappeddelayline4 <= main_v7ddrphy_rddata_en_tappeddelayline3;
    main_v7ddrphy_rddata_en_tappeddelayline5 <= main_v7ddrphy_rddata_en_tappeddelayline4;
    main_v7ddrphy_rddata_en_tappeddelayline6 <= main_v7ddrphy_rddata_en_tappeddelayline5;
    main_v7ddrphy_rddata_en_tappeddelayline7 <= main_v7ddrphy_rddata_en_tappeddelayline6;
    main_v7ddrphy_wrdata_en_tappeddelayline0 <= (((main_v7ddrphy_dfi_p0_wrdata_en | main_v7ddrphy_dfi_p1_wrdata_en) | main_v7ddrphy_dfi_p2_wrdata_en) | main_v7ddrphy_dfi_p3_wrdata_en);
    main_v7ddrphy_wrdata_en_tappeddelayline1 <= main_v7ddrphy_wrdata_en_tappeddelayline0;
    main_v7ddrphy_wrdata_en_tappeddelayline2 <= main_v7ddrphy_wrdata_en_tappeddelayline1;
    if (main_sdram_csr_dfi_p0_rddata_valid) begin
        main_sdram_phaseinjector0_rddata_status <= main_sdram_csr_dfi_p0_rddata;
    end
    if (main_sdram_csr_dfi_p1_rddata_valid) begin
        main_sdram_phaseinjector1_rddata_status <= main_sdram_csr_dfi_p1_rddata;
    end
    if (main_sdram_csr_dfi_p2_rddata_valid) begin
        main_sdram_phaseinjector2_rddata_status <= main_sdram_csr_dfi_p2_rddata;
    end
    if (main_sdram_csr_dfi_p3_rddata_valid) begin
        main_sdram_phaseinjector3_rddata_status <= main_sdram_csr_dfi_p3_rddata;
    end
    if ((main_sdram_timer_wait & (~main_sdram_timer_done0))) begin
        main_sdram_timer_count1 <= (main_sdram_timer_count1 - 1'd1);
    end else begin
        main_sdram_timer_count1 <= 10'd976;
    end
    main_sdram_postponer_req_o <= 1'd0;
    if (main_sdram_postponer_req_i) begin
        main_sdram_postponer_count <= (main_sdram_postponer_count - 1'd1);
        if ((main_sdram_postponer_count == 1'd0)) begin
            main_sdram_postponer_count <= 1'd0;
            main_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (main_sdram_sequencer_start0) begin
        main_sdram_sequencer_count <= 1'd0;
    end else begin
        if (main_sdram_sequencer_done1) begin
            if ((main_sdram_sequencer_count != 1'd0)) begin
                main_sdram_sequencer_count <= (main_sdram_sequencer_count - 1'd1);
            end
        end
    end
    main_sdram_cmd_payload_a <= 1'd0;
    main_sdram_cmd_payload_ba <= 1'd0;
    main_sdram_cmd_payload_cas <= 1'd0;
    main_sdram_cmd_payload_ras <= 1'd0;
    main_sdram_cmd_payload_we <= 1'd0;
    main_sdram_sequencer_done1 <= 1'd0;
    if ((main_sdram_sequencer_start1 & (main_sdram_sequencer_counter == 1'd0))) begin
        main_sdram_cmd_payload_a <= 11'd1024;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd1;
        main_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_sdram_sequencer_counter == 2'd3)) begin
        main_sdram_cmd_payload_a <= 11'd1024;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd1;
        main_sdram_cmd_payload_ras <= 1'd1;
        main_sdram_cmd_payload_we <= 1'd0;
    end
    if ((main_sdram_sequencer_counter == 6'd37)) begin
        main_sdram_cmd_payload_a <= 1'd0;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd0;
        main_sdram_sequencer_done1 <= 1'd1;
    end
    if ((main_sdram_sequencer_counter == 6'd37)) begin
        main_sdram_sequencer_counter <= 1'd0;
    end else begin
        if ((main_sdram_sequencer_counter != 1'd0)) begin
            main_sdram_sequencer_counter <= (main_sdram_sequencer_counter + 1'd1);
        end else begin
            if (main_sdram_sequencer_start1) begin
                main_sdram_sequencer_counter <= 1'd1;
            end
        end
    end
    if ((main_sdram_zqcs_timer_wait & (~main_sdram_zqcs_timer_done0))) begin
        main_sdram_zqcs_timer_count1 <= (main_sdram_zqcs_timer_count1 - 1'd1);
    end else begin
        main_sdram_zqcs_timer_count1 <= 27'd124999999;
    end
    main_sdram_zqcs_executer_done <= 1'd0;
    if ((main_sdram_zqcs_executer_start & (main_sdram_zqcs_executer_counter == 1'd0))) begin
        main_sdram_cmd_payload_a <= 11'd1024;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd1;
        main_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_sdram_zqcs_executer_counter == 2'd3)) begin
        main_sdram_cmd_payload_a <= 1'd0;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_sdram_zqcs_executer_counter == 5'd19)) begin
        main_sdram_cmd_payload_a <= 1'd0;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd0;
        main_sdram_zqcs_executer_done <= 1'd1;
    end
    if ((main_sdram_zqcs_executer_counter == 5'd19)) begin
        main_sdram_zqcs_executer_counter <= 1'd0;
    end else begin
        if ((main_sdram_zqcs_executer_counter != 1'd0)) begin
            main_sdram_zqcs_executer_counter <= (main_sdram_zqcs_executer_counter + 1'd1);
        end else begin
            if (main_sdram_zqcs_executer_start) begin
                main_sdram_zqcs_executer_counter <= 1'd1;
            end
        end
    end
    builder_basesoc_refresher_state <= builder_basesoc_refresher_next_state;
    if (main_sdram_bankmachine0_row_close) begin
        main_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine0_row_open) begin
            main_sdram_bankmachine0_row_opened <= 1'd1;
            main_sdram_bankmachine0_row <= main_sdram_bankmachine0_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
        main_sdram_bankmachine0_produce <= (main_sdram_bankmachine0_produce + 1'd1);
    end
    if (main_sdram_bankmachine0_do_read) begin
        main_sdram_bankmachine0_consume <= (main_sdram_bankmachine0_consume + 1'd1);
    end
    if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
        if ((~main_sdram_bankmachine0_do_read)) begin
            main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine0_do_read) begin
            main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready)) begin
        main_sdram_bankmachine0_pipe_valid_source_valid <= main_sdram_bankmachine0_pipe_valid_sink_valid;
        main_sdram_bankmachine0_pipe_valid_source_first <= main_sdram_bankmachine0_pipe_valid_sink_first;
        main_sdram_bankmachine0_pipe_valid_source_last <= main_sdram_bankmachine0_pipe_valid_sink_last;
        main_sdram_bankmachine0_pipe_valid_source_payload_we <= main_sdram_bankmachine0_pipe_valid_sink_payload_we;
        main_sdram_bankmachine0_pipe_valid_source_payload_addr <= main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine0_twtpcon_valid) begin
        main_sdram_bankmachine0_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_twtpcon_ready)) begin
            main_sdram_bankmachine0_twtpcon_count <= (main_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine0_trccon_valid) begin
        main_sdram_bankmachine0_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_trccon_ready)) begin
            main_sdram_bankmachine0_trccon_count <= (main_sdram_bankmachine0_trccon_count - 1'd1);
            if ((main_sdram_bankmachine0_trccon_count == 1'd1)) begin
                main_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine0_trascon_valid) begin
        main_sdram_bankmachine0_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_trascon_ready)) begin
            main_sdram_bankmachine0_trascon_count <= (main_sdram_bankmachine0_trascon_count - 1'd1);
            if ((main_sdram_bankmachine0_trascon_count == 1'd1)) begin
                main_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine0_state <= builder_basesoc_bankmachine0_next_state;
    if (main_sdram_bankmachine1_row_close) begin
        main_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine1_row_open) begin
            main_sdram_bankmachine1_row_opened <= 1'd1;
            main_sdram_bankmachine1_row <= main_sdram_bankmachine1_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
        main_sdram_bankmachine1_produce <= (main_sdram_bankmachine1_produce + 1'd1);
    end
    if (main_sdram_bankmachine1_do_read) begin
        main_sdram_bankmachine1_consume <= (main_sdram_bankmachine1_consume + 1'd1);
    end
    if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
        if ((~main_sdram_bankmachine1_do_read)) begin
            main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine1_do_read) begin
            main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready)) begin
        main_sdram_bankmachine1_pipe_valid_source_valid <= main_sdram_bankmachine1_pipe_valid_sink_valid;
        main_sdram_bankmachine1_pipe_valid_source_first <= main_sdram_bankmachine1_pipe_valid_sink_first;
        main_sdram_bankmachine1_pipe_valid_source_last <= main_sdram_bankmachine1_pipe_valid_sink_last;
        main_sdram_bankmachine1_pipe_valid_source_payload_we <= main_sdram_bankmachine1_pipe_valid_sink_payload_we;
        main_sdram_bankmachine1_pipe_valid_source_payload_addr <= main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine1_twtpcon_valid) begin
        main_sdram_bankmachine1_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_twtpcon_ready)) begin
            main_sdram_bankmachine1_twtpcon_count <= (main_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine1_trccon_valid) begin
        main_sdram_bankmachine1_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_trccon_ready)) begin
            main_sdram_bankmachine1_trccon_count <= (main_sdram_bankmachine1_trccon_count - 1'd1);
            if ((main_sdram_bankmachine1_trccon_count == 1'd1)) begin
                main_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine1_trascon_valid) begin
        main_sdram_bankmachine1_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_trascon_ready)) begin
            main_sdram_bankmachine1_trascon_count <= (main_sdram_bankmachine1_trascon_count - 1'd1);
            if ((main_sdram_bankmachine1_trascon_count == 1'd1)) begin
                main_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine1_state <= builder_basesoc_bankmachine1_next_state;
    if (main_sdram_bankmachine2_row_close) begin
        main_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine2_row_open) begin
            main_sdram_bankmachine2_row_opened <= 1'd1;
            main_sdram_bankmachine2_row <= main_sdram_bankmachine2_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
        main_sdram_bankmachine2_produce <= (main_sdram_bankmachine2_produce + 1'd1);
    end
    if (main_sdram_bankmachine2_do_read) begin
        main_sdram_bankmachine2_consume <= (main_sdram_bankmachine2_consume + 1'd1);
    end
    if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
        if ((~main_sdram_bankmachine2_do_read)) begin
            main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine2_do_read) begin
            main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready)) begin
        main_sdram_bankmachine2_pipe_valid_source_valid <= main_sdram_bankmachine2_pipe_valid_sink_valid;
        main_sdram_bankmachine2_pipe_valid_source_first <= main_sdram_bankmachine2_pipe_valid_sink_first;
        main_sdram_bankmachine2_pipe_valid_source_last <= main_sdram_bankmachine2_pipe_valid_sink_last;
        main_sdram_bankmachine2_pipe_valid_source_payload_we <= main_sdram_bankmachine2_pipe_valid_sink_payload_we;
        main_sdram_bankmachine2_pipe_valid_source_payload_addr <= main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine2_twtpcon_valid) begin
        main_sdram_bankmachine2_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_twtpcon_ready)) begin
            main_sdram_bankmachine2_twtpcon_count <= (main_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine2_trccon_valid) begin
        main_sdram_bankmachine2_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_trccon_ready)) begin
            main_sdram_bankmachine2_trccon_count <= (main_sdram_bankmachine2_trccon_count - 1'd1);
            if ((main_sdram_bankmachine2_trccon_count == 1'd1)) begin
                main_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine2_trascon_valid) begin
        main_sdram_bankmachine2_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_trascon_ready)) begin
            main_sdram_bankmachine2_trascon_count <= (main_sdram_bankmachine2_trascon_count - 1'd1);
            if ((main_sdram_bankmachine2_trascon_count == 1'd1)) begin
                main_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine2_state <= builder_basesoc_bankmachine2_next_state;
    if (main_sdram_bankmachine3_row_close) begin
        main_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine3_row_open) begin
            main_sdram_bankmachine3_row_opened <= 1'd1;
            main_sdram_bankmachine3_row <= main_sdram_bankmachine3_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
        main_sdram_bankmachine3_produce <= (main_sdram_bankmachine3_produce + 1'd1);
    end
    if (main_sdram_bankmachine3_do_read) begin
        main_sdram_bankmachine3_consume <= (main_sdram_bankmachine3_consume + 1'd1);
    end
    if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
        if ((~main_sdram_bankmachine3_do_read)) begin
            main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine3_do_read) begin
            main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready)) begin
        main_sdram_bankmachine3_pipe_valid_source_valid <= main_sdram_bankmachine3_pipe_valid_sink_valid;
        main_sdram_bankmachine3_pipe_valid_source_first <= main_sdram_bankmachine3_pipe_valid_sink_first;
        main_sdram_bankmachine3_pipe_valid_source_last <= main_sdram_bankmachine3_pipe_valid_sink_last;
        main_sdram_bankmachine3_pipe_valid_source_payload_we <= main_sdram_bankmachine3_pipe_valid_sink_payload_we;
        main_sdram_bankmachine3_pipe_valid_source_payload_addr <= main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine3_twtpcon_valid) begin
        main_sdram_bankmachine3_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_twtpcon_ready)) begin
            main_sdram_bankmachine3_twtpcon_count <= (main_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine3_trccon_valid) begin
        main_sdram_bankmachine3_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_trccon_ready)) begin
            main_sdram_bankmachine3_trccon_count <= (main_sdram_bankmachine3_trccon_count - 1'd1);
            if ((main_sdram_bankmachine3_trccon_count == 1'd1)) begin
                main_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine3_trascon_valid) begin
        main_sdram_bankmachine3_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_trascon_ready)) begin
            main_sdram_bankmachine3_trascon_count <= (main_sdram_bankmachine3_trascon_count - 1'd1);
            if ((main_sdram_bankmachine3_trascon_count == 1'd1)) begin
                main_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine3_state <= builder_basesoc_bankmachine3_next_state;
    if (main_sdram_bankmachine4_row_close) begin
        main_sdram_bankmachine4_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine4_row_open) begin
            main_sdram_bankmachine4_row_opened <= 1'd1;
            main_sdram_bankmachine4_row <= main_sdram_bankmachine4_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine4_syncfifo4_we & main_sdram_bankmachine4_syncfifo4_writable) & (~main_sdram_bankmachine4_replace))) begin
        main_sdram_bankmachine4_produce <= (main_sdram_bankmachine4_produce + 1'd1);
    end
    if (main_sdram_bankmachine4_do_read) begin
        main_sdram_bankmachine4_consume <= (main_sdram_bankmachine4_consume + 1'd1);
    end
    if (((main_sdram_bankmachine4_syncfifo4_we & main_sdram_bankmachine4_syncfifo4_writable) & (~main_sdram_bankmachine4_replace))) begin
        if ((~main_sdram_bankmachine4_do_read)) begin
            main_sdram_bankmachine4_level <= (main_sdram_bankmachine4_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine4_do_read) begin
            main_sdram_bankmachine4_level <= (main_sdram_bankmachine4_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine4_pipe_valid_source_valid) | main_sdram_bankmachine4_pipe_valid_source_ready)) begin
        main_sdram_bankmachine4_pipe_valid_source_valid <= main_sdram_bankmachine4_pipe_valid_sink_valid;
        main_sdram_bankmachine4_pipe_valid_source_first <= main_sdram_bankmachine4_pipe_valid_sink_first;
        main_sdram_bankmachine4_pipe_valid_source_last <= main_sdram_bankmachine4_pipe_valid_sink_last;
        main_sdram_bankmachine4_pipe_valid_source_payload_we <= main_sdram_bankmachine4_pipe_valid_sink_payload_we;
        main_sdram_bankmachine4_pipe_valid_source_payload_addr <= main_sdram_bankmachine4_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine4_twtpcon_valid) begin
        main_sdram_bankmachine4_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine4_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine4_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine4_twtpcon_ready)) begin
            main_sdram_bankmachine4_twtpcon_count <= (main_sdram_bankmachine4_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine4_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine4_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine4_trccon_valid) begin
        main_sdram_bankmachine4_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine4_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine4_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine4_trccon_ready)) begin
            main_sdram_bankmachine4_trccon_count <= (main_sdram_bankmachine4_trccon_count - 1'd1);
            if ((main_sdram_bankmachine4_trccon_count == 1'd1)) begin
                main_sdram_bankmachine4_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine4_trascon_valid) begin
        main_sdram_bankmachine4_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine4_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine4_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine4_trascon_ready)) begin
            main_sdram_bankmachine4_trascon_count <= (main_sdram_bankmachine4_trascon_count - 1'd1);
            if ((main_sdram_bankmachine4_trascon_count == 1'd1)) begin
                main_sdram_bankmachine4_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine4_state <= builder_basesoc_bankmachine4_next_state;
    if (main_sdram_bankmachine5_row_close) begin
        main_sdram_bankmachine5_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine5_row_open) begin
            main_sdram_bankmachine5_row_opened <= 1'd1;
            main_sdram_bankmachine5_row <= main_sdram_bankmachine5_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine5_syncfifo5_we & main_sdram_bankmachine5_syncfifo5_writable) & (~main_sdram_bankmachine5_replace))) begin
        main_sdram_bankmachine5_produce <= (main_sdram_bankmachine5_produce + 1'd1);
    end
    if (main_sdram_bankmachine5_do_read) begin
        main_sdram_bankmachine5_consume <= (main_sdram_bankmachine5_consume + 1'd1);
    end
    if (((main_sdram_bankmachine5_syncfifo5_we & main_sdram_bankmachine5_syncfifo5_writable) & (~main_sdram_bankmachine5_replace))) begin
        if ((~main_sdram_bankmachine5_do_read)) begin
            main_sdram_bankmachine5_level <= (main_sdram_bankmachine5_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine5_do_read) begin
            main_sdram_bankmachine5_level <= (main_sdram_bankmachine5_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine5_pipe_valid_source_valid) | main_sdram_bankmachine5_pipe_valid_source_ready)) begin
        main_sdram_bankmachine5_pipe_valid_source_valid <= main_sdram_bankmachine5_pipe_valid_sink_valid;
        main_sdram_bankmachine5_pipe_valid_source_first <= main_sdram_bankmachine5_pipe_valid_sink_first;
        main_sdram_bankmachine5_pipe_valid_source_last <= main_sdram_bankmachine5_pipe_valid_sink_last;
        main_sdram_bankmachine5_pipe_valid_source_payload_we <= main_sdram_bankmachine5_pipe_valid_sink_payload_we;
        main_sdram_bankmachine5_pipe_valid_source_payload_addr <= main_sdram_bankmachine5_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine5_twtpcon_valid) begin
        main_sdram_bankmachine5_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine5_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine5_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine5_twtpcon_ready)) begin
            main_sdram_bankmachine5_twtpcon_count <= (main_sdram_bankmachine5_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine5_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine5_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine5_trccon_valid) begin
        main_sdram_bankmachine5_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine5_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine5_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine5_trccon_ready)) begin
            main_sdram_bankmachine5_trccon_count <= (main_sdram_bankmachine5_trccon_count - 1'd1);
            if ((main_sdram_bankmachine5_trccon_count == 1'd1)) begin
                main_sdram_bankmachine5_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine5_trascon_valid) begin
        main_sdram_bankmachine5_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine5_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine5_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine5_trascon_ready)) begin
            main_sdram_bankmachine5_trascon_count <= (main_sdram_bankmachine5_trascon_count - 1'd1);
            if ((main_sdram_bankmachine5_trascon_count == 1'd1)) begin
                main_sdram_bankmachine5_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine5_state <= builder_basesoc_bankmachine5_next_state;
    if (main_sdram_bankmachine6_row_close) begin
        main_sdram_bankmachine6_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine6_row_open) begin
            main_sdram_bankmachine6_row_opened <= 1'd1;
            main_sdram_bankmachine6_row <= main_sdram_bankmachine6_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine6_syncfifo6_we & main_sdram_bankmachine6_syncfifo6_writable) & (~main_sdram_bankmachine6_replace))) begin
        main_sdram_bankmachine6_produce <= (main_sdram_bankmachine6_produce + 1'd1);
    end
    if (main_sdram_bankmachine6_do_read) begin
        main_sdram_bankmachine6_consume <= (main_sdram_bankmachine6_consume + 1'd1);
    end
    if (((main_sdram_bankmachine6_syncfifo6_we & main_sdram_bankmachine6_syncfifo6_writable) & (~main_sdram_bankmachine6_replace))) begin
        if ((~main_sdram_bankmachine6_do_read)) begin
            main_sdram_bankmachine6_level <= (main_sdram_bankmachine6_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine6_do_read) begin
            main_sdram_bankmachine6_level <= (main_sdram_bankmachine6_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine6_pipe_valid_source_valid) | main_sdram_bankmachine6_pipe_valid_source_ready)) begin
        main_sdram_bankmachine6_pipe_valid_source_valid <= main_sdram_bankmachine6_pipe_valid_sink_valid;
        main_sdram_bankmachine6_pipe_valid_source_first <= main_sdram_bankmachine6_pipe_valid_sink_first;
        main_sdram_bankmachine6_pipe_valid_source_last <= main_sdram_bankmachine6_pipe_valid_sink_last;
        main_sdram_bankmachine6_pipe_valid_source_payload_we <= main_sdram_bankmachine6_pipe_valid_sink_payload_we;
        main_sdram_bankmachine6_pipe_valid_source_payload_addr <= main_sdram_bankmachine6_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine6_twtpcon_valid) begin
        main_sdram_bankmachine6_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine6_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine6_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine6_twtpcon_ready)) begin
            main_sdram_bankmachine6_twtpcon_count <= (main_sdram_bankmachine6_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine6_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine6_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine6_trccon_valid) begin
        main_sdram_bankmachine6_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine6_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine6_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine6_trccon_ready)) begin
            main_sdram_bankmachine6_trccon_count <= (main_sdram_bankmachine6_trccon_count - 1'd1);
            if ((main_sdram_bankmachine6_trccon_count == 1'd1)) begin
                main_sdram_bankmachine6_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine6_trascon_valid) begin
        main_sdram_bankmachine6_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine6_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine6_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine6_trascon_ready)) begin
            main_sdram_bankmachine6_trascon_count <= (main_sdram_bankmachine6_trascon_count - 1'd1);
            if ((main_sdram_bankmachine6_trascon_count == 1'd1)) begin
                main_sdram_bankmachine6_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine6_state <= builder_basesoc_bankmachine6_next_state;
    if (main_sdram_bankmachine7_row_close) begin
        main_sdram_bankmachine7_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine7_row_open) begin
            main_sdram_bankmachine7_row_opened <= 1'd1;
            main_sdram_bankmachine7_row <= main_sdram_bankmachine7_source_source_payload_addr[22:7];
        end
    end
    if (((main_sdram_bankmachine7_syncfifo7_we & main_sdram_bankmachine7_syncfifo7_writable) & (~main_sdram_bankmachine7_replace))) begin
        main_sdram_bankmachine7_produce <= (main_sdram_bankmachine7_produce + 1'd1);
    end
    if (main_sdram_bankmachine7_do_read) begin
        main_sdram_bankmachine7_consume <= (main_sdram_bankmachine7_consume + 1'd1);
    end
    if (((main_sdram_bankmachine7_syncfifo7_we & main_sdram_bankmachine7_syncfifo7_writable) & (~main_sdram_bankmachine7_replace))) begin
        if ((~main_sdram_bankmachine7_do_read)) begin
            main_sdram_bankmachine7_level <= (main_sdram_bankmachine7_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine7_do_read) begin
            main_sdram_bankmachine7_level <= (main_sdram_bankmachine7_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine7_pipe_valid_source_valid) | main_sdram_bankmachine7_pipe_valid_source_ready)) begin
        main_sdram_bankmachine7_pipe_valid_source_valid <= main_sdram_bankmachine7_pipe_valid_sink_valid;
        main_sdram_bankmachine7_pipe_valid_source_first <= main_sdram_bankmachine7_pipe_valid_sink_first;
        main_sdram_bankmachine7_pipe_valid_source_last <= main_sdram_bankmachine7_pipe_valid_sink_last;
        main_sdram_bankmachine7_pipe_valid_source_payload_we <= main_sdram_bankmachine7_pipe_valid_sink_payload_we;
        main_sdram_bankmachine7_pipe_valid_source_payload_addr <= main_sdram_bankmachine7_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine7_twtpcon_valid) begin
        main_sdram_bankmachine7_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_sdram_bankmachine7_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine7_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine7_twtpcon_ready)) begin
            main_sdram_bankmachine7_twtpcon_count <= (main_sdram_bankmachine7_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine7_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine7_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine7_trccon_valid) begin
        main_sdram_bankmachine7_trccon_count <= 3'd6;
        if (1'd0) begin
            main_sdram_bankmachine7_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine7_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine7_trccon_ready)) begin
            main_sdram_bankmachine7_trccon_count <= (main_sdram_bankmachine7_trccon_count - 1'd1);
            if ((main_sdram_bankmachine7_trccon_count == 1'd1)) begin
                main_sdram_bankmachine7_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine7_trascon_valid) begin
        main_sdram_bankmachine7_trascon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_bankmachine7_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine7_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine7_trascon_ready)) begin
            main_sdram_bankmachine7_trascon_count <= (main_sdram_bankmachine7_trascon_count - 1'd1);
            if ((main_sdram_bankmachine7_trascon_count == 1'd1)) begin
                main_sdram_bankmachine7_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine7_state <= builder_basesoc_bankmachine7_next_state;
    if ((~main_sdram_en0)) begin
        main_sdram_time0 <= 5'd31;
    end else begin
        if ((~main_sdram_max_time0)) begin
            main_sdram_time0 <= (main_sdram_time0 - 1'd1);
        end
    end
    if ((~main_sdram_en1)) begin
        main_sdram_time1 <= 4'd15;
    end else begin
        if ((~main_sdram_max_time1)) begin
            main_sdram_time1 <= (main_sdram_time1 - 1'd1);
        end
    end
    if (main_sdram_choose_cmd_ce) begin
        case (main_sdram_choose_cmd_grant)
            1'd0: begin
                if (main_sdram_choose_cmd_request[1]) begin
                    main_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (main_sdram_choose_cmd_request[2]) begin
                        main_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (main_sdram_choose_cmd_request[3]) begin
                            main_sdram_choose_cmd_grant <= 2'd3;
                        end else begin
                            if (main_sdram_choose_cmd_request[4]) begin
                                main_sdram_choose_cmd_grant <= 3'd4;
                            end else begin
                                if (main_sdram_choose_cmd_request[5]) begin
                                    main_sdram_choose_cmd_grant <= 3'd5;
                                end else begin
                                    if (main_sdram_choose_cmd_request[6]) begin
                                        main_sdram_choose_cmd_grant <= 3'd6;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[7]) begin
                                            main_sdram_choose_cmd_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_sdram_choose_cmd_request[2]) begin
                    main_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (main_sdram_choose_cmd_request[3]) begin
                        main_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (main_sdram_choose_cmd_request[4]) begin
                            main_sdram_choose_cmd_grant <= 3'd4;
                        end else begin
                            if (main_sdram_choose_cmd_request[5]) begin
                                main_sdram_choose_cmd_grant <= 3'd5;
                            end else begin
                                if (main_sdram_choose_cmd_request[6]) begin
                                    main_sdram_choose_cmd_grant <= 3'd6;
                                end else begin
                                    if (main_sdram_choose_cmd_request[7]) begin
                                        main_sdram_choose_cmd_grant <= 3'd7;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[0]) begin
                                            main_sdram_choose_cmd_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_sdram_choose_cmd_request[3]) begin
                    main_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (main_sdram_choose_cmd_request[4]) begin
                        main_sdram_choose_cmd_grant <= 3'd4;
                    end else begin
                        if (main_sdram_choose_cmd_request[5]) begin
                            main_sdram_choose_cmd_grant <= 3'd5;
                        end else begin
                            if (main_sdram_choose_cmd_request[6]) begin
                                main_sdram_choose_cmd_grant <= 3'd6;
                            end else begin
                                if (main_sdram_choose_cmd_request[7]) begin
                                    main_sdram_choose_cmd_grant <= 3'd7;
                                end else begin
                                    if (main_sdram_choose_cmd_request[0]) begin
                                        main_sdram_choose_cmd_grant <= 1'd0;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[1]) begin
                                            main_sdram_choose_cmd_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_sdram_choose_cmd_request[4]) begin
                    main_sdram_choose_cmd_grant <= 3'd4;
                end else begin
                    if (main_sdram_choose_cmd_request[5]) begin
                        main_sdram_choose_cmd_grant <= 3'd5;
                    end else begin
                        if (main_sdram_choose_cmd_request[6]) begin
                            main_sdram_choose_cmd_grant <= 3'd6;
                        end else begin
                            if (main_sdram_choose_cmd_request[7]) begin
                                main_sdram_choose_cmd_grant <= 3'd7;
                            end else begin
                                if (main_sdram_choose_cmd_request[0]) begin
                                    main_sdram_choose_cmd_grant <= 1'd0;
                                end else begin
                                    if (main_sdram_choose_cmd_request[1]) begin
                                        main_sdram_choose_cmd_grant <= 1'd1;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[2]) begin
                                            main_sdram_choose_cmd_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_sdram_choose_cmd_request[5]) begin
                    main_sdram_choose_cmd_grant <= 3'd5;
                end else begin
                    if (main_sdram_choose_cmd_request[6]) begin
                        main_sdram_choose_cmd_grant <= 3'd6;
                    end else begin
                        if (main_sdram_choose_cmd_request[7]) begin
                            main_sdram_choose_cmd_grant <= 3'd7;
                        end else begin
                            if (main_sdram_choose_cmd_request[0]) begin
                                main_sdram_choose_cmd_grant <= 1'd0;
                            end else begin
                                if (main_sdram_choose_cmd_request[1]) begin
                                    main_sdram_choose_cmd_grant <= 1'd1;
                                end else begin
                                    if (main_sdram_choose_cmd_request[2]) begin
                                        main_sdram_choose_cmd_grant <= 2'd2;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[3]) begin
                                            main_sdram_choose_cmd_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_sdram_choose_cmd_request[6]) begin
                    main_sdram_choose_cmd_grant <= 3'd6;
                end else begin
                    if (main_sdram_choose_cmd_request[7]) begin
                        main_sdram_choose_cmd_grant <= 3'd7;
                    end else begin
                        if (main_sdram_choose_cmd_request[0]) begin
                            main_sdram_choose_cmd_grant <= 1'd0;
                        end else begin
                            if (main_sdram_choose_cmd_request[1]) begin
                                main_sdram_choose_cmd_grant <= 1'd1;
                            end else begin
                                if (main_sdram_choose_cmd_request[2]) begin
                                    main_sdram_choose_cmd_grant <= 2'd2;
                                end else begin
                                    if (main_sdram_choose_cmd_request[3]) begin
                                        main_sdram_choose_cmd_grant <= 2'd3;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[4]) begin
                                            main_sdram_choose_cmd_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_sdram_choose_cmd_request[7]) begin
                    main_sdram_choose_cmd_grant <= 3'd7;
                end else begin
                    if (main_sdram_choose_cmd_request[0]) begin
                        main_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (main_sdram_choose_cmd_request[1]) begin
                            main_sdram_choose_cmd_grant <= 1'd1;
                        end else begin
                            if (main_sdram_choose_cmd_request[2]) begin
                                main_sdram_choose_cmd_grant <= 2'd2;
                            end else begin
                                if (main_sdram_choose_cmd_request[3]) begin
                                    main_sdram_choose_cmd_grant <= 2'd3;
                                end else begin
                                    if (main_sdram_choose_cmd_request[4]) begin
                                        main_sdram_choose_cmd_grant <= 3'd4;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[5]) begin
                                            main_sdram_choose_cmd_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_sdram_choose_cmd_request[0]) begin
                    main_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (main_sdram_choose_cmd_request[1]) begin
                        main_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (main_sdram_choose_cmd_request[2]) begin
                            main_sdram_choose_cmd_grant <= 2'd2;
                        end else begin
                            if (main_sdram_choose_cmd_request[3]) begin
                                main_sdram_choose_cmd_grant <= 2'd3;
                            end else begin
                                if (main_sdram_choose_cmd_request[4]) begin
                                    main_sdram_choose_cmd_grant <= 3'd4;
                                end else begin
                                    if (main_sdram_choose_cmd_request[5]) begin
                                        main_sdram_choose_cmd_grant <= 3'd5;
                                    end else begin
                                        if (main_sdram_choose_cmd_request[6]) begin
                                            main_sdram_choose_cmd_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (main_sdram_choose_req_ce) begin
        case (main_sdram_choose_req_grant)
            1'd0: begin
                if (main_sdram_choose_req_request[1]) begin
                    main_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (main_sdram_choose_req_request[2]) begin
                        main_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (main_sdram_choose_req_request[3]) begin
                            main_sdram_choose_req_grant <= 2'd3;
                        end else begin
                            if (main_sdram_choose_req_request[4]) begin
                                main_sdram_choose_req_grant <= 3'd4;
                            end else begin
                                if (main_sdram_choose_req_request[5]) begin
                                    main_sdram_choose_req_grant <= 3'd5;
                                end else begin
                                    if (main_sdram_choose_req_request[6]) begin
                                        main_sdram_choose_req_grant <= 3'd6;
                                    end else begin
                                        if (main_sdram_choose_req_request[7]) begin
                                            main_sdram_choose_req_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_sdram_choose_req_request[2]) begin
                    main_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (main_sdram_choose_req_request[3]) begin
                        main_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (main_sdram_choose_req_request[4]) begin
                            main_sdram_choose_req_grant <= 3'd4;
                        end else begin
                            if (main_sdram_choose_req_request[5]) begin
                                main_sdram_choose_req_grant <= 3'd5;
                            end else begin
                                if (main_sdram_choose_req_request[6]) begin
                                    main_sdram_choose_req_grant <= 3'd6;
                                end else begin
                                    if (main_sdram_choose_req_request[7]) begin
                                        main_sdram_choose_req_grant <= 3'd7;
                                    end else begin
                                        if (main_sdram_choose_req_request[0]) begin
                                            main_sdram_choose_req_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_sdram_choose_req_request[3]) begin
                    main_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (main_sdram_choose_req_request[4]) begin
                        main_sdram_choose_req_grant <= 3'd4;
                    end else begin
                        if (main_sdram_choose_req_request[5]) begin
                            main_sdram_choose_req_grant <= 3'd5;
                        end else begin
                            if (main_sdram_choose_req_request[6]) begin
                                main_sdram_choose_req_grant <= 3'd6;
                            end else begin
                                if (main_sdram_choose_req_request[7]) begin
                                    main_sdram_choose_req_grant <= 3'd7;
                                end else begin
                                    if (main_sdram_choose_req_request[0]) begin
                                        main_sdram_choose_req_grant <= 1'd0;
                                    end else begin
                                        if (main_sdram_choose_req_request[1]) begin
                                            main_sdram_choose_req_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_sdram_choose_req_request[4]) begin
                    main_sdram_choose_req_grant <= 3'd4;
                end else begin
                    if (main_sdram_choose_req_request[5]) begin
                        main_sdram_choose_req_grant <= 3'd5;
                    end else begin
                        if (main_sdram_choose_req_request[6]) begin
                            main_sdram_choose_req_grant <= 3'd6;
                        end else begin
                            if (main_sdram_choose_req_request[7]) begin
                                main_sdram_choose_req_grant <= 3'd7;
                            end else begin
                                if (main_sdram_choose_req_request[0]) begin
                                    main_sdram_choose_req_grant <= 1'd0;
                                end else begin
                                    if (main_sdram_choose_req_request[1]) begin
                                        main_sdram_choose_req_grant <= 1'd1;
                                    end else begin
                                        if (main_sdram_choose_req_request[2]) begin
                                            main_sdram_choose_req_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_sdram_choose_req_request[5]) begin
                    main_sdram_choose_req_grant <= 3'd5;
                end else begin
                    if (main_sdram_choose_req_request[6]) begin
                        main_sdram_choose_req_grant <= 3'd6;
                    end else begin
                        if (main_sdram_choose_req_request[7]) begin
                            main_sdram_choose_req_grant <= 3'd7;
                        end else begin
                            if (main_sdram_choose_req_request[0]) begin
                                main_sdram_choose_req_grant <= 1'd0;
                            end else begin
                                if (main_sdram_choose_req_request[1]) begin
                                    main_sdram_choose_req_grant <= 1'd1;
                                end else begin
                                    if (main_sdram_choose_req_request[2]) begin
                                        main_sdram_choose_req_grant <= 2'd2;
                                    end else begin
                                        if (main_sdram_choose_req_request[3]) begin
                                            main_sdram_choose_req_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_sdram_choose_req_request[6]) begin
                    main_sdram_choose_req_grant <= 3'd6;
                end else begin
                    if (main_sdram_choose_req_request[7]) begin
                        main_sdram_choose_req_grant <= 3'd7;
                    end else begin
                        if (main_sdram_choose_req_request[0]) begin
                            main_sdram_choose_req_grant <= 1'd0;
                        end else begin
                            if (main_sdram_choose_req_request[1]) begin
                                main_sdram_choose_req_grant <= 1'd1;
                            end else begin
                                if (main_sdram_choose_req_request[2]) begin
                                    main_sdram_choose_req_grant <= 2'd2;
                                end else begin
                                    if (main_sdram_choose_req_request[3]) begin
                                        main_sdram_choose_req_grant <= 2'd3;
                                    end else begin
                                        if (main_sdram_choose_req_request[4]) begin
                                            main_sdram_choose_req_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_sdram_choose_req_request[7]) begin
                    main_sdram_choose_req_grant <= 3'd7;
                end else begin
                    if (main_sdram_choose_req_request[0]) begin
                        main_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (main_sdram_choose_req_request[1]) begin
                            main_sdram_choose_req_grant <= 1'd1;
                        end else begin
                            if (main_sdram_choose_req_request[2]) begin
                                main_sdram_choose_req_grant <= 2'd2;
                            end else begin
                                if (main_sdram_choose_req_request[3]) begin
                                    main_sdram_choose_req_grant <= 2'd3;
                                end else begin
                                    if (main_sdram_choose_req_request[4]) begin
                                        main_sdram_choose_req_grant <= 3'd4;
                                    end else begin
                                        if (main_sdram_choose_req_request[5]) begin
                                            main_sdram_choose_req_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_sdram_choose_req_request[0]) begin
                    main_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (main_sdram_choose_req_request[1]) begin
                        main_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (main_sdram_choose_req_request[2]) begin
                            main_sdram_choose_req_grant <= 2'd2;
                        end else begin
                            if (main_sdram_choose_req_request[3]) begin
                                main_sdram_choose_req_grant <= 2'd3;
                            end else begin
                                if (main_sdram_choose_req_request[4]) begin
                                    main_sdram_choose_req_grant <= 3'd4;
                                end else begin
                                    if (main_sdram_choose_req_request[5]) begin
                                        main_sdram_choose_req_grant <= 3'd5;
                                    end else begin
                                        if (main_sdram_choose_req_request[6]) begin
                                            main_sdram_choose_req_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    main_sdram_dfi_p0_cs_n <= 1'd0;
    main_sdram_dfi_p0_bank <= builder_sync_array_muxed0;
    main_sdram_dfi_p0_address <= builder_sync_array_muxed1;
    main_sdram_dfi_p0_cas_n <= (~builder_sync_array_muxed2);
    main_sdram_dfi_p0_ras_n <= (~builder_sync_array_muxed3);
    main_sdram_dfi_p0_we_n <= (~builder_sync_array_muxed4);
    main_sdram_dfi_p0_rddata_en <= builder_sync_array_muxed5;
    main_sdram_dfi_p0_wrdata_en <= builder_sync_array_muxed6;
    main_sdram_dfi_p1_cs_n <= 1'd0;
    main_sdram_dfi_p1_bank <= builder_sync_array_muxed7;
    main_sdram_dfi_p1_address <= builder_sync_array_muxed8;
    main_sdram_dfi_p1_cas_n <= (~builder_sync_array_muxed9);
    main_sdram_dfi_p1_ras_n <= (~builder_sync_array_muxed10);
    main_sdram_dfi_p1_we_n <= (~builder_sync_array_muxed11);
    main_sdram_dfi_p1_rddata_en <= builder_sync_array_muxed12;
    main_sdram_dfi_p1_wrdata_en <= builder_sync_array_muxed13;
    main_sdram_dfi_p2_cs_n <= 1'd0;
    main_sdram_dfi_p2_bank <= builder_sync_array_muxed14;
    main_sdram_dfi_p2_address <= builder_sync_array_muxed15;
    main_sdram_dfi_p2_cas_n <= (~builder_sync_array_muxed16);
    main_sdram_dfi_p2_ras_n <= (~builder_sync_array_muxed17);
    main_sdram_dfi_p2_we_n <= (~builder_sync_array_muxed18);
    main_sdram_dfi_p2_rddata_en <= builder_sync_array_muxed19;
    main_sdram_dfi_p2_wrdata_en <= builder_sync_array_muxed20;
    main_sdram_dfi_p3_cs_n <= 1'd0;
    main_sdram_dfi_p3_bank <= builder_sync_array_muxed21;
    main_sdram_dfi_p3_address <= builder_sync_array_muxed22;
    main_sdram_dfi_p3_cas_n <= (~builder_sync_array_muxed23);
    main_sdram_dfi_p3_ras_n <= (~builder_sync_array_muxed24);
    main_sdram_dfi_p3_we_n <= (~builder_sync_array_muxed25);
    main_sdram_dfi_p3_rddata_en <= builder_sync_array_muxed26;
    main_sdram_dfi_p3_wrdata_en <= builder_sync_array_muxed27;
    if (main_sdram_trrdcon_valid) begin
        main_sdram_trrdcon_count <= 1'd1;
        if (1'd0) begin
            main_sdram_trrdcon_ready <= 1'd1;
        end else begin
            main_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_trrdcon_ready)) begin
            main_sdram_trrdcon_count <= (main_sdram_trrdcon_count - 1'd1);
            if ((main_sdram_trrdcon_count == 1'd1)) begin
                main_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    main_sdram_tfawcon_window <= {main_sdram_tfawcon_window, main_sdram_tfawcon_valid};
    if ((main_sdram_tfawcon_count < 3'd4)) begin
        if ((main_sdram_tfawcon_count == 2'd3)) begin
            main_sdram_tfawcon_ready <= (~main_sdram_tfawcon_valid);
        end else begin
            main_sdram_tfawcon_ready <= 1'd1;
        end
    end
    if (main_sdram_tccdcon_valid) begin
        main_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            main_sdram_tccdcon_ready <= 1'd1;
        end else begin
            main_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_tccdcon_ready)) begin
            main_sdram_tccdcon_count <= (main_sdram_tccdcon_count - 1'd1);
            if ((main_sdram_tccdcon_count == 1'd1)) begin
                main_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_twtrcon_valid) begin
        main_sdram_twtrcon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_twtrcon_ready <= 1'd1;
        end else begin
            main_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_twtrcon_ready)) begin
            main_sdram_twtrcon_count <= (main_sdram_twtrcon_count - 1'd1);
            if ((main_sdram_twtrcon_count == 1'd1)) begin
                main_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_multiplexer_state <= builder_basesoc_multiplexer_next_state;
    builder_basesoc_new_master_wdata_ready0 <= ((((((((1'd0 | ((builder_basesoc_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_wdata_ready)) | ((builder_basesoc_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_wdata_ready)) | ((builder_basesoc_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_wdata_ready)) | ((builder_basesoc_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_wdata_ready)) | ((builder_basesoc_roundrobin4_grant == 1'd0) & main_sdram_interface_bank4_wdata_ready)) | ((builder_basesoc_roundrobin5_grant == 1'd0) & main_sdram_interface_bank5_wdata_ready)) | ((builder_basesoc_roundrobin6_grant == 1'd0) & main_sdram_interface_bank6_wdata_ready)) | ((builder_basesoc_roundrobin7_grant == 1'd0) & main_sdram_interface_bank7_wdata_ready));
    builder_basesoc_new_master_wdata_ready1 <= builder_basesoc_new_master_wdata_ready0;
    builder_basesoc_new_master_rdata_valid0 <= ((((((((1'd0 | ((builder_basesoc_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_rdata_valid)) | ((builder_basesoc_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_rdata_valid)) | ((builder_basesoc_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_rdata_valid)) | ((builder_basesoc_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_rdata_valid)) | ((builder_basesoc_roundrobin4_grant == 1'd0) & main_sdram_interface_bank4_rdata_valid)) | ((builder_basesoc_roundrobin5_grant == 1'd0) & main_sdram_interface_bank5_rdata_valid)) | ((builder_basesoc_roundrobin6_grant == 1'd0) & main_sdram_interface_bank6_rdata_valid)) | ((builder_basesoc_roundrobin7_grant == 1'd0) & main_sdram_interface_bank7_rdata_valid));
    builder_basesoc_new_master_rdata_valid1 <= builder_basesoc_new_master_rdata_valid0;
    builder_basesoc_new_master_rdata_valid2 <= builder_basesoc_new_master_rdata_valid1;
    builder_basesoc_new_master_rdata_valid3 <= builder_basesoc_new_master_rdata_valid2;
    builder_basesoc_new_master_rdata_valid4 <= builder_basesoc_new_master_rdata_valid3;
    builder_basesoc_new_master_rdata_valid5 <= builder_basesoc_new_master_rdata_valid4;
    builder_basesoc_new_master_rdata_valid6 <= builder_basesoc_new_master_rdata_valid5;
    builder_basesoc_new_master_rdata_valid7 <= builder_basesoc_new_master_rdata_valid6;
    builder_basesoc_new_master_rdata_valid8 <= builder_basesoc_new_master_rdata_valid7;
    if (main_write_w_buffer_queue) begin
        if ((~main_write_w_buffer_dequeue)) begin
            main_write_w_buffer_level2 <= (main_write_w_buffer_level2 + 1'd1);
        end
    end else begin
        if (main_write_w_buffer_dequeue) begin
            main_write_w_buffer_level2 <= (main_write_w_buffer_level2 - 1'd1);
        end
    end
    if (((~main_write_pipe_valid_source_valid) | main_write_pipe_valid_source_ready)) begin
        main_write_pipe_valid_source_valid <= main_write_pipe_valid_sink_valid;
        main_write_pipe_valid_source_first <= main_write_pipe_valid_sink_first;
        main_write_pipe_valid_source_last <= main_write_pipe_valid_sink_last;
        main_write_pipe_valid_source_payload_addr <= main_write_pipe_valid_sink_payload_addr;
        main_write_pipe_valid_source_payload_burst <= main_write_pipe_valid_sink_payload_burst;
        main_write_pipe_valid_source_payload_len <= main_write_pipe_valid_sink_payload_len;
        main_write_pipe_valid_source_payload_size <= main_write_pipe_valid_sink_payload_size;
        main_write_pipe_valid_source_payload_lock <= main_write_pipe_valid_sink_payload_lock;
        main_write_pipe_valid_source_payload_prot <= main_write_pipe_valid_sink_payload_prot;
        main_write_pipe_valid_source_payload_cache <= main_write_pipe_valid_sink_payload_cache;
        main_write_pipe_valid_source_payload_qos <= main_write_pipe_valid_sink_payload_qos;
        main_write_pipe_valid_source_payload_region <= main_write_pipe_valid_sink_payload_region;
        main_write_pipe_valid_source_param_id <= main_write_pipe_valid_sink_param_id;
        main_write_pipe_valid_source_param_dest <= main_write_pipe_valid_sink_param_dest;
        main_write_pipe_valid_source_param_user <= main_write_pipe_valid_sink_param_user;
    end
    if ((main_write_aw_valid & main_write_aw_ready)) begin
        if (main_write_aw_last) begin
            main_write_beat_count <= 1'd0;
            main_write_beat_offset <= 1'd0;
        end else begin
            main_write_beat_count <= (main_write_beat_count + 1'd1);
            if ((((main_write_source_source_payload_burst == 1'd1) & 1'd1) | ((main_write_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_write_beat_offset <= (main_write_beat_offset + $signed({1'd0, main_write_beat_size}));
            end
        end
        if (((main_write_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_write_aw_payload_addr & main_write_beat_wrap) == main_write_beat_wrap)) begin
                main_write_beat_offset <= (main_write_beat_offset - $signed({1'd0, main_write_beat_wrap}));
            end
        end
    end
    if (main_write_w_buffer_syncfifo_re) begin
        main_write_w_buffer_readable <= 1'd1;
    end else begin
        if (main_write_w_buffer_re) begin
            main_write_w_buffer_readable <= 1'd0;
        end
    end
    if (((main_write_w_buffer_syncfifo_we & main_write_w_buffer_syncfifo_writable) & (~main_write_w_buffer_replace))) begin
        main_write_w_buffer_produce <= (main_write_w_buffer_produce + 1'd1);
    end
    if (main_write_w_buffer_do_read) begin
        main_write_w_buffer_consume <= (main_write_w_buffer_consume + 1'd1);
    end
    if (((main_write_w_buffer_syncfifo_we & main_write_w_buffer_syncfifo_writable) & (~main_write_w_buffer_replace))) begin
        if ((~main_write_w_buffer_do_read)) begin
            main_write_w_buffer_level0 <= (main_write_w_buffer_level0 + 1'd1);
        end
    end else begin
        if (main_write_w_buffer_do_read) begin
            main_write_w_buffer_level0 <= (main_write_w_buffer_level0 - 1'd1);
        end
    end
    if (((main_write_id_buffer_syncfifo_we & main_write_id_buffer_syncfifo_writable) & (~main_write_id_buffer_replace))) begin
        main_write_id_buffer_produce <= (main_write_id_buffer_produce + 1'd1);
    end
    if (main_write_id_buffer_do_read) begin
        main_write_id_buffer_consume <= (main_write_id_buffer_consume + 1'd1);
    end
    if (((main_write_id_buffer_syncfifo_we & main_write_id_buffer_syncfifo_writable) & (~main_write_id_buffer_replace))) begin
        if ((~main_write_id_buffer_do_read)) begin
            main_write_id_buffer_level <= (main_write_id_buffer_level + 1'd1);
        end
    end else begin
        if (main_write_id_buffer_do_read) begin
            main_write_id_buffer_level <= (main_write_id_buffer_level - 1'd1);
        end
    end
    if (((main_write_resp_buffer_syncfifo_we & main_write_resp_buffer_syncfifo_writable) & (~main_write_resp_buffer_replace))) begin
        main_write_resp_buffer_produce <= (main_write_resp_buffer_produce + 1'd1);
    end
    if (main_write_resp_buffer_do_read) begin
        main_write_resp_buffer_consume <= (main_write_resp_buffer_consume + 1'd1);
    end
    if (((main_write_resp_buffer_syncfifo_we & main_write_resp_buffer_syncfifo_writable) & (~main_write_resp_buffer_replace))) begin
        if ((~main_write_resp_buffer_do_read)) begin
            main_write_resp_buffer_level <= (main_write_resp_buffer_level + 1'd1);
        end
    end else begin
        if (main_write_resp_buffer_do_read) begin
            main_write_resp_buffer_level <= (main_write_resp_buffer_level - 1'd1);
        end
    end
    if (main_read_r_buffer_queue) begin
        if ((~main_read_r_buffer_dequeue)) begin
            main_read_r_buffer_level2 <= (main_read_r_buffer_level2 + 1'd1);
        end
    end else begin
        if (main_read_r_buffer_dequeue) begin
            main_read_r_buffer_level2 <= (main_read_r_buffer_level2 - 1'd1);
        end
    end
    if (((~main_read_pipe_valid_source_valid) | main_read_pipe_valid_source_ready)) begin
        main_read_pipe_valid_source_valid <= main_read_pipe_valid_sink_valid;
        main_read_pipe_valid_source_first <= main_read_pipe_valid_sink_first;
        main_read_pipe_valid_source_last <= main_read_pipe_valid_sink_last;
        main_read_pipe_valid_source_payload_addr <= main_read_pipe_valid_sink_payload_addr;
        main_read_pipe_valid_source_payload_burst <= main_read_pipe_valid_sink_payload_burst;
        main_read_pipe_valid_source_payload_len <= main_read_pipe_valid_sink_payload_len;
        main_read_pipe_valid_source_payload_size <= main_read_pipe_valid_sink_payload_size;
        main_read_pipe_valid_source_payload_lock <= main_read_pipe_valid_sink_payload_lock;
        main_read_pipe_valid_source_payload_prot <= main_read_pipe_valid_sink_payload_prot;
        main_read_pipe_valid_source_payload_cache <= main_read_pipe_valid_sink_payload_cache;
        main_read_pipe_valid_source_payload_qos <= main_read_pipe_valid_sink_payload_qos;
        main_read_pipe_valid_source_payload_region <= main_read_pipe_valid_sink_payload_region;
        main_read_pipe_valid_source_param_id <= main_read_pipe_valid_sink_param_id;
        main_read_pipe_valid_source_param_dest <= main_read_pipe_valid_sink_param_dest;
        main_read_pipe_valid_source_param_user <= main_read_pipe_valid_sink_param_user;
    end
    if ((main_read_ar_valid & main_read_ar_ready)) begin
        if (main_read_ar_last) begin
            main_read_beat_count <= 1'd0;
            main_read_beat_offset <= 1'd0;
        end else begin
            main_read_beat_count <= (main_read_beat_count + 1'd1);
            if ((((main_read_source_source_payload_burst == 1'd1) & 1'd1) | ((main_read_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_read_beat_offset <= (main_read_beat_offset + $signed({1'd0, main_read_beat_size}));
            end
        end
        if (((main_read_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_read_ar_payload_addr & main_read_beat_wrap) == main_read_beat_wrap)) begin
                main_read_beat_offset <= (main_read_beat_offset - $signed({1'd0, main_read_beat_wrap}));
            end
        end
    end
    if (main_read_r_buffer_syncfifo_re) begin
        main_read_r_buffer_readable <= 1'd1;
    end else begin
        if (main_read_r_buffer_re) begin
            main_read_r_buffer_readable <= 1'd0;
        end
    end
    if (((main_read_r_buffer_syncfifo_we & main_read_r_buffer_syncfifo_writable) & (~main_read_r_buffer_replace))) begin
        main_read_r_buffer_produce <= (main_read_r_buffer_produce + 1'd1);
    end
    if (main_read_r_buffer_do_read) begin
        main_read_r_buffer_consume <= (main_read_r_buffer_consume + 1'd1);
    end
    if (((main_read_r_buffer_syncfifo_we & main_read_r_buffer_syncfifo_writable) & (~main_read_r_buffer_replace))) begin
        if ((~main_read_r_buffer_do_read)) begin
            main_read_r_buffer_level0 <= (main_read_r_buffer_level0 + 1'd1);
        end
    end else begin
        if (main_read_r_buffer_do_read) begin
            main_read_r_buffer_level0 <= (main_read_r_buffer_level0 - 1'd1);
        end
    end
    if (((main_read_id_buffer_syncfifo_we & main_read_id_buffer_syncfifo_writable) & (~main_read_id_buffer_replace))) begin
        main_read_id_buffer_produce <= (main_read_id_buffer_produce + 1'd1);
    end
    if (main_read_id_buffer_do_read) begin
        main_read_id_buffer_consume <= (main_read_id_buffer_consume + 1'd1);
    end
    if (((main_read_id_buffer_syncfifo_we & main_read_id_buffer_syncfifo_writable) & (~main_read_id_buffer_replace))) begin
        if ((~main_read_id_buffer_do_read)) begin
            main_read_id_buffer_level <= (main_read_id_buffer_level + 1'd1);
        end
    end else begin
        if (main_read_id_buffer_do_read) begin
            main_read_id_buffer_level <= (main_read_id_buffer_level - 1'd1);
        end
    end
    if (main_ce) begin
        case (main_grant)
            1'd0: begin
                if (main_request[1]) begin
                    main_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (main_request[0]) begin
                    main_grant <= 1'd0;
                end
            end
        endcase
    end
    main_v7_1000basex_tx_mmcm_reset0 <= (~main_v7_1000basex_pll_lock);
    if (main_v7_1000basex_rx_reset) begin
        main_v7_1000basex_cdr_locked <= 1'd0;
        main_v7_1000basex_cdr_lock_counter <= 1'd0;
    end else begin
        if ((main_v7_1000basex_cdr_lock_counter != 13'd5000)) begin
            main_v7_1000basex_cdr_lock_counter <= (main_v7_1000basex_cdr_lock_counter + 1'd1);
        end else begin
            main_v7_1000basex_cdr_locked <= 1'd1;
        end
    end
    main_v7_1000basex_rx_mmcm_reset0 <= (~main_v7_1000basex_cdr_locked);
    if (main_v7_1000basex_register_spdm_converter_source_ready) begin
        main_v7_1000basex_register_spdm_converter_strobe_all <= 1'd0;
    end
    if (main_v7_1000basex_register_spdm_converter_load_part) begin
        if (((main_v7_1000basex_register_spdm_converter_demux == 2'd3) | main_v7_1000basex_register_spdm_converter_sink_last)) begin
            main_v7_1000basex_register_spdm_converter_demux <= 1'd0;
            main_v7_1000basex_register_spdm_converter_strobe_all <= 1'd1;
        end else begin
            main_v7_1000basex_register_spdm_converter_demux <= (main_v7_1000basex_register_spdm_converter_demux + 1'd1);
        end
    end
    if ((main_v7_1000basex_register_spdm_converter_source_valid & main_v7_1000basex_register_spdm_converter_source_ready)) begin
        if ((main_v7_1000basex_register_spdm_converter_sink_valid & main_v7_1000basex_register_spdm_converter_sink_ready)) begin
            main_v7_1000basex_register_spdm_converter_source_first <= main_v7_1000basex_register_spdm_converter_sink_first;
            main_v7_1000basex_register_spdm_converter_source_last <= main_v7_1000basex_register_spdm_converter_sink_last;
        end else begin
            main_v7_1000basex_register_spdm_converter_source_first <= 1'd0;
            main_v7_1000basex_register_spdm_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_v7_1000basex_register_spdm_converter_sink_valid & main_v7_1000basex_register_spdm_converter_sink_ready)) begin
            main_v7_1000basex_register_spdm_converter_source_first <= (main_v7_1000basex_register_spdm_converter_sink_first | main_v7_1000basex_register_spdm_converter_source_first);
            main_v7_1000basex_register_spdm_converter_source_last <= (main_v7_1000basex_register_spdm_converter_sink_last | main_v7_1000basex_register_spdm_converter_source_last);
        end
    end
    if (main_v7_1000basex_register_spdm_converter_load_part) begin
        case (main_v7_1000basex_register_spdm_converter_demux)
            1'd0: begin
                main_v7_1000basex_register_spdm_converter_source_payload_data[1:0] <= main_v7_1000basex_register_spdm_converter_sink_payload_data;
            end
            1'd1: begin
                main_v7_1000basex_register_spdm_converter_source_payload_data[3:2] <= main_v7_1000basex_register_spdm_converter_sink_payload_data;
            end
            2'd2: begin
                main_v7_1000basex_register_spdm_converter_source_payload_data[5:4] <= main_v7_1000basex_register_spdm_converter_sink_payload_data;
            end
            2'd3: begin
                main_v7_1000basex_register_spdm_converter_source_payload_data[7:6] <= main_v7_1000basex_register_spdm_converter_sink_payload_data;
            end
        endcase
    end
    if (main_v7_1000basex_register_spdm_converter_load_part) begin
        main_v7_1000basex_register_spdm_converter_source_payload_valid_token_count <= (main_v7_1000basex_register_spdm_converter_demux + 1'd1);
    end
    if (main_v7_1000basex_register_spdm_reset) begin
        main_v7_1000basex_register_spdm_converter_source_payload_data <= 8'd0;
        main_v7_1000basex_register_spdm_converter_source_payload_valid_token_count <= 3'd0;
        main_v7_1000basex_register_spdm_converter_demux <= 2'd0;
        main_v7_1000basex_register_spdm_converter_strobe_all <= 1'd0;
    end
    main_v7_1000basex_gthtxinit_Xxphaligndone_r <= main_v7_1000basex_gthtxinit_Xxphaligndone1;
    main_v7_1000basex_gthtxinit_gtXxreset0 <= main_v7_1000basex_gthtxinit_gtXxreset1;
    main_v7_1000basex_gthtxinit_gtXxpd0 <= main_v7_1000basex_gthtxinit_gtXxpd1;
    main_v7_1000basex_gthtxinit_Xxdlysreset0 <= main_v7_1000basex_gthtxinit_Xxdlysreset1;
    main_v7_1000basex_gthtxinit_Xxuserrdy0 <= main_v7_1000basex_gthtxinit_Xxuserrdy1;
    builder_basesoc_gthtxinit_state <= builder_basesoc_gthtxinit_next_state;
    if (main_v7_1000basex_gthtxinit_reset) begin
        builder_basesoc_gthtxinit_state <= 4'd0;
    end
    if (main_v7_1000basex_gthtxinit_cdr_lock_timer_wait) begin
        if ((~main_v7_1000basex_gthtxinit_cdr_lock_timer_done)) begin
            main_v7_1000basex_gthtxinit_cdr_lock_timer_count <= (main_v7_1000basex_gthtxinit_cdr_lock_timer_count - 1'd1);
        end
    end else begin
        main_v7_1000basex_gthtxinit_cdr_lock_timer_count <= 11'd1024;
    end
    if (main_v7_1000basex_gthtxinit_watchdog_wait) begin
        if ((~main_v7_1000basex_gthtxinit_watchdog_done)) begin
            main_v7_1000basex_gthtxinit_watchdog_count <= (main_v7_1000basex_gthtxinit_watchdog_count - 1'd1);
        end
    end else begin
        main_v7_1000basex_gthtxinit_watchdog_count <= 17'd125000;
    end
    if (main_v7_1000basex_tx_init_reset) begin
        main_v7_1000basex_gthtxinit_gtXxreset0 <= 1'd0;
        main_v7_1000basex_gthtxinit_gtXxpd0 <= 1'd0;
        main_v7_1000basex_gthtxinit_Xxdlysreset0 <= 1'd0;
        main_v7_1000basex_gthtxinit_Xxuserrdy0 <= 1'd0;
        main_v7_1000basex_gthtxinit_Xxphaligndone_r <= 1'd1;
        main_v7_1000basex_gthtxinit_cdr_lock_timer_count <= 11'd1024;
        main_v7_1000basex_gthtxinit_watchdog_count <= 17'd125000;
        builder_basesoc_gthtxinit_state <= 4'd0;
    end
    main_v7_1000basex_gthrxinit_Xxphaligndone_r <= main_v7_1000basex_gthrxinit_Xxphaligndone1;
    main_v7_1000basex_gthrxinit_gtXxreset0 <= main_v7_1000basex_gthrxinit_gtXxreset1;
    main_v7_1000basex_gthrxinit_gtXxpd0 <= main_v7_1000basex_gthrxinit_gtXxpd1;
    main_v7_1000basex_gthrxinit_Xxdlysreset0 <= main_v7_1000basex_gthrxinit_Xxdlysreset1;
    main_v7_1000basex_gthrxinit_Xxuserrdy0 <= main_v7_1000basex_gthrxinit_Xxuserrdy1;
    builder_basesoc_gthrxinit_state <= builder_basesoc_gthrxinit_next_state;
    if (main_v7_1000basex_gthrxinit_reset) begin
        builder_basesoc_gthrxinit_state <= 4'd0;
    end
    if (main_v7_1000basex_gthrxinit_cdr_lock_timer_wait) begin
        if ((~main_v7_1000basex_gthrxinit_cdr_lock_timer_done)) begin
            main_v7_1000basex_gthrxinit_cdr_lock_timer_count <= (main_v7_1000basex_gthrxinit_cdr_lock_timer_count - 1'd1);
        end
    end else begin
        main_v7_1000basex_gthrxinit_cdr_lock_timer_count <= 11'd1024;
    end
    if (main_v7_1000basex_gthrxinit_watchdog_wait) begin
        if ((~main_v7_1000basex_gthrxinit_watchdog_done)) begin
            main_v7_1000basex_gthrxinit_watchdog_count <= (main_v7_1000basex_gthrxinit_watchdog_count - 1'd1);
        end
    end else begin
        main_v7_1000basex_gthrxinit_watchdog_count <= 17'd125000;
    end
    if (main_v7_1000basex_rx_init_reset) begin
        main_v7_1000basex_gthrxinit_gtXxreset0 <= 1'd0;
        main_v7_1000basex_gthrxinit_gtXxpd0 <= 1'd0;
        main_v7_1000basex_gthrxinit_Xxdlysreset0 <= 1'd0;
        main_v7_1000basex_gthrxinit_Xxuserrdy0 <= 1'd0;
        main_v7_1000basex_gthrxinit_Xxphaligndone_r <= 1'd1;
        main_v7_1000basex_gthrxinit_cdr_lock_timer_count <= 11'd1024;
        main_v7_1000basex_gthrxinit_watchdog_count <= 17'd125000;
        builder_basesoc_gthrxinit_state <= 4'd0;
    end
    main_v7_1000basex_toggle_o_r <= main_v7_1000basex_toggle_o;
    main_ethmac_tx_cdc_cdc_graycounter0_q_binary <= main_ethmac_tx_cdc_cdc_graycounter0_q_next_binary;
    main_ethmac_tx_cdc_cdc_graycounter0_q <= main_ethmac_tx_cdc_cdc_graycounter0_q_next;
    if (main_ethmac_pulsesynchronizer0_o) begin
        main_ethmac_preamble_errors_status <= (main_ethmac_preamble_errors_status + 1'd1);
    end
    if (main_ethmac_pulsesynchronizer1_o) begin
        main_ethmac_crc_errors_status <= (main_ethmac_crc_errors_status + 1'd1);
    end
    main_ethmac_pulsesynchronizer0_toggle_o_r <= main_ethmac_pulsesynchronizer0_toggle_o;
    main_ethmac_pulsesynchronizer1_toggle_o_r <= main_ethmac_pulsesynchronizer1_toggle_o;
    main_ethmac_rx_cdc_cdc_graycounter1_q_binary <= main_ethmac_rx_cdc_cdc_graycounter1_q_next_binary;
    main_ethmac_rx_cdc_cdc_graycounter1_q <= main_ethmac_rx_cdc_cdc_graycounter1_q_next;
    if (((main_ethmac_sram49_we & main_ethmac_sram50_writable) & (~main_ethmac_sram56_replace))) begin
        main_ethmac_sram57_produce <= (main_ethmac_sram57_produce + 1'd1);
    end
    if (main_ethmac_sram63_do_read) begin
        main_ethmac_sram58_consume <= (main_ethmac_sram58_consume + 1'd1);
    end
    if (((main_ethmac_sram49_we & main_ethmac_sram50_writable) & (~main_ethmac_sram56_replace))) begin
        if ((~main_ethmac_sram63_do_read)) begin
            main_ethmac_sram55_level <= (main_ethmac_sram55_level + 1'd1);
        end
    end else begin
        if (main_ethmac_sram63_do_read) begin
            main_ethmac_sram55_level <= (main_ethmac_sram55_level - 1'd1);
        end
    end
    builder_basesoc_liteethmacsramwriter_state <= builder_basesoc_liteethmacsramwriter_next_state;
    if (main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value_ce) begin
        main_ethmac_sram35_length <= main_ethmac_sram35_length_clockdomainsrenamer_liteethmacsramwriter_t_next_value;
    end
    if (main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value_ce) begin
        main_ethmac_sram13_status <= main_ethmac_sram13_status_clockdomainsrenamer_liteethmacsramwriter_f_next_value;
    end
    if (main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value_ce) begin
        main_ethmac_slot <= main_ethmac_slot_clockdomainsrenamer_liteethmacsramwriter_next_value;
    end
    if (main_ethmac_sram108_clear) begin
        main_ethmac_sram106_pending <= 1'd0;
    end
    if (main_ethmac_sram107_trigger) begin
        main_ethmac_sram106_pending <= 1'd1;
    end
    if (((main_ethmac_sram135_we & main_ethmac_sram136_writable) & (~main_ethmac_sram142_replace))) begin
        main_ethmac_sram143_produce <= (main_ethmac_sram143_produce + 1'd1);
    end
    if (main_ethmac_sram149_do_read) begin
        main_ethmac_sram144_consume <= (main_ethmac_sram144_consume + 1'd1);
    end
    if (((main_ethmac_sram135_we & main_ethmac_sram136_writable) & (~main_ethmac_sram142_replace))) begin
        if ((~main_ethmac_sram149_do_read)) begin
            main_ethmac_sram141_level <= (main_ethmac_sram141_level + 1'd1);
        end
    end else begin
        if (main_ethmac_sram149_do_read) begin
            main_ethmac_sram141_level <= (main_ethmac_sram141_level - 1'd1);
        end
    end
    builder_basesoc_liteethmacsramreader_state <= builder_basesoc_liteethmacsramreader_next_state;
    if (main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value_ce) begin
        main_ethmac_sram122_length <= main_ethmac_sram122_length_clockdomainsrenamer_liteethmacsramreader_next_value;
    end
    main_ethmac_interface0_ack <= 1'd0;
    if (((main_ethmac_interface0_cyc & main_ethmac_interface0_stb) & ((~main_ethmac_interface0_ack) | main_ethmac_sram0_adr_burst))) begin
        main_ethmac_interface0_ack <= 1'd1;
    end
    main_ethmac_interface1_ack <= 1'd0;
    if (((main_ethmac_interface1_cyc & main_ethmac_interface1_stb) & ((~main_ethmac_interface1_ack) | main_ethmac_sram1_adr_burst))) begin
        main_ethmac_interface1_ack <= 1'd1;
    end
    main_ethmac_interface2_ack <= 1'd0;
    if (((main_ethmac_interface2_cyc & main_ethmac_interface2_stb) & ((~main_ethmac_interface2_ack) | main_ethmac_sram2_adr_burst))) begin
        main_ethmac_interface2_ack <= 1'd1;
    end
    main_ethmac_interface3_ack <= 1'd0;
    if (((main_ethmac_interface3_cyc & main_ethmac_interface3_stb) & ((~main_ethmac_interface3_ack) | main_ethmac_sram3_adr_burst))) begin
        main_ethmac_interface3_ack <= 1'd1;
    end
    main_ethmac_slave_sel_r <= main_ethmac_slave_sel;
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser[1])};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 25'd31250000;
    end
    builder_basesoc_axilite2csr_state <= builder_basesoc_axilite2csr_next_state;
    if (builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce0) begin
        builder_basesoc_port_dat_r_latched <= builder_basesoc_port_dat_r_latched_axilite2csr_next_value0;
    end
    if (builder_basesoc_last_was_read_axilite2csr_next_value_ce1) begin
        builder_basesoc_last_was_read <= builder_basesoc_last_was_read_axilite2csr_next_value1;
    end
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_rst0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dly_sel0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_half_sys8x_taps0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_wlevel_en0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_wlevel_strobe_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_cdly_rst_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_cdly_inc_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_rdly_dq_rst_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_rdly_dq_inc_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_rdly_dq_bitslip_rst_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_rdly_dq_bitslip_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_wdly_dq_rst_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_wdly_dq_inc_w;
            end
            4'd13: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_wdly_dqs_rst_w;
            end
            4'd14: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_wdly_dqs_inc_w;
            end
            4'd15: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_wdly_dq_bitslip_rst_w;
            end
            5'd16: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= main_v7ddrphy_wdly_dq_bitslip_w;
            end
            5'd17: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_rdphase0_w;
            end
            5'd18: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_wrphase0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_rst0_re) begin
        main_v7ddrphy_rst_storage <= builder_csr_bankarray_csrbank1_rst0_r;
    end
    main_v7ddrphy_rst_re <= builder_csr_bankarray_csrbank1_rst0_re;
    if (builder_csr_bankarray_csrbank1_dly_sel0_re) begin
        main_v7ddrphy_dly_sel_storage[7:0] <= builder_csr_bankarray_csrbank1_dly_sel0_r;
    end
    main_v7ddrphy_dly_sel_re <= builder_csr_bankarray_csrbank1_dly_sel0_re;
    if (builder_csr_bankarray_csrbank1_half_sys8x_taps0_re) begin
        main_v7ddrphy_half_sys8x_taps_storage[4:0] <= builder_csr_bankarray_csrbank1_half_sys8x_taps0_r;
    end
    main_v7ddrphy_half_sys8x_taps_re <= builder_csr_bankarray_csrbank1_half_sys8x_taps0_re;
    if (builder_csr_bankarray_csrbank1_wlevel_en0_re) begin
        main_v7ddrphy_wlevel_en_storage <= builder_csr_bankarray_csrbank1_wlevel_en0_r;
    end
    main_v7ddrphy_wlevel_en_re <= builder_csr_bankarray_csrbank1_wlevel_en0_re;
    if (builder_csr_bankarray_csrbank1_rdphase0_re) begin
        main_v7ddrphy_rdphase_storage[1:0] <= builder_csr_bankarray_csrbank1_rdphase0_r;
    end
    main_v7ddrphy_rdphase_re <= builder_csr_bankarray_csrbank1_rdphase0_re;
    if (builder_csr_bankarray_csrbank1_wrphase0_re) begin
        main_v7ddrphy_wrphase_storage[1:0] <= builder_csr_bankarray_csrbank1_wrphase0_r;
    end
    main_v7ddrphy_wrphase_re <= builder_csr_bankarray_csrbank1_wrphase0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_writer_slot_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_writer_length_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_writer_errors_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_writer_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_writer_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= main_ethmac_start_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_reader_ready_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_reader_level_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_reader_slot0_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_reader_length0_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_reader_ev_status_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_reader_ev_pending_w;
            end
            4'd13: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_w;
            end
            4'd14: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_preamble_crc_w;
            end
            4'd15: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_w;
            end
            5'd16: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_w;
            end
        endcase
    end
    main_ethmac_sram9_re <= builder_csr_bankarray_csrbank2_sram_writer_slot_re;
    main_ethmac_sram12_re <= builder_csr_bankarray_csrbank2_sram_writer_length_re;
    main_ethmac_sram15_re <= builder_csr_bankarray_csrbank2_sram_writer_errors_re;
    main_ethmac_sram24_re <= builder_csr_bankarray_csrbank2_sram_writer_ev_status_re;
    if (builder_csr_bankarray_csrbank2_sram_writer_ev_pending_re) begin
        main_ethmac_sram29_r <= builder_csr_bankarray_csrbank2_sram_writer_ev_pending_r;
    end
    main_ethmac_sram28_re <= builder_csr_bankarray_csrbank2_sram_writer_ev_pending_re;
    if (builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_re) begin
        main_ethmac_sram31_storage <= builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_r;
    end
    main_ethmac_sram32_re <= builder_csr_bankarray_csrbank2_sram_writer_ev_enable0_re;
    main_ethmac_sram96_re <= builder_csr_bankarray_csrbank2_sram_reader_ready_re;
    main_ethmac_sram99_re <= builder_csr_bankarray_csrbank2_sram_reader_level_re;
    if (builder_csr_bankarray_csrbank2_sram_reader_slot0_re) begin
        main_ethmac_sram100_storage <= builder_csr_bankarray_csrbank2_sram_reader_slot0_r;
    end
    main_ethmac_sram101_re <= builder_csr_bankarray_csrbank2_sram_reader_slot0_re;
    if (builder_csr_bankarray_csrbank2_sram_reader_length0_re) begin
        main_ethmac_sram102_storage[10:0] <= builder_csr_bankarray_csrbank2_sram_reader_length0_r;
    end
    main_ethmac_sram103_re <= builder_csr_bankarray_csrbank2_sram_reader_length0_re;
    main_ethmac_sram112_re <= builder_csr_bankarray_csrbank2_sram_reader_ev_status_re;
    if (builder_csr_bankarray_csrbank2_sram_reader_ev_pending_re) begin
        main_ethmac_sram117_r <= builder_csr_bankarray_csrbank2_sram_reader_ev_pending_r;
    end
    main_ethmac_sram116_re <= builder_csr_bankarray_csrbank2_sram_reader_ev_pending_re;
    if (builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_re) begin
        main_ethmac_sram119_storage <= builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_r;
    end
    main_ethmac_sram120_re <= builder_csr_bankarray_csrbank2_sram_reader_ev_enable0_re;
    main_ethmac_re <= builder_csr_bankarray_csrbank2_preamble_crc_re;
    main_ethmac_preamble_errors_re <= builder_csr_bankarray_csrbank2_rx_datapath_preamble_errors_re;
    main_ethmac_crc_errors_re <= builder_csr_bankarray_csrbank2_rx_datapath_crc_errors_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_reset0_w;
            end
        endcase
    end
   if (builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_re) begin
        main_v7_1000basex_register_spdm_register_SPDM_storage[31:0] <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_r;
    end
    main_v7_1000basex_register_spdm_register_SPDM_re <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_register0_re;
    main_v7_1000basex_register_spdm_register_SPDM_2_storage[31:0] <= spdm_output;
    main_v7_1000basex_register_spdm_register_SPDM_2_re <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_register_20_re;
    if (builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_re) begin
        main_v7_1000basex_register_spdm_register_SPDM_3_storage[31:0] <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_r;
    end
    main_v7_1000basex_register_spdm_register_SPDM_3_re <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_requester_control0_re;
    main_v7_1000basex_register_spdm_register_SPDM_4_storage[31:0] <= spdm_control;
    main_v7_1000basex_register_spdm_register_SPDM_4_re <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_responder_control0_re;
    if (builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_re) begin
        main_v7_1000basex_register_spdm_register_SPDM_5_storage[4:0] <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_r[4:0];
        main_v7_1000basex_register_spdm_register_SPDM_5_storage[7:6] <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_r[7:6];
        main_v7_1000basex_register_spdm_register_SPDM_5_storage[5] <= spdm_wait;       
    end
    main_v7_1000basex_register_spdm_register_SPDM_5_storage[5] <= spdm_wait;
    main_v7_1000basex_register_spdm_register_SPDM_5_re <= builder_csr_bankarray_csrbank3_register_spdm_SPDM_FIFO0_re;
    if (builder_csr_bankarray_csrbank3_reset0_re) begin
        main_v7_1000basex_storage <= builder_csr_bankarray_csrbank3_reset0_r;
    end
    main_v7_1000basex_re <= builder_csr_bankarray_csrbank3_reset0_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_out0_re) begin
        main_storage[1:0] <= builder_csr_bankarray_csrbank4_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank4_out0_re;
    builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank5_sel) begin
        case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_control0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_command0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_sdram_phaseinjector0_command_issue_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_address0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_rddata3_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_rddata2_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_rddata1_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_w;
            end
            4'd13: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_command0_w;
            end
            4'd14: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_sdram_phaseinjector1_command_issue_w;
            end
            4'd15: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_address0_w;
            end
            5'd16: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_w;
            end
            5'd17: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_w;
            end
            5'd18: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_w;
            end
            5'd19: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_w;
            end
            5'd20: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_w;
            end
            5'd21: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_rddata3_w;
            end
            5'd22: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_rddata2_w;
            end
            5'd23: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_rddata1_w;
            end
            5'd24: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_w;
            end
            5'd25: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_command0_w;
            end
            5'd26: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_sdram_phaseinjector2_command_issue_w;
            end
            5'd27: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_address0_w;
            end
            5'd28: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_w;
            end
            5'd29: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_w;
            end
            5'd30: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_w;
            end
            5'd31: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_w;
            end
            6'd32: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_w;
            end
            6'd33: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_rddata3_w;
            end
            6'd34: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_rddata2_w;
            end
            6'd35: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_rddata1_w;
            end
            6'd36: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_w;
            end
            6'd37: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_command0_w;
            end
            6'd38: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_sdram_phaseinjector3_command_issue_w;
            end
            6'd39: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_address0_w;
            end
            6'd40: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_w;
            end
            6'd41: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_w;
            end
            6'd42: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_w;
            end
            6'd43: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_w;
            end
            6'd44: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_w;
            end
            6'd45: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_rddata3_w;
            end
            6'd46: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_rddata2_w;
            end
            6'd47: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_rddata1_w;
            end
            6'd48: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank5_dfii_control0_re) begin
        main_sdram_storage[3:0] <= builder_csr_bankarray_csrbank5_dfii_control0_r;
    end
    main_sdram_re <= builder_csr_bankarray_csrbank5_dfii_control0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi0_command0_re) begin
        main_sdram_phaseinjector0_command_storage[7:0] <= builder_csr_bankarray_csrbank5_dfii_pi0_command0_r;
    end
    main_sdram_phaseinjector0_command_re <= builder_csr_bankarray_csrbank5_dfii_pi0_command0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi0_address0_re) begin
        main_sdram_phaseinjector0_address_storage[15:0] <= builder_csr_bankarray_csrbank5_dfii_pi0_address0_r;
    end
    main_sdram_phaseinjector0_address_re <= builder_csr_bankarray_csrbank5_dfii_pi0_address0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_re) begin
        main_sdram_phaseinjector0_baddress_storage[2:0] <= builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_r;
    end
    main_sdram_phaseinjector0_baddress_re <= builder_csr_bankarray_csrbank5_dfii_pi0_baddress0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_re) begin
        main_sdram_phaseinjector0_wrdata_storage[127:96] <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata3_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_re) begin
        main_sdram_phaseinjector0_wrdata_storage[95:64] <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata2_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_re) begin
        main_sdram_phaseinjector0_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_re) begin
        main_sdram_phaseinjector0_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_r;
    end
    main_sdram_phaseinjector0_wrdata_re <= builder_csr_bankarray_csrbank5_dfii_pi0_wrdata0_re;
    main_sdram_phaseinjector0_rddata_re <= builder_csr_bankarray_csrbank5_dfii_pi0_rddata0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi1_command0_re) begin
        main_sdram_phaseinjector1_command_storage[7:0] <= builder_csr_bankarray_csrbank5_dfii_pi1_command0_r;
    end
    main_sdram_phaseinjector1_command_re <= builder_csr_bankarray_csrbank5_dfii_pi1_command0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi1_address0_re) begin
        main_sdram_phaseinjector1_address_storage[15:0] <= builder_csr_bankarray_csrbank5_dfii_pi1_address0_r;
    end
    main_sdram_phaseinjector1_address_re <= builder_csr_bankarray_csrbank5_dfii_pi1_address0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_re) begin
        main_sdram_phaseinjector1_baddress_storage[2:0] <= builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_r;
    end
    main_sdram_phaseinjector1_baddress_re <= builder_csr_bankarray_csrbank5_dfii_pi1_baddress0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_re) begin
        main_sdram_phaseinjector1_wrdata_storage[127:96] <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata3_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_re) begin
        main_sdram_phaseinjector1_wrdata_storage[95:64] <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata2_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_re) begin
        main_sdram_phaseinjector1_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_re) begin
        main_sdram_phaseinjector1_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_r;
    end
    main_sdram_phaseinjector1_wrdata_re <= builder_csr_bankarray_csrbank5_dfii_pi1_wrdata0_re;
    main_sdram_phaseinjector1_rddata_re <= builder_csr_bankarray_csrbank5_dfii_pi1_rddata0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi2_command0_re) begin
        main_sdram_phaseinjector2_command_storage[7:0] <= builder_csr_bankarray_csrbank5_dfii_pi2_command0_r;
    end
    main_sdram_phaseinjector2_command_re <= builder_csr_bankarray_csrbank5_dfii_pi2_command0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi2_address0_re) begin
        main_sdram_phaseinjector2_address_storage[15:0] <= builder_csr_bankarray_csrbank5_dfii_pi2_address0_r;
    end
    main_sdram_phaseinjector2_address_re <= builder_csr_bankarray_csrbank5_dfii_pi2_address0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_re) begin
        main_sdram_phaseinjector2_baddress_storage[2:0] <= builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_r;
    end
    main_sdram_phaseinjector2_baddress_re <= builder_csr_bankarray_csrbank5_dfii_pi2_baddress0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_re) begin
        main_sdram_phaseinjector2_wrdata_storage[127:96] <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata3_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_re) begin
        main_sdram_phaseinjector2_wrdata_storage[95:64] <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata2_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_re) begin
        main_sdram_phaseinjector2_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_re) begin
        main_sdram_phaseinjector2_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_r;
    end
    main_sdram_phaseinjector2_wrdata_re <= builder_csr_bankarray_csrbank5_dfii_pi2_wrdata0_re;
    main_sdram_phaseinjector2_rddata_re <= builder_csr_bankarray_csrbank5_dfii_pi2_rddata0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi3_command0_re) begin
        main_sdram_phaseinjector3_command_storage[7:0] <= builder_csr_bankarray_csrbank5_dfii_pi3_command0_r;
    end
    main_sdram_phaseinjector3_command_re <= builder_csr_bankarray_csrbank5_dfii_pi3_command0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi3_address0_re) begin
        main_sdram_phaseinjector3_address_storage[15:0] <= builder_csr_bankarray_csrbank5_dfii_pi3_address0_r;
    end
    main_sdram_phaseinjector3_address_re <= builder_csr_bankarray_csrbank5_dfii_pi3_address0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_re) begin
        main_sdram_phaseinjector3_baddress_storage[2:0] <= builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_r;
    end
    main_sdram_phaseinjector3_baddress_re <= builder_csr_bankarray_csrbank5_dfii_pi3_baddress0_re;
    if (builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_re) begin
        main_sdram_phaseinjector3_wrdata_storage[127:96] <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata3_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_re) begin
        main_sdram_phaseinjector3_wrdata_storage[95:64] <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata2_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_re) begin
        main_sdram_phaseinjector3_wrdata_storage[63:32] <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata1_r;
    end
    if (builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_re) begin
        main_sdram_phaseinjector3_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_r;
    end
    main_sdram_phaseinjector3_wrdata_re <= builder_csr_bankarray_csrbank5_dfii_pi3_wrdata0_re;
    main_sdram_phaseinjector3_rddata_re <= builder_csr_bankarray_csrbank5_dfii_pi3_rddata0_re;
    builder_csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank6_sel) begin
        case (builder_csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank6_load0_re) begin
        main_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank6_load0_r;
    end
    main_timer_load_re <= builder_csr_bankarray_csrbank6_load0_re;
    if (builder_csr_bankarray_csrbank6_reload0_re) begin
        main_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank6_reload0_r;
    end
    main_timer_reload_re <= builder_csr_bankarray_csrbank6_reload0_re;
    if (builder_csr_bankarray_csrbank6_en0_re) begin
        main_timer_en_storage <= builder_csr_bankarray_csrbank6_en0_r;
    end
    main_timer_en_re <= builder_csr_bankarray_csrbank6_en0_re;
    if (builder_csr_bankarray_csrbank6_update_value0_re) begin
        main_timer_update_value_storage <= builder_csr_bankarray_csrbank6_update_value0_r;
    end
    main_timer_update_value_re <= builder_csr_bankarray_csrbank6_update_value0_re;
    main_timer_value_re <= builder_csr_bankarray_csrbank6_value_re;
    main_timer_status_re <= builder_csr_bankarray_csrbank6_ev_status_re;
    if (builder_csr_bankarray_csrbank6_ev_pending_re) begin
        main_timer_pending_r <= builder_csr_bankarray_csrbank6_ev_pending_r;
    end
    main_timer_pending_re <= builder_csr_bankarray_csrbank6_ev_pending_re;
    if (builder_csr_bankarray_csrbank6_ev_enable0_re) begin
        main_timer_enable_storage <= builder_csr_bankarray_csrbank6_ev_enable0_r;
    end
    main_timer_enable_re <= builder_csr_bankarray_csrbank6_ev_enable0_re;
    builder_csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank7_sel) begin
        case (builder_csr_bankarray_interface7_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= main_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_rxfull_w;
            end
        endcase
    end
    main_uart_txfull_re <= builder_csr_bankarray_csrbank7_txfull_re;
    main_uart_rxempty_re <= builder_csr_bankarray_csrbank7_rxempty_re;
    main_uart_status_re <= builder_csr_bankarray_csrbank7_ev_status_re;
    if (builder_csr_bankarray_csrbank7_ev_pending_re) begin
        main_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank7_ev_pending_r;
    end
    main_uart_pending_re <= builder_csr_bankarray_csrbank7_ev_pending_re;
    if (builder_csr_bankarray_csrbank7_ev_enable0_re) begin
        main_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank7_ev_enable0_r;
    end
    main_uart_enable_re <= builder_csr_bankarray_csrbank7_ev_enable0_re;
    main_uart_txempty_re <= builder_csr_bankarray_csrbank7_txempty_re;
    main_uart_rxfull_re <= builder_csr_bankarray_csrbank7_rxfull_re;
    if (sys_rst) begin
        main_reset_storage <= 2'd0;
        main_reset_re <= 1'd0;
        main_scratch_storage <= 32'd305419896;
        main_scratch_re <= 1'd0;
        main_bus_errors_re <= 1'd0;
        main_bus_errors <= 32'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_valid <= 1'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_addr <= 32'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_burst <= 2'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_len <= 8'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_size <= 3'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_lock <= 1'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_prot <= 3'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_cache <= 4'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_qos <= 4'd0;
        main_rocket_mmio_a2w_axi2axi_lite_pipe_valid_source_payload_region <= 4'd0;
        main_rocket_mmio_a2w_axi2axi_lite_beat_count <= 8'd0;
        main_rocket_mmio_a2w_axi2axi_lite_beat_offset <= 13'd0;
        main_rocket_mmio_a2w_axi2axi_lite_cmd_done <= 1'd0;
        main_rocket_mmio_a2w_axi2axi_lite_last_ar_aw_n <= 1'd0;
        main_rocket_mmio_a2w_axi_lite2wishbone_data <= 64'd0;
        main_rocket_mmio_a2w_axi_lite2wishbone_last_ar_aw_n <= 1'd0;
        main_rocket_l2fb_a2w_cmd_done <= 1'd0;
        main_rocket_l2fb_a2w_data_done <= 1'd0;
        main_socbushandler_count <= 1'd0;
        main_socbushandler_bridge_cmd_done <= 1'd0;
        main_socbushandler_bridge_data_done <= 1'd0;
        main_basesoc_last_was_read <= 1'd0;
        main_basesoc_port_dat_r_latched <= 32'd0;
        main_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        main_basesoc_socbushandler_beat_count <= 8'd0;
        main_basesoc_socbushandler_beat_offset <= 13'd0;
        main_basesoc_socbushandler_cmd_done <= 1'd0;
        main_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        main_ram_last_was_read <= 1'd0;
        main_ram_port_dat_r_latched <= 32'd0;
        main_socbushandler_pipe_valid_source_valid <= 1'd0;
        main_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        main_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        main_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        main_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        main_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        main_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        main_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        main_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        main_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        main_socbushandler_beat_count <= 8'd0;
        main_socbushandler_beat_offset <= 13'd0;
        main_socbushandler_cmd_done <= 1'd0;
        main_socbushandler_last_ar_aw_n <= 1'd0;
        serial_tx <= 1'd1;
        main_tx_tick <= 1'd0;
        main_rx_tick <= 1'd0;
        main_rx_rx_d <= 1'd0;
        main_uart_txfull_re <= 1'd0;
        main_uart_rxempty_re <= 1'd0;
        main_uart_tx_pending <= 1'd0;
        main_uart_tx_trigger_d <= 1'd0;
        main_uart_rx_pending <= 1'd0;
        main_uart_rx_trigger_d <= 1'd0;
        main_uart_status_re <= 1'd0;
        main_uart_pending_re <= 1'd0;
        main_uart_pending_r <= 2'd0;
        main_uart_enable_storage <= 2'd0;
        main_uart_enable_re <= 1'd0;
        main_uart_txempty_re <= 1'd0;
        main_uart_rxfull_re <= 1'd0;
        main_uart_tx_fifo_readable <= 1'd0;
        main_uart_tx_fifo_level0 <= 5'd0;
        main_uart_tx_fifo_produce <= 4'd0;
        main_uart_tx_fifo_consume <= 4'd0;
        main_uart_rx_fifo_readable <= 1'd0;
        main_uart_rx_fifo_level0 <= 5'd0;
        main_uart_rx_fifo_produce <= 4'd0;
        main_uart_rx_fifo_consume <= 4'd0;
        main_timer_load_storage <= 32'd0;
        main_timer_load_re <= 1'd0;
        main_timer_reload_storage <= 32'd0;
        main_timer_reload_re <= 1'd0;
        main_timer_en_storage <= 1'd0;
        main_timer_en_re <= 1'd0;
        main_timer_update_value_storage <= 1'd0;
        main_timer_update_value_re <= 1'd0;
        main_timer_value_status <= 32'd0;
        main_timer_value_re <= 1'd0;
        main_timer_zero_pending <= 1'd0;
        main_timer_zero_trigger_d <= 1'd0;
        main_timer_status_re <= 1'd0;
        main_timer_pending_re <= 1'd0;
        main_timer_pending_r <= 1'd0;
        main_timer_enable_storage <= 1'd0;
        main_timer_enable_re <= 1'd0;
        main_timer_value <= 32'd0;
        main_v7ddrphy_rst_storage <= 1'd0;
        main_v7ddrphy_rst_re <= 1'd0;
        main_v7ddrphy_dly_sel_storage <= 8'd0;
        main_v7ddrphy_dly_sel_re <= 1'd0;
        main_v7ddrphy_half_sys8x_taps_storage <= 5'd6;
        main_v7ddrphy_half_sys8x_taps_re <= 1'd0;
        main_v7ddrphy_wlevel_en_storage <= 1'd0;
        main_v7ddrphy_wlevel_en_re <= 1'd0;
        main_v7ddrphy_rdphase_storage <= 2'd1;
        main_v7ddrphy_rdphase_re <= 1'd0;
        main_v7ddrphy_wrphase_storage <= 2'd2;
        main_v7ddrphy_wrphase_re <= 1'd0;
        main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        main_v7ddrphy_bitslip0_value0 <= 3'd7;
        main_v7ddrphy_bitslip1_value0 <= 3'd7;
        main_v7ddrphy_bitslip2_value0 <= 3'd7;
        main_v7ddrphy_bitslip3_value0 <= 3'd7;
        main_v7ddrphy_bitslip4_value0 <= 3'd7;
        main_v7ddrphy_bitslip5_value0 <= 3'd7;
        main_v7ddrphy_bitslip6_value0 <= 3'd7;
        main_v7ddrphy_bitslip7_value0 <= 3'd7;
        main_v7ddrphy_bitslip0_value1 <= 3'd7;
        main_v7ddrphy_bitslip1_value1 <= 3'd7;
        main_v7ddrphy_bitslip2_value1 <= 3'd7;
        main_v7ddrphy_bitslip3_value1 <= 3'd7;
        main_v7ddrphy_bitslip4_value1 <= 3'd7;
        main_v7ddrphy_bitslip5_value1 <= 3'd7;
        main_v7ddrphy_bitslip6_value1 <= 3'd7;
        main_v7ddrphy_bitslip7_value1 <= 3'd7;
        main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        main_v7ddrphy_bitslip0_value2 <= 3'd7;
        main_v7ddrphy_bitslip0_value3 <= 3'd7;
        main_v7ddrphy_bitslip1_value2 <= 3'd7;
        main_v7ddrphy_bitslip1_value3 <= 3'd7;
        main_v7ddrphy_bitslip2_value2 <= 3'd7;
        main_v7ddrphy_bitslip2_value3 <= 3'd7;
        main_v7ddrphy_bitslip3_value2 <= 3'd7;
        main_v7ddrphy_bitslip3_value3 <= 3'd7;
        main_v7ddrphy_bitslip4_value2 <= 3'd7;
        main_v7ddrphy_bitslip4_value3 <= 3'd7;
        main_v7ddrphy_bitslip5_value2 <= 3'd7;
        main_v7ddrphy_bitslip5_value3 <= 3'd7;
        main_v7ddrphy_bitslip6_value2 <= 3'd7;
        main_v7ddrphy_bitslip6_value3 <= 3'd7;
        main_v7ddrphy_bitslip7_value2 <= 3'd7;
        main_v7ddrphy_bitslip7_value3 <= 3'd7;
        main_v7ddrphy_bitslip8_value0 <= 3'd7;
        main_v7ddrphy_bitslip8_value1 <= 3'd7;
        main_v7ddrphy_bitslip9_value0 <= 3'd7;
        main_v7ddrphy_bitslip9_value1 <= 3'd7;
        main_v7ddrphy_bitslip10_value0 <= 3'd7;
        main_v7ddrphy_bitslip10_value1 <= 3'd7;
        main_v7ddrphy_bitslip11_value0 <= 3'd7;
        main_v7ddrphy_bitslip11_value1 <= 3'd7;
        main_v7ddrphy_bitslip12_value0 <= 3'd7;
        main_v7ddrphy_bitslip12_value1 <= 3'd7;
        main_v7ddrphy_bitslip13_value0 <= 3'd7;
        main_v7ddrphy_bitslip13_value1 <= 3'd7;
        main_v7ddrphy_bitslip14_value0 <= 3'd7;
        main_v7ddrphy_bitslip14_value1 <= 3'd7;
        main_v7ddrphy_bitslip15_value0 <= 3'd7;
        main_v7ddrphy_bitslip15_value1 <= 3'd7;
        main_v7ddrphy_bitslip16_value0 <= 3'd7;
        main_v7ddrphy_bitslip16_value1 <= 3'd7;
        main_v7ddrphy_bitslip17_value0 <= 3'd7;
        main_v7ddrphy_bitslip17_value1 <= 3'd7;
        main_v7ddrphy_bitslip18_value0 <= 3'd7;
        main_v7ddrphy_bitslip18_value1 <= 3'd7;
        main_v7ddrphy_bitslip19_value0 <= 3'd7;
        main_v7ddrphy_bitslip19_value1 <= 3'd7;
        main_v7ddrphy_bitslip20_value0 <= 3'd7;
        main_v7ddrphy_bitslip20_value1 <= 3'd7;
        main_v7ddrphy_bitslip21_value0 <= 3'd7;
        main_v7ddrphy_bitslip21_value1 <= 3'd7;
        main_v7ddrphy_bitslip22_value0 <= 3'd7;
        main_v7ddrphy_bitslip22_value1 <= 3'd7;
        main_v7ddrphy_bitslip23_value0 <= 3'd7;
        main_v7ddrphy_bitslip23_value1 <= 3'd7;
        main_v7ddrphy_bitslip24_value0 <= 3'd7;
        main_v7ddrphy_bitslip24_value1 <= 3'd7;
        main_v7ddrphy_bitslip25_value0 <= 3'd7;
        main_v7ddrphy_bitslip25_value1 <= 3'd7;
        main_v7ddrphy_bitslip26_value0 <= 3'd7;
        main_v7ddrphy_bitslip26_value1 <= 3'd7;
        main_v7ddrphy_bitslip27_value0 <= 3'd7;
        main_v7ddrphy_bitslip27_value1 <= 3'd7;
        main_v7ddrphy_bitslip28_value0 <= 3'd7;
        main_v7ddrphy_bitslip28_value1 <= 3'd7;
        main_v7ddrphy_bitslip29_value0 <= 3'd7;
        main_v7ddrphy_bitslip29_value1 <= 3'd7;
        main_v7ddrphy_bitslip30_value0 <= 3'd7;
        main_v7ddrphy_bitslip30_value1 <= 3'd7;
        main_v7ddrphy_bitslip31_value0 <= 3'd7;
        main_v7ddrphy_bitslip31_value1 <= 3'd7;
        main_v7ddrphy_bitslip32_value0 <= 3'd7;
        main_v7ddrphy_bitslip32_value1 <= 3'd7;
        main_v7ddrphy_bitslip33_value0 <= 3'd7;
        main_v7ddrphy_bitslip33_value1 <= 3'd7;
        main_v7ddrphy_bitslip34_value0 <= 3'd7;
        main_v7ddrphy_bitslip34_value1 <= 3'd7;
        main_v7ddrphy_bitslip35_value0 <= 3'd7;
        main_v7ddrphy_bitslip35_value1 <= 3'd7;
        main_v7ddrphy_bitslip36_value0 <= 3'd7;
        main_v7ddrphy_bitslip36_value1 <= 3'd7;
        main_v7ddrphy_bitslip37_value0 <= 3'd7;
        main_v7ddrphy_bitslip37_value1 <= 3'd7;
        main_v7ddrphy_bitslip38_value0 <= 3'd7;
        main_v7ddrphy_bitslip38_value1 <= 3'd7;
        main_v7ddrphy_bitslip39_value0 <= 3'd7;
        main_v7ddrphy_bitslip39_value1 <= 3'd7;
        main_v7ddrphy_bitslip40_value0 <= 3'd7;
        main_v7ddrphy_bitslip40_value1 <= 3'd7;
        main_v7ddrphy_bitslip41_value0 <= 3'd7;
        main_v7ddrphy_bitslip41_value1 <= 3'd7;
        main_v7ddrphy_bitslip42_value0 <= 3'd7;
        main_v7ddrphy_bitslip42_value1 <= 3'd7;
        main_v7ddrphy_bitslip43_value0 <= 3'd7;
        main_v7ddrphy_bitslip43_value1 <= 3'd7;
        main_v7ddrphy_bitslip44_value0 <= 3'd7;
        main_v7ddrphy_bitslip44_value1 <= 3'd7;
        main_v7ddrphy_bitslip45_value0 <= 3'd7;
        main_v7ddrphy_bitslip45_value1 <= 3'd7;
        main_v7ddrphy_bitslip46_value0 <= 3'd7;
        main_v7ddrphy_bitslip46_value1 <= 3'd7;
        main_v7ddrphy_bitslip47_value0 <= 3'd7;
        main_v7ddrphy_bitslip47_value1 <= 3'd7;
        main_v7ddrphy_bitslip48_value0 <= 3'd7;
        main_v7ddrphy_bitslip48_value1 <= 3'd7;
        main_v7ddrphy_bitslip49_value0 <= 3'd7;
        main_v7ddrphy_bitslip49_value1 <= 3'd7;
        main_v7ddrphy_bitslip50_value0 <= 3'd7;
        main_v7ddrphy_bitslip50_value1 <= 3'd7;
        main_v7ddrphy_bitslip51_value0 <= 3'd7;
        main_v7ddrphy_bitslip51_value1 <= 3'd7;
        main_v7ddrphy_bitslip52_value0 <= 3'd7;
        main_v7ddrphy_bitslip52_value1 <= 3'd7;
        main_v7ddrphy_bitslip53_value0 <= 3'd7;
        main_v7ddrphy_bitslip53_value1 <= 3'd7;
        main_v7ddrphy_bitslip54_value0 <= 3'd7;
        main_v7ddrphy_bitslip54_value1 <= 3'd7;
        main_v7ddrphy_bitslip55_value0 <= 3'd7;
        main_v7ddrphy_bitslip55_value1 <= 3'd7;
        main_v7ddrphy_bitslip56_value0 <= 3'd7;
        main_v7ddrphy_bitslip56_value1 <= 3'd7;
        main_v7ddrphy_bitslip57_value0 <= 3'd7;
        main_v7ddrphy_bitslip57_value1 <= 3'd7;
        main_v7ddrphy_bitslip58_value0 <= 3'd7;
        main_v7ddrphy_bitslip58_value1 <= 3'd7;
        main_v7ddrphy_bitslip59_value0 <= 3'd7;
        main_v7ddrphy_bitslip59_value1 <= 3'd7;
        main_v7ddrphy_bitslip60_value0 <= 3'd7;
        main_v7ddrphy_bitslip60_value1 <= 3'd7;
        main_v7ddrphy_bitslip61_value0 <= 3'd7;
        main_v7ddrphy_bitslip61_value1 <= 3'd7;
        main_v7ddrphy_bitslip62_value0 <= 3'd7;
        main_v7ddrphy_bitslip62_value1 <= 3'd7;
        main_v7ddrphy_bitslip63_value0 <= 3'd7;
        main_v7ddrphy_bitslip63_value1 <= 3'd7;
        main_v7ddrphy_rddata_en_tappeddelayline0 <= 1'd0;
        main_v7ddrphy_rddata_en_tappeddelayline1 <= 1'd0;
        main_v7ddrphy_rddata_en_tappeddelayline2 <= 1'd0;
        main_v7ddrphy_rddata_en_tappeddelayline3 <= 1'd0;
        main_v7ddrphy_rddata_en_tappeddelayline4 <= 1'd0;
        main_v7ddrphy_rddata_en_tappeddelayline5 <= 1'd0;
        main_v7ddrphy_rddata_en_tappeddelayline6 <= 1'd0;
        main_v7ddrphy_rddata_en_tappeddelayline7 <= 1'd0;
        main_v7ddrphy_wrdata_en_tappeddelayline0 <= 1'd0;
        main_v7ddrphy_wrdata_en_tappeddelayline1 <= 1'd0;
        main_v7ddrphy_wrdata_en_tappeddelayline2 <= 1'd0;
        main_sdram_storage <= 4'd1;
        main_sdram_re <= 1'd0;
        main_sdram_phaseinjector0_command_storage <= 8'd0;
        main_sdram_phaseinjector0_command_re <= 1'd0;
        main_sdram_phaseinjector0_address_re <= 1'd0;
        main_sdram_phaseinjector0_baddress_re <= 1'd0;
        main_sdram_phaseinjector0_wrdata_re <= 1'd0;
        main_sdram_phaseinjector0_rddata_status <= 128'd0;
        main_sdram_phaseinjector0_rddata_re <= 1'd0;
        main_sdram_phaseinjector1_command_storage <= 8'd0;
        main_sdram_phaseinjector1_command_re <= 1'd0;
        main_sdram_phaseinjector1_address_re <= 1'd0;
        main_sdram_phaseinjector1_baddress_re <= 1'd0;
        main_sdram_phaseinjector1_wrdata_re <= 1'd0;
        main_sdram_phaseinjector1_rddata_status <= 128'd0;
        main_sdram_phaseinjector1_rddata_re <= 1'd0;
        main_sdram_phaseinjector2_command_storage <= 8'd0;
        main_sdram_phaseinjector2_command_re <= 1'd0;
        main_sdram_phaseinjector2_address_re <= 1'd0;
        main_sdram_phaseinjector2_baddress_re <= 1'd0;
        main_sdram_phaseinjector2_wrdata_re <= 1'd0;
        main_sdram_phaseinjector2_rddata_status <= 128'd0;
        main_sdram_phaseinjector2_rddata_re <= 1'd0;
        main_sdram_phaseinjector3_command_storage <= 8'd0;
        main_sdram_phaseinjector3_command_re <= 1'd0;
        main_sdram_phaseinjector3_address_re <= 1'd0;
        main_sdram_phaseinjector3_baddress_re <= 1'd0;
        main_sdram_phaseinjector3_wrdata_re <= 1'd0;
        main_sdram_phaseinjector3_rddata_status <= 128'd0;
        main_sdram_phaseinjector3_rddata_re <= 1'd0;
        main_sdram_dfi_p0_address <= 16'd0;
        main_sdram_dfi_p0_bank <= 3'd0;
        main_sdram_dfi_p0_cas_n <= 1'd1;
        main_sdram_dfi_p0_cs_n <= 1'd1;
        main_sdram_dfi_p0_ras_n <= 1'd1;
        main_sdram_dfi_p0_we_n <= 1'd1;
        main_sdram_dfi_p0_wrdata_en <= 1'd0;
        main_sdram_dfi_p0_rddata_en <= 1'd0;
        main_sdram_dfi_p1_address <= 16'd0;
        main_sdram_dfi_p1_bank <= 3'd0;
        main_sdram_dfi_p1_cas_n <= 1'd1;
        main_sdram_dfi_p1_cs_n <= 1'd1;
        main_sdram_dfi_p1_ras_n <= 1'd1;
        main_sdram_dfi_p1_we_n <= 1'd1;
        main_sdram_dfi_p1_wrdata_en <= 1'd0;
        main_sdram_dfi_p1_rddata_en <= 1'd0;
        main_sdram_dfi_p2_address <= 16'd0;
        main_sdram_dfi_p2_bank <= 3'd0;
        main_sdram_dfi_p2_cas_n <= 1'd1;
        main_sdram_dfi_p2_cs_n <= 1'd1;
        main_sdram_dfi_p2_ras_n <= 1'd1;
        main_sdram_dfi_p2_we_n <= 1'd1;
        main_sdram_dfi_p2_wrdata_en <= 1'd0;
        main_sdram_dfi_p2_rddata_en <= 1'd0;
        main_sdram_dfi_p3_address <= 16'd0;
        main_sdram_dfi_p3_bank <= 3'd0;
        main_sdram_dfi_p3_cas_n <= 1'd1;
        main_sdram_dfi_p3_cs_n <= 1'd1;
        main_sdram_dfi_p3_ras_n <= 1'd1;
        main_sdram_dfi_p3_we_n <= 1'd1;
        main_sdram_dfi_p3_wrdata_en <= 1'd0;
        main_sdram_dfi_p3_rddata_en <= 1'd0;
        main_sdram_cmd_payload_a <= 16'd0;
        main_sdram_cmd_payload_ba <= 3'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd0;
        main_sdram_timer_count1 <= 10'd976;
        main_sdram_postponer_req_o <= 1'd0;
        main_sdram_postponer_count <= 1'd0;
        main_sdram_sequencer_done1 <= 1'd0;
        main_sdram_sequencer_counter <= 6'd0;
        main_sdram_sequencer_count <= 1'd0;
        main_sdram_zqcs_timer_count1 <= 27'd124999999;
        main_sdram_zqcs_executer_done <= 1'd0;
        main_sdram_zqcs_executer_counter <= 5'd0;
        main_sdram_bankmachine0_level <= 4'd0;
        main_sdram_bankmachine0_produce <= 3'd0;
        main_sdram_bankmachine0_consume <= 3'd0;
        main_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine0_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine0_row <= 16'd0;
        main_sdram_bankmachine0_row_opened <= 1'd0;
        main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine0_twtpcon_count <= 3'd0;
        main_sdram_bankmachine0_trccon_ready <= 1'd0;
        main_sdram_bankmachine0_trccon_count <= 3'd0;
        main_sdram_bankmachine0_trascon_ready <= 1'd0;
        main_sdram_bankmachine0_trascon_count <= 3'd0;
        main_sdram_bankmachine1_level <= 4'd0;
        main_sdram_bankmachine1_produce <= 3'd0;
        main_sdram_bankmachine1_consume <= 3'd0;
        main_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine1_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine1_row <= 16'd0;
        main_sdram_bankmachine1_row_opened <= 1'd0;
        main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine1_twtpcon_count <= 3'd0;
        main_sdram_bankmachine1_trccon_ready <= 1'd0;
        main_sdram_bankmachine1_trccon_count <= 3'd0;
        main_sdram_bankmachine1_trascon_ready <= 1'd0;
        main_sdram_bankmachine1_trascon_count <= 3'd0;
        main_sdram_bankmachine2_level <= 4'd0;
        main_sdram_bankmachine2_produce <= 3'd0;
        main_sdram_bankmachine2_consume <= 3'd0;
        main_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine2_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine2_row <= 16'd0;
        main_sdram_bankmachine2_row_opened <= 1'd0;
        main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine2_twtpcon_count <= 3'd0;
        main_sdram_bankmachine2_trccon_ready <= 1'd0;
        main_sdram_bankmachine2_trccon_count <= 3'd0;
        main_sdram_bankmachine2_trascon_ready <= 1'd0;
        main_sdram_bankmachine2_trascon_count <= 3'd0;
        main_sdram_bankmachine3_level <= 4'd0;
        main_sdram_bankmachine3_produce <= 3'd0;
        main_sdram_bankmachine3_consume <= 3'd0;
        main_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine3_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine3_row <= 16'd0;
        main_sdram_bankmachine3_row_opened <= 1'd0;
        main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine3_twtpcon_count <= 3'd0;
        main_sdram_bankmachine3_trccon_ready <= 1'd0;
        main_sdram_bankmachine3_trccon_count <= 3'd0;
        main_sdram_bankmachine3_trascon_ready <= 1'd0;
        main_sdram_bankmachine3_trascon_count <= 3'd0;
        main_sdram_bankmachine4_level <= 4'd0;
        main_sdram_bankmachine4_produce <= 3'd0;
        main_sdram_bankmachine4_consume <= 3'd0;
        main_sdram_bankmachine4_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine4_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine4_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine4_row <= 16'd0;
        main_sdram_bankmachine4_row_opened <= 1'd0;
        main_sdram_bankmachine4_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine4_twtpcon_count <= 3'd0;
        main_sdram_bankmachine4_trccon_ready <= 1'd0;
        main_sdram_bankmachine4_trccon_count <= 3'd0;
        main_sdram_bankmachine4_trascon_ready <= 1'd0;
        main_sdram_bankmachine4_trascon_count <= 3'd0;
        main_sdram_bankmachine5_level <= 4'd0;
        main_sdram_bankmachine5_produce <= 3'd0;
        main_sdram_bankmachine5_consume <= 3'd0;
        main_sdram_bankmachine5_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine5_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine5_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine5_row <= 16'd0;
        main_sdram_bankmachine5_row_opened <= 1'd0;
        main_sdram_bankmachine5_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine5_twtpcon_count <= 3'd0;
        main_sdram_bankmachine5_trccon_ready <= 1'd0;
        main_sdram_bankmachine5_trccon_count <= 3'd0;
        main_sdram_bankmachine5_trascon_ready <= 1'd0;
        main_sdram_bankmachine5_trascon_count <= 3'd0;
        main_sdram_bankmachine6_level <= 4'd0;
        main_sdram_bankmachine6_produce <= 3'd0;
        main_sdram_bankmachine6_consume <= 3'd0;
        main_sdram_bankmachine6_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine6_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine6_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine6_row <= 16'd0;
        main_sdram_bankmachine6_row_opened <= 1'd0;
        main_sdram_bankmachine6_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine6_twtpcon_count <= 3'd0;
        main_sdram_bankmachine6_trccon_ready <= 1'd0;
        main_sdram_bankmachine6_trccon_count <= 3'd0;
        main_sdram_bankmachine6_trascon_ready <= 1'd0;
        main_sdram_bankmachine6_trascon_count <= 3'd0;
        main_sdram_bankmachine7_level <= 4'd0;
        main_sdram_bankmachine7_produce <= 3'd0;
        main_sdram_bankmachine7_consume <= 3'd0;
        main_sdram_bankmachine7_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine7_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine7_pipe_valid_source_payload_addr <= 23'd0;
        main_sdram_bankmachine7_row <= 16'd0;
        main_sdram_bankmachine7_row_opened <= 1'd0;
        main_sdram_bankmachine7_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine7_twtpcon_count <= 3'd0;
        main_sdram_bankmachine7_trccon_ready <= 1'd0;
        main_sdram_bankmachine7_trccon_count <= 3'd0;
        main_sdram_bankmachine7_trascon_ready <= 1'd0;
        main_sdram_bankmachine7_trascon_count <= 3'd0;
        main_sdram_choose_cmd_grant <= 3'd0;
        main_sdram_choose_req_grant <= 3'd0;
        main_sdram_trrdcon_ready <= 1'd0;
        main_sdram_trrdcon_count <= 1'd0;
        main_sdram_tfawcon_ready <= 1'd1;
        main_sdram_tfawcon_window <= 5'd0;
        main_sdram_tccdcon_ready <= 1'd0;
        main_sdram_tccdcon_count <= 1'd0;
        main_sdram_twtrcon_ready <= 1'd0;
        main_sdram_twtrcon_count <= 3'd0;
        main_sdram_time0 <= 5'd0;
        main_sdram_time1 <= 4'd0;
        main_write_pipe_valid_source_valid <= 1'd0;
        main_write_pipe_valid_source_payload_addr <= 32'd0;
        main_write_pipe_valid_source_payload_burst <= 2'd0;
        main_write_pipe_valid_source_payload_len <= 8'd0;
        main_write_pipe_valid_source_payload_size <= 3'd0;
        main_write_pipe_valid_source_payload_lock <= 1'd0;
        main_write_pipe_valid_source_payload_prot <= 3'd0;
        main_write_pipe_valid_source_payload_cache <= 4'd0;
        main_write_pipe_valid_source_payload_qos <= 4'd0;
        main_write_pipe_valid_source_payload_region <= 4'd0;
        main_write_beat_count <= 8'd0;
        main_write_beat_offset <= 13'd0;
        main_write_w_buffer_readable <= 1'd0;
        main_write_w_buffer_level0 <= 5'd0;
        main_write_w_buffer_produce <= 4'd0;
        main_write_w_buffer_consume <= 4'd0;
        main_write_id_buffer_level <= 5'd0;
        main_write_id_buffer_produce <= 4'd0;
        main_write_id_buffer_consume <= 4'd0;
        main_write_resp_buffer_level <= 5'd0;
        main_write_resp_buffer_produce <= 4'd0;
        main_write_resp_buffer_consume <= 4'd0;
        main_write_w_buffer_level2 <= 5'd0;
        main_read_pipe_valid_source_valid <= 1'd0;
        main_read_pipe_valid_source_payload_addr <= 32'd0;
        main_read_pipe_valid_source_payload_burst <= 2'd0;
        main_read_pipe_valid_source_payload_len <= 8'd0;
        main_read_pipe_valid_source_payload_size <= 3'd0;
        main_read_pipe_valid_source_payload_lock <= 1'd0;
        main_read_pipe_valid_source_payload_prot <= 3'd0;
        main_read_pipe_valid_source_payload_cache <= 4'd0;
        main_read_pipe_valid_source_payload_qos <= 4'd0;
        main_read_pipe_valid_source_payload_region <= 4'd0;
        main_read_beat_count <= 8'd0;
        main_read_beat_offset <= 13'd0;
        main_read_r_buffer_readable <= 1'd0;
        main_read_r_buffer_level0 <= 5'd0;
        main_read_r_buffer_produce <= 4'd0;
        main_read_r_buffer_consume <= 4'd0;
        main_read_r_buffer_level2 <= 5'd0;
        main_read_id_buffer_level <= 5'd0;
        main_read_id_buffer_produce <= 4'd0;
        main_read_id_buffer_consume <= 4'd0;
        main_grant <= 1'd0;
        main_v7_1000basex_register_spdm_register_SPDM_storage <= 32'd0;
        main_v7_1000basex_register_spdm_register_SPDM_re <= 1'd0;
        main_v7_1000basex_register_spdm_register_SPDM_2_storage <= 32'd0;
        main_v7_1000basex_register_spdm_register_SPDM_2_re <= 1'd0;
        main_v7_1000basex_register_spdm_register_SPDM_3_storage <= 32'd0;
        main_v7_1000basex_register_spdm_register_SPDM_3_re <= 1'd0;
        main_v7_1000basex_register_spdm_register_SPDM_4_storage <= 32'd0;
        main_v7_1000basex_register_spdm_register_SPDM_4_re <= 1'd0;
        main_v7_1000basex_register_spdm_register_SPDM_5_storage <= 8'd0;
        main_v7_1000basex_register_spdm_register_SPDM_5_re <= 1'd0;
        main_v7_1000basex_register_spdm_converter_source_payload_data <= 8'd0;
        main_v7_1000basex_register_spdm_converter_source_payload_valid_token_count <= 3'd0;
        main_v7_1000basex_register_spdm_converter_demux <= 2'd0;
        main_v7_1000basex_register_spdm_converter_strobe_all <= 1'd0;
        main_v7_1000basex_storage <= 1'd0;
        main_v7_1000basex_re <= 1'd0;
        main_v7_1000basex_tx_mmcm_reset0 <= 1'd1;
        main_v7_1000basex_rx_mmcm_reset0 <= 1'd1;
        main_v7_1000basex_gthtxinit_gtXxreset0 <= 1'd0;
        main_v7_1000basex_gthtxinit_gtXxpd0 <= 1'd0;
        main_v7_1000basex_gthtxinit_Xxdlysreset0 <= 1'd0;
        main_v7_1000basex_gthtxinit_Xxuserrdy0 <= 1'd0;
        main_v7_1000basex_gthtxinit_Xxphaligndone_r <= 1'd1;
        main_v7_1000basex_gthtxinit_cdr_lock_timer_count <= 11'd1024;
        main_v7_1000basex_gthtxinit_watchdog_count <= 17'd125000;
        main_v7_1000basex_gthrxinit_gtXxreset0 <= 1'd0;
        main_v7_1000basex_gthrxinit_gtXxpd0 <= 1'd0;
        main_v7_1000basex_gthrxinit_Xxdlysreset0 <= 1'd0;
        main_v7_1000basex_gthrxinit_Xxuserrdy0 <= 1'd0;
        main_v7_1000basex_gthrxinit_Xxphaligndone_r <= 1'd1;
        main_v7_1000basex_gthrxinit_cdr_lock_timer_count <= 11'd1024;
        main_v7_1000basex_gthrxinit_watchdog_count <= 17'd125000;
        main_v7_1000basex_cdr_lock_counter <= 13'd0;
        main_v7_1000basex_cdr_locked <= 1'd0;
        main_ethmac_re <= 1'd0;
        main_ethmac_tx_cdc_cdc_graycounter0_q <= 6'd0;
        main_ethmac_tx_cdc_cdc_graycounter0_q_binary <= 6'd0;
        main_ethmac_preamble_errors_status <= 32'd0;
        main_ethmac_preamble_errors_re <= 1'd0;
        main_ethmac_crc_errors_status <= 32'd0;
        main_ethmac_crc_errors_re <= 1'd0;
        main_ethmac_rx_cdc_cdc_graycounter1_q <= 6'd0;
        main_ethmac_rx_cdc_cdc_graycounter1_q_binary <= 6'd0;
        main_ethmac_sram9_re <= 1'd0;
        main_ethmac_sram12_re <= 1'd0;
        main_ethmac_sram13_status <= 32'd0;
        main_ethmac_sram15_re <= 1'd0;
        main_ethmac_sram24_re <= 1'd0;
        main_ethmac_sram28_re <= 1'd0;
        main_ethmac_sram29_r <= 1'd0;
        main_ethmac_sram31_storage <= 1'd0;
        main_ethmac_sram32_re <= 1'd0;
        main_ethmac_slot <= 1'd0;
        main_ethmac_sram35_length <= 11'd0;
        main_ethmac_sram55_level <= 2'd0;
        main_ethmac_sram57_produce <= 1'd0;
        main_ethmac_sram58_consume <= 1'd0;
        main_ethmac_sram96_re <= 1'd0;
        main_ethmac_sram99_re <= 1'd0;
        main_ethmac_sram101_re <= 1'd0;
        main_ethmac_sram103_re <= 1'd0;
        main_ethmac_sram106_pending <= 1'd0;
        main_ethmac_sram112_re <= 1'd0;
        main_ethmac_sram116_re <= 1'd0;
        main_ethmac_sram117_r <= 1'd0;
        main_ethmac_sram119_storage <= 1'd0;
        main_ethmac_sram120_re <= 1'd0;
        main_ethmac_sram122_length <= 11'd0;
        main_ethmac_sram141_level <= 2'd0;
        main_ethmac_sram143_produce <= 1'd0;
        main_ethmac_sram144_consume <= 1'd0;
        main_ethmac_interface0_ack <= 1'd0;
        main_ethmac_interface1_ack <= 1'd0;
        main_ethmac_interface2_ack <= 1'd0;
        main_ethmac_interface3_ack <= 1'd0;
        main_ethmac_slave_sel_r <= 4'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_valid <= 1'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_addr <= 32'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_burst <= 2'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_len <= 8'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_size <= 3'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_lock <= 1'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_prot <= 3'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_cache <= 4'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_qos <= 4'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_region <= 4'd0;
        main_bridge_axi2axi_lite_beat_count <= 8'd0;
        main_bridge_axi2axi_lite_beat_offset <= 13'd0;
        main_bridge_axi2axi_lite_cmd_done <= 1'd0;
        main_bridge_axi2axi_lite_last_ar_aw_n <= 1'd0;
        main_bridge_axi_lite2wishbone_data <= 32'd0;
        main_bridge_axi_lite2wishbone_last_ar_aw_n <= 1'd0;
        main_storage <= 2'd0;
        main_re <= 1'd0;
        main_chaser <= 2'd0;
        main_mode <= 1'd0;
        main_count <= 25'd31250000;
        builder_basesoc_last_was_read <= 1'd0;
        builder_basesoc_port_dat_r_latched <= 32'd0;
        builder_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        builder_basesoc_socbushandler_beat_count <= 8'd0;
        builder_basesoc_socbushandler_beat_offset <= 13'd0;
        builder_basesoc_socbushandler_cmd_done <= 1'd0;
        builder_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        builder_wishbone2axi_state <= 2'd0;
        builder_axi2axilite0_state <= 2'd0;
        builder_axi2axilite1_state <= 2'd0;
        builder_axi2axilite_state <= 2'd0;
        builder_axilite2wishbone_state <= 3'd0;
        builder_axi2axilite2_state <= 2'd0;
        builder_wr_lock_counter <= 8'd0;
        builder_rd_lock_counter <= 8'd0;
        builder_slave_sel_reg0 <= 4'd0;
        builder_slave_sel_reg1 <= 4'd0;
        builder_axirequestcounter0_counter <= 8'd0;
        builder_axirequestcounter1_counter <= 8'd0;
        builder_wr_timer_count <= 20'd1000000;
        builder_rd_timer_count <= 20'd1000000;
        builder_fsm0_state <= 1'd0;
        builder_fsm1_state <= 1'd0;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_basesoc_rocket_axi2axilite_state <= 2'd0;
        builder_basesoc_rocket_axilite2wishbone_state <= 3'd0;
        builder_basesoc_rocket_state <= 2'd0;
        builder_basesoc_axilitesram0_state <= 2'd0;
        builder_basesoc_axilitesram1_state <= 2'd0;
        builder_basesoc_rs232phytx_state <= 1'd0;
        builder_basesoc_rs232phyrx_state <= 1'd0;
        builder_basesoc_refresher_state <= 2'd0;
        builder_basesoc_bankmachine0_state <= 4'd0;
        builder_basesoc_bankmachine1_state <= 4'd0;
        builder_basesoc_bankmachine2_state <= 4'd0;
        builder_basesoc_bankmachine3_state <= 4'd0;
        builder_basesoc_bankmachine4_state <= 4'd0;
        builder_basesoc_bankmachine5_state <= 4'd0;
        builder_basesoc_bankmachine6_state <= 4'd0;
        builder_basesoc_bankmachine7_state <= 4'd0;
        builder_basesoc_multiplexer_state <= 4'd0;
        builder_basesoc_new_master_wdata_ready0 <= 1'd0;
        builder_basesoc_new_master_wdata_ready1 <= 1'd0;
        builder_basesoc_new_master_rdata_valid0 <= 1'd0;
        builder_basesoc_new_master_rdata_valid1 <= 1'd0;
        builder_basesoc_new_master_rdata_valid2 <= 1'd0;
        builder_basesoc_new_master_rdata_valid3 <= 1'd0;
        builder_basesoc_new_master_rdata_valid4 <= 1'd0;
        builder_basesoc_new_master_rdata_valid5 <= 1'd0;
        builder_basesoc_new_master_rdata_valid6 <= 1'd0;
        builder_basesoc_new_master_rdata_valid7 <= 1'd0;
        builder_basesoc_new_master_rdata_valid8 <= 1'd0;
        builder_basesoc_gthtxinit_state <= 4'd0;
        builder_basesoc_gthrxinit_state <= 4'd0;
        builder_basesoc_liteethmacsramwriter_state <= 3'd0;
        builder_basesoc_liteethmacsramreader_state <= 2'd0;
        builder_basesoc_axilite2csr_state <= 2'd0;
    end
    builder_xilinxmultiregimpl0_regs0 <= serial_rx;
    builder_xilinxmultiregimpl0_regs1 <= builder_xilinxmultiregimpl0_regs0;
    builder_xilinxmultiregimpl7_regs0 <= main_v7_1000basex_gthtxinit_plllock0;
    builder_xilinxmultiregimpl7_regs1 <= builder_xilinxmultiregimpl7_regs0;
    builder_xilinxmultiregimpl8_regs0 <= main_v7_1000basex_gthtxinit_Xxresetdone0;
    builder_xilinxmultiregimpl8_regs1 <= builder_xilinxmultiregimpl8_regs0;
    builder_xilinxmultiregimpl9_regs0 <= main_v7_1000basex_gthtxinit_Xxdlysresetdone0;
    builder_xilinxmultiregimpl9_regs1 <= builder_xilinxmultiregimpl9_regs0;
    builder_xilinxmultiregimpl10_regs0 <= main_v7_1000basex_gthtxinit_Xxphaligndone0;
    builder_xilinxmultiregimpl10_regs1 <= builder_xilinxmultiregimpl10_regs0;
    builder_xilinxmultiregimpl11_regs0 <= main_v7_1000basex_gthrxinit_plllock0;
    builder_xilinxmultiregimpl11_regs1 <= builder_xilinxmultiregimpl11_regs0;
    builder_xilinxmultiregimpl12_regs0 <= main_v7_1000basex_gthrxinit_Xxresetdone0;
    builder_xilinxmultiregimpl12_regs1 <= builder_xilinxmultiregimpl12_regs0;
    builder_xilinxmultiregimpl13_regs0 <= main_v7_1000basex_gthrxinit_Xxdlysresetdone0;
    builder_xilinxmultiregimpl13_regs1 <= builder_xilinxmultiregimpl13_regs0;
    builder_xilinxmultiregimpl14_regs0 <= main_v7_1000basex_gthrxinit_Xxphaligndone0;
    builder_xilinxmultiregimpl14_regs1 <= builder_xilinxmultiregimpl14_regs0;
    builder_xilinxmultiregimpl15_regs0 <= main_v7_1000basex_toggle_i;
    builder_xilinxmultiregimpl15_regs1 <= builder_xilinxmultiregimpl15_regs0;
    builder_xilinxmultiregimpl17_regs0 <= main_ethmac_tx_cdc_cdc_graycounter1_q;
    builder_xilinxmultiregimpl17_regs1 <= builder_xilinxmultiregimpl17_regs0;
    builder_xilinxmultiregimpl18_regs0 <= main_ethmac_pulsesynchronizer0_toggle_i;
    builder_xilinxmultiregimpl18_regs1 <= builder_xilinxmultiregimpl18_regs0;
    builder_xilinxmultiregimpl19_regs0 <= main_ethmac_pulsesynchronizer1_toggle_i;
    builder_xilinxmultiregimpl19_regs1 <= builder_xilinxmultiregimpl19_regs0;
    builder_xilinxmultiregimpl20_regs0 <= main_ethmac_rx_cdc_cdc_graycounter0_q;
    builder_xilinxmultiregimpl20_regs1 <= builder_xilinxmultiregimpl20_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance BUFG of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG(
	// Inputs.
	.I (main_crg_clkout0),

	// Outputs.
	.O (main_crg_clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFG_1 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_1(
	// Inputs.
	.I (main_crg_clkout1),

	// Outputs.
	.O (main_crg_clkout_buf1)
);

//------------------------------------------------------------------------------
// Instance BUFG_2 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_2(
	// Inputs.
	.I (main_crg_clkout2),

	// Outputs.
	.O (main_crg_clkout_buf2)
);

//------------------------------------------------------------------------------
// Instance BUFG_3 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_3(
	// Inputs.
	.I (main_crg_clkout3),

	// Outputs.
	.O (main_crg_clkout_buf3)
);

//------------------------------------------------------------------------------
// Instance IDELAYCTRL of IDELAYCTRL Module.
//------------------------------------------------------------------------------
IDELAYCTRL IDELAYCTRL(
	// Inputs.
	.REFCLK (idelay_clk),
	.RST    (main_crg_ic_reset)
);

//------------------------------------------------------------------------------
// Memory rom: 37941-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:37940];
initial begin
	$readmemh("digilent_netfpga_sume_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_adr];
end
assign main_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 32768-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:32767];
initial begin
	$readmemh("digilent_netfpga_sume_sram.init", sram);
end
reg [14:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_ram_we[0])
		sram[main_ram_adr][7:0] <= main_ram_dat_w[7:0];
	if (main_ram_we[1])
		sram[main_ram_adr][15:8] <= main_ram_dat_w[15:8];
	if (main_ram_we[2])
		sram[main_ram_adr][23:16] <= main_ram_dat_w[23:16];
	if (main_ram_we[3])
		sram[main_ram_adr][31:24] <= main_ram_dat_w[31:24];
	sram_adr0 <= main_ram_adr;
end
assign main_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("digilent_netfpga_sume_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_uart_tx_fifo_wrport_we)
		storage[main_uart_tx_fifo_wrport_adr] <= main_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_uart_tx_fifo_rdport_adr];
end
assign main_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_uart_rx_fifo_wrport_we)
		storage_1[main_uart_rx_fifo_wrport_adr] <= main_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_uart_rx_fifo_rdport_adr];
end
assign main_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance OSERDESE2 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (1'd0),
	.D2     (1'd1),
	.D3     (1'd0),
	.D4     (1'd1),
	.D5     (1'd0),
	.D6     (1'd1),
	.D7     (1'd0),
	.D8     (1'd1),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_sd_clk_se_nodelay0)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_sd_clk_se_delayed0),
	.ODATAIN  (main_v7ddrphy_sd_clk_se_nodelay0)
);

//------------------------------------------------------------------------------
// Instance OBUFDS of OBUFDS Module.
//------------------------------------------------------------------------------
OBUFDS OBUFDS(
	// Inputs.
	.I  (main_v7ddrphy_sd_clk_se_delayed0),

	// Outputs.
	.O  (ddram_clk_p[0]),
	.OB (ddram_clk_n[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_1 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_1 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (1'd0),
	.D2     (1'd1),
	.D3     (1'd0),
	.D4     (1'd1),
	.D5     (1'd0),
	.D6     (1'd1),
	.D7     (1'd0),
	.D8     (1'd1),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_sd_clk_se_nodelay1)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_1 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_1 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_sd_clk_se_delayed1),
	.ODATAIN  (main_v7ddrphy_sd_clk_se_nodelay1)
);

//------------------------------------------------------------------------------
// Instance OBUFDS_1 of OBUFDS Module.
//------------------------------------------------------------------------------
OBUFDS OBUFDS_1(
	// Inputs.
	.I  (main_v7ddrphy_sd_clk_se_delayed1),

	// Outputs.
	.O  (ddram_clk_p[1]),
	.OB (ddram_clk_n[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_2 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_2 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_reset_n),
	.D2     (main_v7ddrphy_dfi_p0_reset_n),
	.D3     (main_v7ddrphy_dfi_p1_reset_n),
	.D4     (main_v7ddrphy_dfi_p1_reset_n),
	.D5     (main_v7ddrphy_dfi_p2_reset_n),
	.D6     (main_v7ddrphy_dfi_p2_reset_n),
	.D7     (main_v7ddrphy_dfi_p3_reset_n),
	.D8     (main_v7ddrphy_dfi_p3_reset_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq0)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_2 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_2 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_reset_n),
	.ODATAIN  (main_v7ddrphy_oq0)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_3 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_3 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_cs_n),
	.D2     (main_v7ddrphy_dfi_p0_cs_n),
	.D3     (main_v7ddrphy_dfi_p1_cs_n),
	.D4     (main_v7ddrphy_dfi_p1_cs_n),
	.D5     (main_v7ddrphy_dfi_p2_cs_n),
	.D6     (main_v7ddrphy_dfi_p2_cs_n),
	.D7     (main_v7ddrphy_dfi_p3_cs_n),
	.D8     (main_v7ddrphy_dfi_p3_cs_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq1)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_3 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_3 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_cs_n),
	.ODATAIN  (main_v7ddrphy_oq1)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_4 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_4 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[0]),
	.D2     (main_v7ddrphy_dfi_p0_address[0]),
	.D3     (main_v7ddrphy_dfi_p1_address[0]),
	.D4     (main_v7ddrphy_dfi_p1_address[0]),
	.D5     (main_v7ddrphy_dfi_p2_address[0]),
	.D6     (main_v7ddrphy_dfi_p2_address[0]),
	.D7     (main_v7ddrphy_dfi_p3_address[0]),
	.D8     (main_v7ddrphy_dfi_p3_address[0]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq2)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_4 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_4 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[0]),
	.ODATAIN  (main_v7ddrphy_oq2)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_5 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_5 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[1]),
	.D2     (main_v7ddrphy_dfi_p0_address[1]),
	.D3     (main_v7ddrphy_dfi_p1_address[1]),
	.D4     (main_v7ddrphy_dfi_p1_address[1]),
	.D5     (main_v7ddrphy_dfi_p2_address[1]),
	.D6     (main_v7ddrphy_dfi_p2_address[1]),
	.D7     (main_v7ddrphy_dfi_p3_address[1]),
	.D8     (main_v7ddrphy_dfi_p3_address[1]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq3)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_5 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_5 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[1]),
	.ODATAIN  (main_v7ddrphy_oq3)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_6 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_6 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[2]),
	.D2     (main_v7ddrphy_dfi_p0_address[2]),
	.D3     (main_v7ddrphy_dfi_p1_address[2]),
	.D4     (main_v7ddrphy_dfi_p1_address[2]),
	.D5     (main_v7ddrphy_dfi_p2_address[2]),
	.D6     (main_v7ddrphy_dfi_p2_address[2]),
	.D7     (main_v7ddrphy_dfi_p3_address[2]),
	.D8     (main_v7ddrphy_dfi_p3_address[2]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq4)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_6 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_6 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[2]),
	.ODATAIN  (main_v7ddrphy_oq4)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_7 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_7 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[3]),
	.D2     (main_v7ddrphy_dfi_p0_address[3]),
	.D3     (main_v7ddrphy_dfi_p1_address[3]),
	.D4     (main_v7ddrphy_dfi_p1_address[3]),
	.D5     (main_v7ddrphy_dfi_p2_address[3]),
	.D6     (main_v7ddrphy_dfi_p2_address[3]),
	.D7     (main_v7ddrphy_dfi_p3_address[3]),
	.D8     (main_v7ddrphy_dfi_p3_address[3]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq5)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_7 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_7 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[3]),
	.ODATAIN  (main_v7ddrphy_oq5)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_8 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_8 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[4]),
	.D2     (main_v7ddrphy_dfi_p0_address[4]),
	.D3     (main_v7ddrphy_dfi_p1_address[4]),
	.D4     (main_v7ddrphy_dfi_p1_address[4]),
	.D5     (main_v7ddrphy_dfi_p2_address[4]),
	.D6     (main_v7ddrphy_dfi_p2_address[4]),
	.D7     (main_v7ddrphy_dfi_p3_address[4]),
	.D8     (main_v7ddrphy_dfi_p3_address[4]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq6)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_8 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_8 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[4]),
	.ODATAIN  (main_v7ddrphy_oq6)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_9 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_9 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[5]),
	.D2     (main_v7ddrphy_dfi_p0_address[5]),
	.D3     (main_v7ddrphy_dfi_p1_address[5]),
	.D4     (main_v7ddrphy_dfi_p1_address[5]),
	.D5     (main_v7ddrphy_dfi_p2_address[5]),
	.D6     (main_v7ddrphy_dfi_p2_address[5]),
	.D7     (main_v7ddrphy_dfi_p3_address[5]),
	.D8     (main_v7ddrphy_dfi_p3_address[5]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq7)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_9 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_9 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[5]),
	.ODATAIN  (main_v7ddrphy_oq7)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_10 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_10 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[6]),
	.D2     (main_v7ddrphy_dfi_p0_address[6]),
	.D3     (main_v7ddrphy_dfi_p1_address[6]),
	.D4     (main_v7ddrphy_dfi_p1_address[6]),
	.D5     (main_v7ddrphy_dfi_p2_address[6]),
	.D6     (main_v7ddrphy_dfi_p2_address[6]),
	.D7     (main_v7ddrphy_dfi_p3_address[6]),
	.D8     (main_v7ddrphy_dfi_p3_address[6]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq8)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_10 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_10 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[6]),
	.ODATAIN  (main_v7ddrphy_oq8)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_11 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_11 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[7]),
	.D2     (main_v7ddrphy_dfi_p0_address[7]),
	.D3     (main_v7ddrphy_dfi_p1_address[7]),
	.D4     (main_v7ddrphy_dfi_p1_address[7]),
	.D5     (main_v7ddrphy_dfi_p2_address[7]),
	.D6     (main_v7ddrphy_dfi_p2_address[7]),
	.D7     (main_v7ddrphy_dfi_p3_address[7]),
	.D8     (main_v7ddrphy_dfi_p3_address[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq9)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_11 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_11 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[7]),
	.ODATAIN  (main_v7ddrphy_oq9)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_12 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_12 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[8]),
	.D2     (main_v7ddrphy_dfi_p0_address[8]),
	.D3     (main_v7ddrphy_dfi_p1_address[8]),
	.D4     (main_v7ddrphy_dfi_p1_address[8]),
	.D5     (main_v7ddrphy_dfi_p2_address[8]),
	.D6     (main_v7ddrphy_dfi_p2_address[8]),
	.D7     (main_v7ddrphy_dfi_p3_address[8]),
	.D8     (main_v7ddrphy_dfi_p3_address[8]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq10)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_12 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_12 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[8]),
	.ODATAIN  (main_v7ddrphy_oq10)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_13 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_13 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[9]),
	.D2     (main_v7ddrphy_dfi_p0_address[9]),
	.D3     (main_v7ddrphy_dfi_p1_address[9]),
	.D4     (main_v7ddrphy_dfi_p1_address[9]),
	.D5     (main_v7ddrphy_dfi_p2_address[9]),
	.D6     (main_v7ddrphy_dfi_p2_address[9]),
	.D7     (main_v7ddrphy_dfi_p3_address[9]),
	.D8     (main_v7ddrphy_dfi_p3_address[9]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq11)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_13 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_13 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[9]),
	.ODATAIN  (main_v7ddrphy_oq11)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_14 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_14 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[10]),
	.D2     (main_v7ddrphy_dfi_p0_address[10]),
	.D3     (main_v7ddrphy_dfi_p1_address[10]),
	.D4     (main_v7ddrphy_dfi_p1_address[10]),
	.D5     (main_v7ddrphy_dfi_p2_address[10]),
	.D6     (main_v7ddrphy_dfi_p2_address[10]),
	.D7     (main_v7ddrphy_dfi_p3_address[10]),
	.D8     (main_v7ddrphy_dfi_p3_address[10]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq12)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_14 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_14 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[10]),
	.ODATAIN  (main_v7ddrphy_oq12)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_15 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_15 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[11]),
	.D2     (main_v7ddrphy_dfi_p0_address[11]),
	.D3     (main_v7ddrphy_dfi_p1_address[11]),
	.D4     (main_v7ddrphy_dfi_p1_address[11]),
	.D5     (main_v7ddrphy_dfi_p2_address[11]),
	.D6     (main_v7ddrphy_dfi_p2_address[11]),
	.D7     (main_v7ddrphy_dfi_p3_address[11]),
	.D8     (main_v7ddrphy_dfi_p3_address[11]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq13)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_15 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_15 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[11]),
	.ODATAIN  (main_v7ddrphy_oq13)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_16 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_16 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[12]),
	.D2     (main_v7ddrphy_dfi_p0_address[12]),
	.D3     (main_v7ddrphy_dfi_p1_address[12]),
	.D4     (main_v7ddrphy_dfi_p1_address[12]),
	.D5     (main_v7ddrphy_dfi_p2_address[12]),
	.D6     (main_v7ddrphy_dfi_p2_address[12]),
	.D7     (main_v7ddrphy_dfi_p3_address[12]),
	.D8     (main_v7ddrphy_dfi_p3_address[12]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq14)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_16 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_16 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[12]),
	.ODATAIN  (main_v7ddrphy_oq14)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_17 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_17 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[13]),
	.D2     (main_v7ddrphy_dfi_p0_address[13]),
	.D3     (main_v7ddrphy_dfi_p1_address[13]),
	.D4     (main_v7ddrphy_dfi_p1_address[13]),
	.D5     (main_v7ddrphy_dfi_p2_address[13]),
	.D6     (main_v7ddrphy_dfi_p2_address[13]),
	.D7     (main_v7ddrphy_dfi_p3_address[13]),
	.D8     (main_v7ddrphy_dfi_p3_address[13]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq15)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_17 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_17 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[13]),
	.ODATAIN  (main_v7ddrphy_oq15)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_18 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_18 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[14]),
	.D2     (main_v7ddrphy_dfi_p0_address[14]),
	.D3     (main_v7ddrphy_dfi_p1_address[14]),
	.D4     (main_v7ddrphy_dfi_p1_address[14]),
	.D5     (main_v7ddrphy_dfi_p2_address[14]),
	.D6     (main_v7ddrphy_dfi_p2_address[14]),
	.D7     (main_v7ddrphy_dfi_p3_address[14]),
	.D8     (main_v7ddrphy_dfi_p3_address[14]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq16)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_18 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_18 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[14]),
	.ODATAIN  (main_v7ddrphy_oq16)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_19 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_19 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_address[15]),
	.D2     (main_v7ddrphy_dfi_p0_address[15]),
	.D3     (main_v7ddrphy_dfi_p1_address[15]),
	.D4     (main_v7ddrphy_dfi_p1_address[15]),
	.D5     (main_v7ddrphy_dfi_p2_address[15]),
	.D6     (main_v7ddrphy_dfi_p2_address[15]),
	.D7     (main_v7ddrphy_dfi_p3_address[15]),
	.D8     (main_v7ddrphy_dfi_p3_address[15]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq17)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_19 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_19 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_a[15]),
	.ODATAIN  (main_v7ddrphy_oq17)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_20 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_20 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_bank[0]),
	.D2     (main_v7ddrphy_dfi_p0_bank[0]),
	.D3     (main_v7ddrphy_dfi_p1_bank[0]),
	.D4     (main_v7ddrphy_dfi_p1_bank[0]),
	.D5     (main_v7ddrphy_dfi_p2_bank[0]),
	.D6     (main_v7ddrphy_dfi_p2_bank[0]),
	.D7     (main_v7ddrphy_dfi_p3_bank[0]),
	.D8     (main_v7ddrphy_dfi_p3_bank[0]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq18)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_20 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_20 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_pads_ba[0]),
	.ODATAIN  (main_v7ddrphy_oq18)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_21 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_21 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_bank[1]),
	.D2     (main_v7ddrphy_dfi_p0_bank[1]),
	.D3     (main_v7ddrphy_dfi_p1_bank[1]),
	.D4     (main_v7ddrphy_dfi_p1_bank[1]),
	.D5     (main_v7ddrphy_dfi_p2_bank[1]),
	.D6     (main_v7ddrphy_dfi_p2_bank[1]),
	.D7     (main_v7ddrphy_dfi_p3_bank[1]),
	.D8     (main_v7ddrphy_dfi_p3_bank[1]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq19)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_21 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_21 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_pads_ba[1]),
	.ODATAIN  (main_v7ddrphy_oq19)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_22 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_22 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_bank[2]),
	.D2     (main_v7ddrphy_dfi_p0_bank[2]),
	.D3     (main_v7ddrphy_dfi_p1_bank[2]),
	.D4     (main_v7ddrphy_dfi_p1_bank[2]),
	.D5     (main_v7ddrphy_dfi_p2_bank[2]),
	.D6     (main_v7ddrphy_dfi_p2_bank[2]),
	.D7     (main_v7ddrphy_dfi_p3_bank[2]),
	.D8     (main_v7ddrphy_dfi_p3_bank[2]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq20)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_22 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_22 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_pads_ba[2]),
	.ODATAIN  (main_v7ddrphy_oq20)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_23 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_23 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_ras_n),
	.D2     (main_v7ddrphy_dfi_p0_ras_n),
	.D3     (main_v7ddrphy_dfi_p1_ras_n),
	.D4     (main_v7ddrphy_dfi_p1_ras_n),
	.D5     (main_v7ddrphy_dfi_p2_ras_n),
	.D6     (main_v7ddrphy_dfi_p2_ras_n),
	.D7     (main_v7ddrphy_dfi_p3_ras_n),
	.D8     (main_v7ddrphy_dfi_p3_ras_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq21)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_23 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_23 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_ras_n),
	.ODATAIN  (main_v7ddrphy_oq21)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_24 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_24 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_cas_n),
	.D2     (main_v7ddrphy_dfi_p0_cas_n),
	.D3     (main_v7ddrphy_dfi_p1_cas_n),
	.D4     (main_v7ddrphy_dfi_p1_cas_n),
	.D5     (main_v7ddrphy_dfi_p2_cas_n),
	.D6     (main_v7ddrphy_dfi_p2_cas_n),
	.D7     (main_v7ddrphy_dfi_p3_cas_n),
	.D8     (main_v7ddrphy_dfi_p3_cas_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq22)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_24 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_24 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_cas_n),
	.ODATAIN  (main_v7ddrphy_oq22)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_25 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_25 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_we_n),
	.D2     (main_v7ddrphy_dfi_p0_we_n),
	.D3     (main_v7ddrphy_dfi_p1_we_n),
	.D4     (main_v7ddrphy_dfi_p1_we_n),
	.D5     (main_v7ddrphy_dfi_p2_we_n),
	.D6     (main_v7ddrphy_dfi_p2_we_n),
	.D7     (main_v7ddrphy_dfi_p3_we_n),
	.D8     (main_v7ddrphy_dfi_p3_we_n),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq23)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_25 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_25 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_we_n),
	.ODATAIN  (main_v7ddrphy_oq23)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_26 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_26 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_cke),
	.D2     (main_v7ddrphy_dfi_p0_cke),
	.D3     (main_v7ddrphy_dfi_p1_cke),
	.D4     (main_v7ddrphy_dfi_p1_cke),
	.D5     (main_v7ddrphy_dfi_p2_cke),
	.D6     (main_v7ddrphy_dfi_p2_cke),
	.D7     (main_v7ddrphy_dfi_p3_cke),
	.D8     (main_v7ddrphy_dfi_p3_cke),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq24)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_26 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_26 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_cke),
	.ODATAIN  (main_v7ddrphy_oq24)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_27 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_27 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_dfi_p0_odt),
	.D2     (main_v7ddrphy_dfi_p0_odt),
	.D3     (main_v7ddrphy_dfi_p1_odt),
	.D4     (main_v7ddrphy_dfi_p1_odt),
	.D5     (main_v7ddrphy_dfi_p2_odt),
	.D6     (main_v7ddrphy_dfi_p2_odt),
	.D7     (main_v7ddrphy_dfi_p3_odt),
	.D8     (main_v7ddrphy_dfi_p3_odt),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_oq25)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_27 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_27 (
	// Inputs.
	.C        (sys_clk),
	.CE       (main_v7ddrphy_cdly_inc_re),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_cdly_rst_re | main_v7ddrphy_rst_storage) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_odt),
	.ODATAIN  (main_v7ddrphy_oq25)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_28 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_28 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip00[0]),
	.D2     (main_v7ddrphy_bitslip00[1]),
	.D3     (main_v7ddrphy_bitslip00[2]),
	.D4     (main_v7ddrphy_bitslip00[3]),
	.D5     (main_v7ddrphy_bitslip00[4]),
	.D6     (main_v7ddrphy_bitslip00[5]),
	.D7     (main_v7ddrphy_bitslip00[6]),
	.D8     (main_v7ddrphy_bitslip00[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay0),
	.OQ     (main_v7ddrphy0),
	.TQ     (main_v7ddrphy_dqs_t0)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_28 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_28 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed0),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay0)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed0),
	.T   (main_v7ddrphy_dqs_t0),

	// InOuts.
	.IO  (ddram_dqs_p[0]),
	.IOB (ddram_dqs_n[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_29 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_29 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip10[0]),
	.D2     (main_v7ddrphy_bitslip10[1]),
	.D3     (main_v7ddrphy_bitslip10[2]),
	.D4     (main_v7ddrphy_bitslip10[3]),
	.D5     (main_v7ddrphy_bitslip10[4]),
	.D6     (main_v7ddrphy_bitslip10[5]),
	.D7     (main_v7ddrphy_bitslip10[6]),
	.D8     (main_v7ddrphy_bitslip10[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay1),
	.OQ     (main_v7ddrphy1),
	.TQ     (main_v7ddrphy_dqs_t1)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_29 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_29 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed1),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay1)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_1 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_1(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed1),
	.T   (main_v7ddrphy_dqs_t1),

	// InOuts.
	.IO  (ddram_dqs_p[1]),
	.IOB (ddram_dqs_n[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_30 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_30 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip20[0]),
	.D2     (main_v7ddrphy_bitslip20[1]),
	.D3     (main_v7ddrphy_bitslip20[2]),
	.D4     (main_v7ddrphy_bitslip20[3]),
	.D5     (main_v7ddrphy_bitslip20[4]),
	.D6     (main_v7ddrphy_bitslip20[5]),
	.D7     (main_v7ddrphy_bitslip20[6]),
	.D8     (main_v7ddrphy_bitslip20[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay2),
	.OQ     (main_v7ddrphy2),
	.TQ     (main_v7ddrphy_dqs_t2)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_30 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_30 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed2),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay2)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_2 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_2(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed2),
	.T   (main_v7ddrphy_dqs_t2),

	// InOuts.
	.IO  (ddram_dqs_p[2]),
	.IOB (ddram_dqs_n[2])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_31 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_31 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip30[0]),
	.D2     (main_v7ddrphy_bitslip30[1]),
	.D3     (main_v7ddrphy_bitslip30[2]),
	.D4     (main_v7ddrphy_bitslip30[3]),
	.D5     (main_v7ddrphy_bitslip30[4]),
	.D6     (main_v7ddrphy_bitslip30[5]),
	.D7     (main_v7ddrphy_bitslip30[6]),
	.D8     (main_v7ddrphy_bitslip30[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay3),
	.OQ     (main_v7ddrphy3),
	.TQ     (main_v7ddrphy_dqs_t3)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_31 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_31 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed3),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay3)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_3 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_3(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed3),
	.T   (main_v7ddrphy_dqs_t3),

	// InOuts.
	.IO  (ddram_dqs_p[3]),
	.IOB (ddram_dqs_n[3])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_32 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_32 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip40[0]),
	.D2     (main_v7ddrphy_bitslip40[1]),
	.D3     (main_v7ddrphy_bitslip40[2]),
	.D4     (main_v7ddrphy_bitslip40[3]),
	.D5     (main_v7ddrphy_bitslip40[4]),
	.D6     (main_v7ddrphy_bitslip40[5]),
	.D7     (main_v7ddrphy_bitslip40[6]),
	.D8     (main_v7ddrphy_bitslip40[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay4),
	.OQ     (main_v7ddrphy4),
	.TQ     (main_v7ddrphy_dqs_t4)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_32 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_32 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed4),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay4)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_4 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_4(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed4),
	.T   (main_v7ddrphy_dqs_t4),

	// InOuts.
	.IO  (ddram_dqs_p[4]),
	.IOB (ddram_dqs_n[4])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_33 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_33 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip50[0]),
	.D2     (main_v7ddrphy_bitslip50[1]),
	.D3     (main_v7ddrphy_bitslip50[2]),
	.D4     (main_v7ddrphy_bitslip50[3]),
	.D5     (main_v7ddrphy_bitslip50[4]),
	.D6     (main_v7ddrphy_bitslip50[5]),
	.D7     (main_v7ddrphy_bitslip50[6]),
	.D8     (main_v7ddrphy_bitslip50[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay5),
	.OQ     (main_v7ddrphy5),
	.TQ     (main_v7ddrphy_dqs_t5)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_33 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_33 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed5),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay5)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_5 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_5(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed5),
	.T   (main_v7ddrphy_dqs_t5),

	// InOuts.
	.IO  (ddram_dqs_p[5]),
	.IOB (ddram_dqs_n[5])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_34 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_34 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip60[0]),
	.D2     (main_v7ddrphy_bitslip60[1]),
	.D3     (main_v7ddrphy_bitslip60[2]),
	.D4     (main_v7ddrphy_bitslip60[3]),
	.D5     (main_v7ddrphy_bitslip60[4]),
	.D6     (main_v7ddrphy_bitslip60[5]),
	.D7     (main_v7ddrphy_bitslip60[6]),
	.D8     (main_v7ddrphy_bitslip60[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay6),
	.OQ     (main_v7ddrphy6),
	.TQ     (main_v7ddrphy_dqs_t6)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_34 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_34 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed6),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay6)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_6 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_6(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed6),
	.T   (main_v7ddrphy_dqs_t6),

	// InOuts.
	.IO  (ddram_dqs_p[6]),
	.IOB (ddram_dqs_n[6])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_35 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_35 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip70[0]),
	.D2     (main_v7ddrphy_bitslip70[1]),
	.D3     (main_v7ddrphy_bitslip70[2]),
	.D4     (main_v7ddrphy_bitslip70[3]),
	.D5     (main_v7ddrphy_bitslip70[4]),
	.D6     (main_v7ddrphy_bitslip70[5]),
	.D7     (main_v7ddrphy_bitslip70[6]),
	.D8     (main_v7ddrphy_bitslip70[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OFB    (main_v7ddrphy_dqs_o_no_delay7),
	.OQ     (main_v7ddrphy7),
	.TQ     (main_v7ddrphy_dqs_t7)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_35 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (3'd6),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_35 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dqs_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dqs_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dqs_o_delayed7),
	.ODATAIN  (main_v7ddrphy_dqs_o_no_delay7)
);

//------------------------------------------------------------------------------
// Instance IOBUFDS_7 of IOBUFDS Module.
//------------------------------------------------------------------------------
IOBUFDS IOBUFDS_7(
	// Inputs.
	.I   (main_v7ddrphy_dqs_o_delayed7),
	.T   (main_v7ddrphy_dqs_t7),

	// InOuts.
	.IO  (ddram_dqs_p[7]),
	.IOB (ddram_dqs_n[7])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_36 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_36 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip01[0]),
	.D2     (main_v7ddrphy_bitslip01[1]),
	.D3     (main_v7ddrphy_bitslip01[2]),
	.D4     (main_v7ddrphy_bitslip01[3]),
	.D5     (main_v7ddrphy_bitslip01[4]),
	.D6     (main_v7ddrphy_bitslip01[5]),
	.D7     (main_v7ddrphy_bitslip01[6]),
	.D8     (main_v7ddrphy_bitslip01[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay0)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_36 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_36 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[0]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay0)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_37 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_37 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip11[0]),
	.D2     (main_v7ddrphy_bitslip11[1]),
	.D3     (main_v7ddrphy_bitslip11[2]),
	.D4     (main_v7ddrphy_bitslip11[3]),
	.D5     (main_v7ddrphy_bitslip11[4]),
	.D6     (main_v7ddrphy_bitslip11[5]),
	.D7     (main_v7ddrphy_bitslip11[6]),
	.D8     (main_v7ddrphy_bitslip11[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay1)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_37 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_37 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[1]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay1)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_38 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_38 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip21[0]),
	.D2     (main_v7ddrphy_bitslip21[1]),
	.D3     (main_v7ddrphy_bitslip21[2]),
	.D4     (main_v7ddrphy_bitslip21[3]),
	.D5     (main_v7ddrphy_bitslip21[4]),
	.D6     (main_v7ddrphy_bitslip21[5]),
	.D7     (main_v7ddrphy_bitslip21[6]),
	.D8     (main_v7ddrphy_bitslip21[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay2)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_38 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_38 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[2]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay2)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_39 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_39 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip31[0]),
	.D2     (main_v7ddrphy_bitslip31[1]),
	.D3     (main_v7ddrphy_bitslip31[2]),
	.D4     (main_v7ddrphy_bitslip31[3]),
	.D5     (main_v7ddrphy_bitslip31[4]),
	.D6     (main_v7ddrphy_bitslip31[5]),
	.D7     (main_v7ddrphy_bitslip31[6]),
	.D8     (main_v7ddrphy_bitslip31[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay3)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_39 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_39 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[3]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay3)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_40 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_40 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip41[0]),
	.D2     (main_v7ddrphy_bitslip41[1]),
	.D3     (main_v7ddrphy_bitslip41[2]),
	.D4     (main_v7ddrphy_bitslip41[3]),
	.D5     (main_v7ddrphy_bitslip41[4]),
	.D6     (main_v7ddrphy_bitslip41[5]),
	.D7     (main_v7ddrphy_bitslip41[6]),
	.D8     (main_v7ddrphy_bitslip41[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay4)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_40 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_40 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[4]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay4)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_41 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_41 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip51[0]),
	.D2     (main_v7ddrphy_bitslip51[1]),
	.D3     (main_v7ddrphy_bitslip51[2]),
	.D4     (main_v7ddrphy_bitslip51[3]),
	.D5     (main_v7ddrphy_bitslip51[4]),
	.D6     (main_v7ddrphy_bitslip51[5]),
	.D7     (main_v7ddrphy_bitslip51[6]),
	.D8     (main_v7ddrphy_bitslip51[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay5)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_41 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_41 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[5]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay5)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_42 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_42 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip61[0]),
	.D2     (main_v7ddrphy_bitslip61[1]),
	.D3     (main_v7ddrphy_bitslip61[2]),
	.D4     (main_v7ddrphy_bitslip61[3]),
	.D5     (main_v7ddrphy_bitslip61[4]),
	.D6     (main_v7ddrphy_bitslip61[5]),
	.D7     (main_v7ddrphy_bitslip61[6]),
	.D8     (main_v7ddrphy_bitslip61[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay6)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_42 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_42 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[6]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay6)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_43 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_43 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip71[0]),
	.D2     (main_v7ddrphy_bitslip71[1]),
	.D3     (main_v7ddrphy_bitslip71[2]),
	.D4     (main_v7ddrphy_bitslip71[3]),
	.D5     (main_v7ddrphy_bitslip71[4]),
	.D6     (main_v7ddrphy_bitslip71[5]),
	.D7     (main_v7ddrphy_bitslip71[6]),
	.D8     (main_v7ddrphy_bitslip71[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.OQ     (main_v7ddrphy_dm_o_nodelay7)
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_43 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_43 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (ddram_dm[7]),
	.ODATAIN  (main_v7ddrphy_dm_o_nodelay7)
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_44 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_44 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip02[0]),
	.D2     (main_v7ddrphy_bitslip02[1]),
	.D3     (main_v7ddrphy_bitslip02[2]),
	.D4     (main_v7ddrphy_bitslip02[3]),
	.D5     (main_v7ddrphy_bitslip02[4]),
	.D6     (main_v7ddrphy_bitslip02[5]),
	.D7     (main_v7ddrphy_bitslip02[6]),
	.D8     (main_v7ddrphy_bitslip02[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay0),
	.TQ     (main_v7ddrphy_dq_t0)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed0),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip03[7]),
	.Q2      (main_v7ddrphy_bitslip03[6]),
	.Q3      (main_v7ddrphy_bitslip03[5]),
	.Q4      (main_v7ddrphy_bitslip03[4]),
	.Q5      (main_v7ddrphy_bitslip03[3]),
	.Q6      (main_v7ddrphy_bitslip03[2]),
	.Q7      (main_v7ddrphy_bitslip03[1]),
	.Q8      (main_v7ddrphy_bitslip03[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_44 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_44 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed0),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay0)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay0),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed0)
);

//------------------------------------------------------------------------------
// Instance IOBUF of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed0),
	.T  (main_v7ddrphy_dq_t0),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay0),

	// InOuts.
	.IO (ddram_dq[0])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_45 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_45 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip12[0]),
	.D2     (main_v7ddrphy_bitslip12[1]),
	.D3     (main_v7ddrphy_bitslip12[2]),
	.D4     (main_v7ddrphy_bitslip12[3]),
	.D5     (main_v7ddrphy_bitslip12[4]),
	.D6     (main_v7ddrphy_bitslip12[5]),
	.D7     (main_v7ddrphy_bitslip12[6]),
	.D8     (main_v7ddrphy_bitslip12[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay1),
	.TQ     (main_v7ddrphy_dq_t1)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_1 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_1 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed1),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip13[7]),
	.Q2      (main_v7ddrphy_bitslip13[6]),
	.Q3      (main_v7ddrphy_bitslip13[5]),
	.Q4      (main_v7ddrphy_bitslip13[4]),
	.Q5      (main_v7ddrphy_bitslip13[3]),
	.Q6      (main_v7ddrphy_bitslip13[2]),
	.Q7      (main_v7ddrphy_bitslip13[1]),
	.Q8      (main_v7ddrphy_bitslip13[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_45 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_45 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed1),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay1)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_1 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_1 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay1),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed1)
);

//------------------------------------------------------------------------------
// Instance IOBUF_1 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_1(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed1),
	.T  (main_v7ddrphy_dq_t1),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay1),

	// InOuts.
	.IO (ddram_dq[1])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_46 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_46 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip22[0]),
	.D2     (main_v7ddrphy_bitslip22[1]),
	.D3     (main_v7ddrphy_bitslip22[2]),
	.D4     (main_v7ddrphy_bitslip22[3]),
	.D5     (main_v7ddrphy_bitslip22[4]),
	.D6     (main_v7ddrphy_bitslip22[5]),
	.D7     (main_v7ddrphy_bitslip22[6]),
	.D8     (main_v7ddrphy_bitslip22[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay2),
	.TQ     (main_v7ddrphy_dq_t2)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_2 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_2 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed2),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip23[7]),
	.Q2      (main_v7ddrphy_bitslip23[6]),
	.Q3      (main_v7ddrphy_bitslip23[5]),
	.Q4      (main_v7ddrphy_bitslip23[4]),
	.Q5      (main_v7ddrphy_bitslip23[3]),
	.Q6      (main_v7ddrphy_bitslip23[2]),
	.Q7      (main_v7ddrphy_bitslip23[1]),
	.Q8      (main_v7ddrphy_bitslip23[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_46 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_46 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed2),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay2)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_2 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_2 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay2),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed2)
);

//------------------------------------------------------------------------------
// Instance IOBUF_2 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_2(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed2),
	.T  (main_v7ddrphy_dq_t2),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay2),

	// InOuts.
	.IO (ddram_dq[2])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_47 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_47 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip32[0]),
	.D2     (main_v7ddrphy_bitslip32[1]),
	.D3     (main_v7ddrphy_bitslip32[2]),
	.D4     (main_v7ddrphy_bitslip32[3]),
	.D5     (main_v7ddrphy_bitslip32[4]),
	.D6     (main_v7ddrphy_bitslip32[5]),
	.D7     (main_v7ddrphy_bitslip32[6]),
	.D8     (main_v7ddrphy_bitslip32[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay3),
	.TQ     (main_v7ddrphy_dq_t3)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_3 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_3 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed3),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip33[7]),
	.Q2      (main_v7ddrphy_bitslip33[6]),
	.Q3      (main_v7ddrphy_bitslip33[5]),
	.Q4      (main_v7ddrphy_bitslip33[4]),
	.Q5      (main_v7ddrphy_bitslip33[3]),
	.Q6      (main_v7ddrphy_bitslip33[2]),
	.Q7      (main_v7ddrphy_bitslip33[1]),
	.Q8      (main_v7ddrphy_bitslip33[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_47 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_47 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed3),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay3)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_3 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_3 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay3),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed3)
);

//------------------------------------------------------------------------------
// Instance IOBUF_3 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_3(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed3),
	.T  (main_v7ddrphy_dq_t3),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay3),

	// InOuts.
	.IO (ddram_dq[3])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_48 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_48 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip42[0]),
	.D2     (main_v7ddrphy_bitslip42[1]),
	.D3     (main_v7ddrphy_bitslip42[2]),
	.D4     (main_v7ddrphy_bitslip42[3]),
	.D5     (main_v7ddrphy_bitslip42[4]),
	.D6     (main_v7ddrphy_bitslip42[5]),
	.D7     (main_v7ddrphy_bitslip42[6]),
	.D8     (main_v7ddrphy_bitslip42[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay4),
	.TQ     (main_v7ddrphy_dq_t4)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_4 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_4 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed4),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip43[7]),
	.Q2      (main_v7ddrphy_bitslip43[6]),
	.Q3      (main_v7ddrphy_bitslip43[5]),
	.Q4      (main_v7ddrphy_bitslip43[4]),
	.Q5      (main_v7ddrphy_bitslip43[3]),
	.Q6      (main_v7ddrphy_bitslip43[2]),
	.Q7      (main_v7ddrphy_bitslip43[1]),
	.Q8      (main_v7ddrphy_bitslip43[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_48 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_48 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed4),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay4)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_4 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_4 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay4),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed4)
);

//------------------------------------------------------------------------------
// Instance IOBUF_4 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_4(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed4),
	.T  (main_v7ddrphy_dq_t4),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay4),

	// InOuts.
	.IO (ddram_dq[4])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_49 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_49 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip52[0]),
	.D2     (main_v7ddrphy_bitslip52[1]),
	.D3     (main_v7ddrphy_bitslip52[2]),
	.D4     (main_v7ddrphy_bitslip52[3]),
	.D5     (main_v7ddrphy_bitslip52[4]),
	.D6     (main_v7ddrphy_bitslip52[5]),
	.D7     (main_v7ddrphy_bitslip52[6]),
	.D8     (main_v7ddrphy_bitslip52[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay5),
	.TQ     (main_v7ddrphy_dq_t5)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_5 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_5 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed5),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip53[7]),
	.Q2      (main_v7ddrphy_bitslip53[6]),
	.Q3      (main_v7ddrphy_bitslip53[5]),
	.Q4      (main_v7ddrphy_bitslip53[4]),
	.Q5      (main_v7ddrphy_bitslip53[3]),
	.Q6      (main_v7ddrphy_bitslip53[2]),
	.Q7      (main_v7ddrphy_bitslip53[1]),
	.Q8      (main_v7ddrphy_bitslip53[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_49 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_49 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed5),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay5)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_5 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_5 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay5),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed5)
);

//------------------------------------------------------------------------------
// Instance IOBUF_5 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_5(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed5),
	.T  (main_v7ddrphy_dq_t5),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay5),

	// InOuts.
	.IO (ddram_dq[5])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_50 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_50 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip62[0]),
	.D2     (main_v7ddrphy_bitslip62[1]),
	.D3     (main_v7ddrphy_bitslip62[2]),
	.D4     (main_v7ddrphy_bitslip62[3]),
	.D5     (main_v7ddrphy_bitslip62[4]),
	.D6     (main_v7ddrphy_bitslip62[5]),
	.D7     (main_v7ddrphy_bitslip62[6]),
	.D8     (main_v7ddrphy_bitslip62[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay6),
	.TQ     (main_v7ddrphy_dq_t6)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_6 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_6 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed6),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip63[7]),
	.Q2      (main_v7ddrphy_bitslip63[6]),
	.Q3      (main_v7ddrphy_bitslip63[5]),
	.Q4      (main_v7ddrphy_bitslip63[4]),
	.Q5      (main_v7ddrphy_bitslip63[3]),
	.Q6      (main_v7ddrphy_bitslip63[2]),
	.Q7      (main_v7ddrphy_bitslip63[1]),
	.Q8      (main_v7ddrphy_bitslip63[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_50 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_50 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed6),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay6)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_6 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_6 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay6),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed6)
);

//------------------------------------------------------------------------------
// Instance IOBUF_6 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_6(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed6),
	.T  (main_v7ddrphy_dq_t6),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay6),

	// InOuts.
	.IO (ddram_dq[6])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_51 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_51 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip72[0]),
	.D2     (main_v7ddrphy_bitslip72[1]),
	.D3     (main_v7ddrphy_bitslip72[2]),
	.D4     (main_v7ddrphy_bitslip72[3]),
	.D5     (main_v7ddrphy_bitslip72[4]),
	.D6     (main_v7ddrphy_bitslip72[5]),
	.D7     (main_v7ddrphy_bitslip72[6]),
	.D8     (main_v7ddrphy_bitslip72[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay7),
	.TQ     (main_v7ddrphy_dq_t7)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_7 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_7 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed7),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip73[7]),
	.Q2      (main_v7ddrphy_bitslip73[6]),
	.Q3      (main_v7ddrphy_bitslip73[5]),
	.Q4      (main_v7ddrphy_bitslip73[4]),
	.Q5      (main_v7ddrphy_bitslip73[3]),
	.Q6      (main_v7ddrphy_bitslip73[2]),
	.Q7      (main_v7ddrphy_bitslip73[1]),
	.Q8      (main_v7ddrphy_bitslip73[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_51 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_51 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed7),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay7)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_7 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_7 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay7),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[0] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed7)
);

//------------------------------------------------------------------------------
// Instance IOBUF_7 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_7(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed7),
	.T  (main_v7ddrphy_dq_t7),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay7),

	// InOuts.
	.IO (ddram_dq[7])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_52 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_52 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip80[0]),
	.D2     (main_v7ddrphy_bitslip80[1]),
	.D3     (main_v7ddrphy_bitslip80[2]),
	.D4     (main_v7ddrphy_bitslip80[3]),
	.D5     (main_v7ddrphy_bitslip80[4]),
	.D6     (main_v7ddrphy_bitslip80[5]),
	.D7     (main_v7ddrphy_bitslip80[6]),
	.D8     (main_v7ddrphy_bitslip80[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay8),
	.TQ     (main_v7ddrphy_dq_t8)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_8 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_8 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed8),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip81[7]),
	.Q2      (main_v7ddrphy_bitslip81[6]),
	.Q3      (main_v7ddrphy_bitslip81[5]),
	.Q4      (main_v7ddrphy_bitslip81[4]),
	.Q5      (main_v7ddrphy_bitslip81[3]),
	.Q6      (main_v7ddrphy_bitslip81[2]),
	.Q7      (main_v7ddrphy_bitslip81[1]),
	.Q8      (main_v7ddrphy_bitslip81[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_52 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_52 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed8),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay8)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_8 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_8 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay8),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed8)
);

//------------------------------------------------------------------------------
// Instance IOBUF_8 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_8(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed8),
	.T  (main_v7ddrphy_dq_t8),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay8),

	// InOuts.
	.IO (ddram_dq[8])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_53 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_53 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip90[0]),
	.D2     (main_v7ddrphy_bitslip90[1]),
	.D3     (main_v7ddrphy_bitslip90[2]),
	.D4     (main_v7ddrphy_bitslip90[3]),
	.D5     (main_v7ddrphy_bitslip90[4]),
	.D6     (main_v7ddrphy_bitslip90[5]),
	.D7     (main_v7ddrphy_bitslip90[6]),
	.D8     (main_v7ddrphy_bitslip90[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay9),
	.TQ     (main_v7ddrphy_dq_t9)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_9 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_9 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed9),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip91[7]),
	.Q2      (main_v7ddrphy_bitslip91[6]),
	.Q3      (main_v7ddrphy_bitslip91[5]),
	.Q4      (main_v7ddrphy_bitslip91[4]),
	.Q5      (main_v7ddrphy_bitslip91[3]),
	.Q6      (main_v7ddrphy_bitslip91[2]),
	.Q7      (main_v7ddrphy_bitslip91[1]),
	.Q8      (main_v7ddrphy_bitslip91[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_53 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_53 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed9),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay9)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_9 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_9 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay9),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed9)
);

//------------------------------------------------------------------------------
// Instance IOBUF_9 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_9(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed9),
	.T  (main_v7ddrphy_dq_t9),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay9),

	// InOuts.
	.IO (ddram_dq[9])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_54 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_54 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip100[0]),
	.D2     (main_v7ddrphy_bitslip100[1]),
	.D3     (main_v7ddrphy_bitslip100[2]),
	.D4     (main_v7ddrphy_bitslip100[3]),
	.D5     (main_v7ddrphy_bitslip100[4]),
	.D6     (main_v7ddrphy_bitslip100[5]),
	.D7     (main_v7ddrphy_bitslip100[6]),
	.D8     (main_v7ddrphy_bitslip100[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay10),
	.TQ     (main_v7ddrphy_dq_t10)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_10 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_10 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed10),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip101[7]),
	.Q2      (main_v7ddrphy_bitslip101[6]),
	.Q3      (main_v7ddrphy_bitslip101[5]),
	.Q4      (main_v7ddrphy_bitslip101[4]),
	.Q5      (main_v7ddrphy_bitslip101[3]),
	.Q6      (main_v7ddrphy_bitslip101[2]),
	.Q7      (main_v7ddrphy_bitslip101[1]),
	.Q8      (main_v7ddrphy_bitslip101[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_54 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_54 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed10),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay10)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_10 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_10 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay10),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed10)
);

//------------------------------------------------------------------------------
// Instance IOBUF_10 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_10(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed10),
	.T  (main_v7ddrphy_dq_t10),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay10),

	// InOuts.
	.IO (ddram_dq[10])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_55 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_55 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip110[0]),
	.D2     (main_v7ddrphy_bitslip110[1]),
	.D3     (main_v7ddrphy_bitslip110[2]),
	.D4     (main_v7ddrphy_bitslip110[3]),
	.D5     (main_v7ddrphy_bitslip110[4]),
	.D6     (main_v7ddrphy_bitslip110[5]),
	.D7     (main_v7ddrphy_bitslip110[6]),
	.D8     (main_v7ddrphy_bitslip110[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay11),
	.TQ     (main_v7ddrphy_dq_t11)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_11 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_11 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed11),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip111[7]),
	.Q2      (main_v7ddrphy_bitslip111[6]),
	.Q3      (main_v7ddrphy_bitslip111[5]),
	.Q4      (main_v7ddrphy_bitslip111[4]),
	.Q5      (main_v7ddrphy_bitslip111[3]),
	.Q6      (main_v7ddrphy_bitslip111[2]),
	.Q7      (main_v7ddrphy_bitslip111[1]),
	.Q8      (main_v7ddrphy_bitslip111[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_55 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_55 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed11),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay11)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_11 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_11 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay11),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed11)
);

//------------------------------------------------------------------------------
// Instance IOBUF_11 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_11(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed11),
	.T  (main_v7ddrphy_dq_t11),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay11),

	// InOuts.
	.IO (ddram_dq[11])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_56 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_56 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip120[0]),
	.D2     (main_v7ddrphy_bitslip120[1]),
	.D3     (main_v7ddrphy_bitslip120[2]),
	.D4     (main_v7ddrphy_bitslip120[3]),
	.D5     (main_v7ddrphy_bitslip120[4]),
	.D6     (main_v7ddrphy_bitslip120[5]),
	.D7     (main_v7ddrphy_bitslip120[6]),
	.D8     (main_v7ddrphy_bitslip120[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay12),
	.TQ     (main_v7ddrphy_dq_t12)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_12 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_12 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed12),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip121[7]),
	.Q2      (main_v7ddrphy_bitslip121[6]),
	.Q3      (main_v7ddrphy_bitslip121[5]),
	.Q4      (main_v7ddrphy_bitslip121[4]),
	.Q5      (main_v7ddrphy_bitslip121[3]),
	.Q6      (main_v7ddrphy_bitslip121[2]),
	.Q7      (main_v7ddrphy_bitslip121[1]),
	.Q8      (main_v7ddrphy_bitslip121[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_56 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_56 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed12),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay12)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_12 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_12 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay12),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed12)
);

//------------------------------------------------------------------------------
// Instance IOBUF_12 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_12(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed12),
	.T  (main_v7ddrphy_dq_t12),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay12),

	// InOuts.
	.IO (ddram_dq[12])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_57 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_57 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip130[0]),
	.D2     (main_v7ddrphy_bitslip130[1]),
	.D3     (main_v7ddrphy_bitslip130[2]),
	.D4     (main_v7ddrphy_bitslip130[3]),
	.D5     (main_v7ddrphy_bitslip130[4]),
	.D6     (main_v7ddrphy_bitslip130[5]),
	.D7     (main_v7ddrphy_bitslip130[6]),
	.D8     (main_v7ddrphy_bitslip130[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay13),
	.TQ     (main_v7ddrphy_dq_t13)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_13 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_13 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed13),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip131[7]),
	.Q2      (main_v7ddrphy_bitslip131[6]),
	.Q3      (main_v7ddrphy_bitslip131[5]),
	.Q4      (main_v7ddrphy_bitslip131[4]),
	.Q5      (main_v7ddrphy_bitslip131[3]),
	.Q6      (main_v7ddrphy_bitslip131[2]),
	.Q7      (main_v7ddrphy_bitslip131[1]),
	.Q8      (main_v7ddrphy_bitslip131[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_57 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_57 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed13),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay13)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_13 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_13 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay13),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed13)
);

//------------------------------------------------------------------------------
// Instance IOBUF_13 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_13(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed13),
	.T  (main_v7ddrphy_dq_t13),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay13),

	// InOuts.
	.IO (ddram_dq[13])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_58 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_58 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip140[0]),
	.D2     (main_v7ddrphy_bitslip140[1]),
	.D3     (main_v7ddrphy_bitslip140[2]),
	.D4     (main_v7ddrphy_bitslip140[3]),
	.D5     (main_v7ddrphy_bitslip140[4]),
	.D6     (main_v7ddrphy_bitslip140[5]),
	.D7     (main_v7ddrphy_bitslip140[6]),
	.D8     (main_v7ddrphy_bitslip140[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay14),
	.TQ     (main_v7ddrphy_dq_t14)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_14 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_14 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed14),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip141[7]),
	.Q2      (main_v7ddrphy_bitslip141[6]),
	.Q3      (main_v7ddrphy_bitslip141[5]),
	.Q4      (main_v7ddrphy_bitslip141[4]),
	.Q5      (main_v7ddrphy_bitslip141[3]),
	.Q6      (main_v7ddrphy_bitslip141[2]),
	.Q7      (main_v7ddrphy_bitslip141[1]),
	.Q8      (main_v7ddrphy_bitslip141[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_58 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_58 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed14),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay14)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_14 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_14 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay14),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed14)
);

//------------------------------------------------------------------------------
// Instance IOBUF_14 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_14(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed14),
	.T  (main_v7ddrphy_dq_t14),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay14),

	// InOuts.
	.IO (ddram_dq[14])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_59 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_59 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip150[0]),
	.D2     (main_v7ddrphy_bitslip150[1]),
	.D3     (main_v7ddrphy_bitslip150[2]),
	.D4     (main_v7ddrphy_bitslip150[3]),
	.D5     (main_v7ddrphy_bitslip150[4]),
	.D6     (main_v7ddrphy_bitslip150[5]),
	.D7     (main_v7ddrphy_bitslip150[6]),
	.D8     (main_v7ddrphy_bitslip150[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay15),
	.TQ     (main_v7ddrphy_dq_t15)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_15 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_15 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed15),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip151[7]),
	.Q2      (main_v7ddrphy_bitslip151[6]),
	.Q3      (main_v7ddrphy_bitslip151[5]),
	.Q4      (main_v7ddrphy_bitslip151[4]),
	.Q5      (main_v7ddrphy_bitslip151[3]),
	.Q6      (main_v7ddrphy_bitslip151[2]),
	.Q7      (main_v7ddrphy_bitslip151[1]),
	.Q8      (main_v7ddrphy_bitslip151[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_59 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_59 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed15),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay15)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_15 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_15 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay15),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[1] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed15)
);

//------------------------------------------------------------------------------
// Instance IOBUF_15 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_15(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed15),
	.T  (main_v7ddrphy_dq_t15),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay15),

	// InOuts.
	.IO (ddram_dq[15])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_60 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_60 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip160[0]),
	.D2     (main_v7ddrphy_bitslip160[1]),
	.D3     (main_v7ddrphy_bitslip160[2]),
	.D4     (main_v7ddrphy_bitslip160[3]),
	.D5     (main_v7ddrphy_bitslip160[4]),
	.D6     (main_v7ddrphy_bitslip160[5]),
	.D7     (main_v7ddrphy_bitslip160[6]),
	.D8     (main_v7ddrphy_bitslip160[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay16),
	.TQ     (main_v7ddrphy_dq_t16)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_16 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_16 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed16),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip161[7]),
	.Q2      (main_v7ddrphy_bitslip161[6]),
	.Q3      (main_v7ddrphy_bitslip161[5]),
	.Q4      (main_v7ddrphy_bitslip161[4]),
	.Q5      (main_v7ddrphy_bitslip161[3]),
	.Q6      (main_v7ddrphy_bitslip161[2]),
	.Q7      (main_v7ddrphy_bitslip161[1]),
	.Q8      (main_v7ddrphy_bitslip161[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_60 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_60 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed16),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay16)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_16 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_16 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay16),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed16)
);

//------------------------------------------------------------------------------
// Instance IOBUF_16 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_16(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed16),
	.T  (main_v7ddrphy_dq_t16),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay16),

	// InOuts.
	.IO (ddram_dq[16])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_61 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_61 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip170[0]),
	.D2     (main_v7ddrphy_bitslip170[1]),
	.D3     (main_v7ddrphy_bitslip170[2]),
	.D4     (main_v7ddrphy_bitslip170[3]),
	.D5     (main_v7ddrphy_bitslip170[4]),
	.D6     (main_v7ddrphy_bitslip170[5]),
	.D7     (main_v7ddrphy_bitslip170[6]),
	.D8     (main_v7ddrphy_bitslip170[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay17),
	.TQ     (main_v7ddrphy_dq_t17)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_17 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_17 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed17),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip171[7]),
	.Q2      (main_v7ddrphy_bitslip171[6]),
	.Q3      (main_v7ddrphy_bitslip171[5]),
	.Q4      (main_v7ddrphy_bitslip171[4]),
	.Q5      (main_v7ddrphy_bitslip171[3]),
	.Q6      (main_v7ddrphy_bitslip171[2]),
	.Q7      (main_v7ddrphy_bitslip171[1]),
	.Q8      (main_v7ddrphy_bitslip171[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_61 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_61 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed17),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay17)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_17 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_17 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay17),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed17)
);

//------------------------------------------------------------------------------
// Instance IOBUF_17 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_17(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed17),
	.T  (main_v7ddrphy_dq_t17),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay17),

	// InOuts.
	.IO (ddram_dq[17])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_62 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_62 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip180[0]),
	.D2     (main_v7ddrphy_bitslip180[1]),
	.D3     (main_v7ddrphy_bitslip180[2]),
	.D4     (main_v7ddrphy_bitslip180[3]),
	.D5     (main_v7ddrphy_bitslip180[4]),
	.D6     (main_v7ddrphy_bitslip180[5]),
	.D7     (main_v7ddrphy_bitslip180[6]),
	.D8     (main_v7ddrphy_bitslip180[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay18),
	.TQ     (main_v7ddrphy_dq_t18)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_18 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_18 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed18),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip181[7]),
	.Q2      (main_v7ddrphy_bitslip181[6]),
	.Q3      (main_v7ddrphy_bitslip181[5]),
	.Q4      (main_v7ddrphy_bitslip181[4]),
	.Q5      (main_v7ddrphy_bitslip181[3]),
	.Q6      (main_v7ddrphy_bitslip181[2]),
	.Q7      (main_v7ddrphy_bitslip181[1]),
	.Q8      (main_v7ddrphy_bitslip181[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_62 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_62 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed18),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay18)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_18 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_18 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay18),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed18)
);

//------------------------------------------------------------------------------
// Instance IOBUF_18 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_18(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed18),
	.T  (main_v7ddrphy_dq_t18),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay18),

	// InOuts.
	.IO (ddram_dq[18])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_63 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_63 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip190[0]),
	.D2     (main_v7ddrphy_bitslip190[1]),
	.D3     (main_v7ddrphy_bitslip190[2]),
	.D4     (main_v7ddrphy_bitslip190[3]),
	.D5     (main_v7ddrphy_bitslip190[4]),
	.D6     (main_v7ddrphy_bitslip190[5]),
	.D7     (main_v7ddrphy_bitslip190[6]),
	.D8     (main_v7ddrphy_bitslip190[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay19),
	.TQ     (main_v7ddrphy_dq_t19)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_19 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_19 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed19),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip191[7]),
	.Q2      (main_v7ddrphy_bitslip191[6]),
	.Q3      (main_v7ddrphy_bitslip191[5]),
	.Q4      (main_v7ddrphy_bitslip191[4]),
	.Q5      (main_v7ddrphy_bitslip191[3]),
	.Q6      (main_v7ddrphy_bitslip191[2]),
	.Q7      (main_v7ddrphy_bitslip191[1]),
	.Q8      (main_v7ddrphy_bitslip191[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_63 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_63 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed19),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay19)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_19 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_19 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay19),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed19)
);

//------------------------------------------------------------------------------
// Instance IOBUF_19 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_19(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed19),
	.T  (main_v7ddrphy_dq_t19),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay19),

	// InOuts.
	.IO (ddram_dq[19])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_64 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_64 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip200[0]),
	.D2     (main_v7ddrphy_bitslip200[1]),
	.D3     (main_v7ddrphy_bitslip200[2]),
	.D4     (main_v7ddrphy_bitslip200[3]),
	.D5     (main_v7ddrphy_bitslip200[4]),
	.D6     (main_v7ddrphy_bitslip200[5]),
	.D7     (main_v7ddrphy_bitslip200[6]),
	.D8     (main_v7ddrphy_bitslip200[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay20),
	.TQ     (main_v7ddrphy_dq_t20)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_20 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_20 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed20),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip201[7]),
	.Q2      (main_v7ddrphy_bitslip201[6]),
	.Q3      (main_v7ddrphy_bitslip201[5]),
	.Q4      (main_v7ddrphy_bitslip201[4]),
	.Q5      (main_v7ddrphy_bitslip201[3]),
	.Q6      (main_v7ddrphy_bitslip201[2]),
	.Q7      (main_v7ddrphy_bitslip201[1]),
	.Q8      (main_v7ddrphy_bitslip201[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_64 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_64 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed20),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay20)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_20 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_20 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay20),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed20)
);

//------------------------------------------------------------------------------
// Instance IOBUF_20 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_20(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed20),
	.T  (main_v7ddrphy_dq_t20),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay20),

	// InOuts.
	.IO (ddram_dq[20])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_65 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_65 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip210[0]),
	.D2     (main_v7ddrphy_bitslip210[1]),
	.D3     (main_v7ddrphy_bitslip210[2]),
	.D4     (main_v7ddrphy_bitslip210[3]),
	.D5     (main_v7ddrphy_bitslip210[4]),
	.D6     (main_v7ddrphy_bitslip210[5]),
	.D7     (main_v7ddrphy_bitslip210[6]),
	.D8     (main_v7ddrphy_bitslip210[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay21),
	.TQ     (main_v7ddrphy_dq_t21)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_21 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_21 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed21),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip211[7]),
	.Q2      (main_v7ddrphy_bitslip211[6]),
	.Q3      (main_v7ddrphy_bitslip211[5]),
	.Q4      (main_v7ddrphy_bitslip211[4]),
	.Q5      (main_v7ddrphy_bitslip211[3]),
	.Q6      (main_v7ddrphy_bitslip211[2]),
	.Q7      (main_v7ddrphy_bitslip211[1]),
	.Q8      (main_v7ddrphy_bitslip211[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_65 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_65 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed21),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay21)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_21 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_21 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay21),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed21)
);

//------------------------------------------------------------------------------
// Instance IOBUF_21 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_21(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed21),
	.T  (main_v7ddrphy_dq_t21),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay21),

	// InOuts.
	.IO (ddram_dq[21])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_66 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_66 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip220[0]),
	.D2     (main_v7ddrphy_bitslip220[1]),
	.D3     (main_v7ddrphy_bitslip220[2]),
	.D4     (main_v7ddrphy_bitslip220[3]),
	.D5     (main_v7ddrphy_bitslip220[4]),
	.D6     (main_v7ddrphy_bitslip220[5]),
	.D7     (main_v7ddrphy_bitslip220[6]),
	.D8     (main_v7ddrphy_bitslip220[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay22),
	.TQ     (main_v7ddrphy_dq_t22)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_22 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_22 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed22),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip221[7]),
	.Q2      (main_v7ddrphy_bitslip221[6]),
	.Q3      (main_v7ddrphy_bitslip221[5]),
	.Q4      (main_v7ddrphy_bitslip221[4]),
	.Q5      (main_v7ddrphy_bitslip221[3]),
	.Q6      (main_v7ddrphy_bitslip221[2]),
	.Q7      (main_v7ddrphy_bitslip221[1]),
	.Q8      (main_v7ddrphy_bitslip221[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_66 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_66 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed22),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay22)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_22 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_22 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay22),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed22)
);

//------------------------------------------------------------------------------
// Instance IOBUF_22 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_22(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed22),
	.T  (main_v7ddrphy_dq_t22),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay22),

	// InOuts.
	.IO (ddram_dq[22])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_67 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_67 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip230[0]),
	.D2     (main_v7ddrphy_bitslip230[1]),
	.D3     (main_v7ddrphy_bitslip230[2]),
	.D4     (main_v7ddrphy_bitslip230[3]),
	.D5     (main_v7ddrphy_bitslip230[4]),
	.D6     (main_v7ddrphy_bitslip230[5]),
	.D7     (main_v7ddrphy_bitslip230[6]),
	.D8     (main_v7ddrphy_bitslip230[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay23),
	.TQ     (main_v7ddrphy_dq_t23)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_23 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_23 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed23),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip231[7]),
	.Q2      (main_v7ddrphy_bitslip231[6]),
	.Q3      (main_v7ddrphy_bitslip231[5]),
	.Q4      (main_v7ddrphy_bitslip231[4]),
	.Q5      (main_v7ddrphy_bitslip231[3]),
	.Q6      (main_v7ddrphy_bitslip231[2]),
	.Q7      (main_v7ddrphy_bitslip231[1]),
	.Q8      (main_v7ddrphy_bitslip231[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_67 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_67 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed23),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay23)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_23 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_23 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay23),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[2] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed23)
);

//------------------------------------------------------------------------------
// Instance IOBUF_23 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_23(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed23),
	.T  (main_v7ddrphy_dq_t23),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay23),

	// InOuts.
	.IO (ddram_dq[23])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_68 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_68 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip240[0]),
	.D2     (main_v7ddrphy_bitslip240[1]),
	.D3     (main_v7ddrphy_bitslip240[2]),
	.D4     (main_v7ddrphy_bitslip240[3]),
	.D5     (main_v7ddrphy_bitslip240[4]),
	.D6     (main_v7ddrphy_bitslip240[5]),
	.D7     (main_v7ddrphy_bitslip240[6]),
	.D8     (main_v7ddrphy_bitslip240[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay24),
	.TQ     (main_v7ddrphy_dq_t24)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_24 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_24 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed24),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip241[7]),
	.Q2      (main_v7ddrphy_bitslip241[6]),
	.Q3      (main_v7ddrphy_bitslip241[5]),
	.Q4      (main_v7ddrphy_bitslip241[4]),
	.Q5      (main_v7ddrphy_bitslip241[3]),
	.Q6      (main_v7ddrphy_bitslip241[2]),
	.Q7      (main_v7ddrphy_bitslip241[1]),
	.Q8      (main_v7ddrphy_bitslip241[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_68 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_68 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed24),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay24)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_24 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_24 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay24),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed24)
);

//------------------------------------------------------------------------------
// Instance IOBUF_24 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_24(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed24),
	.T  (main_v7ddrphy_dq_t24),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay24),

	// InOuts.
	.IO (ddram_dq[24])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_69 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_69 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip250[0]),
	.D2     (main_v7ddrphy_bitslip250[1]),
	.D3     (main_v7ddrphy_bitslip250[2]),
	.D4     (main_v7ddrphy_bitslip250[3]),
	.D5     (main_v7ddrphy_bitslip250[4]),
	.D6     (main_v7ddrphy_bitslip250[5]),
	.D7     (main_v7ddrphy_bitslip250[6]),
	.D8     (main_v7ddrphy_bitslip250[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay25),
	.TQ     (main_v7ddrphy_dq_t25)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_25 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_25 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed25),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip251[7]),
	.Q2      (main_v7ddrphy_bitslip251[6]),
	.Q3      (main_v7ddrphy_bitslip251[5]),
	.Q4      (main_v7ddrphy_bitslip251[4]),
	.Q5      (main_v7ddrphy_bitslip251[3]),
	.Q6      (main_v7ddrphy_bitslip251[2]),
	.Q7      (main_v7ddrphy_bitslip251[1]),
	.Q8      (main_v7ddrphy_bitslip251[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_69 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_69 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed25),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay25)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_25 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_25 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay25),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed25)
);

//------------------------------------------------------------------------------
// Instance IOBUF_25 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_25(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed25),
	.T  (main_v7ddrphy_dq_t25),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay25),

	// InOuts.
	.IO (ddram_dq[25])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_70 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_70 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip260[0]),
	.D2     (main_v7ddrphy_bitslip260[1]),
	.D3     (main_v7ddrphy_bitslip260[2]),
	.D4     (main_v7ddrphy_bitslip260[3]),
	.D5     (main_v7ddrphy_bitslip260[4]),
	.D6     (main_v7ddrphy_bitslip260[5]),
	.D7     (main_v7ddrphy_bitslip260[6]),
	.D8     (main_v7ddrphy_bitslip260[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay26),
	.TQ     (main_v7ddrphy_dq_t26)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_26 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_26 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed26),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip261[7]),
	.Q2      (main_v7ddrphy_bitslip261[6]),
	.Q3      (main_v7ddrphy_bitslip261[5]),
	.Q4      (main_v7ddrphy_bitslip261[4]),
	.Q5      (main_v7ddrphy_bitslip261[3]),
	.Q6      (main_v7ddrphy_bitslip261[2]),
	.Q7      (main_v7ddrphy_bitslip261[1]),
	.Q8      (main_v7ddrphy_bitslip261[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_70 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_70 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed26),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay26)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_26 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_26 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay26),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed26)
);

//------------------------------------------------------------------------------
// Instance IOBUF_26 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_26(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed26),
	.T  (main_v7ddrphy_dq_t26),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay26),

	// InOuts.
	.IO (ddram_dq[26])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_71 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_71 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip270[0]),
	.D2     (main_v7ddrphy_bitslip270[1]),
	.D3     (main_v7ddrphy_bitslip270[2]),
	.D4     (main_v7ddrphy_bitslip270[3]),
	.D5     (main_v7ddrphy_bitslip270[4]),
	.D6     (main_v7ddrphy_bitslip270[5]),
	.D7     (main_v7ddrphy_bitslip270[6]),
	.D8     (main_v7ddrphy_bitslip270[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay27),
	.TQ     (main_v7ddrphy_dq_t27)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_27 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_27 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed27),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip271[7]),
	.Q2      (main_v7ddrphy_bitslip271[6]),
	.Q3      (main_v7ddrphy_bitslip271[5]),
	.Q4      (main_v7ddrphy_bitslip271[4]),
	.Q5      (main_v7ddrphy_bitslip271[3]),
	.Q6      (main_v7ddrphy_bitslip271[2]),
	.Q7      (main_v7ddrphy_bitslip271[1]),
	.Q8      (main_v7ddrphy_bitslip271[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_71 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_71 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed27),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay27)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_27 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_27 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay27),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed27)
);

//------------------------------------------------------------------------------
// Instance IOBUF_27 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_27(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed27),
	.T  (main_v7ddrphy_dq_t27),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay27),

	// InOuts.
	.IO (ddram_dq[27])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_72 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_72 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip280[0]),
	.D2     (main_v7ddrphy_bitslip280[1]),
	.D3     (main_v7ddrphy_bitslip280[2]),
	.D4     (main_v7ddrphy_bitslip280[3]),
	.D5     (main_v7ddrphy_bitslip280[4]),
	.D6     (main_v7ddrphy_bitslip280[5]),
	.D7     (main_v7ddrphy_bitslip280[6]),
	.D8     (main_v7ddrphy_bitslip280[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay28),
	.TQ     (main_v7ddrphy_dq_t28)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_28 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_28 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed28),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip281[7]),
	.Q2      (main_v7ddrphy_bitslip281[6]),
	.Q3      (main_v7ddrphy_bitslip281[5]),
	.Q4      (main_v7ddrphy_bitslip281[4]),
	.Q5      (main_v7ddrphy_bitslip281[3]),
	.Q6      (main_v7ddrphy_bitslip281[2]),
	.Q7      (main_v7ddrphy_bitslip281[1]),
	.Q8      (main_v7ddrphy_bitslip281[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_72 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_72 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed28),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay28)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_28 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_28 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay28),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed28)
);

//------------------------------------------------------------------------------
// Instance IOBUF_28 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_28(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed28),
	.T  (main_v7ddrphy_dq_t28),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay28),

	// InOuts.
	.IO (ddram_dq[28])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_73 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_73 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip290[0]),
	.D2     (main_v7ddrphy_bitslip290[1]),
	.D3     (main_v7ddrphy_bitslip290[2]),
	.D4     (main_v7ddrphy_bitslip290[3]),
	.D5     (main_v7ddrphy_bitslip290[4]),
	.D6     (main_v7ddrphy_bitslip290[5]),
	.D7     (main_v7ddrphy_bitslip290[6]),
	.D8     (main_v7ddrphy_bitslip290[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay29),
	.TQ     (main_v7ddrphy_dq_t29)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_29 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_29 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed29),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip291[7]),
	.Q2      (main_v7ddrphy_bitslip291[6]),
	.Q3      (main_v7ddrphy_bitslip291[5]),
	.Q4      (main_v7ddrphy_bitslip291[4]),
	.Q5      (main_v7ddrphy_bitslip291[3]),
	.Q6      (main_v7ddrphy_bitslip291[2]),
	.Q7      (main_v7ddrphy_bitslip291[1]),
	.Q8      (main_v7ddrphy_bitslip291[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_73 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_73 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed29),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay29)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_29 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_29 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay29),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed29)
);

//------------------------------------------------------------------------------
// Instance IOBUF_29 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_29(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed29),
	.T  (main_v7ddrphy_dq_t29),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay29),

	// InOuts.
	.IO (ddram_dq[29])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_74 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_74 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip300[0]),
	.D2     (main_v7ddrphy_bitslip300[1]),
	.D3     (main_v7ddrphy_bitslip300[2]),
	.D4     (main_v7ddrphy_bitslip300[3]),
	.D5     (main_v7ddrphy_bitslip300[4]),
	.D6     (main_v7ddrphy_bitslip300[5]),
	.D7     (main_v7ddrphy_bitslip300[6]),
	.D8     (main_v7ddrphy_bitslip300[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay30),
	.TQ     (main_v7ddrphy_dq_t30)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_30 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_30 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed30),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip301[7]),
	.Q2      (main_v7ddrphy_bitslip301[6]),
	.Q3      (main_v7ddrphy_bitslip301[5]),
	.Q4      (main_v7ddrphy_bitslip301[4]),
	.Q5      (main_v7ddrphy_bitslip301[3]),
	.Q6      (main_v7ddrphy_bitslip301[2]),
	.Q7      (main_v7ddrphy_bitslip301[1]),
	.Q8      (main_v7ddrphy_bitslip301[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_74 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_74 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed30),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay30)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_30 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_30 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay30),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed30)
);

//------------------------------------------------------------------------------
// Instance IOBUF_30 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_30(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed30),
	.T  (main_v7ddrphy_dq_t30),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay30),

	// InOuts.
	.IO (ddram_dq[30])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_75 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_75 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip310[0]),
	.D2     (main_v7ddrphy_bitslip310[1]),
	.D3     (main_v7ddrphy_bitslip310[2]),
	.D4     (main_v7ddrphy_bitslip310[3]),
	.D5     (main_v7ddrphy_bitslip310[4]),
	.D6     (main_v7ddrphy_bitslip310[5]),
	.D7     (main_v7ddrphy_bitslip310[6]),
	.D8     (main_v7ddrphy_bitslip310[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay31),
	.TQ     (main_v7ddrphy_dq_t31)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_31 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_31 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed31),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip311[7]),
	.Q2      (main_v7ddrphy_bitslip311[6]),
	.Q3      (main_v7ddrphy_bitslip311[5]),
	.Q4      (main_v7ddrphy_bitslip311[4]),
	.Q5      (main_v7ddrphy_bitslip311[3]),
	.Q6      (main_v7ddrphy_bitslip311[2]),
	.Q7      (main_v7ddrphy_bitslip311[1]),
	.Q8      (main_v7ddrphy_bitslip311[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_75 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_75 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed31),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay31)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_31 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_31 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay31),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[3] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed31)
);

//------------------------------------------------------------------------------
// Instance IOBUF_31 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_31(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed31),
	.T  (main_v7ddrphy_dq_t31),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay31),

	// InOuts.
	.IO (ddram_dq[31])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_76 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_76 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip320[0]),
	.D2     (main_v7ddrphy_bitslip320[1]),
	.D3     (main_v7ddrphy_bitslip320[2]),
	.D4     (main_v7ddrphy_bitslip320[3]),
	.D5     (main_v7ddrphy_bitslip320[4]),
	.D6     (main_v7ddrphy_bitslip320[5]),
	.D7     (main_v7ddrphy_bitslip320[6]),
	.D8     (main_v7ddrphy_bitslip320[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay32),
	.TQ     (main_v7ddrphy_dq_t32)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_32 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_32 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed32),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip321[7]),
	.Q2      (main_v7ddrphy_bitslip321[6]),
	.Q3      (main_v7ddrphy_bitslip321[5]),
	.Q4      (main_v7ddrphy_bitslip321[4]),
	.Q5      (main_v7ddrphy_bitslip321[3]),
	.Q6      (main_v7ddrphy_bitslip321[2]),
	.Q7      (main_v7ddrphy_bitslip321[1]),
	.Q8      (main_v7ddrphy_bitslip321[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_76 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_76 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed32),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay32)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_32 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_32 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay32),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed32)
);

//------------------------------------------------------------------------------
// Instance IOBUF_32 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_32(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed32),
	.T  (main_v7ddrphy_dq_t32),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay32),

	// InOuts.
	.IO (ddram_dq[32])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_77 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_77 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip330[0]),
	.D2     (main_v7ddrphy_bitslip330[1]),
	.D3     (main_v7ddrphy_bitslip330[2]),
	.D4     (main_v7ddrphy_bitslip330[3]),
	.D5     (main_v7ddrphy_bitslip330[4]),
	.D6     (main_v7ddrphy_bitslip330[5]),
	.D7     (main_v7ddrphy_bitslip330[6]),
	.D8     (main_v7ddrphy_bitslip330[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay33),
	.TQ     (main_v7ddrphy_dq_t33)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_33 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_33 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed33),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip331[7]),
	.Q2      (main_v7ddrphy_bitslip331[6]),
	.Q3      (main_v7ddrphy_bitslip331[5]),
	.Q4      (main_v7ddrphy_bitslip331[4]),
	.Q5      (main_v7ddrphy_bitslip331[3]),
	.Q6      (main_v7ddrphy_bitslip331[2]),
	.Q7      (main_v7ddrphy_bitslip331[1]),
	.Q8      (main_v7ddrphy_bitslip331[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_77 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_77 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed33),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay33)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_33 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_33 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay33),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed33)
);

//------------------------------------------------------------------------------
// Instance IOBUF_33 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_33(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed33),
	.T  (main_v7ddrphy_dq_t33),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay33),

	// InOuts.
	.IO (ddram_dq[33])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_78 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_78 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip340[0]),
	.D2     (main_v7ddrphy_bitslip340[1]),
	.D3     (main_v7ddrphy_bitslip340[2]),
	.D4     (main_v7ddrphy_bitslip340[3]),
	.D5     (main_v7ddrphy_bitslip340[4]),
	.D6     (main_v7ddrphy_bitslip340[5]),
	.D7     (main_v7ddrphy_bitslip340[6]),
	.D8     (main_v7ddrphy_bitslip340[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay34),
	.TQ     (main_v7ddrphy_dq_t34)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_34 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_34 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed34),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip341[7]),
	.Q2      (main_v7ddrphy_bitslip341[6]),
	.Q3      (main_v7ddrphy_bitslip341[5]),
	.Q4      (main_v7ddrphy_bitslip341[4]),
	.Q5      (main_v7ddrphy_bitslip341[3]),
	.Q6      (main_v7ddrphy_bitslip341[2]),
	.Q7      (main_v7ddrphy_bitslip341[1]),
	.Q8      (main_v7ddrphy_bitslip341[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_78 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_78 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed34),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay34)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_34 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_34 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay34),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed34)
);

//------------------------------------------------------------------------------
// Instance IOBUF_34 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_34(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed34),
	.T  (main_v7ddrphy_dq_t34),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay34),

	// InOuts.
	.IO (ddram_dq[34])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_79 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_79 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip350[0]),
	.D2     (main_v7ddrphy_bitslip350[1]),
	.D3     (main_v7ddrphy_bitslip350[2]),
	.D4     (main_v7ddrphy_bitslip350[3]),
	.D5     (main_v7ddrphy_bitslip350[4]),
	.D6     (main_v7ddrphy_bitslip350[5]),
	.D7     (main_v7ddrphy_bitslip350[6]),
	.D8     (main_v7ddrphy_bitslip350[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay35),
	.TQ     (main_v7ddrphy_dq_t35)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_35 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_35 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed35),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip351[7]),
	.Q2      (main_v7ddrphy_bitslip351[6]),
	.Q3      (main_v7ddrphy_bitslip351[5]),
	.Q4      (main_v7ddrphy_bitslip351[4]),
	.Q5      (main_v7ddrphy_bitslip351[3]),
	.Q6      (main_v7ddrphy_bitslip351[2]),
	.Q7      (main_v7ddrphy_bitslip351[1]),
	.Q8      (main_v7ddrphy_bitslip351[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_79 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_79 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed35),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay35)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_35 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_35 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay35),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed35)
);

//------------------------------------------------------------------------------
// Instance IOBUF_35 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_35(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed35),
	.T  (main_v7ddrphy_dq_t35),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay35),

	// InOuts.
	.IO (ddram_dq[35])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_80 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_80 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip360[0]),
	.D2     (main_v7ddrphy_bitslip360[1]),
	.D3     (main_v7ddrphy_bitslip360[2]),
	.D4     (main_v7ddrphy_bitslip360[3]),
	.D5     (main_v7ddrphy_bitslip360[4]),
	.D6     (main_v7ddrphy_bitslip360[5]),
	.D7     (main_v7ddrphy_bitslip360[6]),
	.D8     (main_v7ddrphy_bitslip360[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay36),
	.TQ     (main_v7ddrphy_dq_t36)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_36 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_36 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed36),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip361[7]),
	.Q2      (main_v7ddrphy_bitslip361[6]),
	.Q3      (main_v7ddrphy_bitslip361[5]),
	.Q4      (main_v7ddrphy_bitslip361[4]),
	.Q5      (main_v7ddrphy_bitslip361[3]),
	.Q6      (main_v7ddrphy_bitslip361[2]),
	.Q7      (main_v7ddrphy_bitslip361[1]),
	.Q8      (main_v7ddrphy_bitslip361[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_80 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_80 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed36),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay36)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_36 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_36 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay36),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed36)
);

//------------------------------------------------------------------------------
// Instance IOBUF_36 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_36(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed36),
	.T  (main_v7ddrphy_dq_t36),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay36),

	// InOuts.
	.IO (ddram_dq[36])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_81 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_81 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip370[0]),
	.D2     (main_v7ddrphy_bitslip370[1]),
	.D3     (main_v7ddrphy_bitslip370[2]),
	.D4     (main_v7ddrphy_bitslip370[3]),
	.D5     (main_v7ddrphy_bitslip370[4]),
	.D6     (main_v7ddrphy_bitslip370[5]),
	.D7     (main_v7ddrphy_bitslip370[6]),
	.D8     (main_v7ddrphy_bitslip370[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay37),
	.TQ     (main_v7ddrphy_dq_t37)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_37 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_37 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed37),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip371[7]),
	.Q2      (main_v7ddrphy_bitslip371[6]),
	.Q3      (main_v7ddrphy_bitslip371[5]),
	.Q4      (main_v7ddrphy_bitslip371[4]),
	.Q5      (main_v7ddrphy_bitslip371[3]),
	.Q6      (main_v7ddrphy_bitslip371[2]),
	.Q7      (main_v7ddrphy_bitslip371[1]),
	.Q8      (main_v7ddrphy_bitslip371[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_81 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_81 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed37),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay37)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_37 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_37 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay37),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed37)
);

//------------------------------------------------------------------------------
// Instance IOBUF_37 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_37(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed37),
	.T  (main_v7ddrphy_dq_t37),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay37),

	// InOuts.
	.IO (ddram_dq[37])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_82 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_82 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip380[0]),
	.D2     (main_v7ddrphy_bitslip380[1]),
	.D3     (main_v7ddrphy_bitslip380[2]),
	.D4     (main_v7ddrphy_bitslip380[3]),
	.D5     (main_v7ddrphy_bitslip380[4]),
	.D6     (main_v7ddrphy_bitslip380[5]),
	.D7     (main_v7ddrphy_bitslip380[6]),
	.D8     (main_v7ddrphy_bitslip380[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay38),
	.TQ     (main_v7ddrphy_dq_t38)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_38 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_38 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed38),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip381[7]),
	.Q2      (main_v7ddrphy_bitslip381[6]),
	.Q3      (main_v7ddrphy_bitslip381[5]),
	.Q4      (main_v7ddrphy_bitslip381[4]),
	.Q5      (main_v7ddrphy_bitslip381[3]),
	.Q6      (main_v7ddrphy_bitslip381[2]),
	.Q7      (main_v7ddrphy_bitslip381[1]),
	.Q8      (main_v7ddrphy_bitslip381[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_82 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_82 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed38),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay38)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_38 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_38 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay38),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed38)
);

//------------------------------------------------------------------------------
// Instance IOBUF_38 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_38(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed38),
	.T  (main_v7ddrphy_dq_t38),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay38),

	// InOuts.
	.IO (ddram_dq[38])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_83 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_83 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip390[0]),
	.D2     (main_v7ddrphy_bitslip390[1]),
	.D3     (main_v7ddrphy_bitslip390[2]),
	.D4     (main_v7ddrphy_bitslip390[3]),
	.D5     (main_v7ddrphy_bitslip390[4]),
	.D6     (main_v7ddrphy_bitslip390[5]),
	.D7     (main_v7ddrphy_bitslip390[6]),
	.D8     (main_v7ddrphy_bitslip390[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay39),
	.TQ     (main_v7ddrphy_dq_t39)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_39 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_39 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed39),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip391[7]),
	.Q2      (main_v7ddrphy_bitslip391[6]),
	.Q3      (main_v7ddrphy_bitslip391[5]),
	.Q4      (main_v7ddrphy_bitslip391[4]),
	.Q5      (main_v7ddrphy_bitslip391[3]),
	.Q6      (main_v7ddrphy_bitslip391[2]),
	.Q7      (main_v7ddrphy_bitslip391[1]),
	.Q8      (main_v7ddrphy_bitslip391[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_83 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_83 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed39),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay39)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_39 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_39 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay39),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[4] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed39)
);

//------------------------------------------------------------------------------
// Instance IOBUF_39 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_39(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed39),
	.T  (main_v7ddrphy_dq_t39),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay39),

	// InOuts.
	.IO (ddram_dq[39])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_84 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_84 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip400[0]),
	.D2     (main_v7ddrphy_bitslip400[1]),
	.D3     (main_v7ddrphy_bitslip400[2]),
	.D4     (main_v7ddrphy_bitslip400[3]),
	.D5     (main_v7ddrphy_bitslip400[4]),
	.D6     (main_v7ddrphy_bitslip400[5]),
	.D7     (main_v7ddrphy_bitslip400[6]),
	.D8     (main_v7ddrphy_bitslip400[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay40),
	.TQ     (main_v7ddrphy_dq_t40)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_40 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_40 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed40),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip401[7]),
	.Q2      (main_v7ddrphy_bitslip401[6]),
	.Q3      (main_v7ddrphy_bitslip401[5]),
	.Q4      (main_v7ddrphy_bitslip401[4]),
	.Q5      (main_v7ddrphy_bitslip401[3]),
	.Q6      (main_v7ddrphy_bitslip401[2]),
	.Q7      (main_v7ddrphy_bitslip401[1]),
	.Q8      (main_v7ddrphy_bitslip401[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_84 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_84 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed40),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay40)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_40 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_40 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay40),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed40)
);

//------------------------------------------------------------------------------
// Instance IOBUF_40 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_40(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed40),
	.T  (main_v7ddrphy_dq_t40),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay40),

	// InOuts.
	.IO (ddram_dq[40])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_85 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_85 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip410[0]),
	.D2     (main_v7ddrphy_bitslip410[1]),
	.D3     (main_v7ddrphy_bitslip410[2]),
	.D4     (main_v7ddrphy_bitslip410[3]),
	.D5     (main_v7ddrphy_bitslip410[4]),
	.D6     (main_v7ddrphy_bitslip410[5]),
	.D7     (main_v7ddrphy_bitslip410[6]),
	.D8     (main_v7ddrphy_bitslip410[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay41),
	.TQ     (main_v7ddrphy_dq_t41)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_41 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_41 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed41),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip411[7]),
	.Q2      (main_v7ddrphy_bitslip411[6]),
	.Q3      (main_v7ddrphy_bitslip411[5]),
	.Q4      (main_v7ddrphy_bitslip411[4]),
	.Q5      (main_v7ddrphy_bitslip411[3]),
	.Q6      (main_v7ddrphy_bitslip411[2]),
	.Q7      (main_v7ddrphy_bitslip411[1]),
	.Q8      (main_v7ddrphy_bitslip411[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_85 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_85 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed41),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay41)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_41 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_41 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay41),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed41)
);

//------------------------------------------------------------------------------
// Instance IOBUF_41 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_41(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed41),
	.T  (main_v7ddrphy_dq_t41),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay41),

	// InOuts.
	.IO (ddram_dq[41])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_86 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_86 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip420[0]),
	.D2     (main_v7ddrphy_bitslip420[1]),
	.D3     (main_v7ddrphy_bitslip420[2]),
	.D4     (main_v7ddrphy_bitslip420[3]),
	.D5     (main_v7ddrphy_bitslip420[4]),
	.D6     (main_v7ddrphy_bitslip420[5]),
	.D7     (main_v7ddrphy_bitslip420[6]),
	.D8     (main_v7ddrphy_bitslip420[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay42),
	.TQ     (main_v7ddrphy_dq_t42)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_42 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_42 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed42),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip421[7]),
	.Q2      (main_v7ddrphy_bitslip421[6]),
	.Q3      (main_v7ddrphy_bitslip421[5]),
	.Q4      (main_v7ddrphy_bitslip421[4]),
	.Q5      (main_v7ddrphy_bitslip421[3]),
	.Q6      (main_v7ddrphy_bitslip421[2]),
	.Q7      (main_v7ddrphy_bitslip421[1]),
	.Q8      (main_v7ddrphy_bitslip421[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_86 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_86 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed42),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay42)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_42 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_42 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay42),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed42)
);

//------------------------------------------------------------------------------
// Instance IOBUF_42 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_42(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed42),
	.T  (main_v7ddrphy_dq_t42),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay42),

	// InOuts.
	.IO (ddram_dq[42])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_87 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_87 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip430[0]),
	.D2     (main_v7ddrphy_bitslip430[1]),
	.D3     (main_v7ddrphy_bitslip430[2]),
	.D4     (main_v7ddrphy_bitslip430[3]),
	.D5     (main_v7ddrphy_bitslip430[4]),
	.D6     (main_v7ddrphy_bitslip430[5]),
	.D7     (main_v7ddrphy_bitslip430[6]),
	.D8     (main_v7ddrphy_bitslip430[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay43),
	.TQ     (main_v7ddrphy_dq_t43)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_43 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_43 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed43),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip431[7]),
	.Q2      (main_v7ddrphy_bitslip431[6]),
	.Q3      (main_v7ddrphy_bitslip431[5]),
	.Q4      (main_v7ddrphy_bitslip431[4]),
	.Q5      (main_v7ddrphy_bitslip431[3]),
	.Q6      (main_v7ddrphy_bitslip431[2]),
	.Q7      (main_v7ddrphy_bitslip431[1]),
	.Q8      (main_v7ddrphy_bitslip431[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_87 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_87 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed43),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay43)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_43 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_43 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay43),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed43)
);

//------------------------------------------------------------------------------
// Instance IOBUF_43 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_43(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed43),
	.T  (main_v7ddrphy_dq_t43),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay43),

	// InOuts.
	.IO (ddram_dq[43])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_88 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_88 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip440[0]),
	.D2     (main_v7ddrphy_bitslip440[1]),
	.D3     (main_v7ddrphy_bitslip440[2]),
	.D4     (main_v7ddrphy_bitslip440[3]),
	.D5     (main_v7ddrphy_bitslip440[4]),
	.D6     (main_v7ddrphy_bitslip440[5]),
	.D7     (main_v7ddrphy_bitslip440[6]),
	.D8     (main_v7ddrphy_bitslip440[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay44),
	.TQ     (main_v7ddrphy_dq_t44)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_44 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_44 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed44),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip441[7]),
	.Q2      (main_v7ddrphy_bitslip441[6]),
	.Q3      (main_v7ddrphy_bitslip441[5]),
	.Q4      (main_v7ddrphy_bitslip441[4]),
	.Q5      (main_v7ddrphy_bitslip441[3]),
	.Q6      (main_v7ddrphy_bitslip441[2]),
	.Q7      (main_v7ddrphy_bitslip441[1]),
	.Q8      (main_v7ddrphy_bitslip441[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_88 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_88 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed44),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay44)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_44 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_44 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay44),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed44)
);

//------------------------------------------------------------------------------
// Instance IOBUF_44 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_44(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed44),
	.T  (main_v7ddrphy_dq_t44),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay44),

	// InOuts.
	.IO (ddram_dq[44])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_89 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_89 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip450[0]),
	.D2     (main_v7ddrphy_bitslip450[1]),
	.D3     (main_v7ddrphy_bitslip450[2]),
	.D4     (main_v7ddrphy_bitslip450[3]),
	.D5     (main_v7ddrphy_bitslip450[4]),
	.D6     (main_v7ddrphy_bitslip450[5]),
	.D7     (main_v7ddrphy_bitslip450[6]),
	.D8     (main_v7ddrphy_bitslip450[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay45),
	.TQ     (main_v7ddrphy_dq_t45)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_45 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_45 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed45),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip451[7]),
	.Q2      (main_v7ddrphy_bitslip451[6]),
	.Q3      (main_v7ddrphy_bitslip451[5]),
	.Q4      (main_v7ddrphy_bitslip451[4]),
	.Q5      (main_v7ddrphy_bitslip451[3]),
	.Q6      (main_v7ddrphy_bitslip451[2]),
	.Q7      (main_v7ddrphy_bitslip451[1]),
	.Q8      (main_v7ddrphy_bitslip451[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_89 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_89 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed45),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay45)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_45 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_45 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay45),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed45)
);

//------------------------------------------------------------------------------
// Instance IOBUF_45 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_45(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed45),
	.T  (main_v7ddrphy_dq_t45),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay45),

	// InOuts.
	.IO (ddram_dq[45])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_90 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_90 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip460[0]),
	.D2     (main_v7ddrphy_bitslip460[1]),
	.D3     (main_v7ddrphy_bitslip460[2]),
	.D4     (main_v7ddrphy_bitslip460[3]),
	.D5     (main_v7ddrphy_bitslip460[4]),
	.D6     (main_v7ddrphy_bitslip460[5]),
	.D7     (main_v7ddrphy_bitslip460[6]),
	.D8     (main_v7ddrphy_bitslip460[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay46),
	.TQ     (main_v7ddrphy_dq_t46)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_46 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_46 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed46),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip461[7]),
	.Q2      (main_v7ddrphy_bitslip461[6]),
	.Q3      (main_v7ddrphy_bitslip461[5]),
	.Q4      (main_v7ddrphy_bitslip461[4]),
	.Q5      (main_v7ddrphy_bitslip461[3]),
	.Q6      (main_v7ddrphy_bitslip461[2]),
	.Q7      (main_v7ddrphy_bitslip461[1]),
	.Q8      (main_v7ddrphy_bitslip461[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_90 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_90 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed46),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay46)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_46 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_46 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay46),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed46)
);

//------------------------------------------------------------------------------
// Instance IOBUF_46 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_46(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed46),
	.T  (main_v7ddrphy_dq_t46),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay46),

	// InOuts.
	.IO (ddram_dq[46])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_91 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_91 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip470[0]),
	.D2     (main_v7ddrphy_bitslip470[1]),
	.D3     (main_v7ddrphy_bitslip470[2]),
	.D4     (main_v7ddrphy_bitslip470[3]),
	.D5     (main_v7ddrphy_bitslip470[4]),
	.D6     (main_v7ddrphy_bitslip470[5]),
	.D7     (main_v7ddrphy_bitslip470[6]),
	.D8     (main_v7ddrphy_bitslip470[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay47),
	.TQ     (main_v7ddrphy_dq_t47)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_47 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_47 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed47),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip471[7]),
	.Q2      (main_v7ddrphy_bitslip471[6]),
	.Q3      (main_v7ddrphy_bitslip471[5]),
	.Q4      (main_v7ddrphy_bitslip471[4]),
	.Q5      (main_v7ddrphy_bitslip471[3]),
	.Q6      (main_v7ddrphy_bitslip471[2]),
	.Q7      (main_v7ddrphy_bitslip471[1]),
	.Q8      (main_v7ddrphy_bitslip471[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_91 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_91 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed47),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay47)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_47 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_47 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay47),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[5] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed47)
);

//------------------------------------------------------------------------------
// Instance IOBUF_47 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_47(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed47),
	.T  (main_v7ddrphy_dq_t47),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay47),

	// InOuts.
	.IO (ddram_dq[47])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_92 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_92 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip480[0]),
	.D2     (main_v7ddrphy_bitslip480[1]),
	.D3     (main_v7ddrphy_bitslip480[2]),
	.D4     (main_v7ddrphy_bitslip480[3]),
	.D5     (main_v7ddrphy_bitslip480[4]),
	.D6     (main_v7ddrphy_bitslip480[5]),
	.D7     (main_v7ddrphy_bitslip480[6]),
	.D8     (main_v7ddrphy_bitslip480[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay48),
	.TQ     (main_v7ddrphy_dq_t48)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_48 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_48 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed48),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip481[7]),
	.Q2      (main_v7ddrphy_bitslip481[6]),
	.Q3      (main_v7ddrphy_bitslip481[5]),
	.Q4      (main_v7ddrphy_bitslip481[4]),
	.Q5      (main_v7ddrphy_bitslip481[3]),
	.Q6      (main_v7ddrphy_bitslip481[2]),
	.Q7      (main_v7ddrphy_bitslip481[1]),
	.Q8      (main_v7ddrphy_bitslip481[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_92 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_92 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed48),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay48)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_48 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_48 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay48),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed48)
);

//------------------------------------------------------------------------------
// Instance IOBUF_48 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_48(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed48),
	.T  (main_v7ddrphy_dq_t48),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay48),

	// InOuts.
	.IO (ddram_dq[48])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_93 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_93 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip490[0]),
	.D2     (main_v7ddrphy_bitslip490[1]),
	.D3     (main_v7ddrphy_bitslip490[2]),
	.D4     (main_v7ddrphy_bitslip490[3]),
	.D5     (main_v7ddrphy_bitslip490[4]),
	.D6     (main_v7ddrphy_bitslip490[5]),
	.D7     (main_v7ddrphy_bitslip490[6]),
	.D8     (main_v7ddrphy_bitslip490[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay49),
	.TQ     (main_v7ddrphy_dq_t49)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_49 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_49 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed49),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip491[7]),
	.Q2      (main_v7ddrphy_bitslip491[6]),
	.Q3      (main_v7ddrphy_bitslip491[5]),
	.Q4      (main_v7ddrphy_bitslip491[4]),
	.Q5      (main_v7ddrphy_bitslip491[3]),
	.Q6      (main_v7ddrphy_bitslip491[2]),
	.Q7      (main_v7ddrphy_bitslip491[1]),
	.Q8      (main_v7ddrphy_bitslip491[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_93 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_93 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed49),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay49)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_49 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_49 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay49),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed49)
);

//------------------------------------------------------------------------------
// Instance IOBUF_49 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_49(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed49),
	.T  (main_v7ddrphy_dq_t49),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay49),

	// InOuts.
	.IO (ddram_dq[49])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_94 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_94 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip500[0]),
	.D2     (main_v7ddrphy_bitslip500[1]),
	.D3     (main_v7ddrphy_bitslip500[2]),
	.D4     (main_v7ddrphy_bitslip500[3]),
	.D5     (main_v7ddrphy_bitslip500[4]),
	.D6     (main_v7ddrphy_bitslip500[5]),
	.D7     (main_v7ddrphy_bitslip500[6]),
	.D8     (main_v7ddrphy_bitslip500[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay50),
	.TQ     (main_v7ddrphy_dq_t50)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_50 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_50 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed50),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip501[7]),
	.Q2      (main_v7ddrphy_bitslip501[6]),
	.Q3      (main_v7ddrphy_bitslip501[5]),
	.Q4      (main_v7ddrphy_bitslip501[4]),
	.Q5      (main_v7ddrphy_bitslip501[3]),
	.Q6      (main_v7ddrphy_bitslip501[2]),
	.Q7      (main_v7ddrphy_bitslip501[1]),
	.Q8      (main_v7ddrphy_bitslip501[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_94 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_94 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed50),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay50)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_50 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_50 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay50),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed50)
);

//------------------------------------------------------------------------------
// Instance IOBUF_50 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_50(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed50),
	.T  (main_v7ddrphy_dq_t50),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay50),

	// InOuts.
	.IO (ddram_dq[50])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_95 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_95 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip510[0]),
	.D2     (main_v7ddrphy_bitslip510[1]),
	.D3     (main_v7ddrphy_bitslip510[2]),
	.D4     (main_v7ddrphy_bitslip510[3]),
	.D5     (main_v7ddrphy_bitslip510[4]),
	.D6     (main_v7ddrphy_bitslip510[5]),
	.D7     (main_v7ddrphy_bitslip510[6]),
	.D8     (main_v7ddrphy_bitslip510[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay51),
	.TQ     (main_v7ddrphy_dq_t51)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_51 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_51 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed51),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip511[7]),
	.Q2      (main_v7ddrphy_bitslip511[6]),
	.Q3      (main_v7ddrphy_bitslip511[5]),
	.Q4      (main_v7ddrphy_bitslip511[4]),
	.Q5      (main_v7ddrphy_bitslip511[3]),
	.Q6      (main_v7ddrphy_bitslip511[2]),
	.Q7      (main_v7ddrphy_bitslip511[1]),
	.Q8      (main_v7ddrphy_bitslip511[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_95 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_95 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed51),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay51)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_51 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_51 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay51),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed51)
);

//------------------------------------------------------------------------------
// Instance IOBUF_51 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_51(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed51),
	.T  (main_v7ddrphy_dq_t51),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay51),

	// InOuts.
	.IO (ddram_dq[51])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_96 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_96 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip520[0]),
	.D2     (main_v7ddrphy_bitslip520[1]),
	.D3     (main_v7ddrphy_bitslip520[2]),
	.D4     (main_v7ddrphy_bitslip520[3]),
	.D5     (main_v7ddrphy_bitslip520[4]),
	.D6     (main_v7ddrphy_bitslip520[5]),
	.D7     (main_v7ddrphy_bitslip520[6]),
	.D8     (main_v7ddrphy_bitslip520[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay52),
	.TQ     (main_v7ddrphy_dq_t52)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_52 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_52 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed52),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip521[7]),
	.Q2      (main_v7ddrphy_bitslip521[6]),
	.Q3      (main_v7ddrphy_bitslip521[5]),
	.Q4      (main_v7ddrphy_bitslip521[4]),
	.Q5      (main_v7ddrphy_bitslip521[3]),
	.Q6      (main_v7ddrphy_bitslip521[2]),
	.Q7      (main_v7ddrphy_bitslip521[1]),
	.Q8      (main_v7ddrphy_bitslip521[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_96 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_96 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed52),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay52)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_52 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_52 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay52),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed52)
);

//------------------------------------------------------------------------------
// Instance IOBUF_52 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_52(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed52),
	.T  (main_v7ddrphy_dq_t52),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay52),

	// InOuts.
	.IO (ddram_dq[52])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_97 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_97 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip530[0]),
	.D2     (main_v7ddrphy_bitslip530[1]),
	.D3     (main_v7ddrphy_bitslip530[2]),
	.D4     (main_v7ddrphy_bitslip530[3]),
	.D5     (main_v7ddrphy_bitslip530[4]),
	.D6     (main_v7ddrphy_bitslip530[5]),
	.D7     (main_v7ddrphy_bitslip530[6]),
	.D8     (main_v7ddrphy_bitslip530[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay53),
	.TQ     (main_v7ddrphy_dq_t53)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_53 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_53 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed53),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip531[7]),
	.Q2      (main_v7ddrphy_bitslip531[6]),
	.Q3      (main_v7ddrphy_bitslip531[5]),
	.Q4      (main_v7ddrphy_bitslip531[4]),
	.Q5      (main_v7ddrphy_bitslip531[3]),
	.Q6      (main_v7ddrphy_bitslip531[2]),
	.Q7      (main_v7ddrphy_bitslip531[1]),
	.Q8      (main_v7ddrphy_bitslip531[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_97 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_97 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed53),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay53)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_53 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_53 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay53),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed53)
);

//------------------------------------------------------------------------------
// Instance IOBUF_53 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_53(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed53),
	.T  (main_v7ddrphy_dq_t53),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay53),

	// InOuts.
	.IO (ddram_dq[53])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_98 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_98 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip540[0]),
	.D2     (main_v7ddrphy_bitslip540[1]),
	.D3     (main_v7ddrphy_bitslip540[2]),
	.D4     (main_v7ddrphy_bitslip540[3]),
	.D5     (main_v7ddrphy_bitslip540[4]),
	.D6     (main_v7ddrphy_bitslip540[5]),
	.D7     (main_v7ddrphy_bitslip540[6]),
	.D8     (main_v7ddrphy_bitslip540[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay54),
	.TQ     (main_v7ddrphy_dq_t54)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_54 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_54 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed54),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip541[7]),
	.Q2      (main_v7ddrphy_bitslip541[6]),
	.Q3      (main_v7ddrphy_bitslip541[5]),
	.Q4      (main_v7ddrphy_bitslip541[4]),
	.Q5      (main_v7ddrphy_bitslip541[3]),
	.Q6      (main_v7ddrphy_bitslip541[2]),
	.Q7      (main_v7ddrphy_bitslip541[1]),
	.Q8      (main_v7ddrphy_bitslip541[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_98 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_98 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed54),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay54)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_54 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_54 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay54),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed54)
);

//------------------------------------------------------------------------------
// Instance IOBUF_54 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_54(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed54),
	.T  (main_v7ddrphy_dq_t54),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay54),

	// InOuts.
	.IO (ddram_dq[54])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_99 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_99 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip550[0]),
	.D2     (main_v7ddrphy_bitslip550[1]),
	.D3     (main_v7ddrphy_bitslip550[2]),
	.D4     (main_v7ddrphy_bitslip550[3]),
	.D5     (main_v7ddrphy_bitslip550[4]),
	.D6     (main_v7ddrphy_bitslip550[5]),
	.D7     (main_v7ddrphy_bitslip550[6]),
	.D8     (main_v7ddrphy_bitslip550[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay55),
	.TQ     (main_v7ddrphy_dq_t55)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_55 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_55 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed55),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip551[7]),
	.Q2      (main_v7ddrphy_bitslip551[6]),
	.Q3      (main_v7ddrphy_bitslip551[5]),
	.Q4      (main_v7ddrphy_bitslip551[4]),
	.Q5      (main_v7ddrphy_bitslip551[3]),
	.Q6      (main_v7ddrphy_bitslip551[2]),
	.Q7      (main_v7ddrphy_bitslip551[1]),
	.Q8      (main_v7ddrphy_bitslip551[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_99 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_99 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed55),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay55)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_55 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_55 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay55),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[6] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed55)
);

//------------------------------------------------------------------------------
// Instance IOBUF_55 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_55(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed55),
	.T  (main_v7ddrphy_dq_t55),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay55),

	// InOuts.
	.IO (ddram_dq[55])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_100 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_100 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip560[0]),
	.D2     (main_v7ddrphy_bitslip560[1]),
	.D3     (main_v7ddrphy_bitslip560[2]),
	.D4     (main_v7ddrphy_bitslip560[3]),
	.D5     (main_v7ddrphy_bitslip560[4]),
	.D6     (main_v7ddrphy_bitslip560[5]),
	.D7     (main_v7ddrphy_bitslip560[6]),
	.D8     (main_v7ddrphy_bitslip560[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay56),
	.TQ     (main_v7ddrphy_dq_t56)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_56 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_56 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed56),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip561[7]),
	.Q2      (main_v7ddrphy_bitslip561[6]),
	.Q3      (main_v7ddrphy_bitslip561[5]),
	.Q4      (main_v7ddrphy_bitslip561[4]),
	.Q5      (main_v7ddrphy_bitslip561[3]),
	.Q6      (main_v7ddrphy_bitslip561[2]),
	.Q7      (main_v7ddrphy_bitslip561[1]),
	.Q8      (main_v7ddrphy_bitslip561[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_100 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_100 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed56),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay56)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_56 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_56 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay56),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed56)
);

//------------------------------------------------------------------------------
// Instance IOBUF_56 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_56(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed56),
	.T  (main_v7ddrphy_dq_t56),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay56),

	// InOuts.
	.IO (ddram_dq[56])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_101 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_101 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip570[0]),
	.D2     (main_v7ddrphy_bitslip570[1]),
	.D3     (main_v7ddrphy_bitslip570[2]),
	.D4     (main_v7ddrphy_bitslip570[3]),
	.D5     (main_v7ddrphy_bitslip570[4]),
	.D6     (main_v7ddrphy_bitslip570[5]),
	.D7     (main_v7ddrphy_bitslip570[6]),
	.D8     (main_v7ddrphy_bitslip570[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay57),
	.TQ     (main_v7ddrphy_dq_t57)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_57 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_57 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed57),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip571[7]),
	.Q2      (main_v7ddrphy_bitslip571[6]),
	.Q3      (main_v7ddrphy_bitslip571[5]),
	.Q4      (main_v7ddrphy_bitslip571[4]),
	.Q5      (main_v7ddrphy_bitslip571[3]),
	.Q6      (main_v7ddrphy_bitslip571[2]),
	.Q7      (main_v7ddrphy_bitslip571[1]),
	.Q8      (main_v7ddrphy_bitslip571[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_101 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_101 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed57),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay57)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_57 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_57 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay57),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed57)
);

//------------------------------------------------------------------------------
// Instance IOBUF_57 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_57(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed57),
	.T  (main_v7ddrphy_dq_t57),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay57),

	// InOuts.
	.IO (ddram_dq[57])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_102 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_102 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip580[0]),
	.D2     (main_v7ddrphy_bitslip580[1]),
	.D3     (main_v7ddrphy_bitslip580[2]),
	.D4     (main_v7ddrphy_bitslip580[3]),
	.D5     (main_v7ddrphy_bitslip580[4]),
	.D6     (main_v7ddrphy_bitslip580[5]),
	.D7     (main_v7ddrphy_bitslip580[6]),
	.D8     (main_v7ddrphy_bitslip580[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay58),
	.TQ     (main_v7ddrphy_dq_t58)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_58 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_58 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed58),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip581[7]),
	.Q2      (main_v7ddrphy_bitslip581[6]),
	.Q3      (main_v7ddrphy_bitslip581[5]),
	.Q4      (main_v7ddrphy_bitslip581[4]),
	.Q5      (main_v7ddrphy_bitslip581[3]),
	.Q6      (main_v7ddrphy_bitslip581[2]),
	.Q7      (main_v7ddrphy_bitslip581[1]),
	.Q8      (main_v7ddrphy_bitslip581[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_102 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_102 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed58),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay58)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_58 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_58 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay58),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed58)
);

//------------------------------------------------------------------------------
// Instance IOBUF_58 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_58(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed58),
	.T  (main_v7ddrphy_dq_t58),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay58),

	// InOuts.
	.IO (ddram_dq[58])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_103 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_103 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip590[0]),
	.D2     (main_v7ddrphy_bitslip590[1]),
	.D3     (main_v7ddrphy_bitslip590[2]),
	.D4     (main_v7ddrphy_bitslip590[3]),
	.D5     (main_v7ddrphy_bitslip590[4]),
	.D6     (main_v7ddrphy_bitslip590[5]),
	.D7     (main_v7ddrphy_bitslip590[6]),
	.D8     (main_v7ddrphy_bitslip590[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay59),
	.TQ     (main_v7ddrphy_dq_t59)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_59 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_59 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed59),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip591[7]),
	.Q2      (main_v7ddrphy_bitslip591[6]),
	.Q3      (main_v7ddrphy_bitslip591[5]),
	.Q4      (main_v7ddrphy_bitslip591[4]),
	.Q5      (main_v7ddrphy_bitslip591[3]),
	.Q6      (main_v7ddrphy_bitslip591[2]),
	.Q7      (main_v7ddrphy_bitslip591[1]),
	.Q8      (main_v7ddrphy_bitslip591[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_103 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_103 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed59),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay59)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_59 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_59 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay59),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed59)
);

//------------------------------------------------------------------------------
// Instance IOBUF_59 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_59(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed59),
	.T  (main_v7ddrphy_dq_t59),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay59),

	// InOuts.
	.IO (ddram_dq[59])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_104 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_104 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip600[0]),
	.D2     (main_v7ddrphy_bitslip600[1]),
	.D3     (main_v7ddrphy_bitslip600[2]),
	.D4     (main_v7ddrphy_bitslip600[3]),
	.D5     (main_v7ddrphy_bitslip600[4]),
	.D6     (main_v7ddrphy_bitslip600[5]),
	.D7     (main_v7ddrphy_bitslip600[6]),
	.D8     (main_v7ddrphy_bitslip600[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay60),
	.TQ     (main_v7ddrphy_dq_t60)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_60 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_60 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed60),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip601[7]),
	.Q2      (main_v7ddrphy_bitslip601[6]),
	.Q3      (main_v7ddrphy_bitslip601[5]),
	.Q4      (main_v7ddrphy_bitslip601[4]),
	.Q5      (main_v7ddrphy_bitslip601[3]),
	.Q6      (main_v7ddrphy_bitslip601[2]),
	.Q7      (main_v7ddrphy_bitslip601[1]),
	.Q8      (main_v7ddrphy_bitslip601[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_104 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_104 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed60),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay60)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_60 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_60 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay60),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed60)
);

//------------------------------------------------------------------------------
// Instance IOBUF_60 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_60(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed60),
	.T  (main_v7ddrphy_dq_t60),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay60),

	// InOuts.
	.IO (ddram_dq[60])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_105 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_105 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip610[0]),
	.D2     (main_v7ddrphy_bitslip610[1]),
	.D3     (main_v7ddrphy_bitslip610[2]),
	.D4     (main_v7ddrphy_bitslip610[3]),
	.D5     (main_v7ddrphy_bitslip610[4]),
	.D6     (main_v7ddrphy_bitslip610[5]),
	.D7     (main_v7ddrphy_bitslip610[6]),
	.D8     (main_v7ddrphy_bitslip610[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay61),
	.TQ     (main_v7ddrphy_dq_t61)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_61 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_61 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed61),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip611[7]),
	.Q2      (main_v7ddrphy_bitslip611[6]),
	.Q3      (main_v7ddrphy_bitslip611[5]),
	.Q4      (main_v7ddrphy_bitslip611[4]),
	.Q5      (main_v7ddrphy_bitslip611[3]),
	.Q6      (main_v7ddrphy_bitslip611[2]),
	.Q7      (main_v7ddrphy_bitslip611[1]),
	.Q8      (main_v7ddrphy_bitslip611[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_105 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_105 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed61),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay61)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_61 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_61 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay61),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed61)
);

//------------------------------------------------------------------------------
// Instance IOBUF_61 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_61(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed61),
	.T  (main_v7ddrphy_dq_t61),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay61),

	// InOuts.
	.IO (ddram_dq[61])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_106 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_106 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip620[0]),
	.D2     (main_v7ddrphy_bitslip620[1]),
	.D3     (main_v7ddrphy_bitslip620[2]),
	.D4     (main_v7ddrphy_bitslip620[3]),
	.D5     (main_v7ddrphy_bitslip620[4]),
	.D6     (main_v7ddrphy_bitslip620[5]),
	.D7     (main_v7ddrphy_bitslip620[6]),
	.D8     (main_v7ddrphy_bitslip620[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay62),
	.TQ     (main_v7ddrphy_dq_t62)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_62 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_62 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed62),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip621[7]),
	.Q2      (main_v7ddrphy_bitslip621[6]),
	.Q3      (main_v7ddrphy_bitslip621[5]),
	.Q4      (main_v7ddrphy_bitslip621[4]),
	.Q5      (main_v7ddrphy_bitslip621[3]),
	.Q6      (main_v7ddrphy_bitslip621[2]),
	.Q7      (main_v7ddrphy_bitslip621[1]),
	.Q8      (main_v7ddrphy_bitslip621[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_106 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_106 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed62),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay62)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_62 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_62 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay62),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed62)
);

//------------------------------------------------------------------------------
// Instance IOBUF_62 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_62(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed62),
	.T  (main_v7ddrphy_dq_t62),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay62),

	// InOuts.
	.IO (ddram_dq[62])
);

//------------------------------------------------------------------------------
// Instance OSERDESE2_107 of OSERDESE2 Module.
//------------------------------------------------------------------------------
OSERDESE2 #(
	// Parameters.
	.DATA_RATE_OQ   ("DDR"),
	.DATA_RATE_TQ   ("BUF"),
	.DATA_WIDTH     (4'd8),
	.SERDES_MODE    ("MASTER"),
	.TRISTATE_WIDTH (1'd1)
) OSERDESE2_107 (
	// Inputs.
	.CLK    (sys4x_clk),
	.CLKDIV (sys_clk),
	.D1     (main_v7ddrphy_bitslip630[0]),
	.D2     (main_v7ddrphy_bitslip630[1]),
	.D3     (main_v7ddrphy_bitslip630[2]),
	.D4     (main_v7ddrphy_bitslip630[3]),
	.D5     (main_v7ddrphy_bitslip630[4]),
	.D6     (main_v7ddrphy_bitslip630[5]),
	.D7     (main_v7ddrphy_bitslip630[6]),
	.D8     (main_v7ddrphy_bitslip630[7]),
	.OCE    (1'd1),
	.RST    ((sys_rst | main_v7ddrphy_rst_storage)),
	.T1     ((~main_v7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE    (1'd1),

	// Outputs.
	.OQ     (main_v7ddrphy_dq_o_nodelay63),
	.TQ     (main_v7ddrphy_dq_t63)
);

//------------------------------------------------------------------------------
// Instance ISERDESE2_63 of ISERDESE2 Module.
//------------------------------------------------------------------------------
ISERDESE2 #(
	// Parameters.
	.DATA_RATE      ("DDR"),
	.DATA_WIDTH     (4'd8),
	.INTERFACE_TYPE ("NETWORKING"),
	.IOBDELAY       ("IFD"),
	.NUM_CE         (1'd1),
	.SERDES_MODE    ("MASTER")
) ISERDESE2_63 (
	// Inputs.
	.BITSLIP (1'd0),
	.CE1     (1'd1),
	.CLK     (sys4x_clk),
	.CLKB    ((~sys4x_clk)),
	.CLKDIV  (sys_clk),
	.DDLY    (main_v7ddrphy_dq_i_delayed63),
	.RST     ((sys_rst | main_v7ddrphy_rst_storage)),

	// Outputs.
	.Q1      (main_v7ddrphy_bitslip631[7]),
	.Q2      (main_v7ddrphy_bitslip631[6]),
	.Q3      (main_v7ddrphy_bitslip631[5]),
	.Q4      (main_v7ddrphy_bitslip631[4]),
	.Q5      (main_v7ddrphy_bitslip631[3]),
	.Q6      (main_v7ddrphy_bitslip631[2]),
	.Q7      (main_v7ddrphy_bitslip631[1]),
	.Q8      (main_v7ddrphy_bitslip631[0])
);

//------------------------------------------------------------------------------
// Instance ODELAYE2_107 of ODELAYE2 Module.
//------------------------------------------------------------------------------
ODELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("ODATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.ODELAY_TYPE           ("VARIABLE"),
	.ODELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) ODELAYE2_107 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_inc_re)),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_wdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_o_delayed63),
	.ODATAIN  (main_v7ddrphy_dq_o_nodelay63)
);

//------------------------------------------------------------------------------
// Instance IDELAYE2_63 of IDELAYE2 Module.
//------------------------------------------------------------------------------
IDELAYE2 #(
	// Parameters.
	.CINVCTRL_SEL          ("FALSE"),
	.DELAY_SRC             ("IDATAIN"),
	.HIGH_PERFORMANCE_MODE ("TRUE"),
	.IDELAY_TYPE           ("VARIABLE"),
	.IDELAY_VALUE          (1'd0),
	.PIPE_SEL              ("FALSE"),
	.REFCLK_FREQUENCY      (200.0),
	.SIGNAL_PATTERN        ("DATA")
) IDELAYE2_63 (
	// Inputs.
	.C        (sys_clk),
	.CE       ((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_inc_re)),
	.IDATAIN  (main_v7ddrphy_dq_i_nodelay63),
	.INC      (1'd1),
	.LD       (((main_v7ddrphy_dly_sel_storage[7] & main_v7ddrphy_rdly_dq_rst_re) | main_v7ddrphy_rst_storage)),
	.LDPIPEEN (1'd0),

	// Outputs.
	.DATAOUT  (main_v7ddrphy_dq_i_delayed63)
);

//------------------------------------------------------------------------------
// Instance IOBUF_63 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_63(
	// Inputs.
	.I  (main_v7ddrphy_dq_o_delayed63),
	.T  (main_v7ddrphy_dq_t63),

	// Outputs.
	.O  (main_v7ddrphy_dq_i_nodelay63),

	// InOuts.
	.IO (ddram_dq[63])
);

//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_2[0:7];
reg [25:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine0_wrport_we)
		storage_2[main_sdram_bankmachine0_wrport_adr] <= main_sdram_bankmachine0_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine0_wrport_dat_r = storage_2_dat0;
assign main_sdram_bankmachine0_rdport_dat_r = storage_2[main_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_3[0:7];
reg [25:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine1_wrport_we)
		storage_3[main_sdram_bankmachine1_wrport_adr] <= main_sdram_bankmachine1_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine1_wrport_dat_r = storage_3_dat0;
assign main_sdram_bankmachine1_rdport_dat_r = storage_3[main_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_4[0:7];
reg [25:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine2_wrport_we)
		storage_4[main_sdram_bankmachine2_wrport_adr] <= main_sdram_bankmachine2_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine2_wrport_dat_r = storage_4_dat0;
assign main_sdram_bankmachine2_rdport_dat_r = storage_4[main_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_5[0:7];
reg [25:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine3_wrport_we)
		storage_5[main_sdram_bankmachine3_wrport_adr] <= main_sdram_bankmachine3_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine3_wrport_dat_r = storage_5_dat0;
assign main_sdram_bankmachine3_rdport_dat_r = storage_5[main_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_6: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_6[0:7];
reg [25:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine4_wrport_we)
		storage_6[main_sdram_bankmachine4_wrport_adr] <= main_sdram_bankmachine4_wrport_dat_w;
	storage_6_dat0 <= storage_6[main_sdram_bankmachine4_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine4_wrport_dat_r = storage_6_dat0;
assign main_sdram_bankmachine4_rdport_dat_r = storage_6[main_sdram_bankmachine4_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_7: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_7[0:7];
reg [25:0] storage_7_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine5_wrport_we)
		storage_7[main_sdram_bankmachine5_wrport_adr] <= main_sdram_bankmachine5_wrport_dat_w;
	storage_7_dat0 <= storage_7[main_sdram_bankmachine5_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine5_wrport_dat_r = storage_7_dat0;
assign main_sdram_bankmachine5_rdport_dat_r = storage_7[main_sdram_bankmachine5_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_8: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_8[0:7];
reg [25:0] storage_8_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine6_wrport_we)
		storage_8[main_sdram_bankmachine6_wrport_adr] <= main_sdram_bankmachine6_wrport_dat_w;
	storage_8_dat0 <= storage_8[main_sdram_bankmachine6_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine6_wrport_dat_r = storage_8_dat0;
assign main_sdram_bankmachine6_rdport_dat_r = storage_8[main_sdram_bankmachine6_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_9: 8-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_9[0:7];
reg [25:0] storage_9_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine7_wrport_we)
		storage_9[main_sdram_bankmachine7_wrport_adr] <= main_sdram_bankmachine7_wrport_dat_w;
	storage_9_dat0 <= storage_9[main_sdram_bankmachine7_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine7_wrport_dat_r = storage_9_dat0;
assign main_sdram_bankmachine7_rdport_dat_r = storage_9[main_sdram_bankmachine7_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_10: 16-words x 584-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 584 
// Port 1 | Read: Sync  | Write: ---- | 
reg [583:0] storage_10[0:15];
reg [583:0] storage_10_dat0;
reg [583:0] storage_10_dat1;
always @(posedge sys_clk) begin
	if (main_write_w_buffer_wrport_we)
		storage_10[main_write_w_buffer_wrport_adr] <= main_write_w_buffer_wrport_dat_w;
	storage_10_dat0 <= storage_10[main_write_w_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_write_w_buffer_rdport_re)
		storage_10_dat1 <= storage_10[main_write_w_buffer_rdport_adr];
end
assign main_write_w_buffer_wrport_dat_r = storage_10_dat0;
assign main_write_w_buffer_rdport_dat_r = storage_10_dat1;


//------------------------------------------------------------------------------
// Memory storage_11: 16-words x 6-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 6 
// Port 1 | Read: Async | Write: ---- | 
reg [5:0] storage_11[0:15];
reg [5:0] storage_11_dat0;
always @(posedge sys_clk) begin
	if (main_write_id_buffer_wrport_we)
		storage_11[main_write_id_buffer_wrport_adr] <= main_write_id_buffer_wrport_dat_w;
	storage_11_dat0 <= storage_11[main_write_id_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_write_id_buffer_wrport_dat_r = storage_11_dat0;
assign main_write_id_buffer_rdport_dat_r = storage_11[main_write_id_buffer_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_12: 16-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 8 
// Port 1 | Read: Async | Write: ---- | 
reg [7:0] storage_12[0:15];
reg [7:0] storage_12_dat0;
always @(posedge sys_clk) begin
	if (main_write_resp_buffer_wrport_we)
		storage_12[main_write_resp_buffer_wrport_adr] <= main_write_resp_buffer_wrport_dat_w;
	storage_12_dat0 <= storage_12[main_write_resp_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_write_resp_buffer_wrport_dat_r = storage_12_dat0;
assign main_write_resp_buffer_rdport_dat_r = storage_12[main_write_resp_buffer_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_13: 16-words x 522-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 522 
// Port 1 | Read: Sync  | Write: ---- | 
reg [521:0] storage_13[0:15];
reg [521:0] storage_13_dat0;
reg [521:0] storage_13_dat1;
always @(posedge sys_clk) begin
	if (main_read_r_buffer_wrport_we)
		storage_13[main_read_r_buffer_wrport_adr] <= main_read_r_buffer_wrport_dat_w;
	storage_13_dat0 <= storage_13[main_read_r_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_read_r_buffer_rdport_re)
		storage_13_dat1 <= storage_13[main_read_r_buffer_rdport_adr];
end
assign main_read_r_buffer_wrport_dat_r = storage_13_dat0;
assign main_read_r_buffer_rdport_dat_r = storage_13_dat1;


//------------------------------------------------------------------------------
// Memory storage_14: 16-words x 6-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 6 
// Port 1 | Read: Async | Write: ---- | 
reg [5:0] storage_14[0:15];
reg [5:0] storage_14_dat0;
always @(posedge sys_clk) begin
	if (main_read_id_buffer_wrport_we)
		storage_14[main_read_id_buffer_wrport_adr] <= main_read_id_buffer_wrport_dat_w;
	storage_14_dat0 <= storage_14[main_read_id_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_read_id_buffer_wrport_dat_r = storage_14_dat0;
assign main_read_id_buffer_rdport_dat_r = storage_14[main_read_id_buffer_rdport_adr];


//------------------------------------------------------------------------------
// Memory mem_6b5b: 64-words x 5-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [4:0] mem_6b5b[0:63];
initial begin
	$readmemh("digilent_netfpga_sume_mem_6b5b.init", mem_6b5b);
end
reg [5:0] mem_6b5b_adr0;
always @(posedge eth_rx_clk) begin
	if (main_v7_1000basex_pcs_pcsrx_re)
		mem_6b5b_adr0 <= main_v7_1000basex_pcs_pcsrx_adr;
end
assign main_v7_1000basex_pcs_pcsrx_dat_r = mem_6b5b[mem_6b5b_adr0];


//------------------------------------------------------------------------------
// Instance GTHE2_CHANNEL of GTHE2_CHANNEL Module.
//------------------------------------------------------------------------------
GTHE2_CHANNEL #(
	// Parameters.
	.ALIGN_COMMA_DOUBLE           ("FALSE"),
	.ALIGN_COMMA_ENABLE           (10'd1023),
	.ALIGN_COMMA_WORD             (2'd2),
	.ALIGN_MCOMMA_DET             ("TRUE"),
	.ALIGN_MCOMMA_VALUE           (10'd643),
	.ALIGN_PCOMMA_DET             ("TRUE"),
	.ALIGN_PCOMMA_VALUE           (9'd380),
	.CBCC_DATA_SOURCE_SEL         ("DECODED"),
	.CHAN_BOND_KEEP_ALIGN         ("FALSE"),
	.CHAN_BOND_MAX_SKEW           (1'd1),
	.CHAN_BOND_SEQ_1_1            (1'd0),
	.CHAN_BOND_SEQ_1_2            (1'd0),
	.CHAN_BOND_SEQ_1_3            (1'd0),
	.CHAN_BOND_SEQ_1_4            (1'd0),
	.CHAN_BOND_SEQ_1_ENABLE       (4'd15),
	.CHAN_BOND_SEQ_2_1            (1'd0),
	.CHAN_BOND_SEQ_2_2            (1'd0),
	.CHAN_BOND_SEQ_2_3            (1'd0),
	.CHAN_BOND_SEQ_2_4            (1'd0),
	.CHAN_BOND_SEQ_2_ENABLE       (4'd15),
	.CHAN_BOND_SEQ_2_USE          ("FALSE"),
	.CHAN_BOND_SEQ_LEN            (1'd1),
	.CLK_CORRECT_USE              ("FALSE"),
	.CLK_COR_KEEP_IDLE            ("FALSE"),
	.CLK_COR_MAX_LAT              (4'd9),
	.CLK_COR_MIN_LAT              (3'd7),
	.CLK_COR_PRECEDENCE           ("TRUE"),
	.CLK_COR_REPEAT_WAIT          (1'd0),
	.CLK_COR_SEQ_1_1              (9'd256),
	.CLK_COR_SEQ_1_2              (1'd0),
	.CLK_COR_SEQ_1_3              (1'd0),
	.CLK_COR_SEQ_1_4              (1'd0),
	.CLK_COR_SEQ_1_ENABLE         (4'd15),
	.CLK_COR_SEQ_2_1              (9'd256),
	.CLK_COR_SEQ_2_2              (1'd0),
	.CLK_COR_SEQ_2_3              (1'd0),
	.CLK_COR_SEQ_2_4              (1'd0),
	.CLK_COR_SEQ_2_ENABLE         (4'd15),
	.CLK_COR_SEQ_2_USE            ("FALSE"),
	.CLK_COR_SEQ_LEN              (1'd1),
	.CPLL_CFG                     (24'd12322780),
	.CPLL_FBDIV                   (3'd5),
	.CPLL_FBDIV_45                (3'd5),
	.CPLL_INIT_CFG                (5'd30),
	.CPLL_LOCK_CFG                (9'd488),
	.CPLL_REFCLK_DIV              (1'd1),
	.DEC_MCOMMA_DETECT            ("TRUE"),
	.DEC_PCOMMA_DETECT            ("TRUE"),
	.DEC_VALID_COMMA_ONLY         ("TRUE"),
	.DMONITOR_CFG                 (12'd2560),
	.ES_CONTROL                   (1'd0),
	.ES_ERRDET_EN                 ("FALSE"),
	.ES_EYE_SCAN_EN               ("TRUE"),
	.ES_HORZ_OFFSET               (1'd0),
	.ES_PMA_CFG                   (1'd0),
	.ES_PRESCALE                  (1'd0),
	.ES_QUALIFIER                 (1'd0),
	.ES_QUAL_MASK                 (1'd0),
	.ES_SDATA_MASK                (1'd0),
	.ES_VERT_OFFSET               (1'd0),
	.FTS_DESKEW_SEQ_ENABLE        (4'd15),
	.FTS_LANE_DESKEW_CFG          (4'd15),
	.FTS_LANE_DESKEW_EN           ("FALSE"),
	.GEARBOX_MODE                 (1'd0),
	.OUTREFCLK_SEL_INV            (2'd3),
	.PCS_PCIE_EN                  ("FALSE"),
	.PCS_RSVD_ATTR                (1'd0),
	.PD_TRANS_TIME_FROM_P2        (6'd60),
	.PD_TRANS_TIME_NONE_P2        (6'd60),
	.PD_TRANS_TIME_TO_P2          (7'd100),
	.PMA_RSV                      (21'd1994880),
	.PMA_RSV2                     (14'd8272),
	.PMA_RSV3                     (1'd0),
	.PMA_RSV4                     (1'd0),
	.RXBUFRESET_TIME              (1'd1),
	.RXBUF_ADDR_MODE              ("FAST"),
	.RXBUF_EIDLE_HI_CNT           (4'd8),
	.RXBUF_EIDLE_LO_CNT           (1'd0),
	.RXBUF_EN                     ("TRUE"),
	.RXBUF_RESET_ON_CB_CHANGE     ("TRUE"),
	.RXBUF_RESET_ON_COMMAALIGN    ("FALSE"),
	.RXBUF_RESET_ON_EIDLE         ("FALSE"),
	.RXBUF_RESET_ON_RATE_CHANGE   ("TRUE"),
	.RXBUF_THRESH_OVFLW           (6'd61),
	.RXBUF_THRESH_OVRD            ("FALSE"),
	.RXBUF_THRESH_UNDFLW          (3'd4),
	.RXCDRFREQRESET_TIME          (1'd1),
	.RXCDRPHRESET_TIME            (1'd1),
	.RXCDR_CFG                    (66'd55340271799521771552),
	.RXCDR_FR_RESET_ON_EIDLE      (1'd0),
	.RXCDR_HOLD_DURING_EIDLE      (1'd0),
	.RXCDR_LOCK_CFG               (5'd21),
	.RXCDR_PH_RESET_ON_EIDLE      (1'd0),
	.RXDFELPMRESET_TIME           (4'd15),
	.RXDLY_CFG                    (5'd31),
	.RXDLY_LCFG                   (6'd48),
	.RXDLY_TAP_CFG                (1'd0),
	.RXGEARBOX_EN                 ("FALSE"),
	.RXISCANRESET_TIME            (1'd1),
	.RXLPM_HF_CFG                 (8'd240),
	.RXLPM_LF_CFG                 (8'd240),
	.RXOOB_CFG                    (3'd6),
	.RXOUT_DIV                    (4'd8),
	.RXPCSRESET_TIME              (1'd1),
	.RXPHDLY_CFG                  (20'd540704),
	.RXPH_CFG                     (1'd0),
	.RXPH_MONITOR_SEL             (1'd0),
	.RXPMARESET_TIME              (2'd3),
	.RXPRBS_ERR_LOOPBACK          (1'd0),
	.RXSLIDE_AUTO_WAIT            (3'd7),
	.RXSLIDE_MODE                 ("OFF"),
	.RX_BIAS_CFG                  (3'd4),
	.RX_BUFFER_CFG                (1'd0),
	.RX_CLK25_DIV                 (3'd5),
	.RX_CLKMUX_PD                 (1'd1),
	.RX_CM_SEL                    (2'd3),
	.RX_CM_TRIM                   (2'd2),
	.RX_DATA_WIDTH                (5'd20),
	.RX_DDI_SEL                   (1'd0),
	.RX_DEBUG_CFG                 (1'd0),
	.RX_DEFER_RESET_BUF_EN        ("TRUE"),
	.RX_DFE_GAIN_CFG              (18'd135146),
	.RX_DFE_H2_CFG                (1'd0),
	.RX_DFE_H3_CFG                (7'd64),
	.RX_DFE_H4_CFG                (8'd240),
	.RX_DFE_H5_CFG                (8'd224),
	.RX_DFE_KL_CFG                (8'd254),
	.RX_DFE_LPM_CFG               (12'd2388),
	.RX_DFE_LPM_HOLD_DURING_EIDLE (1'd0),
	.RX_DFE_UT_CFG                (17'd73216),
	.RX_DFE_VP_CFG                (14'd16131),
	.RX_DISPERR_SEQ_MATCH         ("TRUE"),
	.RX_INT_DATAWIDTH             (1'd0),
	.RX_OS_CFG                    (8'd128),
	.RX_SIG_VALID_DLY             (4'd10),
	.RX_XCLK_SEL                  ("RXREC"),
	.SAS_MAX_COM                  (7'd64),
	.SAS_MIN_COM                  (6'd36),
	.SATA_BURST_SEQ_LEN           (3'd5),
	.SATA_BURST_VAL               (3'd4),
	.SATA_CPLL_CFG                ("VCO_3000MHZ"),
	.SATA_EIDLE_VAL               (3'd4),
	.SATA_MAX_BURST               (4'd8),
	.SATA_MAX_INIT                (5'd21),
	.SATA_MAX_WAKE                (3'd7),
	.SATA_MIN_BURST               (3'd4),
	.SATA_MIN_INIT                (4'd12),
	.SATA_MIN_WAKE                (3'd4),
	.SHOW_REALIGN_COMMA           ("TRUE"),
	.SIM_CPLLREFCLK_SEL           ("FALSE"),
	.SIM_RECEIVER_DETECT_PASS     ("TRUE"),
	.SIM_RESET_SPEEDUP            ("FALSE"),
	.SIM_TX_EIDLE_DRIVE_LEVEL     ("X"),
	.SIM_VERSION                  ("2.0"),
	.TERM_RCAL_CFG                (5'd16),
	.TERM_RCAL_OVRD               (1'd0),
	.TRANS_TIME_RATE              (4'd14),
	.TST_RSV                      (1'd0),
	.TXBUF_EN                     ("TRUE"),
	.TXBUF_RESET_ON_RATE_CHANGE   ("TRUE"),
	.TXDLY_CFG                    (5'd31),
	.TXDLY_LCFG                   (6'd48),
	.TXDLY_TAP_CFG                (1'd0),
	.TXGEARBOX_EN                 ("FALSE"),
	.TXOUT_DIV                    (4'd8),
	.TXPCSRESET_TIME              (1'd1),
	.TXPHDLY_CFG                  (20'd540704),
	.TXPH_CFG                     (11'd1920),
	.TXPH_MONITOR_SEL             (1'd0),
	.TXPMARESET_TIME              (1'd1),
	.TX_CLK25_DIV                 (3'd5),
	.TX_CLKMUX_PD                 (1'd1),
	.TX_DATA_WIDTH                (5'd20),
	.TX_DEEMPH0                   (1'd0),
	.TX_DEEMPH1                   (1'd0),
	.TX_DRIVE_MODE                ("DIRECT"),
	.TX_EIDLE_ASSERT_DELAY        (3'd6),
	.TX_EIDLE_DEASSERT_DELAY      (3'd4),
	.TX_INT_DATAWIDTH             (1'd0),
	.TX_LOOPBACK_DRIVE_HIZ        ("FALSE"),
	.TX_MAINCURSOR_SEL            (1'd0),
	.TX_MARGIN_FULL_0             (7'd78),
	.TX_MARGIN_FULL_1             (7'd73),
	.TX_MARGIN_FULL_2             (7'd69),
	.TX_MARGIN_FULL_3             (7'd66),
	.TX_MARGIN_FULL_4             (7'd64),
	.TX_MARGIN_LOW_0              (7'd70),
	.TX_MARGIN_LOW_1              (7'd68),
	.TX_MARGIN_LOW_2              (7'd66),
	.TX_MARGIN_LOW_3              (7'd64),
	.TX_MARGIN_LOW_4              (7'd64),
	.TX_QPI_STATUS_EN             (1'd0),
	.TX_RXDETECT_CFG              (13'd6194),
	.TX_RXDETECT_REF              (3'd4),
	.TX_XCLK_SEL                  ("TXOUT"),
	.UCODEER_CLR                  (1'd0)
) GTHE2_CHANNEL (
	// Inputs.
	.CFGRESET         (1'd0),
	.CPLLLOCKDETCLK   (sys_clk),
	.CPLLLOCKEN       (1'd1),
	.CPLLPD           (1'd0),
	.CPLLREFCLKSEL    (1'd1),
	.CPLLRESET        (main_v7_1000basex_pll_reset),
	.DRPADDR          (1'd0),
	.DRPCLK           (1'd0),
	.DRPDI            (1'd0),
	.DRPEN            (1'd0),
	.DRPWE            (1'd0),
	.EYESCANMODE      (1'd0),
	.EYESCANRESET     (1'd0),
	.EYESCANTRIGGER   (1'd0),
	.GTGREFCLK        (1'd0),
	.GTHRXN           (sfp_rxn),
	.GTHRXP           (sfp_rxp),
	.GTNORTHREFCLK0   (1'd0),
	.GTNORTHREFCLK1   (1'd0),
	.GTREFCLK0        (sfp_clk),
	.GTREFCLK1        (1'd0),
	.GTRESETSEL       (1'd0),
	.GTRSVD           (1'd0),
	.GTRXRESET        (main_v7_1000basex_rx_reset),
	.GTSOUTHREFCLK0   (1'd0),
	.GTSOUTHREFCLK1   (1'd0),
	.GTTXRESET        (main_v7_1000basex_tx_reset),
	.LOOPBACK         (1'd0),
	.PCSRSVDIN        (1'd0),
	.PCSRSVDIN2       (1'd0),
	.PMARSVDIN        (1'd0),
	.QPLLCLK          (1'd0),
	.QPLLREFCLK       (1'd1),
	.RESETOVRD        (1'd0),
	.RX8B10BEN        (1'd0),
	.RXBUFRESET       (1'd0),
	.RXCDRFREQRESET   (1'd0),
	.RXCDRHOLD        (1'd0),
	.RXCDROVRDEN      (1'd0),
	.RXCDRRESET       (1'd0),
	.RXCDRRESETRSV    (1'd0),
	.RXCHBONDEN       (1'd0),
	.RXCHBONDI        (1'd0),
	.RXCHBONDLEVEL    (1'd0),
	.RXCHBONDMASTER   (1'd0),
	.RXCHBONDSLAVE    (1'd0),
	.RXCOMMADETEN     (1'd1),
	.RXDDIEN          (1'd0),
	.RXDFEAGCHOLD     (1'd0),
	.RXDFEAGCOVRDEN   (1'd0),
	.RXDFECM1EN       (1'd0),
	.RXDFELFHOLD      (1'd0),
	.RXDFELFOVRDEN    (1'd1),
	.RXDFELPMRESET    (1'd0),
	.RXDFETAP2HOLD    (1'd0),
	.RXDFETAP2OVRDEN  (1'd0),
	.RXDFETAP3HOLD    (1'd0),
	.RXDFETAP3OVRDEN  (1'd0),
	.RXDFETAP4HOLD    (1'd0),
	.RXDFETAP4OVRDEN  (1'd0),
	.RXDFETAP5HOLD    (1'd0),
	.RXDFETAP5OVRDEN  (1'd0),
	.RXDFEUTHOLD      (1'd0),
	.RXDFEUTOVRDEN    (1'd0),
	.RXDFEVPHOLD      (1'd0),
	.RXDFEVPOVRDEN    (1'd0),
	.RXDFEVSEN        (1'd0),
	.RXDFEXYDEN       (1'd1),
	.RXDISPERR        ({main_v7_1000basex_rx_data0[19], main_v7_1000basex_rx_data0[9]}),
	.RXDLYBYPASS      (1'd1),
	.RXDLYEN          (1'd0),
	.RXDLYOVRDEN      (1'd0),
	.RXDLYSRESET      (1'd0),
	.RXELECIDLEMODE   (2'd3),
	.RXGEARBOXSLIP    (1'd0),
	.RXLPMEN          (1'd0),
	.RXLPMHFHOLD      (1'd0),
	.RXLPMHFOVRDEN    (1'd0),
	.RXLPMLFHOLD      (1'd0),
	.RXLPMLFKLOVRDEN  (1'd0),
	.RXMCOMMAALIGNEN  (1'd1),
	.RXMONITORSEL     (1'd0),
	.RXOOBRESET       (1'd0),
	.RXOSHOLD         (1'd0),
	.RXOSOVRDEN       (1'd0),
	.RXOUTCLKSEL      (2'd2),
	.RXPCOMMAALIGNEN  (1'd1),
	.RXPCSRESET       (1'd0),
	.RXPD             (1'd0),
	.RXPHALIGN        (1'd0),
	.RXPHALIGNEN      (1'd0),
	.RXPHDLYPD        (1'd0),
	.RXPHDLYRESET     (1'd0),
	.RXPHOVRDEN       (1'd0),
	.RXPMARESET       (1'd0),
	.RXPOLARITY       (1'd0),
	.RXPRBSCNTRESET   (1'd0),
	.RXPRBSSEL        (1'd0),
	.RXQPIEN          (1'd0),
	.RXRATE           (1'd0),
	.RXSLIDE          (1'd0),
	.RXSYSCLKSEL      (1'd0),
	.RXUSERRDY        (main_v7_1000basex_rx_mmcm_locked0),
	.RXUSRCLK         (eth_rx_half_clk),
	.RXUSRCLK2        (eth_rx_half_clk),
	.SETERRSTATUS     (1'd0),
	.TX8B10BBYPASS    (1'd0),
	.TX8B10BEN        (1'd0),
	.TXBUFDIFFCTRL    (3'd4),
	.TXCHARDISPMODE   ({main_v7_1000basex_tx_data0[19], main_v7_1000basex_tx_data0[9]}),
	.TXCHARDISPVAL    ({main_v7_1000basex_tx_data0[18], main_v7_1000basex_tx_data0[8]}),
	.TXCHARISK        (1'd0),
	.TXCOMINIT        (1'd0),
	.TXCOMSAS         (1'd0),
	.TXCOMWAKE        (1'd0),
	.TXDATA           ({main_v7_1000basex_tx_data0[17:10], main_v7_1000basex_tx_data0[7:0]}),
	.TXDEEMPH         (1'd0),
	.TXDETECTRX       (1'd0),
	.TXDIFFCTRL       (4'd8),
	.TXDIFFPD         (1'd0),
	.TXDLYBYPASS      (1'd1),
	.TXDLYEN          (1'd0),
	.TXDLYHOLD        (1'd0),
	.TXDLYOVRDEN      (1'd0),
	.TXDLYSRESET      (1'd0),
	.TXDLYUPDOWN      (1'd0),
	.TXELECIDLE       (1'd0),
	.TXHEADER         (1'd0),
	.TXINHIBIT        (1'd0),
	.TXMAINCURSOR     (1'd0),
	.TXMARGIN         (1'd0),
	.TXOUTCLKSEL      (2'd2),
	.TXPCSRESET       (1'd0),
	.TXPD             (1'd0),
	.TXPDELECIDLEMODE (1'd0),
	.TXPHALIGN        (1'd0),
	.TXPHALIGNEN      (1'd0),
	.TXPHDLYPD        (1'd0),
	.TXPHDLYRESET     (1'd0),
	.TXPHDLYTSTCLK    (1'd0),
	.TXPHINIT         (1'd0),
	.TXPHOVRDEN       (1'd0),
	.TXPISOPD         (1'd0),
	.TXPMARESET       (1'd0),
	.TXPOLARITY       (1'd0),
	.TXPOSTCURSOR     (1'd0),
	.TXPOSTCURSORINV  (1'd0),
	.TXPRBSFORCEERR   (1'd0),
	.TXPRBSSEL        (1'd0),
	.TXPRECURSOR      (1'd0),
	.TXPRECURSORINV   (1'd0),
	.TXQPIBIASEN      (1'd0),
	.TXQPISTRONGPDOWN (1'd0),
	.TXQPIWEAKPUP     (1'd0),
	.TXRATE           (1'd0),
	.TXSEQUENCE       (1'd0),
	.TXSTARTSEQ       (1'd0),
	.TXSWING          (1'd0),
	.TXSYSCLKSEL      (1'd0),
	.TXUSERRDY        (main_v7_1000basex_tx_mmcm_locked0),
	.TXUSRCLK         (eth_tx_half_clk),
	.TXUSRCLK2        (eth_tx_half_clk),

	// Outputs.
	.CPLLFBCLKLOST    (main_v7_1000basex0),
	.CPLLLOCK         (main_v7_1000basex_pll_lock),
	.CPLLREFCLKLOST   (main_v7_1000basex1),
	.DMONITOROUT      (main_v7_1000basex5),
	.DRPDO            (main_v7_1000basex2),
	.DRPRDY           (main_v7_1000basex3),
	.EYESCANDATAERROR (main_v7_1000basex8),
	.GTHTXN           (sfp_txn),
	.GTHTXP           (sfp_txp),
	.GTREFCLKMONITOR  (main_v7_1000basex4),
	.PCSRSVDOUT       (main_v7_1000basex41),
	.PHYSTATUS        (main_v7_1000basex6),
	.RXBUFSTATUS      (main_v7_1000basex13),
	.RXBYTEISALIGNED  (main_v7_1000basex19),
	.RXBYTEREALIGN    (main_v7_1000basex20),
	.RXCDRLOCK        (main_v7_1000basex9),
	.RXCHANBONDSEQ    (main_v7_1000basex22),
	.RXCHANISALIGNED  (main_v7_1000basex24),
	.RXCHANREALIGN    (main_v7_1000basex25),
	.RXCHARISCOMMA    (main_v7_1000basex38),
	.RXCHARISK        ({main_v7_1000basex_rx_data0[18], main_v7_1000basex_rx_data0[8]}),
	.RXCHBONDO        (main_v7_1000basex23),
	.RXCLKCORCNT      (main_v7_1000basex10),
	.RXCOMINITDET     (main_v7_1000basex36),
	.RXCOMMADET       (main_v7_1000basex21),
	.RXCOMSASDET      (main_v7_1000basex34),
	.RXCOMWAKEDET     (main_v7_1000basex35),
	.RXDATA           ({main_v7_1000basex_rx_data0[17:10], main_v7_1000basex_rx_data0[7:0]}),
	.RXDATAVALID      (main_v7_1000basex30),
	.RXDLYSRESETDONE  (main_v7_1000basex14),
	.RXELECIDLE       (main_v7_1000basex37),
	.RXHEADER         (main_v7_1000basex31),
	.RXHEADERVALID    (main_v7_1000basex32),
	.RXMONITOROUT     (main_v7_1000basex26),
	.RXNOTINTABLE     (main_v7_1000basex12),
	.RXOUTCLK         (main_v7_1000basex_rxoutclk),
	.RXOUTCLKFABRIC   (main_v7_1000basex28),
	.RXOUTCLKPCS      (main_v7_1000basex29),
	.RXPHALIGNDONE    (main_v7_1000basex15),
	.RXPHMONITOR      (main_v7_1000basex16),
	.RXPHSLIPMONITOR  (main_v7_1000basex17),
	.RXPRBSERR        (main_v7_1000basex11),
	.RXQPISENN        (main_v7_1000basex39),
	.RXQPISENP        (main_v7_1000basex40),
	.RXRATEDONE       (main_v7_1000basex27),
	.RXRESETDONE      (main_v7_1000basex_rx_reset_done),
	.RXSTARTOFSEQ     (main_v7_1000basex33),
	.RXSTATUS         (main_v7_1000basex18),
	.RXVALID          (main_v7_1000basex7),
	.TXBUFSTATUS      (main_v7_1000basex45),
	.TXCOMFINISH      (main_v7_1000basex50),
	.TXDLYSRESETDONE  (main_v7_1000basex42),
	.TXGEARBOXREADY   (main_v7_1000basex49),
	.TXOUTCLK         (main_v7_1000basex_txoutclk),
	.TXOUTCLKFABRIC   (main_v7_1000basex46),
	.TXOUTCLKPCS      (main_v7_1000basex47),
	.TXPHALIGNDONE    (main_v7_1000basex43),
	.TXPHINITDONE     (main_v7_1000basex44),
	.TXQPISENN        (main_v7_1000basex51),
	.TXQPISENP        (main_v7_1000basex52),
	.TXRATEDONE       (main_v7_1000basex48),
	.TXRESETDONE      (main_v7_1000basex_tx_reset_done)
);

//------------------------------------------------------------------------------
// Instance BUFH of BUFH Module.
//------------------------------------------------------------------------------
BUFH BUFH(
	// Inputs.
	.I (main_v7_1000basex_txoutclk),

	// Outputs.
	.O (main_v7_1000basex_txoutclk_rebuffer)
);

//------------------------------------------------------------------------------
// Instance BUFG_4 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_4(
	// Inputs.
	.I (main_v7_1000basex_rxoutclk),

	// Outputs.
	.O (main_v7_1000basex_rxoutclk_rebuffer)
);

//------------------------------------------------------------------------------
// Instance BUFH_1 of BUFH Module.
//------------------------------------------------------------------------------
BUFH BUFH_1(
	// Inputs.
	.I (main_v7_1000basex_s7mmcm0_clkout0),

	// Outputs.
	.O (main_v7_1000basex_s7mmcm0_clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFH_2 of BUFH Module.
//------------------------------------------------------------------------------
BUFH BUFH_2(
	// Inputs.
	.I (main_v7_1000basex_s7mmcm0_clkout1),

	// Outputs.
	.O (main_v7_1000basex_s7mmcm0_clkout_buf1)
);

//------------------------------------------------------------------------------
// Instance BUFG_5 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_5(
	// Inputs.
	.I (main_v7_1000basex_s7mmcm1_clkout0),

	// Outputs.
	.O (main_v7_1000basex_s7mmcm1_clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFG_6 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_6(
	// Inputs.
	.I (main_v7_1000basex_s7mmcm1_clkout1),

	// Outputs.
	.O (main_v7_1000basex_s7mmcm1_clkout_buf1)
);

//------------------------------------------------------------------------------
// Memory storage_15: 32-words x 42-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 42 
// Port 1 | Read: Sync  | Write: ---- | 
reg [41:0] storage_15[0:31];
reg [41:0] storage_15_dat0;
reg [41:0] storage_15_dat1;
always @(posedge sys_clk) begin
	if (main_ethmac_tx_cdc_cdc_wrport_we)
		storage_15[main_ethmac_tx_cdc_cdc_wrport_adr] <= main_ethmac_tx_cdc_cdc_wrport_dat_w;
	storage_15_dat0 <= storage_15[main_ethmac_tx_cdc_cdc_wrport_adr];
end
always @(posedge eth_tx_clk) begin
	storage_15_dat1 <= storage_15[main_ethmac_tx_cdc_cdc_rdport_adr];
end
assign main_ethmac_tx_cdc_cdc_wrport_dat_r = storage_15_dat0;
assign main_ethmac_tx_cdc_cdc_rdport_dat_r = storage_15_dat1;


//------------------------------------------------------------------------------
// Memory storage_16: 5-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Async | Write: ---- | 
reg [11:0] storage_16[0:4];
reg [11:0] storage_16_dat0;
always @(posedge eth_rx_clk) begin
	if (main_ethmac_liteethmaccrc32checker_syncfifo_wrport_we)
		storage_16[main_ethmac_liteethmaccrc32checker_syncfifo_wrport_adr] <= main_ethmac_liteethmaccrc32checker_syncfifo_wrport_dat_w;
	storage_16_dat0 <= storage_16[main_ethmac_liteethmaccrc32checker_syncfifo_wrport_adr];
end
always @(posedge eth_rx_clk) begin
end
assign main_ethmac_liteethmaccrc32checker_syncfifo_wrport_dat_r = storage_16_dat0;
assign main_ethmac_liteethmaccrc32checker_syncfifo_rdport_dat_r = storage_16[main_ethmac_liteethmaccrc32checker_syncfifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_17: 32-words x 42-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 42 
// Port 1 | Read: Sync  | Write: ---- | 
reg [41:0] storage_17[0:31];
reg [41:0] storage_17_dat0;
reg [41:0] storage_17_dat1;
always @(posedge eth_rx_clk) begin
	if (main_ethmac_rx_cdc_cdc_wrport_we)
		storage_17[main_ethmac_rx_cdc_cdc_wrport_adr] <= main_ethmac_rx_cdc_cdc_wrport_dat_w;
	storage_17_dat0 <= storage_17[main_ethmac_rx_cdc_cdc_wrport_adr];
end
always @(posedge sys_clk) begin
	storage_17_dat1 <= storage_17[main_ethmac_rx_cdc_cdc_rdport_adr];
end
assign main_ethmac_rx_cdc_cdc_wrport_dat_r = storage_17_dat0;
assign main_ethmac_rx_cdc_cdc_rdport_dat_r = storage_17_dat1;


//------------------------------------------------------------------------------
// Memory storage_18: 2-words x 14-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 14 
// Port 1 | Read: Async | Write: ---- | 
reg [13:0] storage_18[0:1];
reg [13:0] storage_18_dat0;
always @(posedge sys_clk) begin
	if (main_ethmac_sram61_we)
		storage_18[main_ethmac_sram59_adr] <= main_ethmac_sram62_dat_w;
	storage_18_dat0 <= storage_18[main_ethmac_sram59_adr];
end
always @(posedge sys_clk) begin
end
assign main_ethmac_sram60_dat_r = storage_18_dat0;
assign main_ethmac_sram65_dat_r = storage_18[main_ethmac_sram64_adr];


//------------------------------------------------------------------------------
// Memory mem_1: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
// Port 1 | Read: Sync  | Write: ---- | 
reg [31:0] mem_1[0:382];
reg [8:0] mem_1_adr0;
reg [31:0] mem_1_dat1;
always @(posedge sys_clk) begin
	if (main_ethmac_sram77_we)
		mem_1[main_ethmac_sram75_adr] <= main_ethmac_sram78_dat_w;
	mem_1_adr0 <= main_ethmac_sram75_adr;
end
always @(posedge sys_clk) begin
	mem_1_dat1 <= mem_1[main_ethmac_sram0_adr];
end
assign main_ethmac_sram76_dat_r = mem_1[mem_1_adr0];
assign main_ethmac_sram0_dat_r = mem_1_dat1;


//------------------------------------------------------------------------------
// Memory mem_2: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
// Port 1 | Read: Sync  | Write: ---- | 
reg [31:0] mem_2[0:382];
reg [8:0] mem_2_adr0;
reg [31:0] mem_2_dat1;
always @(posedge sys_clk) begin
	if (main_ethmac_sram81_we)
		mem_2[main_ethmac_sram79_adr] <= main_ethmac_sram82_dat_w;
	mem_2_adr0 <= main_ethmac_sram79_adr;
end
always @(posedge sys_clk) begin
	mem_2_dat1 <= mem_2[main_ethmac_sram1_adr];
end
assign main_ethmac_sram80_dat_r = mem_2[mem_2_adr0];
assign main_ethmac_sram1_dat_r = mem_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_19: 2-words x 14-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 14 
// Port 1 | Read: Async | Write: ---- | 
reg [13:0] storage_19[0:1];
reg [13:0] storage_19_dat0;
always @(posedge sys_clk) begin
	if (main_ethmac_sram147_we)
		storage_19[main_ethmac_sram145_adr] <= main_ethmac_sram148_dat_w;
	storage_19_dat0 <= storage_19[main_ethmac_sram145_adr];
end
always @(posedge sys_clk) begin
end
assign main_ethmac_sram146_dat_r = storage_19_dat0;
assign main_ethmac_sram151_dat_r = storage_19[main_ethmac_sram150_adr];


//------------------------------------------------------------------------------
// Memory mem_3: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_3[0:382];
reg [31:0] mem_3_dat0;
reg [8:0] mem_3_adr1;
always @(posedge sys_clk) begin
	if (main_ethmac_sram163_re)
		mem_3_dat0 <= mem_3[main_ethmac_sram161_adr];
end
always @(posedge sys_clk) begin
	if (main_ethmac_sram2_we[0])
		mem_3[main_ethmac_sram2_adr][7:0] <= main_ethmac_sram2_dat_w[7:0];
	if (main_ethmac_sram2_we[1])
		mem_3[main_ethmac_sram2_adr][15:8] <= main_ethmac_sram2_dat_w[15:8];
	if (main_ethmac_sram2_we[2])
		mem_3[main_ethmac_sram2_adr][23:16] <= main_ethmac_sram2_dat_w[23:16];
	if (main_ethmac_sram2_we[3])
		mem_3[main_ethmac_sram2_adr][31:24] <= main_ethmac_sram2_dat_w[31:24];
	mem_3_adr1 <= main_ethmac_sram2_adr;
end
assign main_ethmac_sram162_dat_r = mem_3_dat0;
assign main_ethmac_sram2_dat_r = mem_3[mem_3_adr1];


//------------------------------------------------------------------------------
// Memory mem_4: 383-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_4[0:382];
reg [31:0] mem_4_dat0;
reg [8:0] mem_4_adr1;
always @(posedge sys_clk) begin
	if (main_ethmac_sram166_re)
		mem_4_dat0 <= mem_4[main_ethmac_sram164_adr];
end
always @(posedge sys_clk) begin
	if (main_ethmac_sram3_we[0])
		mem_4[main_ethmac_sram3_adr][7:0] <= main_ethmac_sram3_dat_w[7:0];
	if (main_ethmac_sram3_we[1])
		mem_4[main_ethmac_sram3_adr][15:8] <= main_ethmac_sram3_dat_w[15:8];
	if (main_ethmac_sram3_we[2])
		mem_4[main_ethmac_sram3_adr][23:16] <= main_ethmac_sram3_dat_w[23:16];
	if (main_ethmac_sram3_we[3])
		mem_4[main_ethmac_sram3_adr][31:24] <= main_ethmac_sram3_dat_w[31:24];
	mem_4_adr1 <= main_ethmac_sram3_adr;
end
assign main_ethmac_sram165_dat_r = mem_4_dat0;
assign main_ethmac_sram3_dat_r = mem_4[mem_4_adr1];


//------------------------------------------------------------------------------
// Instance FDCE of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (main_crg_reset),

	// Outputs.
	.Q   (builder_basesoc_reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_1 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_1(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_reset0),

	// Outputs.
	.Q   (builder_basesoc_reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_2 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_2(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_reset1),

	// Outputs.
	.Q   (builder_basesoc_reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_3 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_3(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_reset2),

	// Outputs.
	.Q   (builder_basesoc_reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_4 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_4(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_reset3),

	// Outputs.
	.Q   (builder_basesoc_reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_5 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_5(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_reset4),

	// Outputs.
	.Q   (builder_basesoc_reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_6 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_6(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_reset5),

	// Outputs.
	.Q   (builder_basesoc_reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_7 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_7(
	// Inputs.
	.C   (main_crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_reset6),

	// Outputs.
	.Q   (builder_basesoc_reset7)
);

//------------------------------------------------------------------------------
// Instance PLLE2_ADV of PLLE2_ADV Module.
//------------------------------------------------------------------------------
PLLE2_ADV #(
	// Parameters.
	.CLKFBOUT_MULT  (3'd5),
	.CLKIN1_PERIOD  (5.0),
	.CLKOUT0_DIVIDE (4'd8),
	.CLKOUT0_PHASE  (1'd0),
	.CLKOUT1_DIVIDE (2'd2),
	.CLKOUT1_PHASE  (1'd0),
	.CLKOUT2_DIVIDE (3'd5),
	.CLKOUT2_PHASE  (1'd0),
	.CLKOUT3_DIVIDE (3'd5),
	.CLKOUT3_PHASE  (1'd0),
	.DIVCLK_DIVIDE  (1'd1),
	.REF_JITTER1    (0.01),
	.STARTUP_WAIT   ("FALSE")
) PLLE2_ADV (
	// Inputs.
	.CLKFBIN  (builder_basesoc_pll_fb),
	.CLKIN1   (main_crg_clkin),
	.PWRDWN   (main_crg_power_down),
	.RST      (builder_basesoc_reset7),

	// Outputs.
	.CLKFBOUT (builder_basesoc_pll_fb),
	.CLKOUT0  (main_crg_clkout0),
	.CLKOUT1  (main_crg_clkout1),
	.CLKOUT2  (main_crg_clkout2),
	.CLKOUT3  (main_crg_clkout3),
	.LOCKED   (main_crg_locked)
);

//------------------------------------------------------------------------------
// Instance ExampleRocketSystem of ExampleRocketSystem Module.
//------------------------------------------------------------------------------
ExampleRocketSystem ExampleRocketSystem(
	// Inputs.
	.clock                                (sys_clk),
	.debug_clock                          (1'd0),
	.debug_clockeddmi_dmiClock            (1'd0),
	.debug_clockeddmi_dmiReset            ((sys_rst | main_rocket_reset)),
	.debug_clockeddmi_dmi_req_bits_addr   (1'd0),
	.debug_clockeddmi_dmi_req_bits_data   (1'd0),
	.debug_clockeddmi_dmi_req_bits_op     (1'd0),
	.debug_clockeddmi_dmi_req_valid       (1'd0),
	.debug_clockeddmi_dmi_resp_ready      (1'd0),
	.debug_dmactiveAck                    (1'd0),
	.debug_reset                          ((sys_rst | main_rocket_reset)),
	.interrupts                           (main_rocket_interrupt),
	.l2_frontend_bus_axi4_0_ar_bits_addr  (main_rocket_l2fb_axi_ar_payload_addr),
	.l2_frontend_bus_axi4_0_ar_bits_burst (main_rocket_l2fb_axi_ar_payload_burst),
	.l2_frontend_bus_axi4_0_ar_bits_cache (main_rocket_l2fb_axi_ar_payload_cache),
	.l2_frontend_bus_axi4_0_ar_bits_id    (main_rocket_l2fb_axi_ar_param_id),
	.l2_frontend_bus_axi4_0_ar_bits_len   (main_rocket_l2fb_axi_ar_payload_len),
	.l2_frontend_bus_axi4_0_ar_bits_lock  (main_rocket_l2fb_axi_ar_payload_lock),
	.l2_frontend_bus_axi4_0_ar_bits_prot  (main_rocket_l2fb_axi_ar_payload_prot),
	.l2_frontend_bus_axi4_0_ar_bits_qos   (main_rocket_l2fb_axi_ar_payload_qos),
	.l2_frontend_bus_axi4_0_ar_bits_size  (main_rocket_l2fb_axi_ar_payload_size),
	.l2_frontend_bus_axi4_0_ar_valid      (main_rocket_l2fb_axi_ar_valid),
	.l2_frontend_bus_axi4_0_aw_bits_addr  (main_rocket_l2fb_axi_aw_payload_addr),
	.l2_frontend_bus_axi4_0_aw_bits_burst (main_rocket_l2fb_axi_aw_payload_burst),
	.l2_frontend_bus_axi4_0_aw_bits_cache (main_rocket_l2fb_axi_aw_payload_cache),
	.l2_frontend_bus_axi4_0_aw_bits_id    (main_rocket_l2fb_axi_aw_param_id),
	.l2_frontend_bus_axi4_0_aw_bits_len   (main_rocket_l2fb_axi_aw_payload_len),
	.l2_frontend_bus_axi4_0_aw_bits_lock  (main_rocket_l2fb_axi_aw_payload_lock),
	.l2_frontend_bus_axi4_0_aw_bits_prot  (main_rocket_l2fb_axi_aw_payload_prot),
	.l2_frontend_bus_axi4_0_aw_bits_qos   (main_rocket_l2fb_axi_aw_payload_qos),
	.l2_frontend_bus_axi4_0_aw_bits_size  (main_rocket_l2fb_axi_aw_payload_size),
	.l2_frontend_bus_axi4_0_aw_valid      (main_rocket_l2fb_axi_aw_valid),
	.l2_frontend_bus_axi4_0_b_ready       (main_rocket_l2fb_axi_b_ready),
	.l2_frontend_bus_axi4_0_r_ready       (main_rocket_l2fb_axi_r_ready),
	.l2_frontend_bus_axi4_0_w_bits_data   (main_rocket_l2fb_axi_w_payload_data),
	.l2_frontend_bus_axi4_0_w_bits_last   (main_rocket_l2fb_axi_w_last),
	.l2_frontend_bus_axi4_0_w_bits_strb   (main_rocket_l2fb_axi_w_payload_strb),
	.l2_frontend_bus_axi4_0_w_valid       (main_rocket_l2fb_axi_w_valid),
	.mem_axi4_0_ar_ready                  (main_rocket_mem_axi_ar_ready),
	.mem_axi4_0_aw_ready                  (main_rocket_mem_axi_aw_ready),
	.mem_axi4_0_b_bits_id                 (main_rocket_mem_axi_b_param_id),
	.mem_axi4_0_b_bits_resp               (main_rocket_mem_axi_b_payload_resp),
	.mem_axi4_0_b_valid                   (main_rocket_mem_axi_b_valid),
	.mem_axi4_0_r_bits_data               (main_rocket_mem_axi_r_payload_data),
	.mem_axi4_0_r_bits_id                 (main_rocket_mem_axi_r_param_id),
	.mem_axi4_0_r_bits_last               (main_rocket_mem_axi_r_last),
	.mem_axi4_0_r_bits_resp               (main_rocket_mem_axi_r_payload_resp),
	.mem_axi4_0_r_valid                   (main_rocket_mem_axi_r_valid),
	.mem_axi4_0_w_ready                   (main_rocket_mem_axi_w_ready),
	.mmio_axi4_0_ar_ready                 (main_rocket_mmio_axi_ar_ready),
	.mmio_axi4_0_aw_ready                 (main_rocket_mmio_axi_aw_ready),
	.mmio_axi4_0_b_bits_id                (main_rocket_mmio_axi_b_param_id),
	.mmio_axi4_0_b_bits_resp              (main_rocket_mmio_axi_b_payload_resp),
	.mmio_axi4_0_b_valid                  (main_rocket_mmio_axi_b_valid),
	.mmio_axi4_0_r_bits_data              (main_rocket_mmio_axi_r_payload_data),
	.mmio_axi4_0_r_bits_id                (main_rocket_mmio_axi_r_param_id),
	.mmio_axi4_0_r_bits_last              (main_rocket_mmio_axi_r_last),
	.mmio_axi4_0_r_bits_resp              (main_rocket_mmio_axi_r_payload_resp),
	.mmio_axi4_0_r_valid                  (main_rocket_mmio_axi_r_valid),
	.mmio_axi4_0_w_ready                  (main_rocket_mmio_axi_w_ready),
	.reset                                ((sys_rst | main_rocket_reset)),
	.resetctrl_hartIsInReset_0            (main_rocket6),

	// Outputs.
	.debug_clockeddmi_dmi_req_ready       (main_rocket0),
	.debug_clockeddmi_dmi_resp_bits_data  (main_rocket2),
	.debug_clockeddmi_dmi_resp_bits_resp  (main_rocket3),
	.debug_clockeddmi_dmi_resp_valid      (main_rocket1),
	.debug_dmactive                       (main_rocket5),
	.debug_ndreset                        (main_rocket4),
	.l2_frontend_bus_axi4_0_ar_ready      (main_rocket_l2fb_axi_ar_ready),
	.l2_frontend_bus_axi4_0_aw_ready      (main_rocket_l2fb_axi_aw_ready),
	.l2_frontend_bus_axi4_0_b_bits_id     (main_rocket_l2fb_axi_b_param_id),
	.l2_frontend_bus_axi4_0_b_bits_resp   (main_rocket_l2fb_axi_b_payload_resp),
	.l2_frontend_bus_axi4_0_b_valid       (main_rocket_l2fb_axi_b_valid),
	.l2_frontend_bus_axi4_0_r_bits_data   (main_rocket_l2fb_axi_r_payload_data),
	.l2_frontend_bus_axi4_0_r_bits_id     (main_rocket_l2fb_axi_r_param_id),
	.l2_frontend_bus_axi4_0_r_bits_last   (main_rocket_l2fb_axi_r_last),
	.l2_frontend_bus_axi4_0_r_bits_resp   (main_rocket_l2fb_axi_r_payload_resp),
	.l2_frontend_bus_axi4_0_r_valid       (main_rocket_l2fb_axi_r_valid),
	.l2_frontend_bus_axi4_0_w_ready       (main_rocket_l2fb_axi_w_ready),
	.mem_axi4_0_ar_bits_addr              (main_rocket_mem_axi_ar_payload_addr),
	.mem_axi4_0_ar_bits_burst             (main_rocket_mem_axi_ar_payload_burst),
	.mem_axi4_0_ar_bits_cache             (main_rocket_mem_axi_ar_payload_cache),
	.mem_axi4_0_ar_bits_id                (main_rocket_mem_axi_ar_param_id),
	.mem_axi4_0_ar_bits_len               (main_rocket_mem_axi_ar_payload_len),
	.mem_axi4_0_ar_bits_lock              (main_rocket_mem_axi_ar_payload_lock),
	.mem_axi4_0_ar_bits_prot              (main_rocket_mem_axi_ar_payload_prot),
	.mem_axi4_0_ar_bits_qos               (main_rocket_mem_axi_ar_payload_qos),
	.mem_axi4_0_ar_bits_size              (main_rocket_mem_axi_ar_payload_size),
	.mem_axi4_0_ar_valid                  (main_rocket_mem_axi_ar_valid),
	.mem_axi4_0_aw_bits_addr              (main_rocket_mem_axi_aw_payload_addr),
	.mem_axi4_0_aw_bits_burst             (main_rocket_mem_axi_aw_payload_burst),
	.mem_axi4_0_aw_bits_cache             (main_rocket_mem_axi_aw_payload_cache),
	.mem_axi4_0_aw_bits_id                (main_rocket_mem_axi_aw_param_id),
	.mem_axi4_0_aw_bits_len               (main_rocket_mem_axi_aw_payload_len),
	.mem_axi4_0_aw_bits_lock              (main_rocket_mem_axi_aw_payload_lock),
	.mem_axi4_0_aw_bits_prot              (main_rocket_mem_axi_aw_payload_prot),
	.mem_axi4_0_aw_bits_qos               (main_rocket_mem_axi_aw_payload_qos),
	.mem_axi4_0_aw_bits_size              (main_rocket_mem_axi_aw_payload_size),
	.mem_axi4_0_aw_valid                  (main_rocket_mem_axi_aw_valid),
	.mem_axi4_0_b_ready                   (main_rocket_mem_axi_b_ready),
	.mem_axi4_0_r_ready                   (main_rocket_mem_axi_r_ready),
	.mem_axi4_0_w_bits_data               (main_rocket_mem_axi_w_payload_data),
	.mem_axi4_0_w_bits_last               (main_rocket_mem_axi_w_last),
	.mem_axi4_0_w_bits_strb               (main_rocket_mem_axi_w_payload_strb),
	.mem_axi4_0_w_valid                   (main_rocket_mem_axi_w_valid),
	.mmio_axi4_0_ar_bits_addr             (main_rocket_mmio_axi_ar_payload_addr),
	.mmio_axi4_0_ar_bits_burst            (main_rocket_mmio_axi_ar_payload_burst),
	.mmio_axi4_0_ar_bits_cache            (main_rocket_mmio_axi_ar_payload_cache),
	.mmio_axi4_0_ar_bits_id               (main_rocket_mmio_axi_ar_param_id),
	.mmio_axi4_0_ar_bits_len              (main_rocket_mmio_axi_ar_payload_len),
	.mmio_axi4_0_ar_bits_lock             (main_rocket_mmio_axi_ar_payload_lock),
	.mmio_axi4_0_ar_bits_prot             (main_rocket_mmio_axi_ar_payload_prot),
	.mmio_axi4_0_ar_bits_qos              (main_rocket_mmio_axi_ar_payload_qos),
	.mmio_axi4_0_ar_bits_size             (main_rocket_mmio_axi_ar_payload_size),
	.mmio_axi4_0_ar_valid                 (main_rocket_mmio_axi_ar_valid),
	.mmio_axi4_0_aw_bits_addr             (main_rocket_mmio_axi_aw_payload_addr),
	.mmio_axi4_0_aw_bits_burst            (main_rocket_mmio_axi_aw_payload_burst),
	.mmio_axi4_0_aw_bits_cache            (main_rocket_mmio_axi_aw_payload_cache),
	.mmio_axi4_0_aw_bits_id               (main_rocket_mmio_axi_aw_param_id),
	.mmio_axi4_0_aw_bits_len              (main_rocket_mmio_axi_aw_payload_len),
	.mmio_axi4_0_aw_bits_lock             (main_rocket_mmio_axi_aw_payload_lock),
	.mmio_axi4_0_aw_bits_prot             (main_rocket_mmio_axi_aw_payload_prot),
	.mmio_axi4_0_aw_bits_qos              (main_rocket_mmio_axi_aw_payload_qos),
	.mmio_axi4_0_aw_bits_size             (main_rocket_mmio_axi_aw_payload_size),
	.mmio_axi4_0_aw_valid                 (main_rocket_mmio_axi_aw_valid),
	.mmio_axi4_0_b_ready                  (main_rocket_mmio_axi_b_ready),
	.mmio_axi4_0_r_ready                  (main_rocket_mmio_axi_r_ready),
	.mmio_axi4_0_w_bits_data              (main_rocket_mmio_axi_w_payload_data),
	.mmio_axi4_0_w_bits_last              (main_rocket_mmio_axi_w_last),
	.mmio_axi4_0_w_bits_strb              (main_rocket_mmio_axi_w_payload_strb),
	.mmio_axi4_0_w_valid                  (main_rocket_mmio_axi_w_valid)
);

//------------------------------------------------------------------------------
// Instance FDCE_8 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_8(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (main_v7_1000basex_tx_mmcm_reset1),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_9 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_9(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm0_reset0),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_10 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_10(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm0_reset1),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_11 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_11(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm0_reset2),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_12 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_12(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm0_reset3),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_13 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_13(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm0_reset4),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_14 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_14(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm0_reset5),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_15 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_15(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm0_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm0_reset6),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm0_reset7)
);

//------------------------------------------------------------------------------
// Instance MMCME2_ADV of MMCME2_ADV Module.
//------------------------------------------------------------------------------
MMCME2_ADV #(
	// Parameters.
	.BANDWIDTH        ("OPTIMIZED"),
	.CLKFBOUT_MULT_F  (5'd18),
	.CLKIN1_PERIOD    (16.0),
	.CLKOUT0_DIVIDE_F (5'd18),
	.CLKOUT0_PHASE    (1'd0),
	.CLKOUT1_DIVIDE   (4'd9),
	.CLKOUT1_PHASE    (1'd0),
	.DIVCLK_DIVIDE    (1'd1),
	.REF_JITTER1      (0.01)
) MMCME2_ADV (
	// Inputs.
	.CLKFBIN  (builder_basesoc_s7mmcm0_mmcm_fb),
	.CLKIN1   (main_v7_1000basex_s7mmcm0_clkin),
	.PWRDWN   (main_v7_1000basex_tx_mmcm_power_down),
	.RST      (builder_basesoc_s7mmcm0_reset7),

	// Outputs.
	.CLKFBOUT (builder_basesoc_s7mmcm0_mmcm_fb),
	.CLKOUT0  (main_v7_1000basex_s7mmcm0_clkout0),
	.CLKOUT1  (main_v7_1000basex_s7mmcm0_clkout1),
	.LOCKED   (main_v7_1000basex_tx_mmcm_locked1)
);

//------------------------------------------------------------------------------
// Instance FDCE_16 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_16(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (main_v7_1000basex_rx_mmcm_reset1),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_17 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_17(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm1_reset0),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_18 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_18(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm1_reset1),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_19 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_19(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm1_reset2),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_20 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_20(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm1_reset3),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_21 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_21(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm1_reset4),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_22 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_22(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm1_reset5),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_23 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_23(
	// Inputs.
	.C   (main_v7_1000basex_s7mmcm1_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (builder_basesoc_s7mmcm1_reset6),

	// Outputs.
	.Q   (builder_basesoc_s7mmcm1_reset7)
);

//------------------------------------------------------------------------------
// Instance MMCME2_ADV_1 of MMCME2_ADV Module.
//------------------------------------------------------------------------------
MMCME2_ADV #(
	// Parameters.
	.BANDWIDTH        ("OPTIMIZED"),
	.CLKFBOUT_MULT_F  (5'd18),
	.CLKIN1_PERIOD    (16.0),
	.CLKOUT0_DIVIDE_F (5'd18),
	.CLKOUT0_PHASE    (1'd0),
	.CLKOUT1_DIVIDE   (4'd9),
	.CLKOUT1_PHASE    (1'd0),
	.DIVCLK_DIVIDE    (1'd1),
	.REF_JITTER1      (0.01)
) MMCME2_ADV_1 (
	// Inputs.
	.CLKFBIN  (builder_basesoc_s7mmcm1_mmcm_fb),
	.CLKIN1   (main_v7_1000basex_s7mmcm1_clkin),
	.PWRDWN   (main_v7_1000basex_rx_mmcm_power_down),
	.RST      (builder_basesoc_s7mmcm1_reset7),

	// Outputs.
	.CLKFBOUT (builder_basesoc_s7mmcm1_mmcm_fb),
	.CLKOUT0  (main_v7_1000basex_s7mmcm1_clkout0),
	.CLKOUT1  (main_v7_1000basex_s7mmcm1_clkout1),
	.LOCKED   (main_v7_1000basex_rx_mmcm_locked1)
);

//------------------------------------------------------------------------------
// Instance IBUFDS of IBUFDS Module.
//------------------------------------------------------------------------------
IBUFDS IBUFDS(
	// Inputs.
	.I  (clk200_p),
	.IB (clk200_n),

	// Outputs.
	.O  (main_crg_clkin)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_1 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_1 (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_2 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_2 (
	// Inputs.
	.C   (sys4x_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_3 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_3 (
	// Inputs.
	.C   (sys4x_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (sys4x_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_4 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_4 (
	// Inputs.
	.C   (idelay_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl2),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_5 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_5 (
	// Inputs.
	.C   (idelay_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl2),

	// Outputs.
	.Q   (idelay_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_6 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_6 (
	// Inputs.
	.C   (sfp_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl3),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_7 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_7 (
	// Inputs.
	.C   (sfp_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl3),

	// Outputs.
	.Q   (sfp_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_8 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_8 (
	// Inputs.
	.C   (eth_tx_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl4),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl4_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_9 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_9 (
	// Inputs.
	.C   (eth_tx_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl4_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl4),

	// Outputs.
	.Q   (eth_tx_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_10 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_10 (
	// Inputs.
	.C   (eth_rx_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (builder_xilinxasyncresetsynchronizerimpl5),

	// Outputs.
	.Q   (builder_xilinxasyncresetsynchronizerimpl5_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_11 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_11 (
	// Inputs.
	.C   (eth_rx_clk),
	.CE  (1'd1),
	.D   (builder_xilinxasyncresetsynchronizerimpl5_rst_meta),
	.PRE (builder_xilinxasyncresetsynchronizerimpl5),

	// Outputs.
	.Q   (eth_rx_rst)
);

processor4_wrapper processor4_wrapper(
    .Clk                    (main_crg_clkin),
    .Write_mux              (main_v7_1000basex_register_spdm_register_SPDM_5_storage[6]),
    .Read_mux               (main_v7_1000basex_register_spdm_register_SPDM_5_storage[4]),
    .clk_fifo               (main_v7_1000basex_register_spdm_register_SPDM_5_storage[2]),
    .clk_mux                (main_v7_1000basex_register_spdm_register_SPDM_5_storage[7]),
    .data_mux               (main_v7_1000basex_register_spdm_register_SPDM_5_storage[6]), 
    .fifo_input             (main_v7_1000basex_register_spdm_register_SPDM_storage),
    .fifo_output            (spdm_output),
    .fifo_read_en           (main_v7_1000basex_register_spdm_register_SPDM_5_storage[1]),
    .fifo_write_en          (main_v7_1000basex_register_spdm_register_SPDM_5_storage[0]),
    .gpio_rtl_2_tri_i       (main_v7_1000basex_register_spdm_register_SPDM_3_storage),
    .gpio_rtl_3_tri_o       (spdm_control),
    .reset_rtl_0            (1'd1),
    .spdm_wait              (main_v7_1000basex_register_spdm_register_SPDM_5_storage[3]),
    .spdm_wait_requester    (spdm_wait)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-04-10 21:55:55.
//------------------------------------------------------------------------------
